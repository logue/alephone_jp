# 1 "ActivationSndBtnDownFunc.cpp"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "ActivationSndBtnDownFunc.cpp"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/wsconfig.h" 1
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2
# 67 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSNdef.h" 1
# 24 "C:/PROGRA~1/WIDEST~1/ws/include/WSNdef.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSSdef.h" 1
# 25 "C:/PROGRA~1/WIDEST~1/ws/include/WSSdef.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSSdef.h" 2
# 229 "C:/PROGRA~1/WIDEST~1/ws/include/WSSdef.h"
extern char* _WSStitleString();
extern char* _WSSuserString();
extern char* _WSSuserValue();
extern char* _WSSx();
extern char* _WSSy();
extern char* _WSSwidth();
extern char* _WSSheight();
extern char* _WSSshadowThickness();
extern char* _WSSbackColor();
extern char* _WSSforeColor();
extern char* _WSStopShadowColor();
extern char* _WSSbottomShadowColor();
extern char* _WSSshadowType();
extern char* _WSSvis();
extern char* _WSSdet();
extern char* _WSSlabelString();
extern char* _WSSfont();
extern char* _WSSfontName();
extern char* _WSStitleBar();
extern char* _WSStwinBlink();
extern char* _WSSblinkColor();
extern char* _WSSblinkRefreshing();
extern char* _WSSpixmapStyle();
extern char* _WSSlabelPixmap();
extern char* _WSSenableFep();
extern char* _WSSinterCur();
extern char* _WSSinterval();
extern char* _WSScont();
extern char* _WSSrunning();
extern char* _WSSextension();
extern char* _WSSmaxLength();
extern char* _WSSworkWidth();
extern char* _WSSworkHeight();
extern char* _WSSbarValue();
extern char* _WSSvbarValue();
extern char* _WSShbarValue();
extern char* _WSShbarVisible();
extern char* _WSSvbarVisible();
extern char* _WSSworkBackColor();
extern char* _WSSbarThickness();
extern char* _WSSincrement();
extern char* _WSSpageIncrement();
extern char* _WSSsliderSize();
extern char* _WSSvalue();
extern char* _WSSmaximum();
extern char* _WSSorientation();
extern char* _WSSbackPixmap();
extern char* _WSScolumns();
extern char* _WSScursorPos();
extern char* _WSSmenuItems();
extern char* _WSSmenuItemHeight();
extern char* _WSSbarShadowColor();
extern char* _WSSupward();
extern char* _WSSdownward();
extern char* _WSSleftward();
extern char* _WSSrightward();
extern char* _WSSreturn();
extern char* _WSStab();
extern char* _WSSbacktab();
extern char* _WSSenableFocusMove();
extern char* _WSSclient();
extern char* _WSSselectReset();
extern char* _WSSselectString();
extern char* _WSSselectColor();
extern char* _WSSselectForeColor();
extern char* _WSSselectPixmap();
extern char* _WSSindicatorPixmap();
extern char* _WSSindicatorColor();
extern char* _WSSindicatorOn();
extern char* _WSSindicatorType();
extern char* _WSSindicatorSize();
extern char* _WSSgroup();
extern char* _WSSid();
extern char* _WSSunique();
extern char* _WSSscrollWidth();
extern char* _WSSscrollHeight();
extern char* _WSStitleHeight();
extern char* _WSSfillSpace();
extern char* _WSSifieldSkipMode();
extern char* _WSScursorAdjust();
extern char* _WSSdateFormat();
extern char* _WSSweekFormat();
extern char* _WSSclockFormat();
extern char* _WSSsecondOn();
extern char* _WSSdirName();
extern char* _WSSfileName();
extern char* _WSSmaskFileName();
extern char* _WSSreplyHandler();
extern char* _WSSdefaultPosition();
extern char* _WSSlineWidth();
extern char* _WSSblinkType();
extern char* _WSSpushPixmap();
extern char* _WSSblinkPixmap();
extern char* _WSSmarginTop();
extern char* _WSSmarginBottom();
extern char* _WSSmarginLeft();
extern char* _WSSmarginRight();
extern char* _WSSalignmentH();
extern char* _WSSalignmentV();
extern char* _WSSalignmentH2();
extern char* _WSSalignmentV2();
extern char* _WSSlineX();
extern char* _WSSlineY();
extern char* _WSSlineNum();
extern char* _WSSvalue1();
extern char* _WSSvalue2();
extern char* _WSSlineType();
extern char* _WSSarrowDirection();
extern char* _WSSblinkFlag();
extern char* _WSSblinkRate();
extern char* _WSSstippled();
extern char* _WSShatchPattern();
extern char* _WSShatchColor();
extern char* _WSShatchBlinkColor();
extern char* _WSSbackColorFlag();
extern char* _WSSbackBlinkColor();
extern char* _WSSreverseFlag();
extern char* _WSSminimum();
extern char* _WSSangle1();
extern char* _WSSangle2();
extern char* _WSSarcType();
extern char* _WSSdragInterval();
extern char* _WSSindicatorShadow();
extern char* _WSSemboss();
extern char* _WSSmouse();
extern char* _WSSusePixmap();
extern char* _WSSenableInput();
extern char* _WSSok();
extern char* _WSSno();
extern char* _WSScancel();
extern char* _WSSokString();
extern char* _WSSnoString();
extern char* _WSScancelString();
extern char* _WSSmodal();
extern char* _WSStype();
extern char* _WSSmaxHeight();
extern char* _WSSmultiSelect();
extern char* _WSSreverseSelect();
extern char* _WSSmargin();
extern char* _WSSname();
extern char* _WSSuseIcon();
extern char* _WSSiconPixmap();
extern char* _WSSvirtualScroll();
extern char* _WSSnoHatch();
extern char* _WSSselectDir();
extern char* _WSSgradation();
extern char* _WSSgradation2();
extern char* _WSSgradationMargin();
extern char* _WSSshortcut();
extern char* _WSSreturnKeyFocus();
extern char* _WSSexit();
extern char* _WSSitemHeight();
extern char* _WSSdata();
extern char* _WSSdataSource();
extern char* _WSSdataSourceName();
extern char* _WSSanchorTop();
extern char* _WSSanchorBottom();
extern char* _WSSanchorLeft();
extern char* _WSSanchorRight();
extern char* _WSSanchorTopFlag();
extern char* _WSSanchorBottomFlag();
extern char* _WSSanchorLeftFlag();
extern char* _WSSanchorRightFlag();
extern char* _WSSflip();
extern char* _WSSframe();
extern char* _WSSformat();
extern char* _WSSworkX();
extern char* _WSSworkY();
extern char* _WSSdisplayOnly();
extern char* _WSSrefreshing();
extern char* _WSSvcolumns();
extern char* _WSShcolumns();
extern char* _WSSseparator();
extern char* _WSSseparator2();
extern char* _WSSfit();
extern char* _WSSip();
extern char* _WSSport();
extern char* _WSStimeout();
extern char* _WSSexport();
extern char* _WSSusername();
extern char* _WSSpassword();
extern char* _WSSdbname();
extern char* _WSSdsn();
extern char* _WSShostname();
extern char* _WSSstatus();
extern char* _WSSdbTableName();
extern char* _WSSshowItem();
extern char* _WSSsortItems();
extern char* _WSSsort();
extern char* _WSSitem();
extern char* _WSSfilter();
extern char* _WSSpixmapOverlap();
extern char* _WSSkeepPixmapCache();
extern char* _WSSautoLineFeeding();
# 25 "C:/PROGRA~1/WIDEST~1/ws/include/WSNdef.h" 2
# 414 "C:/PROGRA~1/WIDEST~1/ws/include/WSNdef.h"
extern char* _WSNtitleString();

extern char* _WSNuserString();

extern char* _WSNuserValue();

extern char* _WSNx();

extern char* _WSNy();

extern char* _WSNwidth();

extern char* _WSNheight();

extern char* _WSNshadowThickness();

extern char* _WSNbackColor();

extern char* _WSNforeColor();

extern char* _WSNtopShadowColor();

extern char* _WSNbottomShadowColor();

extern char* _WSNshadowType();

extern char* _WSNvis();

extern char* _WSNdet();

extern char* _WSNlabelString();

extern char* _WSNfont();

extern char* _WSNfontName();

extern char* _WSNtitleBar();

extern char* _WSNtwinBlink();

extern char* _WSNblinkColor();

extern char* _WSNblinkRefreshing();

extern char* _WSNpixmapStyle();

extern char* _WSNlabelPixmap();

extern char* _WSNenableFep();

extern char* _WSNinterCur();

extern char* _WSNinterval();

extern char* _WSNcont();

extern char* _WSNrunning();

extern char* _WSNextension();

extern char* _WSNmaxLength();

extern char* _WSNworkWidth();

extern char* _WSNworkHeight();

extern char* _WSNbarValue();

extern char* _WSNvbarValue();

extern char* _WSNhbarValue();

extern char* _WSNhbarVisible();

extern char* _WSNvbarVisible();

extern char* _WSNworkBackColor();

extern char* _WSNbarThickness();

extern char* _WSNincrement();

extern char* _WSNpageIncrement();

extern char* _WSNsliderSize();

extern char* _WSNvalue();

extern char* _WSNmaximum();

extern char* _WSNorientation();

extern char* _WSNbackPixmap();

extern char* _WSNcolumns();

extern char* _WSNcursorPos();

extern char* _WSNmenuItems();

extern char* _WSNmenuItemHeight();

extern char* _WSNbarShadowColor();

extern char* _WSNupward();

extern char* _WSNdownward();

extern char* _WSNleftward();

extern char* _WSNrightward();

extern char* _WSNreturn();

extern char* _WSNtab();

extern char* _WSNbacktab();

extern char* _WSNenableFocusMove();

extern char* _WSNclient();

extern char* _WSNselectReset();

extern char* _WSNselectString();

extern char* _WSNselectColor();

extern char* _WSNselectForeColor();

extern char* _WSNselectPixmap();

extern char* _WSNindicatorPixmap();

extern char* _WSNindicatorColor();

extern char* _WSNindicatorOn();

extern char* _WSNindicatorType();

extern char* _WSNindicatorSize();

extern char* _WSNgroup();

extern char* _WSNid();

extern char* _WSNunique();

extern char* _WSNscrollWidth();

extern char* _WSNscrollHeight();

extern char* _WSNtitleHeight();

extern char* _WSNfillSpace();

extern char* _WSNifieldSkipMode();

extern char* _WSNcursorAdjust();

extern char* _WSNdateFormat();

extern char* _WSNweekFormat();

extern char* _WSNclockFormat();

extern char* _WSNsecondOn();

extern char* _WSNdirName();

extern char* _WSNfileName();

extern char* _WSNmaskFileName();

extern char* _WSNreplyHandler();

extern char* _WSNdefaultPosition();

extern char* _WSNlineWidth();

extern char* _WSNblinkType();

extern char* _WSNpushPixmap();

extern char* _WSNblinkPixmap();

extern char* _WSNmarginTop();

extern char* _WSNmarginBottom();

extern char* _WSNmarginLeft();

extern char* _WSNmarginRight();

extern char* _WSNalignmentH();

extern char* _WSNalignmentV();

extern char* _WSNlineX();

extern char* _WSNlineY();

extern char* _WSNlineNum();

extern char* _WSNvalue1();

extern char* _WSNvalue2();

extern char* _WSNlineType();

extern char* _WSNarrowDirection();

extern char* _WSNblinkFlag();

extern char* _WSNblinkRate();

extern char* _WSNstippled();

extern char* _WSNhatchPattern();

extern char* _WSNhatchColor();

extern char* _WSNhatchBlinkColor();

extern char* _WSNbackColorFlag();

extern char* _WSNbackBlinkColor();

extern char* _WSNreverseFlag();

extern char* _WSNminimum();

extern char* _WSNangle1();

extern char* _WSNangle2();

extern char* _WSNarcType();

extern char* _WSNdragInterval();

extern char* _WSNindicatorShadow();

extern char* _WSNemboss();

extern char* _WSNmouse();

extern char* _WSNusePixmap();

extern char* _WSNenableInput();

extern char* _WSNok();

extern char* _WSNno();

extern char* _WSNcancel();

extern char* _WSNokString();

extern char* _WSNnoString();

extern char* _WSNcancelString();

extern char* _WSNmodal();

extern char* _WSNtype();

extern char* _WSNmaxHeight();

extern char* _WSNmultiSelect();

extern char* _WSNreverseSelect();

extern char* _WSNmargin();

extern char* _WSNname();

extern char* _WSNuseIcon();

extern char* _WSNiconPixmap();

extern char* _WSNvirtualScroll();

extern char* _WSNnoHatch();

extern char* _WSNselectDir();

extern char* _WSNgradation();

extern char* _WSNgradationMargin();

extern char* _WSNshortcut();

extern char* _WSNreturnKeyFocus();

extern char* _WSNexit();

extern char* _WSNitemHeight();

extern char* _WSNdata();

extern char* _WSNdataSource();

extern char* _WSNdataSourceName();

extern char* _WSNanchorTop();

extern char* _WSNanchorBottom();

extern char* _WSNanchorLeft();

extern char* _WSNanchorRight();

extern char* _WSNanchorTopFlag();

extern char* _WSNanchorBottomFlag();

extern char* _WSNanchorLeftFlag();

extern char* _WSNanchorRightFlag();

extern char* _WSNflip();

extern char* _WSNframe();

extern char* _WSNformat();

extern char* _WSNworkX();

extern char* _WSNworkY();

extern char* _WSNdisplayOnly();

extern char* _WSNrefreshing();

extern char* _WSNvcolumns();

extern char* _WSNhcolumns();

extern char* _WSNseparator2();

extern char* _WSNseparator();

extern char* _WSNfit();

extern char* _WSNip();

extern char* _WSNport();

extern char* _WSNtimeout();

extern char* _WSNexport();

extern char* _WSNusername();

extern char* _WSNpassword();

extern char* _WSNdbname();

extern char* _WSNdsn();

extern char* _WSNhostname();

extern char* _WSNstatus();

extern char* _WSNdbTableName();

extern char* _WSNshowItem();

extern char* _WSNsortItems();

extern char* _WSNsort();

extern char* _WSNitem();

extern char* _WSNfilter();

extern char* _WSNpixmapOverlap();

extern char* _WSNkeepPixmapCache();

extern char* _WSNautoLineFeeding();
# 68 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2
# 234 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
typedef unsigned char WSCbool;
typedef void* WSCptr;
typedef unsigned short WSCushort;
typedef unsigned long WSCulong;
typedef unsigned char WSCuchar;
typedef unsigned int WSCuint;
class WSCbase;
class WSDmwindowDev;
class WSDimage;
class WSCprocedure;
typedef void (*WSCeventProc)(WSCbase*);
# 450 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/assert.h" 1 3
# 31 "C:/PROGRA~1/WIDEST~1/gcc/include/assert.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/_mingw.h" 1 3
# 32 "C:/PROGRA~1/WIDEST~1/gcc/include/assert.h" 2 3




extern "C" {
# 52 "C:/PROGRA~1/WIDEST~1/gcc/include/assert.h" 3
void _assert (const char*, const char*, int)

        __attribute__ ((noreturn))

        ;
# 65 "C:/PROGRA~1/WIDEST~1/gcc/include/assert.h" 3
}
# 451 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2





# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 1 3
# 17 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 3
# 47 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stdarg.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stdarg.h" 1 3
# 44 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 111 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stdarg.h" 3
typedef __gnuc_va_list va_list;
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stdarg.h" 2 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/windef.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/windef.h" 3



extern "C" {
# 211 "C:/PROGRA~1/WIDEST~1/gcc/include/windef.h" 3
typedef unsigned long DWORD;
typedef int WINBOOL,*PWINBOOL,*LPWINBOOL;



typedef WINBOOL BOOL;



typedef unsigned char BYTE;

typedef BOOL *PBOOL,*LPBOOL;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BYTE *PBYTE,*LPBYTE;
typedef int *PINT,*LPINT;
typedef WORD *PWORD,*LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD,*LPDWORD;
typedef const void *PCVOID,*LPCVOID;
typedef int INT;
typedef unsigned int UINT,*PUINT,*LPUINT;

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
# 31 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
extern "C" {


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winerror.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winerror.h" 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/string.h" 1 3
# 40 "C:/PROGRA~1/WIDEST~1/gcc/include/string.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 203 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 3
typedef unsigned int size_t;
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 41 "C:/PROGRA~1/WIDEST~1/gcc/include/string.h" 2 3





extern "C" {





void* memchr (const void*, int, size_t);
int memcmp (const void*, const void*, size_t);
void* memcpy (void*, const void*, size_t);
void* memmove (void*, const void*, size_t);
void* memset (void*, int, size_t);
char* strcat (char*, const char*);
char* strchr (const char*, int);
int strcmp (const char*, const char*);
int strcoll (const char*, const char*);
char* strcpy (char*, const char*);
size_t strcspn (const char*, const char*);
char* strerror (int);
char* _strerror (const char *);
size_t strlen (const char*);
char* strncat (char*, const char*, size_t);
int strncmp (const char*, const char*, size_t);
char* strncpy (char*, const char*, size_t);
char* strpbrk (const char*, const char*);
char* strrchr (const char*, int);
size_t strspn (const char*, const char*);
char* strstr (const char*, const char*);
char* strtok (char*, const char*);
size_t strxfrm (char*, const char*, size_t);





void* _memccpy (void*, const void*, int, size_t);
int _memicmp (const void*, const void*, size_t);
char* _strdup (const char*);
int _strcmpi (const char*, const char*);
int _stricmp (const char*, const char*);
int _stricoll (const char*, const char*);
char* _strlwr (char*);
int _strnicmp (const char*, const char*, size_t);
char* _strnset (char*, int, size_t);
char* _strrev (char*);
char* _strset (char*, int);
char* _strupr (char*);
void _swab (const char*, char*, size_t);


int _strncoll(const char*, const char*, size_t);
int _strnicoll(const char*, const char*, size_t);







wchar_t* wcscat (wchar_t*, const wchar_t*);
wchar_t* wcschr (const wchar_t*, wchar_t);
int wcscmp (const wchar_t*, const wchar_t*);
int wcscoll (const wchar_t*, const wchar_t*);
wchar_t* wcscpy (wchar_t*, const wchar_t*);
size_t wcscspn (const wchar_t*, const wchar_t*);

size_t wcslen (const wchar_t*);
wchar_t* wcsncat (wchar_t*, const wchar_t*, size_t);
int wcsncmp(const wchar_t*, const wchar_t*, size_t);
wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t);
wchar_t* wcspbrk(const wchar_t*, const wchar_t*);
wchar_t* wcsrchr(const wchar_t*, wchar_t);
size_t wcsspn(const wchar_t*, const wchar_t*);
wchar_t* wcsstr(const wchar_t*, const wchar_t*);
wchar_t* wcstok(wchar_t*, const wchar_t*);
size_t wcsxfrm(wchar_t*, const wchar_t*, size_t);
# 130 "C:/PROGRA~1/WIDEST~1/gcc/include/string.h" 3
wchar_t* _wcsdup (const wchar_t*);
int _wcsicmp (const wchar_t*, const wchar_t*);
int _wcsicoll (const wchar_t*, const wchar_t*);
wchar_t* _wcslwr (wchar_t*);
int _wcsnicmp (const wchar_t*, const wchar_t*, size_t);
wchar_t* _wcsnset (wchar_t*, wchar_t, size_t);
wchar_t* _wcsrev (wchar_t*);
wchar_t* _wcsset (wchar_t*, wchar_t);
wchar_t* _wcsupr (wchar_t*);


int _wcsncoll(const wchar_t*, const wchar_t*, size_t);
int _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
# 158 "C:/PROGRA~1/WIDEST~1/gcc/include/string.h" 3
void* memccpy (void*, const void*, int, size_t);
int memicmp (const void*, const void*, size_t);
char* strdup (const char*);
int strcmpi (const char*, const char*);
int stricmp (const char*, const char*);
int strcasecmp (const char*, const char*);
int stricoll (const char*, const char*);
char* strlwr (char*);
int strnicmp (const char*, const char*, size_t);
int strncasecmp (const char*, const char*, size_t);
char* strnset (char*, int, size_t);
char* strrev (char*);
char* strset (char*, int);
char* strupr (char*);

void swab (const char*, char*, size_t);



int wcscmpi (const wchar_t*, const wchar_t*);
wchar_t* wcsdup (wchar_t*);
int wcsicmp (const wchar_t*, const wchar_t*);
int wcsicoll (const wchar_t*, const wchar_t*);
wchar_t* wcslwr (wchar_t*);
int wcsnicmp (const wchar_t*, const wchar_t*, size_t);
wchar_t* wcsnset (wchar_t*, wchar_t, size_t);
wchar_t* wcsrev (wchar_t*);
wchar_t* wcsset (wchar_t*, wchar_t);
wchar_t* wcsupr (wchar_t*);






}
# 38 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 2 3
# 49 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef char CHAR;
typedef short SHORT;
typedef long LONG;
typedef char CCHAR, *PCCHAR;
typedef unsigned char UCHAR,*PUCHAR;
typedef unsigned short USHORT,*PUSHORT;
typedef unsigned long ULONG,*PULONG;
typedef char *PSZ;

typedef void *PVOID,*LPVOID;





typedef void* PVOID64;
# 77 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef wchar_t WCHAR;
typedef WCHAR *PWCHAR,*LPWCH,*PWCH,*NWPSTR,*LPWSTR,*PWSTR;
typedef const WCHAR *LPCWCH,*PCWCH,*LPCWSTR,*PCWSTR;
typedef CHAR *PCHAR,*LPCH,*PCH,*NPSTR,*LPSTR,*PSTR;
typedef const CHAR *LPCCH,*PCSTR,*LPCSTR;
# 92 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef CHAR TCHAR;
typedef CHAR _TCHAR;


typedef TCHAR TBYTE,*PTCH,*PTBYTE;
typedef TCHAR *LPTCH,*PTSTR,*LPTSTR,*LP,*PTCHAR;
typedef const TCHAR *LPCTSTR;
# 117 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef SHORT *PSHORT;
typedef LONG *PLONG;
typedef void *HANDLE;
typedef HANDLE *PHANDLE,*LPHANDLE;





typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
# 138 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef long long LONGLONG;
typedef unsigned long long DWORDLONG;



typedef LONGLONG *PLONGLONG;
typedef DWORDLONG *PDWORDLONG;
typedef DWORDLONG ULONGLONG,*PULONGLONG;
typedef LONGLONG USN;
# 156 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef BYTE BOOLEAN,*PBOOLEAN;

typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/basetsd.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/basetsd.h" 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/basetsd.h" 3
extern "C" {

typedef int LONG32, *PLONG32;

typedef int INT32, *PINT32;

typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef unsigned int UINT32, *PUINT32;
# 97 "C:/PROGRA~1/WIDEST~1/gcc/include/basetsd.h" 3
typedef int INT_PTR, *PINT_PTR;
typedef unsigned int UINT_PTR, *PUINT_PTR;
typedef long LONG_PTR, *PLONG_PTR;
typedef unsigned long ULONG_PTR, *PULONG_PTR;
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef unsigned long HANDLE_PTR;


typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
typedef long long LONG64, *PLONG64;
typedef long long INT64, *PINT64;
typedef unsigned long long ULONG64, *PULONG64;
typedef unsigned long long DWORD64, *PDWORD64;
typedef unsigned long long UINT64, *PUINT64;

}
# 164 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 2 3
# 1151 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef DWORD ACCESS_MASK, *PACCESS_MASK;


typedef struct _GUID {
        unsigned long Data1;
        unsigned short Data2;
        unsigned short Data3;
        unsigned char Data4[8];
} GUID, *REFGUID, *LPGUID;


typedef struct _GENERIC_MAPPING {
        ACCESS_MASK GenericRead;
        ACCESS_MASK GenericWrite;
        ACCESS_MASK GenericExecute;
        ACCESS_MASK GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING;
typedef struct _ACE_HEADER {
        BYTE AceType;
        BYTE AceFlags;
        WORD AceSize;
} ACE_HEADER, *PACE_HEADER;
typedef struct _ACCESS_ALLOWED_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD SidStart;
} ACCESS_ALLOWED_ACE, *PACCESS_ALLOWED_ACE;
typedef struct _ACCESS_DENIED_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD SidStart;
} ACCESS_DENIED_ACE, *PACCESS_DENIED_ACE;
typedef struct _SYSTEM_AUDIT_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_ALARM_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD SidStart;
} SYSTEM_ALARM_ACE,*PSYSTEM_ALARM_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD Flags;
        GUID ObjectType;
        GUID InheritedObjectType;
        DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE,*PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_OBJECT_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD Flags;
        GUID ObjectType;
        GUID InheritedObjectType;
        DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE,*PACCESS_DENIED_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD Flags;
        GUID ObjectType;
        GUID InheritedObjectType;
        DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE,*PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE {
        ACE_HEADER Header;
        ACCESS_MASK Mask;
        DWORD Flags;
        GUID ObjectType;
        GUID InheritedObjectType;
        DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE,*PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _ACL {
        BYTE AclRevision;
        BYTE Sbz1;
        WORD AclSize;
        WORD AceCount;
        WORD Sbz2;
} ACL,*PACL;
typedef struct _ACL_REVISION_INFORMATION {
        DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef struct _ACL_SIZE_INFORMATION {
        DWORD AceCount;
        DWORD AclBytesInUse;
        DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
# 1255 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef struct _FLOATING_SAVE_AREA {
        DWORD ControlWord;
        DWORD StatusWord;
        DWORD TagWord;
        DWORD ErrorOffset;
        DWORD ErrorSelector;
        DWORD DataOffset;
        DWORD DataSelector;
        BYTE RegisterArea[80];
        DWORD Cr0NpxState;
} FLOATING_SAVE_AREA;
typedef struct _CONTEXT {
        DWORD ContextFlags;
        DWORD Dr0;
        DWORD Dr1;
        DWORD Dr2;
        DWORD Dr3;
        DWORD Dr6;
        DWORD Dr7;
        FLOATING_SAVE_AREA FloatSave;
        DWORD SegGs;
        DWORD SegFs;
        DWORD SegEs;
        DWORD SegDs;
        DWORD Edi;
        DWORD Esi;
        DWORD Ebx;
        DWORD Edx;
        DWORD Ecx;
        DWORD Eax;
        DWORD Ebp;
        DWORD Eip;
        DWORD SegCs;
        DWORD EFlags;
        DWORD Esp;
        DWORD SegSs;
        BYTE ExtendedRegisters[512];
} CONTEXT;
# 1774 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
typedef CONTEXT *PCONTEXT,*LPCONTEXT;
typedef struct _EXCEPTION_RECORD {
        DWORD ExceptionCode;
        DWORD ExceptionFlags;
        struct _EXCEPTION_RECORD *ExceptionRecord;
        PVOID ExceptionAddress;
        DWORD NumberParameters;
        DWORD ExceptionInformation[15];
} EXCEPTION_RECORD,*PEXCEPTION_RECORD,*LPEXCEPTION_RECORD;
typedef struct _EXCEPTION_POINTERS {
        PEXCEPTION_RECORD ExceptionRecord;
        PCONTEXT ContextRecord;
} EXCEPTION_POINTERS,*PEXCEPTION_POINTERS,*LPEXCEPTION_POINTERS;
typedef union _LARGE_INTEGER {
  struct {
    DWORD LowPart;
    LONG HighPart;
  } u;

  __extension__ struct {
    DWORD LowPart;
    LONG HighPart;
  };

  LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;
typedef union _ULARGE_INTEGER {
  struct {
    DWORD LowPart;
    DWORD HighPart;
  } u;

  __extension__ struct {
    DWORD LowPart;
    DWORD HighPart;
  };

  ULONGLONG QuadPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;
typedef LARGE_INTEGER LUID,*PLUID;
#pragma pack(push,4)
typedef struct _LUID_AND_ATTRIBUTES {
        LUID Luid;
        DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;
#pragma pack(pop)
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
typedef struct _PRIVILEGE_SET {
        DWORD PrivilegeCount;
        DWORD Control;
        LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET,*PPRIVILEGE_SET;
typedef struct _SECURITY_ATTRIBUTES {
        DWORD nLength;
        LPVOID lpSecurityDescriptor;
        BOOL bInheritHandle;
} SECURITY_ATTRIBUTES,*PSECURITY_ATTRIBUTES,*LPSECURITY_ATTRIBUTES;
typedef enum _SECURITY_IMPERSONATION_LEVEL {
        SecurityAnonymous,
        SecurityIdentification,
        SecurityImpersonation,
        SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL,*PSECURITY_IMPERSONATION_LEVEL;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,*PSECURITY_CONTEXT_TRACKING_MODE;
typedef struct _SECURITY_QUALITY_OF_SERVICE {
        DWORD Length;
        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
        BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE,*PSECURITY_QUALITY_OF_SERVICE;
typedef PVOID PACCESS_TOKEN;
typedef struct _SE_IMPERSONATION_STATE {
        PACCESS_TOKEN Token;
        BOOLEAN CopyOnOpen;
        BOOLEAN EffectiveOnly;
        SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE,*PSE_IMPERSONATION_STATE;
typedef struct _SID_IDENTIFIER_AUTHORITY {
        BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY,*PSID_IDENTIFIER_AUTHORITY,*LPSID_IDENTIFIER_AUTHORITY;
typedef PVOID PSID;
typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
   DWORD SubAuthority[1];
} SID, *PISID;
typedef struct _SID_AND_ATTRIBUTES {
        PSID Sid;
        DWORD Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
typedef struct _TOKEN_SOURCE {
        CHAR SourceName[8];
        LUID SourceIdentifier;
} TOKEN_SOURCE,*PTOKEN_SOURCE;
typedef struct _TOKEN_CONTROL {
        LUID TokenId;
        LUID AuthenticationId;
        LUID ModifiedId;
        TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL,*PTOKEN_CONTROL;
typedef struct _TOKEN_DEFAULT_DACL {
        PACL DefaultDacl;
} TOKEN_DEFAULT_DACL,*PTOKEN_DEFAULT_DACL;
typedef struct _TOKEN_GROUPS {
        DWORD GroupCount;
        SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS,*PTOKEN_GROUPS,*LPTOKEN_GROUPS;
typedef struct _TOKEN_OWNER {
        PSID Owner;
} TOKEN_OWNER,*PTOKEN_OWNER;
typedef struct _TOKEN_PRIMARY_GROUP {
        PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP,*PTOKEN_PRIMARY_GROUP;
typedef struct _TOKEN_PRIVILEGES {
        DWORD PrivilegeCount;
        LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES,*PTOKEN_PRIVILEGES,*LPTOKEN_PRIVILEGES;
typedef enum tagTOKEN_TYPE { TokenPrimary=1,TokenImpersonation }TOKEN_TYPE, *PTOKEN_TYPE;
typedef struct _TOKEN_STATISTICS {
        LUID TokenId;
        LUID AuthenticationId;
        LARGE_INTEGER ExpirationTime;
        TOKEN_TYPE TokenType;
        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        DWORD DynamicCharged;
        DWORD DynamicAvailable;
        DWORD GroupCount;
        DWORD PrivilegeCount;
        LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;
typedef struct _TOKEN_USER {
        SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;
typedef DWORD SECURITY_INFORMATION,*PSECURITY_INFORMATION;
typedef WORD SECURITY_DESCRIPTOR_CONTROL,*PSECURITY_DESCRIPTOR_CONTROL;
typedef struct _SECURITY_DESCRIPTOR {
        BYTE Revision;
        BYTE Sbz1;
        SECURITY_DESCRIPTOR_CONTROL Control;
        PSID Owner;
        PSID Group;
        PACL Sacl;
        PACL Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;
typedef enum _TOKEN_INFORMATION_CLASS {
        TokenUser=1,TokenGroups,TokenPrivileges,TokenOwner,
        TokenPrimaryGroup,TokenDefaultDacl,TokenSource,TokenType,
        TokenImpersonationLevel,TokenStatistics,TokenRestrictedSids,
        TokenSessionId
} TOKEN_INFORMATION_CLASS;
typedef enum _SID_NAME_USE {
        SidTypeUser=1,SidTypeGroup,SidTypeDomain,SidTypeAlias,SidTypeWellKnownGroup,
        SidTypeDeletedAccount,SidTypeInvalid,SidTypeUnknown
} SID_NAME_USE,*PSID_NAME_USE;
typedef struct _QUOTA_LIMITS {
        SIZE_T PagedPoolLimit;
        SIZE_T NonPagedPoolLimit;
        SIZE_T MinimumWorkingSetSize;
        SIZE_T MaximumWorkingSetSize;
        SIZE_T PagefileLimit;
        LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS,*PQUOTA_LIMITS;
typedef struct _IO_COUNTERS {
        ULONGLONG ReadOperationCount;
        ULONGLONG WriteOperationCount;
        ULONGLONG OtherOperationCount;
        ULONGLONG ReadTransferCount;
        ULONGLONG WriteTransferCount;
        ULONGLONG OtherTransferCount;
} IO_COUNTERS, *PIO_COUNTERS;
typedef struct _FILE_NOTIFY_INFORMATION {
        DWORD NextEntryOffset;
        DWORD Action;
        DWORD FileNameLength;
        WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION,*PFILE_NOTIFY_INFORMATION;
typedef struct _TAPE_ERASE {
        DWORD Type;
        BOOLEAN Immediate;
} TAPE_ERASE,*PTAPE_ERASE;
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
        BOOLEAN ECC;
        BOOLEAN Compression;
        BOOLEAN DataPadding;
        BOOLEAN ReportSetmarks;
        DWORD DefaultBlockSize;
        DWORD MaximumBlockSize;
        DWORD MinimumBlockSize;
        DWORD MaximumPartitionCount;
        DWORD FeaturesLow;
        DWORD FeaturesHigh;
        DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS,*PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS {
        LARGE_INTEGER Capacity;
        LARGE_INTEGER Remaining;
        DWORD BlockSize;
        DWORD PartitionCount;
        BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS,*PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_GET_POSITION {
        ULONG Type;
        ULONG Partition;
        ULONG OffsetLow;
        ULONG OffsetHigh;
} TAPE_GET_POSITION,*PTAPE_GET_POSITION;
typedef struct _TAPE_PREPARE {
        DWORD Operation;
        BOOLEAN Immediate;
} TAPE_PREPARE,*PTAPE_PREPARE;
typedef struct _TAPE_SET_DRIVE_PARAMETERS {
        BOOLEAN ECC;
        BOOLEAN Compression;
        BOOLEAN DataPadding;
        BOOLEAN ReportSetmarks;
        ULONG EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS,*PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS {
        ULONG BlockSize;
} TAPE_SET_MEDIA_PARAMETERS,*PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_POSITION {
        DWORD Method;
        DWORD Partition;
        LARGE_INTEGER Offset;
        BOOLEAN Immediate;
} TAPE_SET_POSITION,*PTAPE_SET_POSITION;
typedef struct _TAPE_WRITE_MARKS {
        DWORD Type;
        DWORD Count;
        BOOLEAN Immediate;
} TAPE_WRITE_MARKS,*PTAPE_WRITE_MARKS;
typedef struct _TAPE_CREATE_PARTITION {
        DWORD Method;
        DWORD Count;
        DWORD Size;
} TAPE_CREATE_PARTITION,*PTAPE_CREATE_PARTITION;
typedef struct _MEMORY_BASIC_INFORMATION {
        PVOID BaseAddress;
        PVOID AllocationBase;
        DWORD AllocationProtect;
        DWORD RegionSize;
        DWORD State;
        DWORD Protect;
        DWORD Type;
} MEMORY_BASIC_INFORMATION,*PMEMORY_BASIC_INFORMATION;
typedef struct _MESSAGE_RESOURCE_ENTRY {
        WORD Length;
        WORD Flags;
        BYTE Text[1];
} MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;
typedef struct _MESSAGE_RESOURCE_BLOCK {
        DWORD LowId;
        DWORD HighId;
        DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_DATA {
        DWORD NumberOfBlocks;
        MESSAGE_RESOURCE_BLOCK Blocks[1];
} MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;
typedef struct _LIST_ENTRY {
        struct _LIST_ENTRY *Flink;
        struct _LIST_ENTRY *Blink;
} LIST_ENTRY,*PLIST_ENTRY;
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
        WORD Type;
        WORD CreatorBackTraceIndex;
        struct _RTL_CRITICAL_SECTION *CriticalSection;
        LIST_ENTRY ProcessLocksList;
        DWORD EntryCount;
        DWORD ContentionCount;
        DWORD Spare[2];
} RTL_CRITICAL_SECTION_DEBUG,*PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _RTL_CRITICAL_SECTION {
        PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
        LONG LockCount;
        LONG RecursionCount;
        HANDLE OwningThread;
        HANDLE LockSemaphore;
        DWORD Reserved;
} RTL_CRITICAL_SECTION,*PRTL_CRITICAL_SECTION;
typedef struct _EVENTLOGRECORD {
        DWORD Length;
        DWORD Reserved;
        DWORD RecordNumber;
        DWORD TimeGenerated;
        DWORD TimeWritten;
        DWORD EventID;
        WORD EventType;
        WORD NumStrings;
        WORD EventCategory;
        WORD ReservedFlags;
        DWORD ClosingRecordNumber;
        DWORD StringOffset;
        DWORD UserSidLength;
        DWORD UserSidOffset;
        DWORD DataLength;
        DWORD DataOffset;
} EVENTLOGRECORD,*PEVENTLOGRECORD;
typedef struct _OSVERSIONINFOA {
        DWORD dwOSVersionInfoSize;
        DWORD dwMajorVersion;
        DWORD dwMinorVersion;
        DWORD dwBuildNumber;
        DWORD dwPlatformId;
        CHAR szCSDVersion[128];
} OSVERSIONINFOA,*POSVERSIONINFOA,*LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
        DWORD dwOSVersionInfoSize;
        DWORD dwMajorVersion;
        DWORD dwMinorVersion;
        DWORD dwBuildNumber;
        DWORD dwPlatformId;
        WCHAR szCSDVersion[128];
} OSVERSIONINFOW,*POSVERSIONINFOW,*LPOSVERSIONINFOW;
typedef struct _OSVERSIONINFOEXA {
        DWORD dwOSVersionInfoSize;
        DWORD dwMajorVersion;
        DWORD dwMinorVersion;
        DWORD dwBuildNumber;
        DWORD dwPlatformId;
        CHAR szCSDVersion[128];
        WORD wServicePackMajor;
        WORD wServicePackMinor;
        WORD wSuiteMask;
        BYTE wProductType;
        BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
        DWORD dwOSVersionInfoSize;
        DWORD dwMajorVersion;
        DWORD dwMinorVersion;
        DWORD dwBuildNumber;
        DWORD dwPlatformId;
        WCHAR szCSDVersion[128];
        WORD wServicePackMajor;
        WORD wServicePackMinor;
        WORD wSuiteMask;
        BYTE wProductType;
        BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW;
#pragma pack(push,2)
typedef struct _IMAGE_VXD_HEADER {
        WORD e32_magic;
        BYTE e32_border;
        BYTE e32_worder;
        DWORD e32_level;
        WORD e32_cpu;
        WORD e32_os;
        DWORD e32_ver;
        DWORD e32_mflags;
        DWORD e32_mpages;
        DWORD e32_startobj;
        DWORD e32_eip;
        DWORD e32_stackobj;
        DWORD e32_esp;
        DWORD e32_pagesize;
        DWORD e32_lastpagesize;
        DWORD e32_fixupsize;
        DWORD e32_fixupsum;
        DWORD e32_ldrsize;
        DWORD e32_ldrsum;
        DWORD e32_objtab;
        DWORD e32_objcnt;
        DWORD e32_objmap;
        DWORD e32_itermap;
        DWORD e32_rsrctab;
        DWORD e32_rsrccnt;
        DWORD e32_restab;
        DWORD e32_enttab;
        DWORD e32_dirtab;
        DWORD e32_dircnt;
        DWORD e32_fpagetab;
        DWORD e32_frectab;
        DWORD e32_impmod;
        DWORD e32_impmodcnt;
        DWORD e32_impproc;
        DWORD e32_pagesum;
        DWORD e32_datapage;
        DWORD e32_preload;
        DWORD e32_nrestab;
        DWORD e32_cbnrestab;
        DWORD e32_nressum;
        DWORD e32_autodata;
        DWORD e32_debuginfo;
        DWORD e32_debuglen;
        DWORD e32_instpreload;
        DWORD e32_instdemand;
        DWORD e32_heapsize;
        BYTE e32_res3[12];
        DWORD e32_winresoff;
        DWORD e32_winreslen;
        WORD e32_devid;
        WORD e32_ddkver;
} IMAGE_VXD_HEADER,*PIMAGE_VXD_HEADER;
#pragma pack(pop)
#pragma pack(push,4)
typedef struct _IMAGE_FILE_HEADER {
        WORD Machine;
        WORD NumberOfSections;
        DWORD TimeDateStamp;
        DWORD PointerToSymbolTable;
        DWORD NumberOfSymbols;
        WORD SizeOfOptionalHeader;
        WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_DATA_DIRECTORY {
        DWORD VirtualAddress;
        DWORD Size;
} IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_OPTIONAL_HEADER {
        WORD Magic;
        BYTE MajorLinkerVersion;
        BYTE MinorLinkerVersion;
        DWORD SizeOfCode;
        DWORD SizeOfInitializedData;
        DWORD SizeOfUninitializedData;
        DWORD AddressOfEntryPoint;
        DWORD BaseOfCode;
        DWORD BaseOfData;
        DWORD ImageBase;
        DWORD SectionAlignment;
        DWORD FileAlignment;
        WORD MajorOperatingSystemVersion;
        WORD MinorOperatingSystemVersion;
        WORD MajorImageVersion;
        WORD MinorImageVersion;
        WORD MajorSubsystemVersion;
        WORD MinorSubsystemVersion;
        DWORD Reserved1;
        DWORD SizeOfImage;
        DWORD SizeOfHeaders;
        DWORD CheckSum;
        WORD Subsystem;
        WORD DllCharacteristics;
        DWORD SizeOfStackReserve;
        DWORD SizeOfStackCommit;
        DWORD SizeOfHeapReserve;
        DWORD SizeOfHeapCommit;
        DWORD LoaderFlags;
        DWORD NumberOfRvaAndSizes;
        IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER,*PIMAGE_OPTIONAL_HEADER;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
        WORD Magic;
        BYTE MajorLinkerVersion;
        BYTE MinorLinkerVersion;
        DWORD SizeOfCode;
        DWORD SizeOfInitializedData;
        DWORD SizeOfUninitializedData;
        DWORD AddressOfEntryPoint;
        DWORD BaseOfCode;
        DWORD BaseOfData;
        DWORD BaseOfBss;
        DWORD GprMask;
        DWORD CprMask[4];
        DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER,*PIMAGE_ROM_OPTIONAL_HEADER;
#pragma pack(pop)
#pragma pack(push,2)
typedef struct _IMAGE_DOS_HEADER {
        WORD e_magic;
        WORD e_cblp;
        WORD e_cp;
        WORD e_crlc;
        WORD e_cparhdr;
        WORD e_minalloc;
        WORD e_maxalloc;
        WORD e_ss;
        WORD e_sp;
        WORD e_csum;
        WORD e_ip;
        WORD e_cs;
        WORD e_lfarlc;
        WORD e_ovno;
        WORD e_res[4];
        WORD e_oemid;
        WORD e_oeminfo;
        WORD e_res2[10];
        LONG e_lfanew;
} IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER {
        WORD ne_magic;
        CHAR ne_ver;
        CHAR ne_rev;
        WORD ne_enttab;
        WORD ne_cbenttab;
        LONG ne_crc;
        WORD ne_flags;
        WORD ne_autodata;
        WORD ne_heap;
        WORD ne_stack;
        LONG ne_csip;
        LONG ne_sssp;
        WORD ne_cseg;
        WORD ne_cmod;
        WORD ne_cbnrestab;
        WORD ne_segtab;
        WORD ne_rsrctab;
        WORD ne_restab;
        WORD ne_modtab;
        WORD ne_imptab;
        LONG ne_nrestab;
        WORD ne_cmovent;
        WORD ne_align;
        WORD ne_cres;
        BYTE ne_exetyp;
        BYTE ne_flagsothers;
        WORD ne_pretthunks;
        WORD ne_psegrefbytes;
        WORD ne_swaparea;
        WORD ne_expver;
} IMAGE_OS2_HEADER,*PIMAGE_OS2_HEADER;
#pragma pack(pop)
#pragma pack(push,4)
typedef struct _IMAGE_NT_HEADERS {
        DWORD Signature;
        IMAGE_FILE_HEADER FileHeader;
        IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS,*PIMAGE_NT_HEADERS;
typedef struct _IMAGE_ROM_HEADERS {
        IMAGE_FILE_HEADER FileHeader;
        IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS,*PIMAGE_ROM_HEADERS;
typedef struct _IMAGE_SECTION_HEADER {
        BYTE Name[8];
        union {
                DWORD PhysicalAddress;
                DWORD VirtualSize;
        } Misc;
        DWORD VirtualAddress;
        DWORD SizeOfRawData;
        DWORD PointerToRawData;
        DWORD PointerToRelocations;
        DWORD PointerToLinenumbers;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD Characteristics;
} IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER;
#pragma pack(pop)
#pragma pack(push,2)
typedef struct _IMAGE_SYMBOL {
        union {
                BYTE ShortName[8];
                struct {
                        DWORD Short;
                        DWORD Long;
                } Name;
                PBYTE LongName[2];
        } N;
        DWORD Value;
        SHORT SectionNumber;
        WORD Type;
        BYTE StorageClass;
        BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL,*PIMAGE_SYMBOL;
typedef union _IMAGE_AUX_SYMBOL {
        struct {
                DWORD TagIndex;
                union {
                        struct {
                                WORD Linenumber;
                                WORD Size;
                        } LnSz;
                        DWORD TotalSize;
                } Misc;
                union {
                        struct {
                                DWORD PointerToLinenumber;
                                DWORD PointerToNextFunction;
                        } Function;
                        struct {
                                WORD Dimension[4];
                        } Array;
                } FcnAry;
                WORD TvIndex;
        } Sym;
        struct {
                BYTE Name[18];
        } File;
        struct {
                DWORD Length;
                WORD NumberOfRelocations;
                WORD NumberOfLinenumbers;
                DWORD CheckSum;
                SHORT Number;
                BYTE Selection;
        } Section;
} IMAGE_AUX_SYMBOL,*PIMAGE_AUX_SYMBOL;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
        DWORD NumberOfSymbols;
        DWORD LvaToFirstSymbol;
        DWORD NumberOfLinenumbers;
        DWORD LvaToFirstLinenumber;
        DWORD RvaToFirstByteOfCode;
        DWORD RvaToLastByteOfCode;
        DWORD RvaToFirstByteOfData;
        DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER,*PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RELOCATION {
        __extension__ union {
                DWORD VirtualAddress;
                DWORD RelocCount;
        } ;
        DWORD SymbolTableIndex;
        WORD Type;
} IMAGE_RELOCATION,*PIMAGE_RELOCATION;
#pragma pack(pop)
#pragma pack(push,4)
typedef struct _IMAGE_BASE_RELOCATION {
        DWORD VirtualAddress;
        DWORD SizeOfBlock;
} IMAGE_BASE_RELOCATION,*PIMAGE_BASE_RELOCATION;
#pragma pack(pop)
#pragma pack(push,2)
typedef struct _IMAGE_LINENUMBER {
        union {
                DWORD SymbolTableIndex;
                DWORD VirtualAddress;
        } Type;
        WORD Linenumber;
} IMAGE_LINENUMBER,*PIMAGE_LINENUMBER;
#pragma pack(pop)
#pragma pack(push,4)
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
        BYTE Name[16];
        BYTE Date[12];
        BYTE UserID[6];
        BYTE GroupID[6];
        BYTE Mode[8];
        BYTE Size[10];
        BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER,*PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_EXPORT_DIRECTORY {
        DWORD Characteristics;
        DWORD TimeDateStamp;
        WORD MajorVersion;
        WORD MinorVersion;
        DWORD Name;
        DWORD Base;
        DWORD NumberOfFunctions;
        DWORD NumberOfNames;
        PDWORD *AddressOfFunctions;
        PDWORD *AddressOfNames;
        PWORD *AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_IMPORT_BY_NAME {
        WORD Hint;
        BYTE Name[1];
} IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_THUNK_DATA {
        union {
                PBYTE ForwarderString;
                PDWORD Function;
                DWORD Ordinal;
                PIMAGE_IMPORT_BY_NAME AddressOfData;
        } u1;
} IMAGE_THUNK_DATA,*PIMAGE_THUNK_DATA;
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
        __extension__ union {
                DWORD Characteristics;
                PIMAGE_THUNK_DATA OriginalFirstThunk;
        } ;
        DWORD TimeDateStamp;
        DWORD ForwarderChain;
        DWORD Name;
        PIMAGE_THUNK_DATA FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR,*PIMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
        DWORD TimeDateStamp;
        WORD OffsetModuleName;
        WORD NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR,*PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_FORWARDER_REF {
        DWORD TimeDateStamp;
        WORD OffsetModuleName;
        WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF,*PIMAGE_BOUND_FORWARDER_REF;
typedef void(__attribute__((__stdcall__)) *PIMAGE_TLS_CALLBACK)(PVOID,DWORD,PVOID);
typedef struct _IMAGE_TLS_DIRECTORY {
        DWORD StartAddressOfRawData;
        DWORD EndAddressOfRawData;
        PDWORD AddressOfIndex;
        PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
        DWORD SizeOfZeroFill;
        DWORD Characteristics;
} IMAGE_TLS_DIRECTORY,*PIMAGE_TLS_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIRECTORY {
        DWORD Characteristics;
        DWORD TimeDateStamp;
        WORD MajorVersion;
        WORD MinorVersion;
        WORD NumberOfNamedEntries;
        WORD NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;
__extension__ typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
        __extension__ union {
                __extension__ struct {
                        DWORD NameOffset:31;
                        DWORD NameIsString:1;
                };
                DWORD Name;
                WORD Id;
        } ;
        __extension__ union {
                DWORD OffsetToData;
                __extension__ struct {
                        DWORD OffsetToDirectory:31;
                        DWORD DataIsDirectory:1;
                } ;
        } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
        WORD Length;
        CHAR NameString[1];
} IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
        WORD Length;
        WCHAR NameString[1];
} IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
        DWORD OffsetToData;
        DWORD Size;
        DWORD CodePage;
        DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY {
        DWORD Characteristics;
        DWORD TimeDateStamp;
        WORD MajorVersion;
        WORD MinorVersion;
        DWORD GlobalFlagsClear;
        DWORD GlobalFlagsSet;
        DWORD CriticalSectionDefaultTimeout;
        DWORD DeCommitFreeBlockThreshold;
        DWORD DeCommitTotalFreeThreshold;
        PVOID LockPrefixTable;
        DWORD MaximumAllocationSize;
        DWORD VirtualMemoryThreshold;
        DWORD ProcessHeapFlags;
        DWORD Reserved[4];
} IMAGE_LOAD_CONFIG_DIRECTORY,*PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
        DWORD BeginAddress;
        DWORD EndAddress;
        PVOID ExceptionHandler;
        PVOID HandlerData;
        DWORD PrologEndAddress;
} IMAGE_RUNTIME_FUNCTION_ENTRY,*PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_DEBUG_DIRECTORY {
        DWORD Characteristics;
        DWORD TimeDateStamp;
        WORD MajorVersion;
        WORD MinorVersion;
        DWORD Type;
        DWORD SizeOfData;
        DWORD AddressOfRawData;
        DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY,*PIMAGE_DEBUG_DIRECTORY;
typedef struct _FPO_DATA {
        DWORD ulOffStart;
        DWORD cbProcSize;
        DWORD cdwLocals;
        WORD cdwParams;
        WORD cbProlog:8;
        WORD cbRegs:3;
        WORD fHasSEH:1;
        WORD fUseBP:1;
        WORD reserved:1;
        WORD cbFrame:2;
} FPO_DATA,*PFPO_DATA;
typedef struct _IMAGE_DEBUG_MISC {
        DWORD DataType;
        DWORD Length;
        BOOLEAN Unicode;
        BYTE Reserved[3];
        BYTE Data[1];
} IMAGE_DEBUG_MISC,*PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_FUNCTION_ENTRY {
        DWORD StartingAddress;
        DWORD EndingAddress;
        DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY,*PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
        WORD Signature;
        WORD Flags;
        WORD Machine;
        WORD Characteristics;
        DWORD TimeDateStamp;
        DWORD CheckSum;
        DWORD ImageBase;
        DWORD SizeOfImage;
        DWORD NumberOfSections;
        DWORD ExportedNamesSize;
        DWORD DebugDirectorySize;
        DWORD Reserved[3];
} IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;
#pragma pack(pop)
typedef enum _CM_SERVICE_NODE_TYPE {
        DriverType=1,
        FileSystemType=2,
        Win32ServiceOwnProcess=16,
        Win32ServiceShareProcess=32,
        AdapterType=4,
        RecognizerType=8
} SERVICE_NODE_TYPE;
typedef enum _CM_SERVICE_LOAD_TYPE {
        BootLoad=0,
        SystemLoad=1,
        AutoLoad=2,
        DemandLoad=3,
        DisableLoad=4
} SERVICE_LOAD_TYPE;
typedef enum _CM_ERROR_CONTROL_TYPE {
        IgnoreError=0,
        NormalError=1,
        SevereError=2,
        CriticalError=3
} SERVICE_ERROR_TYPE;
typedef struct _NT_TIB {
        struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
        PVOID StackBase;
        PVOID StackLimit;
        PVOID SubSystemTib;
        __extension__ union {
                PVOID FiberData;
                DWORD Version;
        } ;
        PVOID ArbitraryUserPointer;
        struct _NT_TIB *Self;
} NT_TIB,*PNT_TIB;
typedef struct _REPARSE_DATA_BUFFER {
        DWORD ReparseTag;
        WORD ReparseDataLength;
        WORD Reserved;
        __extension__ union {
                struct {
                        WORD SubstituteNameOffset;
                        WORD SubstituteNameLength;
                        WORD PrintNameOffset;
                        WORD PrintNameLength;
                        WCHAR PathBuffer[1];
                } SymbolicLinkReparseBuffer;
                struct {
                        WORD SubstituteNameOffset;
                        WORD SubstituteNameLength;
                        WORD PrintNameOffset;
                        WORD PrintNameLength;
                        WCHAR PathBuffer[1];
                } MountPointReparseBuffer;
                struct {
                        BYTE DataBuffer[1];
                } GenericReparseBuffer;
        } ;
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;
typedef struct _REPARSE_GUID_DATA_BUFFER {
        DWORD ReparseTag;
        WORD ReparseDataLength;
        WORD Reserved;
        GUID ReparseGuid;
        struct {
                BYTE DataBuffer[1];
        } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
typedef struct _REPARSE_POINT_INFORMATION {
        WORD ReparseDataLength;
        WORD UnparsedNameLength;
} REPARSE_POINT_INFORMATION, *PREPARSE_POINT_INFORMATION;

typedef union _FILE_SEGMENT_ELEMENT {
        PVOID64 Buffer;
        ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;






typedef OSVERSIONINFOA OSVERSIONINFO,*POSVERSIONINFO,*LPOSVERSIONINFO;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX,*POSVERSIONINFOEX,*LPOSVERSIONINFOEX;




PVOID GetCurrentFiber(void);
PVOID GetFiberData(void);

PVOID GetCurrentFiber(void);
extern __inline__ PVOID GetCurrentFiber(void)
{
    void* ret;
    __asm__ volatile (
              "movl	%%fs:0x10,%0"
                : "=r" (ret)
                :
                );
    return ret;
}

PVOID GetFiberData(void);
extern __inline__ PVOID GetFiberData(void)
{
    void* ret;
    __asm__ volatile (
              "movl	%%fs:0x10,%0\n"
              "movl	(%0),%0"
               : "=r" (ret)
               :
              );
    return ret;
}
# 2709 "C:/PROGRA~1/WIDEST~1/gcc/include/winnt.h" 3
}
# 236 "C:/PROGRA~1/WIDEST~1/gcc/include/windef.h" 2 3

typedef UINT WPARAM;
typedef LONG LPARAM;
typedef LONG LRESULT;

typedef LONG HRESULT;



typedef WORD ATOM;

typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
typedef void *HGDIOBJ;
typedef struct HACCEL__{int i;}*HACCEL;
typedef struct HBITMAP__{int i;}*HBITMAP;
typedef struct HBRUSH__{int i;}*HBRUSH;
typedef struct HCOLORSPACE__{int i;}*HCOLORSPACE;
typedef struct HDC__{int i;}*HDC;
typedef struct HGLRC__{int i;}*HGLRC;
typedef struct HDESK__{int i;}*HDESK;
typedef struct HENHMETAFILE__{int i;}*HENHMETAFILE;
typedef struct HFONT__{int i;}*HFONT;
typedef struct HICON__{int i;}*HICON;
typedef struct HKEY__{int i;}*HKEY;


typedef struct HMONITOR__{int i;}*HMONITOR;

typedef struct HTERMINAL__{int i;}*HTERMINAL;
typedef struct HWINEVENTHOOK__{int i;}*HWINEVENTHOOK;

typedef HKEY *PHKEY;
typedef struct HMENU__{int i;}*HMENU;
typedef struct HMETAFILE__{int i;}*HMETAFILE;
typedef struct HINSTANCE__{int i;}*HINSTANCE;
typedef HINSTANCE HMODULE;
typedef struct HPALETTE__{int i;}*HPALETTE;
typedef struct HPEN__{int i;}*HPEN;
typedef struct HRGN__{int i;}*HRGN;
typedef struct HRSRC__{int i;}*HRSRC;
typedef struct HSTR__{int i;}*HSTR;
typedef struct HTASK__{int i;}*HTASK;
typedef struct HWND__{int i;}*HWND;
typedef struct HWINSTA__{int i;}*HWINSTA;
typedef struct HKL__{int i;}*HKL;
typedef int HFILE;
typedef HICON HCURSOR;
typedef DWORD COLORREF;
typedef int (__attribute__((__stdcall__)) *FARPROC)();
typedef int (__attribute__((__stdcall__)) *NEARPROC)();
typedef int (__attribute__((__stdcall__)) *PROC)();
typedef struct tagRECT {
        LONG left;
        LONG top;
        LONG right;
        LONG bottom;
} RECT,*PRECT,*LPRECT;
typedef const RECT *LPCRECT;
typedef struct tagRECTL {
        LONG left;
        LONG top;
        LONG right;
        LONG bottom;
} RECTL,*PRECTL,*LPRECTL;
typedef const RECTL *LPCRECTL;
typedef struct tagPOINT {
        LONG x;
        LONG y;
} POINT,POINTL,*PPOINT,*LPPOINT,*PPOINTL,*LPPOINTL;
typedef struct tagSIZE {
        LONG cx;
        LONG cy;
} SIZE,SIZEL,*PSIZE,*LPSIZE,*PSIZEL,*LPSIZEL;
typedef struct tagPOINTS {
        SHORT x;
        SHORT y;
} POINTS,*PPOINTS,*LPPOINTS;


}
# 49 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/wincon.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/wincon.h" 3



extern "C" {
# 54 "C:/PROGRA~1/WIDEST~1/gcc/include/wincon.h" 3
typedef struct _CHAR_INFO {
        union {
                WCHAR UnicodeChar;
                CHAR AsciiChar;
        } Char;
        WORD Attributes;
} CHAR_INFO,*PCHAR_INFO;
typedef struct _SMALL_RECT {
        SHORT Left;
        SHORT Top;
        SHORT Right;
        SHORT Bottom;
} SMALL_RECT,*PSMALL_RECT;
typedef struct _CONSOLE_CURSOR_INFO {
        DWORD dwSize;
        BOOL bVisible;
} CONSOLE_CURSOR_INFO,*PCONSOLE_CURSOR_INFO;
typedef struct _COORD {
        SHORT X;
        SHORT Y;
} COORD;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
        COORD dwSize;
        COORD dwCursorPosition;
        WORD wAttributes;
        SMALL_RECT srWindow;
        COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO,*PCONSOLE_SCREEN_BUFFER_INFO;
typedef BOOL(__attribute__((__stdcall__)) *PHANDLER_ROUTINE)(DWORD);
typedef struct _KEY_EVENT_RECORD {
        BOOL bKeyDown;
        WORD wRepeatCount;
        WORD wVirtualKeyCode;
        WORD wVirtualScanCode;
        union {
                WCHAR UnicodeChar;
                CHAR AsciiChar;
        } uChar;
        DWORD dwControlKeyState;
}


 __attribute__((packed))

KEY_EVENT_RECORD;

typedef struct _MOUSE_EVENT_RECORD {
        COORD dwMousePosition;
        DWORD dwButtonState;
        DWORD dwControlKeyState;
        DWORD dwEventFlags;
} MOUSE_EVENT_RECORD;
typedef struct _WINDOW_BUFFER_SIZE_RECORD { COORD dwSize; } WINDOW_BUFFER_SIZE_RECORD;
typedef struct _MENU_EVENT_RECORD { UINT dwCommandId; } MENU_EVENT_RECORD,*PMENU_EVENT_RECORD;
typedef struct _FOCUS_EVENT_RECORD { BOOL bSetFocus; } FOCUS_EVENT_RECORD;
typedef struct _INPUT_RECORD {
        WORD EventType;
        union {
                KEY_EVENT_RECORD KeyEvent;
                MOUSE_EVENT_RECORD MouseEvent;
                WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
                MENU_EVENT_RECORD MenuEvent;
                FOCUS_EVENT_RECORD FocusEvent;
        } Event;
} INPUT_RECORD,*PINPUT_RECORD;

BOOL __attribute__((__stdcall__)) AllocConsole(void);
HANDLE __attribute__((__stdcall__)) CreateConsoleScreenBuffer(DWORD,DWORD,const SECURITY_ATTRIBUTES*,DWORD,LPVOID);
BOOL __attribute__((__stdcall__)) FillConsoleOutputAttribute(HANDLE,WORD,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterA(HANDLE,CHAR,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterW(HANDLE,WCHAR,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) FlushConsoleInputBuffer(HANDLE);
BOOL __attribute__((__stdcall__)) FreeConsole(void);
BOOL __attribute__((__stdcall__)) GenerateConsoleCtrlEvent(DWORD,DWORD);
UINT __attribute__((__stdcall__)) GetConsoleCP(void);
BOOL __attribute__((__stdcall__)) GetConsoleCursorInfo(HANDLE,PCONSOLE_CURSOR_INFO);
BOOL __attribute__((__stdcall__)) GetConsoleMode(HANDLE,PDWORD);
UINT __attribute__((__stdcall__)) GetConsoleOutputCP(void);
BOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfo(HANDLE,PCONSOLE_SCREEN_BUFFER_INFO);
DWORD __attribute__((__stdcall__)) GetConsoleTitleA(LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetConsoleTitleW(LPWSTR,DWORD);
COORD __attribute__((__stdcall__)) GetLargestConsoleWindowSize(HANDLE);
BOOL __attribute__((__stdcall__)) GetNumberOfConsoleInputEvents(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetNumberOfConsoleMouseButtons(PDWORD);
BOOL __attribute__((__stdcall__)) PeekConsoleInputA(HANDLE,PINPUT_RECORD,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) PeekConsoleInputW(HANDLE,PINPUT_RECORD,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) ReadConsoleA(HANDLE,PVOID,DWORD,PDWORD,PVOID);
BOOL __attribute__((__stdcall__)) ReadConsoleW(HANDLE,PVOID,DWORD,PDWORD,PVOID);
BOOL __attribute__((__stdcall__)) ReadConsoleInputA(HANDLE,PINPUT_RECORD,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) ReadConsoleInputW(HANDLE,PINPUT_RECORD,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) ReadConsoleOutputAttribute(HANDLE,LPWORD,DWORD,COORD,LPDWORD);
BOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterA(HANDLE,LPSTR,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterW(HANDLE,LPWSTR,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) ReadConsoleOutputA(HANDLE,PCHAR_INFO,COORD,COORD,PSMALL_RECT);
BOOL __attribute__((__stdcall__)) ReadConsoleOutputW(HANDLE,PCHAR_INFO,COORD,COORD,PSMALL_RECT);
BOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferA(HANDLE,const SMALL_RECT*,const SMALL_RECT*,COORD,const CHAR_INFO*);
BOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferW(HANDLE,const SMALL_RECT*,const SMALL_RECT*,COORD,const CHAR_INFO*);
BOOL __attribute__((__stdcall__)) SetConsoleActiveScreenBuffer(HANDLE);
BOOL __attribute__((__stdcall__)) SetConsoleCP(UINT);
BOOL __attribute__((__stdcall__)) SetConsoleCtrlHandler(PHANDLER_ROUTINE,BOOL);
BOOL __attribute__((__stdcall__)) SetConsoleCursorInfo(HANDLE,const CONSOLE_CURSOR_INFO*);
BOOL __attribute__((__stdcall__)) SetConsoleCursorPosition(HANDLE,COORD);
BOOL __attribute__((__stdcall__)) SetConsoleMode(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetConsoleOutputCP(UINT);
BOOL __attribute__((__stdcall__)) SetConsoleScreenBufferSize(HANDLE,COORD);
BOOL __attribute__((__stdcall__)) SetConsoleTextAttribute(HANDLE,WORD);
BOOL __attribute__((__stdcall__)) SetConsoleTitleA(LPCSTR);
BOOL __attribute__((__stdcall__)) SetConsoleTitleW(LPCWSTR);
BOOL __attribute__((__stdcall__)) SetConsoleWindowInfo(HANDLE,BOOL,const SMALL_RECT*);
BOOL __attribute__((__stdcall__)) WriteConsoleA(HANDLE,PCVOID,DWORD,PDWORD,PVOID);
BOOL __attribute__((__stdcall__)) WriteConsoleW(HANDLE,PCVOID,DWORD,PDWORD,PVOID);
BOOL __attribute__((__stdcall__)) WriteConsoleInputA(HANDLE,const INPUT_RECORD*,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) WriteConsoleInputW(HANDLE,const INPUT_RECORD*,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) WriteConsoleOutputA(HANDLE,const CHAR_INFO*,COORD,COORD,PSMALL_RECT);
BOOL __attribute__((__stdcall__)) WriteConsoleOutputW(HANDLE,const CHAR_INFO*,COORD,COORD,PSMALL_RECT);
BOOL __attribute__((__stdcall__)) WriteConsoleOutputAttribute(HANDLE,const WORD*,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterA(HANDLE,LPCSTR,DWORD,COORD,PDWORD);
BOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterW(HANDLE,LPCWSTR,DWORD,COORD,PDWORD);
# 204 "C:/PROGRA~1/WIDEST~1/gcc/include/wincon.h" 3
}
# 50 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/basetyps.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/basetyps.h" 3
# 96 "C:/PROGRA~1/WIDEST~1/gcc/include/basetyps.h" 3
typedef GUID UUID;

typedef GUID IID;
typedef GUID CLSID;
typedef CLSID *LPCLSID;
typedef IID *LPIID;
typedef IID *REFIID;
typedef CLSID *REFCLSID;
typedef GUID FMTID;
typedef FMTID *REFFMTID;
typedef unsigned long error_status_t;

typedef unsigned long PROPID;
# 51 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winbase.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winbase.h" 3






extern "C" {
# 509 "C:/PROGRA~1/WIDEST~1/gcc/include/winbase.h" 3
typedef struct _FILETIME {
        DWORD dwLowDateTime;
        DWORD dwHighDateTime;
} FILETIME,*PFILETIME,*LPFILETIME;
typedef struct _BY_HANDLE_FILE_INFORMATION {
        DWORD dwFileAttributes;
        FILETIME ftCreationTime;
        FILETIME ftLastAccessTime;
        FILETIME ftLastWriteTime;
        DWORD dwVolumeSerialNumber;
        DWORD nFileSizeHigh;
        DWORD nFileSizeLow;
        DWORD nNumberOfLinks;
        DWORD nFileIndexHigh;
        DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION,*LPBY_HANDLE_FILE_INFORMATION;
typedef struct _DCB {
        DWORD DCBlength;
        DWORD BaudRate;
        DWORD fBinary:1;
        DWORD fParity:1;
        DWORD fOutxCtsFlow:1;
        DWORD fOutxDsrFlow:1;
        DWORD fDtrControl:2;
        DWORD fDsrSensitivity:1;
        DWORD fTXContinueOnXoff:1;
        DWORD fOutX:1;
        DWORD fInX:1;
        DWORD fErrorChar:1;
        DWORD fNull:1;
        DWORD fRtsControl:2;
        DWORD fAbortOnError:1;
        DWORD fDummy2:17;
        WORD wReserved;
        WORD XonLim;
        WORD XoffLim;
        BYTE ByteSize;
        BYTE Parity;
        BYTE StopBits;
        char XonChar;
        char XoffChar;
        char ErrorChar;
        char EofChar;
        char EvtChar;
        WORD wReserved1;
} DCB,*LPDCB;
typedef struct _COMM_CONFIG {
        DWORD dwSize;
        WORD wVersion;
        WORD wReserved;
        DCB dcb;
        DWORD dwProviderSubType;
        DWORD dwProviderOffset;
        DWORD dwProviderSize;
        WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;
typedef struct _COMMPROP {
        WORD wPacketLength;
        WORD wPacketVersion;
        DWORD dwServiceMask;
        DWORD dwReserved1;
        DWORD dwMaxTxQueue;
        DWORD dwMaxRxQueue;
        DWORD dwMaxBaud;
        DWORD dwProvSubType;
        DWORD dwProvCapabilities;
        DWORD dwSettableParams;
        DWORD dwSettableBaud;
        WORD wSettableData;
        WORD wSettableStopParity;
        DWORD dwCurrentTxQueue;
        DWORD dwCurrentRxQueue;
        DWORD dwProvSpec1;
        DWORD dwProvSpec2;
        WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;
typedef struct _COMMTIMEOUTS {
        DWORD ReadIntervalTimeout;
        DWORD ReadTotalTimeoutMultiplier;
        DWORD ReadTotalTimeoutConstant;
        DWORD WriteTotalTimeoutMultiplier;
        DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;
typedef struct _COMSTAT {
        DWORD fCtsHold:1;
        DWORD fDsrHold:1;
        DWORD fRlsdHold:1;
        DWORD fXoffHold:1;
        DWORD fXoffSent:1;
        DWORD fEof:1;
        DWORD fTxim:1;
        DWORD fReserved:25;
        DWORD cbInQue;
        DWORD cbOutQue;
} COMSTAT,*LPCOMSTAT;
typedef DWORD (__attribute__((__stdcall__)) *LPTHREAD_START_ROUTINE)(LPVOID);
typedef struct _CREATE_PROCESS_DEBUG_INFO {
        HANDLE hFile;
        HANDLE hProcess;
        HANDLE hThread;
        LPVOID lpBaseOfImage;
        DWORD dwDebugInfoFileOffset;
        DWORD nDebugInfoSize;
        LPVOID lpThreadLocalBase;
        LPTHREAD_START_ROUTINE lpStartAddress;
        LPVOID lpImageName;
        WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO,*LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO {
        HANDLE hThread;
        LPVOID lpThreadLocalBase;
        LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO,*LPCREATE_THREAD_DEBUG_INFO;
typedef struct _EXCEPTION_DEBUG_INFO {
        EXCEPTION_RECORD ExceptionRecord;
        DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO,*LPEXCEPTION_DEBUG_INFO;
typedef struct _EXIT_THREAD_DEBUG_INFO {
        DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO,*LPEXIT_THREAD_DEBUG_INFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO {
        DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO,*LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _LOAD_DLL_DEBUG_INFO {
        HANDLE hFile;
        LPVOID lpBaseOfDll;
        DWORD dwDebugInfoFileOffset;
        DWORD nDebugInfoSize;
        LPVOID lpImageName;
        WORD fUnicode;
} LOAD_DLL_DEBUG_INFO,*LPLOAD_DLL_DEBUG_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO {
        LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO,*LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO {
        LPSTR lpDebugStringData;
        WORD fUnicode;
        WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO,*LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _RIP_INFO {
        DWORD dwError;
        DWORD dwType;
} RIP_INFO,*LPRIP_INFO;
typedef struct _DEBUG_EVENT {
        DWORD dwDebugEventCode;
        DWORD dwProcessId;
        DWORD dwThreadId;
        union {
                EXCEPTION_DEBUG_INFO Exception;
                CREATE_THREAD_DEBUG_INFO CreateThread;
                CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
                EXIT_THREAD_DEBUG_INFO ExitThread;
                EXIT_PROCESS_DEBUG_INFO ExitProcess;
                LOAD_DLL_DEBUG_INFO LoadDll;
                UNLOAD_DLL_DEBUG_INFO UnloadDll;
                OUTPUT_DEBUG_STRING_INFO DebugString;
                RIP_INFO RipInfo;
        } u;
} DEBUG_EVENT,*LPDEBUG_EVENT;
typedef struct _OVERLAPPED {
        DWORD Internal;
        DWORD InternalHigh;
        DWORD Offset;
        DWORD OffsetHigh;
        HANDLE hEvent;
} OVERLAPPED,*POVERLAPPED,*LPOVERLAPPED;
typedef struct _STARTUPINFOA {
        DWORD cb;
        LPSTR lpReserved;
        LPSTR lpDesktop;
        LPSTR lpTitle;
        DWORD dwX;
        DWORD dwY;
        DWORD dwXSize;
        DWORD dwYSize;
        DWORD dwXCountChars;
        DWORD dwYCountChars;
        DWORD dwFillAttribute;
        DWORD dwFlags;
        WORD wShowWindow;
        WORD cbReserved2;
        PBYTE lpReserved2;
        HANDLE hStdInput;
        HANDLE hStdOutput;
        HANDLE hStdError;
} STARTUPINFOA,*LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
        DWORD cb;
        LPWSTR lpReserved;
        LPWSTR lpDesktop;
        LPWSTR lpTitle;
        DWORD dwX;
        DWORD dwY;
        DWORD dwXSize;
        DWORD dwYSize;
        DWORD dwXCountChars;
        DWORD dwYCountChars;
        DWORD dwFillAttribute;
        DWORD dwFlags;
        WORD wShowWindow;
        WORD cbReserved2;
        PBYTE lpReserved2;
        HANDLE hStdInput;
        HANDLE hStdOutput;
        HANDLE hStdError;
} STARTUPINFOW,*LPSTARTUPINFOW;
typedef struct _PROCESS_INFORMATION {
        HANDLE hProcess;
        HANDLE hThread;
        DWORD dwProcessId;
        DWORD dwThreadId;
} PROCESS_INFORMATION,*LPPROCESS_INFORMATION;
typedef struct _CRITICAL_SECTION_DEBUG {
        WORD Type;
        WORD CreatorBackTraceIndex;
        struct _CRITICAL_SECTION *CriticalSection;
        LIST_ENTRY ProcessLocksList;
        DWORD EntryCount;
        DWORD ContentionCount;
        DWORD Spare [2];
} CRITICAL_SECTION_DEBUG,*PCRITICAL_SECTION_DEBUG;
typedef struct _CRITICAL_SECTION {
        PCRITICAL_SECTION_DEBUG DebugInfo;
        LONG LockCount;
        LONG RecursionCount;
        HANDLE OwningThread;
        HANDLE LockSemaphore;
        DWORD SpinCount;
} CRITICAL_SECTION,*PCRITICAL_SECTION,*LPCRITICAL_SECTION;
typedef struct _SYSTEMTIME {
        WORD wYear;
        WORD wMonth;
        WORD wDayOfWeek;
        WORD wDay;
        WORD wHour;
        WORD wMinute;
        WORD wSecond;
        WORD wMilliseconds;
} SYSTEMTIME,*LPSYSTEMTIME;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
        DWORD dwFileAttributes;
        FILETIME ftCreationTime;
        FILETIME ftLastAccessTime;
        FILETIME ftLastWriteTime;
        DWORD nFileSizeHigh;
        DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA,*LPWIN32_FILE_ATTRIBUTE_DATA;
typedef struct _WIN32_FIND_DATAA {
        DWORD dwFileAttributes;
        FILETIME ftCreationTime;
        FILETIME ftLastAccessTime;
        FILETIME ftLastWriteTime;
        DWORD nFileSizeHigh;
        DWORD nFileSizeLow;
        DWORD dwReserved0;
        DWORD dwReserved1;
        CHAR cFileName[260];
        CHAR cAlternateFileName[14];
} WIN32_FIND_DATAA,*LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
        DWORD dwFileAttributes;
        FILETIME ftCreationTime;
        FILETIME ftLastAccessTime;
        FILETIME ftLastWriteTime;
        DWORD nFileSizeHigh;
        DWORD nFileSizeLow;
        DWORD dwReserved0;
        DWORD dwReserved1;
        WCHAR cFileName[260];
        WCHAR cAlternateFileName[14];
} WIN32_FIND_DATAW,*LPWIN32_FIND_DATAW;
typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId;
        DWORD dwStreamAttributes;
        LARGE_INTEGER Size;
        DWORD dwStreamNameSize;
        WCHAR cStreamName[1];
} WIN32_STREAM_ID;
typedef enum _FINDEX_INFO_LEVELS {
        FindExInfoStandard,
        FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS {
        FindExSearchNameMatch,
        FindExSearchLimitToDirectories,
        FindExSearchLimitToDevices,
        FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
typedef enum _ACL_INFORMATION_CLASS {
        AclRevisionInformation=1,
        AclSizeInformation
} ACL_INFORMATION_CLASS;
typedef struct tagHW_PROFILE_INFOA {
        DWORD dwDockInfo;
        CHAR szHwProfileGuid[39];
        CHAR szHwProfileName[80];
} HW_PROFILE_INFOA,*LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
        DWORD dwDockInfo;
        WCHAR szHwProfileGuid[39];
        WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW,*LPHW_PROFILE_INFOW;
typedef enum _GET_FILEEX_INFO_LEVELS {
        GetFileExInfoStandard,
        GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;
typedef struct _SYSTEM_INFO {
        __extension__ union {
                DWORD dwOemId;
                __extension__ struct {
                        WORD wProcessorArchitecture;
                        WORD wReserved;
                } ;
        } ;
        DWORD dwPageSize;
        PVOID lpMinimumApplicationAddress;
        PVOID lpMaximumApplicationAddress;
        DWORD dwActiveProcessorMask;
        DWORD dwNumberOfProcessors;
        DWORD dwProcessorType;
        DWORD dwAllocationGranularity;
        WORD wProcessorLevel;
        WORD wProcessorRevision;
} SYSTEM_INFO,*LPSYSTEM_INFO;
typedef struct _SYSTEM_POWER_STATUS {
        BYTE ACLineStatus;
        BYTE BatteryFlag;
        BYTE BatteryLifePercent;
        BYTE Reserved1;
        DWORD BatteryLifeTime;
        DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS,*LPSYSTEM_POWER_STATUS;
typedef struct _TIME_ZONE_INFORMATION {
        LONG Bias;
        WCHAR StandardName[32];
        SYSTEMTIME StandardDate;
        LONG StandardBias;
        WCHAR DaylightName[32];
        SYSTEMTIME DaylightDate;
        LONG DaylightBias;
} TIME_ZONE_INFORMATION,*LPTIME_ZONE_INFORMATION;
typedef struct _MEMORYSTATUS {
        DWORD dwLength;
        DWORD dwMemoryLoad;
        DWORD dwTotalPhys;
        DWORD dwAvailPhys;
        DWORD dwTotalPageFile;
        DWORD dwAvailPageFile;
        DWORD dwTotalVirtual;
        DWORD dwAvailVirtual;
} MEMORYSTATUS,*LPMEMORYSTATUS;
typedef struct _LDT_ENTRY {
        WORD LimitLow;
        WORD BaseLow;
        union {
                struct {
                        BYTE BaseMid;
                        BYTE Flags1;
                        BYTE Flags2;
                        BYTE BaseHi;
                } Bytes;
                struct {
                        DWORD BaseMid:8;
                        DWORD Type:5;
                        DWORD Dpl:2;
                        DWORD Pres:1;
                        DWORD LimitHi:4;
                        DWORD Sys:1;
                        DWORD Reserved_0:1;
                        DWORD Default_Big:1;
                        DWORD Granularity:1;
                        DWORD BaseHi:8;
                } Bits;
        } HighWord;
} LDT_ENTRY,*PLDT_ENTRY,*LPLDT_ENTRY;
typedef struct _PROCESS_HEAP_ENTRY {
        PVOID lpData;
        DWORD cbData;
        BYTE cbOverhead;
        BYTE iRegionIndex;
        WORD wFlags;
        __extension__ union {
                struct {
                        HANDLE hMem;
                        DWORD dwReserved[3];
                } Block;
                struct {
                        DWORD dwCommittedSize;
                        DWORD dwUnCommittedSize;
                        LPVOID lpFirstBlock;
                        LPVOID lpLastBlock;
                } Region;
        } ;
} PROCESS_HEAP_ENTRY,*LPPROCESS_HEAP_ENTRY;
typedef struct _OFSTRUCT {
        BYTE cBytes;
        BYTE fFixedDisk;
        WORD nErrCode;
        WORD Reserved1;
        WORD Reserved2;
        CHAR szPathName[128];
} OFSTRUCT,*LPOFSTRUCT,*POFSTRUCT;
typedef struct _WIN_CERTIFICATE {
      DWORD dwLength;
      WORD wRevision;
      WORD wCertificateType;
      BYTE bCertificate[1];
} WIN_CERTIFICATE, *LPWIN_CERTIFICATE;

typedef DWORD(__attribute__((__stdcall__)) *LPPROGRESS_ROUTINE)(LARGE_INTEGER,LARGE_INTEGER,LARGE_INTEGER,LARGE_INTEGER,DWORD,DWORD,HANDLE,HANDLE,LPVOID);
typedef void(__attribute__((__stdcall__)) *LPFIBER_START_ROUTINE)(PVOID);
typedef BOOL(__attribute__((__stdcall__)) *ENUMRESLANGPROC)(HMODULE,LPCTSTR,LPCTSTR,WORD,LONG);
typedef BOOL(__attribute__((__stdcall__)) *ENUMRESNAMEPROC)(HMODULE,LPCTSTR,LPTSTR,LONG);
typedef BOOL(__attribute__((__stdcall__)) *ENUMRESTYPEPROC)(HMODULE,LPTSTR,LONG);
typedef void(__attribute__((__stdcall__)) *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD,DWORD,LPOVERLAPPED);
typedef LONG(__attribute__((__stdcall__)) *PTOP_LEVEL_EXCEPTION_FILTER)(LPEXCEPTION_POINTERS);
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef void(__attribute__((__stdcall__)) *PAPCFUNC)(DWORD);
typedef void(__attribute__((__stdcall__)) *PTIMERAPCROUTINE)(PVOID,DWORD,DWORD);



int __attribute__((__stdcall__)) WinMain(HINSTANCE,HINSTANCE,LPSTR,int);



int __attribute__((__stdcall__)) wWinMain(HINSTANCE,HINSTANCE,LPWSTR,int);
long __attribute__((__stdcall__)) _hread(HFILE,LPVOID,long);
long __attribute__((__stdcall__)) _hwrite(HFILE,LPCSTR,long);
HFILE __attribute__((__stdcall__)) _lclose(HFILE);
HFILE __attribute__((__stdcall__)) _lcreat(LPCSTR,int);
LONG __attribute__((__stdcall__)) _llseek(HFILE,LONG,int);
HFILE __attribute__((__stdcall__)) _lopen(LPCSTR,int);
UINT __attribute__((__stdcall__)) _lread(HFILE,LPVOID,UINT);
UINT __attribute__((__stdcall__)) _lwrite(HFILE,LPCSTR,UINT);

BOOL __attribute__((__stdcall__)) AccessCheck(PSECURITY_DESCRIPTOR,HANDLE,DWORD,PGENERIC_MAPPING,PPRIVILEGE_SET,PDWORD,PDWORD,PBOOL);
BOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmA(LPCSTR,LPVOID,LPSTR,LPSTR,PSECURITY_DESCRIPTOR,DWORD,PGENERIC_MAPPING,BOOL,PDWORD,PBOOL,PBOOL);
BOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmW(LPCWSTR,LPVOID,LPWSTR,LPWSTR,PSECURITY_DESCRIPTOR,DWORD,PGENERIC_MAPPING,BOOL,PDWORD,PBOOL,PBOOL);
BOOL __attribute__((__stdcall__)) AddAccessAllowedAce(PACL,DWORD,DWORD,PSID);
BOOL __attribute__((__stdcall__)) AddAccessDeniedAce(PACL,DWORD,DWORD,PSID);




BOOL __attribute__((__stdcall__)) AddAce(PACL,DWORD,DWORD,PVOID,DWORD);
ATOM __attribute__((__stdcall__)) AddAtomA(LPCSTR);
ATOM __attribute__((__stdcall__)) AddAtomW(LPCWSTR);
BOOL __attribute__((__stdcall__)) AddAuditAccessAce(PACL,DWORD,DWORD,PSID,BOOL,BOOL);
BOOL __attribute__((__stdcall__)) AdjustTokenGroups(HANDLE,BOOL,PTOKEN_GROUPS,DWORD,PTOKEN_GROUPS,PDWORD);
BOOL __attribute__((__stdcall__)) AdjustTokenPrivileges(HANDLE,BOOL,PTOKEN_PRIVILEGES,DWORD,PTOKEN_PRIVILEGES,PDWORD);
BOOL __attribute__((__stdcall__)) AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY,BYTE,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,PSID*);
BOOL __attribute__((__stdcall__)) AllocateLocallyUniqueId(PLUID);
BOOL __attribute__((__stdcall__)) AreAllAccessesGranted(DWORD,DWORD);
BOOL __attribute__((__stdcall__)) AreAnyAccessesGranted(DWORD,DWORD);
BOOL __attribute__((__stdcall__)) AreFileApisANSI(void);
BOOL __attribute__((__stdcall__)) BackupEventLogA(HANDLE,LPCSTR);
BOOL __attribute__((__stdcall__)) BackupEventLogW(HANDLE,LPCWSTR);
BOOL __attribute__((__stdcall__)) BackupRead(HANDLE,LPBYTE,DWORD,LPDWORD,BOOL,BOOL,LPVOID*);
BOOL __attribute__((__stdcall__)) BackupSeek(HANDLE,DWORD,DWORD,LPDWORD,LPDWORD,LPVOID*);
BOOL __attribute__((__stdcall__)) BackupWrite(HANDLE,LPBYTE,DWORD,LPDWORD,BOOL,BOOL,LPVOID*);
BOOL __attribute__((__stdcall__)) Beep(DWORD,DWORD);
HANDLE __attribute__((__stdcall__)) BeginUpdateResourceA(LPCSTR,BOOL);
HANDLE __attribute__((__stdcall__)) BeginUpdateResourceW(LPCWSTR,BOOL);
BOOL __attribute__((__stdcall__)) BuildCommDCBA(LPCSTR,LPDCB);
BOOL __attribute__((__stdcall__)) BuildCommDCBW(LPCWSTR,LPDCB);
BOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsA(LPCSTR,LPDCB,LPCOMMTIMEOUTS);
BOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsW(LPCWSTR,LPDCB,LPCOMMTIMEOUTS);
BOOL __attribute__((__stdcall__)) CallNamedPipeA(LPCSTR,PVOID,DWORD,PVOID,DWORD,PDWORD,DWORD);
BOOL __attribute__((__stdcall__)) CallNamedPipeW(LPCWSTR,PVOID,DWORD,PVOID,DWORD,PDWORD,DWORD);
BOOL __attribute__((__stdcall__)) CancelIo(HANDLE);
BOOL __attribute__((__stdcall__)) CancelWaitableTimer(HANDLE);
BOOL __attribute__((__stdcall__)) ClearCommBreak(HANDLE);
BOOL __attribute__((__stdcall__)) ClearCommError(HANDLE,PDWORD,LPCOMSTAT);
BOOL __attribute__((__stdcall__)) ClearEventLogA(HANDLE,LPCSTR);
BOOL __attribute__((__stdcall__)) ClearEventLogW(HANDLE,LPCWSTR);
BOOL __attribute__((__stdcall__)) CloseEventLog(HANDLE);
BOOL __attribute__((__stdcall__)) CloseHandle(HANDLE);
BOOL __attribute__((__stdcall__)) CommConfigDialogA(LPCSTR,HWND,LPCOMMCONFIG);
BOOL __attribute__((__stdcall__)) CommConfigDialogW(LPCWSTR,HWND,LPCOMMCONFIG);
LONG __attribute__((__stdcall__)) CompareFileTime(const FILETIME*,const FILETIME*);
BOOL __attribute__((__stdcall__)) ConnectNamedPipe(HANDLE,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) ContinueDebugEvent(DWORD,DWORD,DWORD);
PVOID __attribute__((__stdcall__)) ConvertThreadToFiber(PVOID);
BOOL __attribute__((__stdcall__)) CopyFileA(LPCSTR,LPCSTR,BOOL);
BOOL __attribute__((__stdcall__)) CopyFileW(LPCWSTR,LPCWSTR,BOOL);
BOOL __attribute__((__stdcall__)) CopyFileExA(LPCSTR,LPCSTR,LPPROGRESS_ROUTINE,LPVOID,LPBOOL,DWORD);
BOOL __attribute__((__stdcall__)) CopyFileExW(LPCWSTR,LPCWSTR,LPPROGRESS_ROUTINE,LPVOID,LPBOOL,DWORD);
# 1005 "C:/PROGRA~1/WIDEST~1/gcc/include/winbase.h" 3
BOOL __attribute__((__stdcall__)) CopySid(DWORD,PSID,PSID);
BOOL __attribute__((__stdcall__)) CreateDirectoryA(LPCSTR,LPSECURITY_ATTRIBUTES);
BOOL __attribute__((__stdcall__)) CreateDirectoryW(LPCWSTR,LPSECURITY_ATTRIBUTES);
BOOL __attribute__((__stdcall__)) CreateDirectoryExA(LPCSTR,LPCSTR,LPSECURITY_ATTRIBUTES);
BOOL __attribute__((__stdcall__)) CreateDirectoryExW(LPCWSTR,LPCWSTR,LPSECURITY_ATTRIBUTES);
HANDLE __attribute__((__stdcall__)) CreateEventA(LPSECURITY_ATTRIBUTES,BOOL,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) CreateEventW(LPSECURITY_ATTRIBUTES,BOOL,BOOL,LPCWSTR);
LPVOID __attribute__((__stdcall__)) CreateFiber(DWORD,LPFIBER_START_ROUTINE,LPVOID);
HANDLE __attribute__((__stdcall__)) CreateFileA(LPCSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);
HANDLE __attribute__((__stdcall__)) CreateFileW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);
HANDLE __attribute__((__stdcall__)) CreateFileMappingA(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCSTR);
HANDLE __attribute__((__stdcall__)) CreateFileMappingW(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCWSTR);
HANDLE __attribute__((__stdcall__)) CreateHardLinkA(LPCSTR,LPCSTR,LPSECURITY_ATTRIBUTES);
HANDLE __attribute__((__stdcall__)) CreateHardLinkW(LPCWSTR,LPCWSTR,LPSECURITY_ATTRIBUTES);
HANDLE __attribute__((__stdcall__)) CreateIoCompletionPort(HANDLE,HANDLE,DWORD,DWORD);
HANDLE __attribute__((__stdcall__)) CreateMailslotA(LPCSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
HANDLE __attribute__((__stdcall__)) CreateMailslotW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
HANDLE __attribute__((__stdcall__)) CreateMutexA(LPSECURITY_ATTRIBUTES,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) CreateMutexW(LPSECURITY_ATTRIBUTES,BOOL,LPCWSTR);
HANDLE __attribute__((__stdcall__)) CreateNamedPipeA(LPCSTR,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
HANDLE __attribute__((__stdcall__)) CreateNamedPipeW(LPCWSTR,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
BOOL __attribute__((__stdcall__)) CreatePipe(PHANDLE,PHANDLE,LPSECURITY_ATTRIBUTES,DWORD);
BOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,BOOL,HANDLE,PGENERIC_MAPPING);
BOOL __attribute__((__stdcall__)) CreateProcessA(LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,PVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION);
BOOL __attribute__((__stdcall__)) CreateProcessW(LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,PVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);
BOOL __attribute__((__stdcall__)) CreateProcessAsUserA(HANDLE,LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,PVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION);
BOOL __attribute__((__stdcall__)) CreateProcessAsUserW(HANDLE,LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,PVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);
HANDLE __attribute__((__stdcall__)) CreateRemoteThread(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD);
HANDLE __attribute__((__stdcall__)) CreateSemaphoreA(LPSECURITY_ATTRIBUTES,LONG,LONG,LPCSTR);
HANDLE __attribute__((__stdcall__)) CreateSemaphoreW(LPSECURITY_ATTRIBUTES,LONG,LONG,LPCWSTR);
DWORD __attribute__((__stdcall__)) CreateTapePartition(HANDLE,DWORD,DWORD,DWORD);
HANDLE __attribute__((__stdcall__)) CreateThread(LPSECURITY_ATTRIBUTES,DWORD,LPTHREAD_START_ROUTINE,PVOID,DWORD,PDWORD);
HANDLE __attribute__((__stdcall__)) CreateWaitableTimerA(LPSECURITY_ATTRIBUTES,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) CreateWaitableTimerW(LPSECURITY_ATTRIBUTES,BOOL,LPCWSTR);
BOOL __attribute__((__stdcall__)) DebugActiveProcess(DWORD);
void __attribute__((__stdcall__)) DebugBreak(void);
BOOL __attribute__((__stdcall__)) DefineDosDeviceA(DWORD,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) DefineDosDeviceW(DWORD,LPCWSTR,LPCWSTR);

BOOL __attribute__((__stdcall__)) DeleteAce(PACL,DWORD);
ATOM __attribute__((__stdcall__)) DeleteAtom(ATOM);
void __attribute__((__stdcall__)) DeleteCriticalSection(PCRITICAL_SECTION);
void __attribute__((__stdcall__)) DeleteFiber(PVOID);
BOOL __attribute__((__stdcall__)) DeleteFileA(LPCSTR);
BOOL __attribute__((__stdcall__)) DeleteFileW(LPCWSTR);
BOOL __attribute__((__stdcall__)) DeregisterEventSource(HANDLE);
BOOL __attribute__((__stdcall__)) DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR*);
BOOL __attribute__((__stdcall__)) DeviceIoControl(HANDLE,DWORD,PVOID,DWORD,PVOID,DWORD,PDWORD,POVERLAPPED);
BOOL __attribute__((__stdcall__)) DisableThreadLibraryCalls(HMODULE);
BOOL __attribute__((__stdcall__)) DisconnectNamedPipe(HANDLE);
BOOL __attribute__((__stdcall__)) DosDateTimeToFileTime(WORD,WORD,LPFILETIME);
BOOL __attribute__((__stdcall__)) DuplicateHandle(HANDLE,HANDLE,HANDLE,PHANDLE,DWORD,BOOL,DWORD);
BOOL __attribute__((__stdcall__)) DuplicateToken(HANDLE,SECURITY_IMPERSONATION_LEVEL,PHANDLE);
BOOL __attribute__((__stdcall__)) DuplicateTokenEx(HANDLE,DWORD,LPSECURITY_ATTRIBUTES,SECURITY_IMPERSONATION_LEVEL,TOKEN_TYPE,PHANDLE);
BOOL __attribute__((__stdcall__)) EncryptFileA(LPCSTR);
BOOL __attribute__((__stdcall__)) EncryptFileW(LPCWSTR);
BOOL __attribute__((__stdcall__)) EndUpdateResourceA(HANDLE,BOOL);
BOOL __attribute__((__stdcall__)) EndUpdateResourceW(HANDLE,BOOL);
void __attribute__((__stdcall__)) EnterCriticalSection(LPCRITICAL_SECTION);
BOOL __attribute__((__stdcall__)) EnumResourceLanguagesA(HINSTANCE,LPCSTR,LPCSTR,ENUMRESLANGPROC,LONG);
BOOL __attribute__((__stdcall__)) EnumResourceLanguagesW(HINSTANCE,LPCWSTR,LPCWSTR,ENUMRESLANGPROC,LONG);
BOOL __attribute__((__stdcall__)) EnumResourceNamesA(HINSTANCE,LPCSTR,ENUMRESNAMEPROC,LONG);
BOOL __attribute__((__stdcall__)) EnumResourceNamesW(HINSTANCE,LPCWSTR,ENUMRESNAMEPROC,LONG);
BOOL __attribute__((__stdcall__)) EnumResourceTypesA(HINSTANCE,ENUMRESTYPEPROC,LONG);
BOOL __attribute__((__stdcall__)) EnumResourceTypesW(HINSTANCE,ENUMRESTYPEPROC,LONG);
BOOL __attribute__((__stdcall__)) EqualPrefixSid(PSID,PSID);
BOOL __attribute__((__stdcall__)) EqualSid(PSID,PSID);
DWORD __attribute__((__stdcall__)) EraseTape(HANDLE,DWORD,BOOL);
BOOL __attribute__((__stdcall__)) EscapeCommFunction(HANDLE,DWORD);
__attribute__((noreturn)) void __attribute__((__stdcall__)) ExitProcess(UINT);
__attribute__((noreturn)) void __attribute__((__stdcall__)) ExitThread(DWORD);
DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsA(LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsW(LPCWSTR,LPWSTR,DWORD);
void __attribute__((__stdcall__)) FatalAppExitA(UINT,LPCSTR);
void __attribute__((__stdcall__)) FatalAppExitW(UINT,LPCWSTR);
void __attribute__((__stdcall__)) FatalExit(int);
BOOL __attribute__((__stdcall__)) FileEncryptionStatusA(LPCSTR,LPDWORD);
BOOL __attribute__((__stdcall__)) FileEncryptionStatusW(LPCWSTR,LPDWORD);
BOOL __attribute__((__stdcall__)) FileTimeToDosDateTime(const FILETIME *,LPWORD,LPWORD);
BOOL __attribute__((__stdcall__)) FileTimeToLocalFileTime(const FILETIME *,LPFILETIME);
BOOL __attribute__((__stdcall__)) FileTimeToSystemTime(const FILETIME *,LPSYSTEMTIME);
ATOM __attribute__((__stdcall__)) FindAtomA(LPCSTR);
ATOM __attribute__((__stdcall__)) FindAtomW(LPCWSTR);
BOOL __attribute__((__stdcall__)) FindClose(HANDLE);
BOOL __attribute__((__stdcall__)) FindCloseChangeNotification(HANDLE);
HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationA(LPCSTR,BOOL,DWORD);
HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationW(LPCWSTR,BOOL,DWORD);
HANDLE __attribute__((__stdcall__)) FindFirstFileA(LPCSTR,LPWIN32_FIND_DATAA);
HANDLE __attribute__((__stdcall__)) FindFirstFileW(LPCWSTR,LPWIN32_FIND_DATAW);
HANDLE __attribute__((__stdcall__)) FindFirstFileExA(LPCSTR,FINDEX_INFO_LEVELS,PVOID,FINDEX_SEARCH_OPS,PVOID,DWORD);
HANDLE __attribute__((__stdcall__)) FindFirstFileExW(LPCWSTR,FINDEX_INFO_LEVELS,PVOID,FINDEX_SEARCH_OPS,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) FindFirstFreeAce(PACL,PVOID*);
BOOL __attribute__((__stdcall__)) FindNextChangeNotification(HANDLE);
BOOL __attribute__((__stdcall__)) FindNextFileA(HANDLE,LPWIN32_FIND_DATAA);
BOOL __attribute__((__stdcall__)) FindNextFileW(HANDLE,LPWIN32_FIND_DATAW);
HRSRC __attribute__((__stdcall__)) FindResourceA(HMODULE,LPCSTR,LPCSTR);
HRSRC __attribute__((__stdcall__)) FindResourceW(HINSTANCE,LPCWSTR,LPCWSTR);
HRSRC __attribute__((__stdcall__)) FindResourceExA(HINSTANCE,LPCSTR,LPCSTR,WORD);
HRSRC __attribute__((__stdcall__)) FindResourceExW(HINSTANCE,LPCWSTR,LPCWSTR,WORD);
BOOL __attribute__((__stdcall__)) FlushFileBuffers(HANDLE);
BOOL __attribute__((__stdcall__)) FlushInstructionCache(HANDLE,PCVOID,DWORD);
BOOL __attribute__((__stdcall__)) FlushViewOfFile(PCVOID,DWORD);
DWORD __attribute__((__stdcall__)) FormatMessageA(DWORD,PCVOID,DWORD,DWORD,LPSTR,DWORD,va_list*);
DWORD __attribute__((__stdcall__)) FormatMessageW(DWORD,PCVOID,DWORD,DWORD,LPWSTR,DWORD,va_list*);
BOOL __attribute__((__stdcall__)) FreeEnvironmentStringsA(LPSTR);
BOOL __attribute__((__stdcall__)) FreeEnvironmentStringsW(LPWSTR);
BOOL __attribute__((__stdcall__)) FreeLibrary(HMODULE);
__attribute__((noreturn)) void __attribute__((__stdcall__)) FreeLibraryAndExitThread(HMODULE,DWORD);



BOOL __attribute__((__stdcall__)) FreeResource(HGLOBAL);

PVOID __attribute__((__stdcall__)) FreeSid(PSID);
BOOL __attribute__((__stdcall__)) GetAce(PACL,DWORD,LPVOID*);
BOOL __attribute__((__stdcall__)) GetAclInformation(PACL,PVOID,DWORD,ACL_INFORMATION_CLASS);
UINT __attribute__((__stdcall__)) GetAtomNameA(ATOM,LPSTR,int);
UINT __attribute__((__stdcall__)) GetAtomNameW(ATOM,LPWSTR,int);
BOOL __attribute__((__stdcall__)) GetBinaryTypeA(LPCSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetBinaryTypeW(LPCWSTR,PDWORD);
LPSTR __attribute__((__stdcall__)) GetCommandLineA(void);
LPWSTR __attribute__((__stdcall__)) GetCommandLineW(void);
BOOL __attribute__((__stdcall__)) GetCommConfig(HANDLE,LPCOMMCONFIG,PDWORD);
BOOL __attribute__((__stdcall__)) GetCommMask(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetCommModemStatus(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetCommProperties(HANDLE,LPCOMMPROP);
BOOL __attribute__((__stdcall__)) GetCommState(HANDLE,LPDCB);
BOOL __attribute__((__stdcall__)) GetCommTimeouts(HANDLE,LPCOMMTIMEOUTS);
DWORD __attribute__((__stdcall__)) GetCompressedFileSizeA(LPCSTR,PDWORD);
DWORD __attribute__((__stdcall__)) GetCompressedFileSizeW(LPCWSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetComputerNameA(LPSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetComputerNameW(LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) GetCurrentDirectoryA(DWORD,LPSTR);
DWORD __attribute__((__stdcall__)) GetCurrentDirectoryW(DWORD,LPWSTR);
BOOL __attribute__((__stdcall__)) GetCurrentHwProfileA(LPHW_PROFILE_INFOA);
BOOL __attribute__((__stdcall__)) GetCurrentHwProfileW(LPHW_PROFILE_INFOW);
HANDLE __attribute__((__stdcall__)) GetCurrentProcess(void);
DWORD __attribute__((__stdcall__)) GetCurrentProcessId(void);
HANDLE __attribute__((__stdcall__)) GetCurrentThread(void);
DWORD __attribute__((__stdcall__)) GetCurrentThreadId(void);

BOOL __attribute__((__stdcall__)) GetDefaultCommConfigA(LPCSTR,LPCOMMCONFIG,PDWORD);
BOOL __attribute__((__stdcall__)) GetDefaultCommConfigW(LPCWSTR,LPCOMMCONFIG,PDWORD);
BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceA(LPCSTR,PDWORD,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceW(LPCWSTR,PDWORD,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExA(LPCSTR,PULARGE_INTEGER,PULARGE_INTEGER,PULARGE_INTEGER);
BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExW(LPCWSTR,PULARGE_INTEGER,PULARGE_INTEGER,PULARGE_INTEGER);
UINT __attribute__((__stdcall__)) GetDriveTypeA(LPCSTR);
UINT __attribute__((__stdcall__)) GetDriveTypeW(LPCWSTR);
LPSTR __attribute__((__stdcall__)) GetEnvironmentStrings(void);
LPSTR __attribute__((__stdcall__)) GetEnvironmentStringsA(void);
LPWSTR __attribute__((__stdcall__)) GetEnvironmentStringsW(void);
DWORD __attribute__((__stdcall__)) GetEnvironmentVariableA(LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetEnvironmentVariableW(LPCWSTR,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) GetExitCodeProcess(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetExitCodeThread(HANDLE,PDWORD);
DWORD __attribute__((__stdcall__)) GetFileAttributesA(LPCSTR);
DWORD __attribute__((__stdcall__)) GetFileAttributesW(LPCWSTR);
BOOL __attribute__((__stdcall__)) GetFileAttributesExA(LPCSTR,GET_FILEEX_INFO_LEVELS,PVOID);
BOOL __attribute__((__stdcall__)) GetFileAttributesExW(LPCWSTR,GET_FILEEX_INFO_LEVELS,PVOID);
BOOL __attribute__((__stdcall__)) GetFileInformationByHandle(HANDLE,LPBY_HANDLE_FILE_INFORMATION);
BOOL __attribute__((__stdcall__)) GetFileSecurityA(LPCSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetFileSecurityW(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetFileSize(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetFileSizeEx(HANDLE,PLARGE_INTEGER);
BOOL __attribute__((__stdcall__)) GetFileTime(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME);
DWORD __attribute__((__stdcall__)) GetFileType(HANDLE);

DWORD __attribute__((__stdcall__)) GetFullPathNameA(LPCSTR,DWORD,LPSTR,LPSTR*);
DWORD __attribute__((__stdcall__)) GetFullPathNameW(LPCWSTR,DWORD,LPWSTR,LPWSTR*);
BOOL __attribute__((__stdcall__)) GetHandleInformation(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetKernelObjectSecurity(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetLengthSid(PSID);
void __attribute__((__stdcall__)) GetLocalTime(LPSYSTEMTIME);
DWORD __attribute__((__stdcall__)) GetLogicalDrives(void);
DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsA(DWORD,LPSTR);
DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsW(DWORD,LPWSTR);
DWORD __attribute__((__stdcall__)) GetLongPathNameA(LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetLongPathNameW(LPCWSTR,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) GetMailslotInfo(HANDLE,PDWORD,PDWORD,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetModuleFileNameA(HINSTANCE,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetModuleFileNameW(HINSTANCE,LPWSTR,DWORD);
HMODULE __attribute__((__stdcall__)) GetModuleHandleA(LPCSTR);
HMODULE __attribute__((__stdcall__)) GetModuleHandleW(LPCWSTR);
BOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateA(HANDLE,PDWORD,PDWORD,PDWORD,PDWORD,LPSTR,DWORD);
BOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateW(HANDLE,PDWORD,PDWORD,PDWORD,PDWORD,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) GetNamedPipeInfo(HANDLE,PDWORD,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetNumberOfEventLogRecords(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetOldestEventLogRecord(HANDLE,PDWORD);
BOOL __attribute__((__stdcall__)) GetOverlappedResult(HANDLE,LPOVERLAPPED,PDWORD,BOOL);
DWORD __attribute__((__stdcall__)) GetPriorityClass(HANDLE);
BOOL __attribute__((__stdcall__)) GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
UINT __attribute__((__stdcall__)) GetPrivateProfileIntA(LPCSTR,LPCSTR,INT,LPCSTR);
UINT __attribute__((__stdcall__)) GetPrivateProfileIntW(LPCWSTR,LPCWSTR,INT,LPCWSTR);
DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionA(LPCSTR,LPSTR,DWORD,LPCSTR);
DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionW(LPCWSTR,LPWSTR,DWORD,LPCWSTR);
DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesA(LPSTR,DWORD,LPCSTR);
DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesW(LPWSTR,DWORD,LPCWSTR);
DWORD __attribute__((__stdcall__)) GetPrivateProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPSTR,DWORD,LPCSTR);
DWORD __attribute__((__stdcall__)) GetPrivateProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,DWORD,LPCWSTR);
BOOL __attribute__((__stdcall__)) GetPrivateProfileStructA(LPCSTR,LPCSTR,LPVOID,UINT,LPCSTR);
BOOL __attribute__((__stdcall__)) GetPrivateProfileStructW(LPCWSTR,LPCWSTR,LPVOID,UINT,LPCWSTR);
FARPROC __attribute__((__stdcall__)) GetProcAddress(HINSTANCE,LPCSTR);
BOOL __attribute__((__stdcall__)) GetProcessAffinityMask(HANDLE,PDWORD,PDWORD);
HANDLE __attribute__((__stdcall__)) GetProcessHeap(void);
DWORD __attribute__((__stdcall__)) GetProcessHeaps(DWORD,PHANDLE);
BOOL __attribute__((__stdcall__)) GetProcessPriorityBoost(HANDLE,PBOOL);
BOOL __attribute__((__stdcall__)) GetProcessShutdownParameters(PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetProcessTimes(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
DWORD __attribute__((__stdcall__)) GetProcessVersion(DWORD);
HWINSTA __attribute__((__stdcall__)) GetProcessWindowStation(void);
BOOL __attribute__((__stdcall__)) GetProcessWorkingSetSize(HANDLE,PDWORD,PDWORD);
UINT __attribute__((__stdcall__)) GetProfileIntA(LPCSTR,LPCSTR,INT);
UINT __attribute__((__stdcall__)) GetProfileIntW(LPCWSTR,LPCWSTR,INT);
DWORD __attribute__((__stdcall__)) GetProfileSectionA(LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetProfileSectionW(LPCWSTR,LPWSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) GetQueuedCompletionStatus(HANDLE,PDWORD,PDWORD,LPOVERLAPPED*,DWORD);
BOOL __attribute__((__stdcall__)) GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR_CONTROL,PDWORD);
BOOL __attribute__((__stdcall__)) GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR,LPBOOL,PACL*,LPBOOL);
BOOL __attribute__((__stdcall__)) GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR,PSID*,LPBOOL);
DWORD __attribute__((__stdcall__)) GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR);
BOOL __attribute__((__stdcall__)) GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR,PSID*,LPBOOL);
BOOL __attribute__((__stdcall__)) GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR,LPBOOL,PACL*,LPBOOL);
DWORD __attribute__((__stdcall__)) GetShortPathNameA(LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) GetShortPathNameW(LPCWSTR,LPWSTR,DWORD);
PSID_IDENTIFIER_AUTHORITY __attribute__((__stdcall__)) GetSidIdentifierAuthority(PSID);
DWORD __attribute__((__stdcall__)) GetSidLengthRequired(UCHAR);
PDWORD __attribute__((__stdcall__)) GetSidSubAuthority(PSID,DWORD);
PUCHAR __attribute__((__stdcall__)) GetSidSubAuthorityCount(PSID);
void __attribute__((__stdcall__)) GetStartupInfoA(LPSTARTUPINFOA);
void __attribute__((__stdcall__)) GetStartupInfoW(LPSTARTUPINFOW);
HANDLE __attribute__((__stdcall__)) GetStdHandle(DWORD);
UINT __attribute__((__stdcall__)) GetSystemDirectoryA(LPSTR,UINT);
UINT __attribute__((__stdcall__)) GetSystemDirectoryW(LPWSTR,UINT);
void __attribute__((__stdcall__)) GetSystemInfo(LPSYSTEM_INFO);
BOOL __attribute__((__stdcall__)) GetSystemPowerStatus(LPSYSTEM_POWER_STATUS);
void __attribute__((__stdcall__)) GetSystemTime(LPSYSTEMTIME);
BOOL __attribute__((__stdcall__)) GetSystemTimeAdjustment(PDWORD,PDWORD,PBOOL);
void __attribute__((__stdcall__)) GetSystemTimeAsFileTime(LPFILETIME);
DWORD __attribute__((__stdcall__)) GetTapeParameters(HANDLE,DWORD,PDWORD,PVOID);
DWORD __attribute__((__stdcall__)) GetTapePosition(HANDLE,DWORD,PDWORD,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetTapeStatus(HANDLE);
UINT __attribute__((__stdcall__)) GetTempFileNameA(LPCSTR,LPCSTR,UINT,LPSTR);
UINT __attribute__((__stdcall__)) GetTempFileNameW(LPCWSTR,LPCWSTR,UINT,LPWSTR);
DWORD __attribute__((__stdcall__)) GetTempPathA(DWORD,LPSTR);
DWORD __attribute__((__stdcall__)) GetTempPathW(DWORD,LPWSTR);
BOOL __attribute__((__stdcall__)) GetThreadContext(HANDLE,LPCONTEXT);
int __attribute__((__stdcall__)) GetThreadPriority(HANDLE);
BOOL __attribute__((__stdcall__)) GetThreadPriorityBoost(HANDLE,PBOOL);
BOOL __attribute__((__stdcall__)) GetThreadSelectorEntry(HANDLE,DWORD,LPLDT_ENTRY);
BOOL __attribute__((__stdcall__)) GetThreadTimes(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
DWORD __attribute__((__stdcall__)) GetTickCount(void);
DWORD __attribute__((__stdcall__)) GetTimeZoneInformation(LPTIME_ZONE_INFORMATION);
BOOL __attribute__((__stdcall__)) GetTokenInformation(HANDLE,TOKEN_INFORMATION_CLASS,PVOID,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetUserNameA (LPSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetUserNameW(LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) GetVersion(void);
BOOL __attribute__((__stdcall__)) GetVersionExA(LPOSVERSIONINFOA);
BOOL __attribute__((__stdcall__)) GetVersionExW(LPOSVERSIONINFOW);
BOOL __attribute__((__stdcall__)) GetVolumeInformationA(LPCSTR,LPSTR,DWORD,PDWORD,PDWORD,PDWORD,LPSTR,DWORD);
BOOL __attribute__((__stdcall__)) GetVolumeInformationW(LPCWSTR,LPWSTR,DWORD,PDWORD,PDWORD,PDWORD,LPWSTR,DWORD);
UINT __attribute__((__stdcall__)) GetWindowsDirectoryA(LPSTR,UINT);
UINT __attribute__((__stdcall__)) GetWindowsDirectoryW(LPWSTR,UINT);
DWORD __attribute__((__stdcall__)) GetWindowThreadProcessId(HWND,PDWORD);
ATOM __attribute__((__stdcall__)) GlobalAddAtomA(LPCSTR);
ATOM __attribute__((__stdcall__)) GlobalAddAtomW( LPCWSTR);
HGLOBAL __attribute__((__stdcall__)) GlobalAlloc(UINT,DWORD);
UINT __attribute__((__stdcall__)) GlobalCompact(DWORD);
ATOM __attribute__((__stdcall__)) GlobalDeleteAtom(ATOM);
HGLOBAL GlobalDiscard(HGLOBAL);
ATOM __attribute__((__stdcall__)) GlobalFindAtomA(LPCSTR);
ATOM __attribute__((__stdcall__)) GlobalFindAtomW(LPCWSTR);
void __attribute__((__stdcall__)) GlobalFix(HGLOBAL);
UINT __attribute__((__stdcall__)) GlobalFlags(HGLOBAL);
HGLOBAL __attribute__((__stdcall__)) GlobalFree(HGLOBAL);
UINT __attribute__((__stdcall__)) GlobalGetAtomNameA(ATOM,LPSTR,int);
UINT __attribute__((__stdcall__)) GlobalGetAtomNameW(ATOM,LPWSTR,int);
HGLOBAL __attribute__((__stdcall__)) GlobalHandle(PCVOID);
LPVOID __attribute__((__stdcall__)) GlobalLock(HGLOBAL);
void __attribute__((__stdcall__)) GlobalMemoryStatus(LPMEMORYSTATUS);
HGLOBAL __attribute__((__stdcall__)) GlobalReAlloc(HGLOBAL,DWORD,UINT);
DWORD __attribute__((__stdcall__)) GlobalSize(HGLOBAL);
void __attribute__((__stdcall__)) GlobalUnfix(HGLOBAL);
BOOL __attribute__((__stdcall__)) GlobalUnlock(HGLOBAL);
BOOL __attribute__((__stdcall__)) GlobalUnWire(HGLOBAL);
PVOID __attribute__((__stdcall__)) GlobalWire(HGLOBAL);

PVOID __attribute__((__stdcall__)) HeapAlloc(HANDLE,DWORD,DWORD);
UINT __attribute__((__stdcall__)) HeapCompact(HANDLE,DWORD);
HANDLE __attribute__((__stdcall__)) HeapCreate(DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) HeapDestroy(HANDLE);
BOOL __attribute__((__stdcall__)) HeapFree(HANDLE,DWORD,PVOID);
BOOL __attribute__((__stdcall__)) HeapLock(HANDLE);
PVOID __attribute__((__stdcall__)) HeapReAlloc(HANDLE,DWORD,PVOID,DWORD);
DWORD __attribute__((__stdcall__)) HeapSize(HANDLE,DWORD,PCVOID);
BOOL __attribute__((__stdcall__)) HeapUnlock(HANDLE);
BOOL __attribute__((__stdcall__)) HeapValidate(HANDLE,DWORD,PCVOID);
BOOL __attribute__((__stdcall__)) HeapWalk(HANDLE,LPPROCESS_HEAP_ENTRY);
BOOL __attribute__((__stdcall__)) ImpersonateLoggedOnUser(HANDLE);
BOOL __attribute__((__stdcall__)) ImpersonateNamedPipeClient(HANDLE);
BOOL __attribute__((__stdcall__)) ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL);
BOOL __attribute__((__stdcall__)) InitAtomTable(DWORD);
BOOL __attribute__((__stdcall__)) InitializeAcl(PACL,DWORD,DWORD);
void __attribute__((__stdcall__)) InitializeCriticalSection(LPCRITICAL_SECTION);




BOOL __attribute__((__stdcall__)) InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR,DWORD);
BOOL __attribute__((__stdcall__)) InitializeSid (PSID,PSID_IDENTIFIER_AUTHORITY,BYTE);


LONG __attribute__((__stdcall__)) InterlockedCompareExchange(LPLONG,LONG,LONG);



LONG __attribute__((__stdcall__)) InterlockedDecrement(LPLONG);
LONG __attribute__((__stdcall__)) InterlockedExchange(LPLONG,LONG);



LONG __attribute__((__stdcall__)) InterlockedExchangeAdd(LPLONG,LONG);
LONG __attribute__((__stdcall__)) InterlockedIncrement(LPLONG);

BOOL __attribute__((__stdcall__)) IsBadCodePtr(FARPROC);
BOOL __attribute__((__stdcall__)) IsBadHugeReadPtr(PCVOID,UINT);
BOOL __attribute__((__stdcall__)) IsBadHugeWritePtr(PVOID,UINT);
BOOL __attribute__((__stdcall__)) IsBadReadPtr(PCVOID,UINT);
BOOL __attribute__((__stdcall__)) IsBadStringPtrA(LPCSTR,UINT);
BOOL __attribute__((__stdcall__)) IsBadStringPtrW(LPCWSTR,UINT);
BOOL __attribute__((__stdcall__)) IsBadWritePtr(PVOID,UINT);
BOOL __attribute__((__stdcall__)) IsDebuggerPresent(void);
BOOL __attribute__((__stdcall__)) IsProcessorFeaturePresent(DWORD);
BOOL __attribute__((__stdcall__)) IsTextUnicode(PCVOID,int,LPINT);
BOOL __attribute__((__stdcall__)) IsValidAcl(PACL);
BOOL __attribute__((__stdcall__)) IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR);
BOOL __attribute__((__stdcall__)) IsValidSid(PSID);
void __attribute__((__stdcall__)) LeaveCriticalSection(LPCRITICAL_SECTION);

HINSTANCE __attribute__((__stdcall__)) LoadLibraryA(LPCSTR);
HINSTANCE __attribute__((__stdcall__)) LoadLibraryExA(LPCSTR,HANDLE,DWORD);
HINSTANCE __attribute__((__stdcall__)) LoadLibraryExW(LPCWSTR,HANDLE,DWORD);
HINSTANCE __attribute__((__stdcall__)) LoadLibraryW(LPCWSTR);
DWORD __attribute__((__stdcall__)) LoadModule(LPCSTR,PVOID);
HGLOBAL __attribute__((__stdcall__)) LoadResource(HINSTANCE,HRSRC);
HLOCAL __attribute__((__stdcall__)) LocalAlloc(UINT,UINT);
UINT __attribute__((__stdcall__)) LocalCompact(UINT);
HLOCAL LocalDiscard(HLOCAL);
BOOL __attribute__((__stdcall__)) LocalFileTimeToFileTime(const FILETIME *,LPFILETIME);
UINT __attribute__((__stdcall__)) LocalFlags(HLOCAL);
HLOCAL __attribute__((__stdcall__)) LocalFree(HLOCAL);
HLOCAL __attribute__((__stdcall__)) LocalHandle(LPCVOID);
PVOID __attribute__((__stdcall__)) LocalLock(HLOCAL);
HLOCAL __attribute__((__stdcall__)) LocalReAlloc(HLOCAL,UINT,UINT);
UINT __attribute__((__stdcall__)) LocalShrink(HLOCAL,UINT);
UINT __attribute__((__stdcall__)) LocalSize(HLOCAL);
BOOL __attribute__((__stdcall__)) LocalUnlock(HLOCAL);
BOOL __attribute__((__stdcall__)) LockFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) LockFileEx(HANDLE,DWORD,DWORD,DWORD,DWORD,LPOVERLAPPED);
PVOID __attribute__((__stdcall__)) LockResource(HGLOBAL);

BOOL __attribute__((__stdcall__)) LogonUserA(LPSTR,LPSTR,LPSTR,DWORD,DWORD,PHANDLE);
BOOL __attribute__((__stdcall__)) LogonUserW(LPWSTR,LPWSTR,LPWSTR,DWORD,DWORD,PHANDLE);
BOOL __attribute__((__stdcall__)) LookupAccountNameA(LPCSTR,LPCSTR,PSID,PDWORD,LPSTR,PDWORD,PSID_NAME_USE);
BOOL __attribute__((__stdcall__)) LookupAccountNameW(LPCWSTR,LPCWSTR,PSID,PDWORD,LPWSTR,PDWORD,PSID_NAME_USE);
BOOL __attribute__((__stdcall__)) LookupAccountSidA(LPCSTR,PSID,LPSTR,PDWORD,LPSTR,PDWORD,PSID_NAME_USE);
BOOL __attribute__((__stdcall__)) LookupAccountSidW(LPCWSTR,PSID,LPWSTR,PDWORD,LPWSTR,PDWORD,PSID_NAME_USE);
BOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameA(LPCSTR,LPCSTR,LPSTR,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameW(LPCWSTR,LPCWSTR,LPWSTR,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) LookupPrivilegeNameA(LPCSTR,PLUID,LPSTR,PDWORD);
BOOL __attribute__((__stdcall__)) LookupPrivilegeNameW(LPCWSTR,PLUID,LPWSTR,PDWORD);
BOOL __attribute__((__stdcall__)) LookupPrivilegeValueA(LPCSTR,LPCSTR,PLUID);
BOOL __attribute__((__stdcall__)) LookupPrivilegeValueW(LPCWSTR,LPCWSTR,PLUID);
LPSTR __attribute__((__stdcall__)) lstrcatA(LPSTR,LPCSTR);
LPWSTR __attribute__((__stdcall__)) lstrcatW(LPWSTR,LPCWSTR);
int __attribute__((__stdcall__)) lstrcmpA(LPCSTR,LPCSTR);
int __attribute__((__stdcall__)) lstrcmpiA(LPCSTR,LPCSTR);
int __attribute__((__stdcall__)) lstrcmpiW( LPCWSTR,LPCWSTR);
int __attribute__((__stdcall__)) lstrcmpW(LPCWSTR,LPCWSTR);
LPSTR __attribute__((__stdcall__)) lstrcpyA(LPSTR,LPCSTR);
LPSTR __attribute__((__stdcall__)) lstrcpynA(LPSTR,LPCSTR,int);
LPWSTR __attribute__((__stdcall__)) lstrcpynW(LPWSTR,LPCWSTR,int);
LPWSTR __attribute__((__stdcall__)) lstrcpyW(LPWSTR,LPCWSTR);
int __attribute__((__stdcall__)) lstrlenA(LPCSTR);
int __attribute__((__stdcall__)) lstrlenW(LPCWSTR);
BOOL __attribute__((__stdcall__)) MakeAbsoluteSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PDWORD,PACL,PDWORD,PACL,PDWORD,PSID,PDWORD,PSID,PDWORD);

BOOL __attribute__((__stdcall__)) MakeSelfRelativeSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PDWORD);
void __attribute__((__stdcall__)) MapGenericMask(PDWORD,PGENERIC_MAPPING);
PVOID __attribute__((__stdcall__)) MapViewOfFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
PVOID __attribute__((__stdcall__)) MapViewOfFileEx(HANDLE,DWORD,DWORD,DWORD,DWORD,PVOID);
BOOL __attribute__((__stdcall__)) MoveFileA(LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) MoveFileExA(LPCSTR,LPCSTR,DWORD);
BOOL __attribute__((__stdcall__)) MoveFileExW(LPCWSTR,LPCWSTR,DWORD);
BOOL __attribute__((__stdcall__)) MoveFileW(LPCWSTR,LPCWSTR);
int __attribute__((__stdcall__)) MulDiv(int,int,int);
BOOL __attribute__((__stdcall__)) NotifyChangeEventLog(HANDLE,HANDLE);
BOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmA(LPCSTR,PVOID,BOOL);
BOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmW(LPCWSTR,PVOID,BOOL);
BOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmA(LPCSTR,PVOID,BOOL);
BOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmW(LPCWSTR,PVOID,BOOL);
BOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmA(LPCSTR,PVOID,LPSTR,LPSTR,PSECURITY_DESCRIPTOR,HANDLE,DWORD,DWORD,PPRIVILEGE_SET,BOOL,BOOL,PBOOL);
BOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmW(LPCWSTR,PVOID,LPWSTR,LPWSTR,PSECURITY_DESCRIPTOR,HANDLE,DWORD,DWORD,PPRIVILEGE_SET,BOOL,BOOL,PBOOL);
BOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmA(LPCSTR,PVOID,HANDLE,DWORD,PPRIVILEGE_SET,BOOL);
BOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmW(LPCWSTR,PVOID,HANDLE,DWORD,PPRIVILEGE_SET,BOOL);
HANDLE __attribute__((__stdcall__)) OpenBackupEventLogA(LPCSTR,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenBackupEventLogW(LPCWSTR,LPCWSTR);
HANDLE __attribute__((__stdcall__)) OpenEventA(DWORD,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenEventLogA (LPCSTR,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenEventLogW(LPCWSTR,LPCWSTR);
HANDLE __attribute__((__stdcall__)) OpenEventW(DWORD,BOOL,LPCWSTR);
HFILE __attribute__((__stdcall__)) OpenFile(LPCSTR,LPOFSTRUCT,UINT);
HANDLE __attribute__((__stdcall__)) OpenFileMappingA(DWORD,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenFileMappingW(DWORD,BOOL,LPCWSTR);
HANDLE __attribute__((__stdcall__)) OpenMutexA(DWORD,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenMutexW(DWORD,BOOL,LPCWSTR);
HANDLE __attribute__((__stdcall__)) OpenProcess(DWORD,BOOL,DWORD);
BOOL __attribute__((__stdcall__)) OpenProcessToken(HANDLE,DWORD,PHANDLE);
HANDLE __attribute__((__stdcall__)) OpenSemaphoreA(DWORD,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenSemaphoreW(DWORD,BOOL,LPCWSTR);



BOOL __attribute__((__stdcall__)) OpenThreadToken(HANDLE,DWORD,BOOL,PHANDLE);
HANDLE __attribute__((__stdcall__)) OpenWaitableTimerA(DWORD,BOOL,LPCSTR);
HANDLE __attribute__((__stdcall__)) OpenWaitableTimerW(DWORD,BOOL,LPCWSTR);
void __attribute__((__stdcall__)) OutputDebugStringA(LPCSTR);
void __attribute__((__stdcall__)) OutputDebugStringW(LPCWSTR);
BOOL __attribute__((__stdcall__)) PeekNamedPipe(HANDLE,PVOID,DWORD,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) PostQueuedCompletionStatus(HANDLE,DWORD,DWORD,LPOVERLAPPED);
DWORD __attribute__((__stdcall__)) PrepareTape(HANDLE,DWORD,BOOL);
BOOL __attribute__((__stdcall__)) PrivilegeCheck (HANDLE,PPRIVILEGE_SET,PBOOL);
BOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmA(LPCSTR,LPCSTR,HANDLE,PPRIVILEGE_SET,BOOL);
BOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmW(LPCWSTR,LPCWSTR,HANDLE,PPRIVILEGE_SET,BOOL);
BOOL __attribute__((__stdcall__)) PulseEvent(HANDLE);
BOOL __attribute__((__stdcall__)) PurgeComm(HANDLE,DWORD);
DWORD __attribute__((__stdcall__)) QueryDosDeviceA(LPCSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) QueryDosDeviceW(LPCWSTR,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) QueryPerformanceCounter(PLARGE_INTEGER);
BOOL __attribute__((__stdcall__)) QueryPerformanceFrequency(PLARGE_INTEGER);
DWORD __attribute__((__stdcall__)) QueueUserAPC(PAPCFUNC,HANDLE,DWORD);
void __attribute__((__stdcall__)) RaiseException(DWORD,DWORD,DWORD,const DWORD*);
BOOL __attribute__((__stdcall__)) ReadDirectoryChangesW(HANDLE,PVOID,DWORD,BOOL,DWORD,PDWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
BOOL __attribute__((__stdcall__)) ReadEventLogA(HANDLE,DWORD,DWORD,PVOID,DWORD,DWORD *,DWORD *);
BOOL __attribute__((__stdcall__)) ReadEventLogW(HANDLE,DWORD,DWORD,PVOID,DWORD,DWORD *,DWORD *);
BOOL __attribute__((__stdcall__)) ReadFile(HANDLE,PVOID,DWORD,PDWORD,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) ReadFileEx(HANDLE,PVOID,DWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
BOOL __attribute__((__stdcall__)) ReadFileScatter(HANDLE,FILE_SEGMENT_ELEMENT*,DWORD,LPDWORD,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) ReadProcessMemory(HANDLE,PCVOID,PVOID,DWORD,PDWORD);
HANDLE __attribute__((__stdcall__)) RegisterEventSourceA (LPCSTR,LPCSTR);
HANDLE __attribute__((__stdcall__)) RegisterEventSourceW(LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) ReleaseMutex(HANDLE);
BOOL __attribute__((__stdcall__)) ReleaseSemaphore(HANDLE,LONG,LPLONG);
BOOL __attribute__((__stdcall__)) RemoveDirectoryA(LPCSTR);
BOOL __attribute__((__stdcall__)) RemoveDirectoryW(LPCWSTR);
BOOL __attribute__((__stdcall__)) ReportEventA(HANDLE,WORD,WORD,DWORD,PSID,WORD,DWORD,LPCSTR*,PVOID);
BOOL __attribute__((__stdcall__)) ReportEventW(HANDLE,WORD,WORD,DWORD,PSID,WORD,DWORD,LPCWSTR*,PVOID);
BOOL __attribute__((__stdcall__)) ResetEvent(HANDLE);
DWORD __attribute__((__stdcall__)) ResumeThread(HANDLE);
BOOL __attribute__((__stdcall__)) RevertToSelf(void);
DWORD __attribute__((__stdcall__)) SearchPathA(LPCSTR,LPCSTR,LPCSTR,DWORD,LPSTR,LPSTR*);
DWORD __attribute__((__stdcall__)) SearchPathW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPWSTR,LPWSTR*);
BOOL __attribute__((__stdcall__)) SetAclInformation(PACL,PVOID,DWORD,ACL_INFORMATION_CLASS);
BOOL __attribute__((__stdcall__)) SetCommBreak(HANDLE);
BOOL __attribute__((__stdcall__)) SetCommConfig(HANDLE,LPCOMMCONFIG,DWORD);
BOOL __attribute__((__stdcall__)) SetCommMask(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetCommState(HANDLE,LPDCB);
BOOL __attribute__((__stdcall__)) SetCommTimeouts(HANDLE,LPCOMMTIMEOUTS);
BOOL __attribute__((__stdcall__)) SetComputerNameA(LPCSTR);
BOOL __attribute__((__stdcall__)) SetComputerNameW(LPCWSTR);
BOOL __attribute__((__stdcall__)) SetCurrentDirectoryA(LPCSTR);
BOOL __attribute__((__stdcall__)) SetCurrentDirectoryW(LPCWSTR);
BOOL __attribute__((__stdcall__)) SetDefaultCommConfigA(LPCSTR,LPCOMMCONFIG,DWORD);
BOOL __attribute__((__stdcall__)) SetDefaultCommConfigW(LPCWSTR,LPCOMMCONFIG,DWORD);
BOOL __attribute__((__stdcall__)) SetEndOfFile(HANDLE);
BOOL __attribute__((__stdcall__)) SetEnvironmentVariableA(LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) SetEnvironmentVariableW(LPCWSTR,LPCWSTR);
UINT __attribute__((__stdcall__)) SetErrorMode(UINT);
BOOL __attribute__((__stdcall__)) SetEvent(HANDLE);
void __attribute__((__stdcall__)) SetFileApisToANSI(void);
void __attribute__((__stdcall__)) SetFileApisToOEM(void);
BOOL __attribute__((__stdcall__)) SetFileAttributesA(LPCSTR,DWORD);
BOOL __attribute__((__stdcall__)) SetFileAttributesW(LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) SetFilePointer(HANDLE,LONG,PLONG,DWORD);
BOOL __attribute__((__stdcall__)) SetFilePointerEx(HANDLE,LARGE_INTEGER,PLARGE_INTEGER,DWORD);
BOOL __attribute__((__stdcall__)) SetFileSecurityA(LPCSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
BOOL __attribute__((__stdcall__)) SetFileSecurityW(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
BOOL __attribute__((__stdcall__)) SetFileTime(HANDLE,const FILETIME*,const FILETIME*,const FILETIME*);
UINT __attribute__((__stdcall__)) SetHandleCount(UINT);
BOOL __attribute__((__stdcall__)) SetHandleInformation(HANDLE,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) SetKernelObjectSecurity(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
void __attribute__((__stdcall__)) SetLastError(DWORD);
void __attribute__((__stdcall__)) SetLastErrorEx(DWORD,DWORD);
BOOL __attribute__((__stdcall__)) SetLocalTime(const SYSTEMTIME*);
BOOL __attribute__((__stdcall__)) SetMailslotInfo(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetNamedPipeHandleState(HANDLE,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) SetPriorityClass(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetPrivateObjectSecurity(SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR *,PGENERIC_MAPPING,HANDLE);
BOOL __attribute__((__stdcall__)) SetProcessAffinityMask(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetProcessPriorityBoost(HANDLE,BOOL);
BOOL __attribute__((__stdcall__)) SetProcessShutdownParameters(DWORD,DWORD);
BOOL __attribute__((__stdcall__)) SetProcessWorkingSetSize(HANDLE,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR,SECURITY_DESCRIPTOR_CONTROL,SECURITY_DESCRIPTOR_CONTROL);
BOOL __attribute__((__stdcall__)) SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
BOOL __attribute__((__stdcall__)) SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR,PSID,BOOL);
BOOL __attribute__((__stdcall__)) SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR,PSID,BOOL);
BOOL __attribute__((__stdcall__)) SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
BOOL __attribute__((__stdcall__)) SetStdHandle(DWORD,HANDLE);

BOOL __attribute__((__stdcall__)) SetSystemPowerState(BOOL,BOOL);
BOOL __attribute__((__stdcall__)) SetSystemTime(const SYSTEMTIME*);
BOOL __attribute__((__stdcall__)) SetSystemTimeAdjustment(DWORD,BOOL);
DWORD __attribute__((__stdcall__)) SetTapeParameters(HANDLE,DWORD,PVOID);
DWORD __attribute__((__stdcall__)) SetTapePosition(HANDLE,DWORD,DWORD,DWORD,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) SetThreadAffinityMask(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetThreadContext(HANDLE,const CONTEXT*);
DWORD __attribute__((__stdcall__)) SetThreadIdealProcessor(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetThreadPriority(HANDLE,int);
BOOL __attribute__((__stdcall__)) SetThreadPriorityBoost(HANDLE,BOOL);
BOOL __attribute__((__stdcall__)) SetThreadToken (PHANDLE,HANDLE);
BOOL __attribute__((__stdcall__)) SetTimeZoneInformation(const TIME_ZONE_INFORMATION *);
BOOL __attribute__((__stdcall__)) SetTokenInformation(HANDLE,TOKEN_INFORMATION_CLASS,PVOID,DWORD);
LPTOP_LEVEL_EXCEPTION_FILTER __attribute__((__stdcall__)) SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER);
BOOL __attribute__((__stdcall__)) SetupComm(HANDLE,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) SetVolumeLabelA(LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) SetVolumeLabelW(LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) SetWaitableTimer(HANDLE,const LARGE_INTEGER*,LONG,PTIMERAPCROUTINE,PVOID,BOOL);
BOOL __attribute__((__stdcall__)) SignalObjectAndWait(HANDLE,HANDLE,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) SizeofResource(HINSTANCE,HRSRC);
void __attribute__((__stdcall__)) Sleep(DWORD);
DWORD __attribute__((__stdcall__)) SleepEx(DWORD,BOOL);
DWORD __attribute__((__stdcall__)) SuspendThread(HANDLE);
void __attribute__((__stdcall__)) SwitchToFiber(PVOID);
BOOL __attribute__((__stdcall__)) SwitchToThread(void);
BOOL __attribute__((__stdcall__)) SystemTimeToFileTime(const SYSTEMTIME*,LPFILETIME);
BOOL __attribute__((__stdcall__)) SystemTimeToTzSpecificLocalTime(LPTIME_ZONE_INFORMATION,LPSYSTEMTIME,LPSYSTEMTIME);
BOOL __attribute__((__stdcall__)) TerminateProcess(HANDLE,UINT);
BOOL __attribute__((__stdcall__)) TerminateThread(HANDLE,DWORD);
DWORD __attribute__((__stdcall__)) TlsAlloc(void);
BOOL __attribute__((__stdcall__)) TlsFree(DWORD);
PVOID __attribute__((__stdcall__)) TlsGetValue(DWORD);
BOOL __attribute__((__stdcall__)) TlsSetValue(DWORD,PVOID);
BOOL __attribute__((__stdcall__)) TransactNamedPipe(HANDLE,PVOID,DWORD,PVOID,DWORD,PDWORD,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) TransmitCommChar(HANDLE,char);
BOOL __attribute__((__stdcall__)) TryEnterCriticalSection(LPCRITICAL_SECTION);
LONG __attribute__((__stdcall__)) UnhandledExceptionFilter(LPEXCEPTION_POINTERS);
BOOL __attribute__((__stdcall__)) UnlockFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) UnlockFileEx(HANDLE,DWORD,DWORD,DWORD,LPOVERLAPPED);


BOOL __attribute__((__stdcall__)) UnmapViewOfFile(PVOID);
BOOL __attribute__((__stdcall__)) UpdateResourceA(HANDLE,LPCSTR,LPCSTR,WORD,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) UpdateResourceW(HANDLE,LPCWSTR,LPCWSTR,WORD,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) VerifyVersionInfoA(LPOSVERSIONINFOEXA,DWORD,DWORDLONG);
BOOL __attribute__((__stdcall__)) VerifyVersionInfoW(LPOSVERSIONINFOEXW,DWORD,DWORDLONG);
PVOID __attribute__((__stdcall__)) VirtualAlloc(PVOID,DWORD,DWORD,DWORD);
PVOID __attribute__((__stdcall__)) VirtualAllocEx(HANDLE,PVOID,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) VirtualFree(PVOID,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) VirtualFreeEx(HANDLE,PVOID,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) VirtualLock(PVOID,DWORD);
BOOL __attribute__((__stdcall__)) VirtualProtect(PVOID,DWORD,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) VirtualProtectEx(HANDLE,PVOID,DWORD,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) VirtualQuery(LPCVOID,PMEMORY_BASIC_INFORMATION,DWORD);
DWORD __attribute__((__stdcall__)) VirtualQueryEx(HANDLE,LPCVOID,PMEMORY_BASIC_INFORMATION,DWORD);
BOOL __attribute__((__stdcall__)) VirtualUnlock(PVOID,DWORD);
BOOL __attribute__((__stdcall__)) WaitCommEvent(HANDLE,PDWORD,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) WaitForDebugEvent(LPDEBUG_EVENT,DWORD);
DWORD __attribute__((__stdcall__)) WaitForMultipleObjects(DWORD,const HANDLE*,BOOL,DWORD);
DWORD __attribute__((__stdcall__)) WaitForMultipleObjectsEx(DWORD,const HANDLE*,BOOL,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WaitForSingleObject(HANDLE,DWORD);
DWORD __attribute__((__stdcall__)) WaitForSingleObjectEx(HANDLE,DWORD,BOOL);
BOOL __attribute__((__stdcall__)) WaitNamedPipeA(LPCSTR,DWORD);
BOOL __attribute__((__stdcall__)) WaitNamedPipeW(LPCWSTR,DWORD);
BOOL __attribute__((__stdcall__)) WinLoadTrustProvider(GUID*);
BOOL __attribute__((__stdcall__)) WriteFile(HANDLE,PCVOID,DWORD,PDWORD,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) WriteFileEx(HANDLE,PCVOID,DWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
BOOL __attribute__((__stdcall__)) WriteFileGather(HANDLE,FILE_SEGMENT_ELEMENT*,DWORD,LPDWORD,LPOVERLAPPED);
BOOL __attribute__((__stdcall__)) WritePrivateProfileSectionA(LPCSTR,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) WritePrivateProfileSectionW(LPCWSTR,LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) WritePrivateProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) WritePrivateProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) WritePrivateProfileStructA(LPCSTR,LPCSTR,LPVOID,UINT,LPCSTR);
BOOL __attribute__((__stdcall__)) WritePrivateProfileStructW(LPCWSTR,LPCWSTR,LPVOID,UINT,LPCWSTR);
BOOL __attribute__((__stdcall__)) WriteProcessMemory(HANDLE,PVOID,PVOID,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) WriteProfileSectionA(LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) WriteProfileSectionW(LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) WriteProfileStringA(LPCSTR,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) WriteProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR);
DWORD __attribute__((__stdcall__)) WriteTapemark(HANDLE,DWORD,DWORD,BOOL);
# 1737 "C:/PROGRA~1/WIDEST~1/gcc/include/winbase.h" 3
typedef STARTUPINFOA STARTUPINFO,*LPSTARTUPINFO;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA,*LPWIN32_FIND_DATA;
typedef HW_PROFILE_INFOA HW_PROFILE_INFO,*LPHW_PROFILE_INFO;
# 1876 "C:/PROGRA~1/WIDEST~1/gcc/include/winbase.h" 3
}
# 52 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/wingdi.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/wingdi.h" 3



extern "C" {
# 1165 "C:/PROGRA~1/WIDEST~1/gcc/include/wingdi.h" 3
typedef struct _ABC {
        int abcA;
        UINT abcB;
        int abcC;
} ABC,*LPABC;
typedef struct _ABCFLOAT {
        FLOAT abcfA;
        FLOAT abcfB;
        FLOAT abcfC;
} ABCFLOAT,*LPABCFLOAT;
typedef struct tagBITMAP {
        LONG bmType;
        LONG bmWidth;
        LONG bmHeight;
        LONG bmWidthBytes;
        WORD bmPlanes;
        WORD bmBitsPixel;
        LPVOID bmBits;
} BITMAP,*PBITMAP,*LPBITMAP;
typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER,*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;
#pragma pack(push,1)
typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE;
#pragma pack(pop)
#pragma pack(push,2)
typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER,*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
#pragma pack(pop)
typedef struct _BITMAPCOREINFO {
        BITMAPCOREHEADER bmciHeader;
        RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO,*LPBITMAPCOREINFO,*PBITMAPCOREINFO;
typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER,*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;
typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;
typedef struct tagBITMAPINFO {
        BITMAPINFOHEADER bmiHeader;
        RGBQUAD bmiColors[1];
} BITMAPINFO,*LPBITMAPINFO,*PBITMAPINFO;
typedef long FXPT16DOT16,*LPFXPT16DOT16;
typedef long FXPT2DOT30,*LPFXPT2DOT30;
typedef struct tagCIEXYZ {
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ,*LPCIEXYZ;
typedef struct tagCIEXYZTRIPLE {
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE,*LPCIEXYZTRIPLE;
typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER,*LPBITMAPV4HEADER,*PBITMAPV4HEADER;
typedef struct tagFONTSIGNATURE {
        DWORD fsUsb[4];
        DWORD fsCsb[2];
} FONTSIGNATURE,*LPFONTSIGNATURE;
typedef struct {
        UINT ciCharset;
        UINT ciACP;
        FONTSIGNATURE fs;
} CHARSETINFO,*LPCHARSETINFO;
typedef struct tagCOLORADJUSTMENT {
        WORD caSize;
        WORD caFlags;
        WORD caIlluminantIndex;
        WORD caRedGamma;
        WORD caGreenGamma;
        WORD caBlueGamma;
        WORD caReferenceBlack;
        WORD caReferenceWhite;
        SHORT caContrast;
        SHORT caBrightness;
        SHORT caColorfulness;
        SHORT caRedGreenTint;
} COLORADJUSTMENT,*LPCOLORADJUSTMENT;
typedef struct _devicemodeA {
        BYTE dmDeviceName[32];
        WORD dmSpecVersion;
        WORD dmDriverVersion;
        WORD dmSize;
        WORD dmDriverExtra;
        DWORD dmFields;
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
        short dmColor;
        short dmDuplex;
        short dmYResolution;
        short dmTTOption;
        short dmCollate;
        BYTE dmFormName[32];
        WORD dmLogPixels;
        DWORD dmBitsPerPel;
        DWORD dmPelsWidth;
        DWORD dmPelsHeight;
        DWORD dmDisplayFlags;
        DWORD dmDisplayFrequency;
        DWORD dmICMMethod;
        DWORD dmICMIntent;
        DWORD dmMediaType;
        DWORD dmDitherType;
        DWORD dmICCManufacturer;
        DWORD dmICCModel;
} DEVMODEA,*LPDEVMODEA,*PDEVMODEA;
typedef struct _devicemodeW {
        WCHAR dmDeviceName[32];
        WORD dmSpecVersion;
        WORD dmDriverVersion;
        WORD dmSize;
        WORD dmDriverExtra;
        DWORD dmFields;
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
        short dmColor;
        short dmDuplex;
        short dmYResolution;
        short dmTTOption;
        short dmCollate;
        WCHAR dmFormName[32];
        WORD dmLogPixels;
        DWORD dmBitsPerPel;
        DWORD dmPelsWidth;
        DWORD dmPelsHeight;
        DWORD dmDisplayFlags;
        DWORD dmDisplayFrequency;
        DWORD dmICMMethod;
        DWORD dmICMIntent;
        DWORD dmMediaType;
        DWORD dmDitherType;
        DWORD dmICCManufacturer;
        DWORD dmICCModel;
} DEVMODEW,*LPDEVMODEW,*PDEVMODEW;
typedef struct tagDIBSECTION {
        BITMAP dsBm;
        BITMAPINFOHEADER dsBmih;
        DWORD dsBitfields[3];
        HANDLE dshSection;
        DWORD dsOffset;
} DIBSECTION;
typedef struct _DOCINFOA {
        int cbSize;
        LPCTSTR lpszDocName;
        LPCTSTR lpszOutput;
        LPCTSTR lpszDatatype;
        DWORD fwType;
} DOCINFOA,*LPDOCINFOA;
typedef struct _DOCINFOW {
        int cbSize;
        LPCWSTR lpszDocName;
        LPCWSTR lpszOutput;
        LPCWSTR lpszDatatype;
        DWORD fwType;
} DOCINFOW,*LPDOCINFOW;
typedef struct tagEMR {
        DWORD iType;
        DWORD nSize;
} EMR,*PEMR;
typedef struct tagEMRANGLEARC {
        EMR emr;
        POINTL ptlCenter;
        DWORD nRadius;
        FLOAT eStartAngle;
        FLOAT eSweepAngle;
} EMRANGLEARC,*PEMRANGLEARC;
typedef struct tagEMRARC {
        EMR emr;
        RECTL rclBox;
        POINTL ptlStart;
        POINTL ptlEnd;
} EMRARC,*PEMRARC,EMRARCTO,*PEMRARCTO,EMRCHORD,*PEMRCHORD,EMRPIE,*PEMRPIE;
typedef struct _XFORM {
        FLOAT eM11;
        FLOAT eM12;
        FLOAT eM21;
        FLOAT eM22;
        FLOAT eDx;
        FLOAT eDy;
} XFORM,*PXFORM,*LPXFORM;
typedef struct tagEMRBITBLT {
        EMR emr;
        RECTL rclBounds;
        LONG xDest;
        LONG yDest;
        LONG cxDest;
        LONG cyDest;
        DWORD dwRop;
        LONG xSrc;
        LONG ySrc;
        XFORM xformSrc;
        COLORREF crBkColorSrc;
        DWORD iUsageSrc;
        DWORD offBmiSrc;
        DWORD offBitsSrc;
        DWORD cbBitsSrc;
} EMRBITBLT,*PEMRBITBLT;
typedef struct tagLOGBRUSH {
        UINT lbStyle;
        COLORREF lbColor;
        LONG lbHatch;
} LOGBRUSH,*PLOGBRUSH,*LPLOGBRUSH;
typedef LOGBRUSH PATTERN,*PPATTERN,*LPPATTERN;
typedef struct tagEMRCREATEBRUSHINDIRECT {
        EMR emr;
        DWORD ihBrush;
        LOGBRUSH lb;
} EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;
typedef LONG LCSCSTYPE;
typedef LONG LCSGAMUTMATCH;
typedef struct tagLOGCOLORSPACEA {
        DWORD lcsSignature;
        DWORD lcsVersion;
        DWORD lcsSize;
        LCSCSTYPE lcsCSType;
        LCSGAMUTMATCH lcsIntent;
        CIEXYZTRIPLE lcsEndpoints;
        DWORD lcsGammaRed;
        DWORD lcsGammaGreen;
        DWORD lcsGammaBlue;
        CHAR lcsFilename[260];
} LOGCOLORSPACEA,*LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
        DWORD lcsSignature;
        DWORD lcsVersion;
        DWORD lcsSize;
        LCSCSTYPE lcsCSType;
        LCSGAMUTMATCH lcsIntent;
        CIEXYZTRIPLE lcsEndpoints;
        DWORD lcsGammaRed;
        DWORD lcsGammaGreen;
        DWORD lcsGammaBlue;
        WCHAR lcsFilename[260];
} LOGCOLORSPACEW,*LPLOGCOLORSPACEW;
typedef struct tagEMRCREATECOLORSPACE {
        EMR emr;
        DWORD ihCS;
        LOGCOLORSPACEW lcs;
} EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
        EMR emr;
        DWORD ihBrush;
        DWORD iUsage;
        DWORD offBmi;
        DWORD cbBmi;
        DWORD offBits;
        DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct tagEMRCREATEMONOBRUSH {
        EMR emr;
        DWORD ihBrush;
        DWORD iUsage;
        DWORD offBmi;
        DWORD cbBmi;
        DWORD offBits;
        DWORD cbBits;
} EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;
typedef struct tagPALETTEENTRY {
        BYTE peRed;
        BYTE peGreen;
        BYTE peBlue;
        BYTE peFlags;
} PALETTEENTRY,*LPPALETTEENTRY,*PPALETTEENTRY;
typedef struct tagLOGPALETTE {
        WORD palVersion;
        WORD palNumEntries;
        PALETTEENTRY palPalEntry[1];
} LOGPALETTE,*NPLOGPALETTE,*PLOGPALETTE,*LPLOGPALETTE;
typedef struct tagEMRCREATEPALETTE {
        EMR emr;
        DWORD ihPal;
        LOGPALETTE lgpl;
} EMRCREATEPALETTE,*PEMRCREATEPALETTE;
typedef struct tagLOGPEN {
        UINT lopnStyle;
        POINT lopnWidth;
        COLORREF lopnColor;
} LOGPEN,*PLOGPEN,*LPLOGPEN;
typedef struct tagEMRCREATEPEN {
        EMR emr;
        DWORD ihPen;
        LOGPEN lopn;
} EMRCREATEPEN,*PEMRCREATEPEN;
typedef struct tagEMRELLIPSE {
        EMR emr;
        RECTL rclBox;
} EMRELLIPSE,*PEMRELLIPSE,EMRRECTANGLE,*PEMRRECTANGLE;
typedef struct tagEMREOF {
        EMR emr;
        DWORD nPalEntries;
        DWORD offPalEntries;
        DWORD nSizeLast;
} EMREOF,*PEMREOF;
typedef struct tagEMREXCLUDECLIPRECT {
        EMR emr;
        RECTL rclClip;
} EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;
typedef struct tagPANOSE {
        BYTE bFamilyType;
        BYTE bSerifStyle;
        BYTE bWeight;
        BYTE bProportion;
        BYTE bContrast;
        BYTE bStrokeVariation;
        BYTE bArmStyle;
        BYTE bLetterform;
        BYTE bMidline;
        BYTE bXHeight;
} PANOSE;
typedef struct tagLOGFONTA {
        LONG lfHeight;
        LONG lfWidth;
        LONG lfEscapement;
        LONG lfOrientation;
        LONG lfWeight;
        BYTE lfItalic;
        BYTE lfUnderline;
        BYTE lfStrikeOut;
        BYTE lfCharSet;
        BYTE lfOutPrecision;
        BYTE lfClipPrecision;
        BYTE lfQuality;
        BYTE lfPitchAndFamily;
        CHAR lfFaceName[32];
} LOGFONTA,*PLOGFONTA,*LPLOGFONTA;
typedef struct tagLOGFONTW {
        LONG lfHeight;
        LONG lfWidth;
        LONG lfEscapement;
        LONG lfOrientation;
        LONG lfWeight;
        BYTE lfItalic;
        BYTE lfUnderline;
        BYTE lfStrikeOut;
        BYTE lfCharSet;
        BYTE lfOutPrecision;
        BYTE lfClipPrecision;
        BYTE lfQuality;
        BYTE lfPitchAndFamily;
        WCHAR lfFaceName[32];
} LOGFONTW,*PLOGFONTW,*LPLOGFONTW;
typedef struct tagEXTLOGFONTA {
        LOGFONTA elfLogFont;
        BYTE elfFullName[64];
        BYTE elfStyle[32];
        DWORD elfVersion;
        DWORD elfStyleSize;
        DWORD elfMatch;
        DWORD elfReserved;
        BYTE elfVendorId[4];
        DWORD elfCulture;
        PANOSE elfPanose;
} EXTLOGFONTA,*PEXTLOGFONTA,*LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
        LOGFONTW elfLogFont;
        WCHAR elfFullName[64];
        WCHAR elfStyle[32];
        DWORD elfVersion;
        DWORD elfStyleSize;
        DWORD elfMatch;
        DWORD elfReserved;
        BYTE elfVendorId[4];
        DWORD elfCulture;
        PANOSE elfPanose;
} EXTLOGFONTW,*PEXTLOGFONTW,*LPEXTLOGFONTW;
typedef struct tagEMREXTCREATEFONTINDIRECTW {
        EMR emr;
        DWORD ihFont;
        EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;
typedef struct tagEXTLOGPEN {
        UINT elpPenStyle;
        UINT elpWidth;
        UINT elpBrushStyle;
        COLORREF elpColor;
        LONG elpHatch;
        DWORD elpNumEntries;
        DWORD elpStyleEntry[1];
} EXTLOGPEN,*PEXTLOGPEN,*LPEXTLOGPEN;
typedef struct tagEMREXTCREATEPEN {
        EMR emr;
        DWORD ihPen;
        DWORD offBmi;
        DWORD cbBmi;
        DWORD offBits;
        DWORD cbBits;
        EXTLOGPEN elp;
} EMREXTCREATEPEN,*PEMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL {
        EMR emr;
        POINTL ptlStart;
        COLORREF crColor;
        DWORD iMode;
} EMREXTFLOODFILL,*PEMREXTFLOODFILL;
typedef struct tagEMREXTSELECTCLIPRGN {
        EMR emr;
        DWORD cbRgnData;
        DWORD iMode;
        BYTE RgnData[1];
} EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;
typedef struct tagEMRTEXT {
        POINTL ptlReference;
        DWORD nChars;
        DWORD offString;
        DWORD fOptions;
        RECTL rcl;
        DWORD offDx;
} EMRTEXT,*PEMRTEXT;
typedef struct tagEMREXTTEXTOUTA {
        EMR emr;
        RECTL rclBounds;
        DWORD iGraphicsMode;
        FLOAT exScale;
        FLOAT eyScale;
        EMRTEXT emrtext;
} EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;
typedef struct tagEMRFILLPATH {
        EMR emr;
        RECTL rclBounds;
} EMRFILLPATH,*PEMRFILLPATH,EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,EMRSTROKEPATH,*PEMRSTROKEPATH;
typedef struct tagEMRFILLRGN {
        EMR emr;
        RECTL rclBounds;
        DWORD cbRgnData;
        DWORD ihBrush;
        BYTE RgnData[1];
} EMRFILLRGN,*PEMRFILLRGN;
typedef struct tagEMRFORMAT {
        DWORD dSignature;
        DWORD nVersion;
        DWORD cbData;
        DWORD offData;
} EMRFORMAT;
typedef struct tagEMRFRAMERGN {
        EMR emr;
        RECTL rclBounds;
        DWORD cbRgnData;
        DWORD ihBrush;
        SIZEL szlStroke;
        BYTE RgnData[1];
} EMRFRAMERGN,*PEMRFRAMERGN;
typedef struct tagEMRGDICOMMENT {
        EMR emr;
        DWORD cbData;
        BYTE Data[1];
} EMRGDICOMMENT,*PEMRGDICOMMENT;
typedef struct tagEMRINVERTRGN {
        EMR emr;
        RECTL rclBounds;
        DWORD cbRgnData;
        BYTE RgnData[1];
} EMRINVERTRGN,*PEMRINVERTRGN,EMRPAINTRGN,*PEMRPAINTRGN;
typedef struct tagEMRLINETO {
        EMR emr;
        POINTL ptl;
} EMRLINETO,*PEMRLINETO,EMRMOVETOEX,*PEMRMOVETOEX;
typedef struct tagEMRMASKBLT {
        EMR emr;
        RECTL rclBounds;
        LONG xDest;
        LONG yDest;
        LONG cxDest;
        LONG cyDest;
        DWORD dwRop;
        LONG xSrc;
        LONG ySrc;
        XFORM xformSrc;
        COLORREF crBkColorSrc;
        DWORD iUsageSrc;
        DWORD offBmiSrc;
        DWORD cbBmiSrc;
        DWORD offBitsSrc;
        DWORD cbBitsSrc;
        LONG xMask;
        LONG yMask;
        DWORD iUsageMask;
        DWORD offBmiMask;
        DWORD cbBmiMask;
        DWORD offBitsMask;
        DWORD cbBitsMask;
} EMRMASKBLT,*PEMRMASKBLT;
typedef struct tagEMRMODIFYWORLDTRANSFORM {
        EMR emr;
        XFORM xform;
        DWORD iMode;
} EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;
typedef struct tagEMROFFSETCLIPRGN {
        EMR emr;
        POINTL ptlOffset;
} EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;
typedef struct tagEMRPLGBLT {
        EMR emr;
        RECTL rclBounds;
        POINTL aptlDest[3];
        LONG xSrc;
        LONG ySrc;
        LONG cxSrc;
        LONG cySrc;
        XFORM xformSrc;
        COLORREF crBkColorSrc;
        DWORD iUsageSrc;
        DWORD offBmiSrc;
        DWORD cbBmiSrc;
        DWORD offBitsSrc;
        DWORD cbBitsSrc;
        LONG xMask;
        LONG yMask;
        DWORD iUsageMask;
        DWORD offBmiMask;
        DWORD cbBmiMask;
        DWORD offBitsMask;
        DWORD cbBitsMask;
} EMRPLGBLT,*PEMRPLGBLT;
typedef struct tagEMRPOLYDRAW {
        EMR emr;
        RECTL rclBounds;
        DWORD cptl;
        POINTL aptl[1];
        BYTE abTypes[1];
} EMRPOLYDRAW,*PEMRPOLYDRAW;
typedef struct tagEMRPOLYDRAW16 {
        EMR emr;
        RECTL rclBounds;
        DWORD cpts;
        POINTS apts[1];
        BYTE abTypes[1];
} EMRPOLYDRAW16,*PEMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE {
        EMR emr;
        RECTL rclBounds;
        DWORD cptl;
        POINTL aptl[1];
} EMRPOLYLINE,*PEMRPOLYLINE,EMRPOLYBEZIER,*PEMRPOLYBEZIER,EMRPOLYGON,*PEMRPOLYGON,EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,EMRPOLYLINETO,*PEMRPOLYLINETO;
typedef struct tagEMRPOLYLINE16 {
        EMR emr;
        RECTL rclBounds;
        DWORD cpts;
        POINTL apts[1];
} EMRPOLYLINE16,*PEMRPOLYLINE16,EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,EMRPOLYGON16,*PEMRPOLYGON16,EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,EMRPOLYLINETO16,*PEMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE {
        EMR emr;
        RECTL rclBounds;
        DWORD nPolys;
        DWORD cptl;
        DWORD aPolyCounts[1];
        POINTL aptl[1];
} EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;
typedef struct tagEMRPOLYPOLYLINE16 {
        EMR emr;
        RECTL rclBounds;
        DWORD nPolys;
        DWORD cpts;
        DWORD aPolyCounts[1];
        POINTS apts[1];
} EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;
typedef struct tagEMRPOLYTEXTOUTA {
        EMR emr;
        RECTL rclBounds;
        DWORD iGraphicsMode;
        FLOAT exScale;
        FLOAT eyScale;
        LONG cStrings;
        EMRTEXT aemrtext[1];
} EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;
typedef struct tagEMRRESIZEPALETTE {
        EMR emr;
        DWORD ihPal;
        DWORD cEntries;
} EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;
typedef struct tagEMRRESTOREDC {
        EMR emr;
        LONG iRelative;
} EMRRESTOREDC,*PEMRRESTOREDC;
typedef struct tagEMRROUNDRECT {
        EMR emr;
        RECTL rclBox;
        SIZEL szlCorner;
} EMRROUNDRECT,*PEMRROUNDRECT;
typedef struct tagEMRSCALEVIEWPORTEXTEX {
        EMR emr;
        LONG xNum;
        LONG xDenom;
        LONG yNum;
        LONG yDenom;
} EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSELECTCOLORSPACE {
        EMR emr;
        DWORD ihCS;
} EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;
typedef struct tagEMRSELECTOBJECT {
        EMR emr;
        DWORD ihObject;
} EMRSELECTOBJECT,*PEMRSELECTOBJECT,EMRDELETEOBJECT,*PEMRDELETEOBJECT;
typedef struct tagEMRSELECTPALETTE {
        EMR emr;
        DWORD ihPal;
} EMRSELECTPALETTE,*PEMRSELECTPALETTE;
typedef struct tagEMRSETARCDIRECTION {
        EMR emr;
        DWORD iArcDirection;
} EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;
typedef struct tagEMRSETTEXTCOLOR {
        EMR emr;
        COLORREF crColor;
} EMRSETBKCOLOR,*PEMRSETBKCOLOR,EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;
typedef struct tagEMRSETCOLORADJUSTMENT {
        EMR emr;
        COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;
typedef struct tagEMRSETDIBITSTODEVICE {
        EMR emr;
        RECTL rclBounds;
        LONG xDest;
        LONG yDest;
        LONG xSrc;
        LONG ySrc;
        LONG cxSrc;
        LONG cySrc;
        DWORD offBmiSrc;
        DWORD cbBmiSrc;
        DWORD offBitsSrc;
        DWORD cbBitsSrc;
        DWORD iUsageSrc;
        DWORD iStartScan;
        DWORD cScans;
} EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSETMAPPERFLAGS {
        EMR emr;
        DWORD dwFlags;
} EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETMITERLIMIT {
        EMR emr;
        FLOAT eMiterLimit;
} EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;
typedef struct tagEMRSETPALETTEENTRIES {
        EMR emr;
        DWORD ihPal;
        DWORD iStart;
        DWORD cEntries;
        PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;
typedef struct tagEMRSETPIXELV {
        EMR emr;
        POINTL ptlPixel;
        COLORREF crColor;
} EMRSETPIXELV,*PEMRSETPIXELV;
typedef struct tagEMRSETVIEWPORTEXTEX {
        EMR emr;
        SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX {
        EMR emr;
        POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;
typedef struct tagEMRSETWORLDTRANSFORM {
        EMR emr;
        XFORM xform;
} EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;
typedef struct tagEMRSTRETCHBLT {
        EMR emr;
        RECTL rclBounds;
        LONG xDest;
        LONG yDest;
        LONG cxDest;
        LONG cyDest;
        DWORD dwRop;
        LONG xSrc;
        LONG ySrc;
        XFORM xformSrc;
        COLORREF crBkColorSrc;
        DWORD iUsageSrc;
        DWORD offBmiSrc;
        DWORD cbBmiSrc;
        DWORD offBitsSrc;
        DWORD cbBitsSrc;
        LONG cxSrc;
        LONG cySrc;
} EMRSTRETCHBLT,*PEMRSTRETCHBLT;
typedef struct tagEMRSTRETCHDIBITS {
        EMR emr;
        RECTL rclBounds;
        LONG xDest;
        LONG yDest;
        LONG xSrc;
        LONG ySrc;
        LONG cxSrc;
        LONG cySrc;
        DWORD offBmiSrc;
        DWORD cbBmiSrc;
        DWORD offBitsSrc;
        DWORD cbBitsSrc;
        DWORD iUsageSrc;
        DWORD dwRop;
        LONG cxDest;
        LONG cyDest;
} EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;
typedef struct tagABORTPATH {
        EMR emr;
} EMRABORTPATH,*PEMRABORTPATH,EMRBEGINPATH,*PEMRBEGINPATH,EMRENDPATH,*PEMRENDPATH,EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,EMRFLATTENPATH,*PEMRFLATTENPATH,EMRWIDENPATH,*PEMRWIDENPATH,EMRSETMETARGN,*PEMRSETMETARGN,EMRSAVEDC,*PEMRSAVEDC,EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH {
        EMR emr;
        DWORD iMode;
} EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,EMRSETBKMODE,*PEMRSETBKMODE,EMRSETMAPMODE,*PEMRSETMAPMODE,EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,EMRSETROP2,*PEMRSETROP2,EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,EMRSETTEXTALIGN,*PEMRSETTEXTALIGN,EMRENABLEICM,*PEMRENABLEICM;
#pragma pack(push,2)
typedef struct tagMETAHEADER {
        WORD mtType;
        WORD mtHeaderSize;
        WORD mtVersion;
        DWORD mtSize;
        WORD mtNoObjects;
        DWORD mtMaxRecord;
        WORD mtNoParameters;
} METAHEADER,*PMETAHEADER,*LPMETAHEADER;
#pragma pack(pop)
typedef struct tagENHMETAHEADER {
        DWORD iType;
        DWORD nSize;
        RECTL rclBounds;
        RECTL rclFrame;
        DWORD dSignature;
        DWORD nVersion;
        DWORD nBytes;
        DWORD nRecords;
        WORD nHandles;
        WORD sReserved;
        DWORD nDescription;
        DWORD offDescription;
        DWORD nPalEntries;
        SIZEL szlDevice;
        SIZEL szlMillimeters;
} ENHMETAHEADER,*LPENHMETAHEADER;
typedef struct tagMETARECORD {
        DWORD rdSize;
        WORD rdFunction;
        WORD rdParm[1];
} METARECORD,*PMETARECORD,*LPMETARECORD;
typedef struct tagENHMETARECORD {
        DWORD iType;
        DWORD nSize;
        DWORD dParm[1];
} ENHMETARECORD,*LPENHMETARECORD;
typedef struct tagHANDLETABLE {
        HGDIOBJ objectHandle[1];
} HANDLETABLE,*LPHANDLETABLE;
typedef struct tagTEXTMETRICA {
        LONG tmHeight;
        LONG tmAscent;
        LONG tmDescent;
        LONG tmInternalLeading;
        LONG tmExternalLeading;
        LONG tmAveCharWidth;
        LONG tmMaxCharWidth;
        LONG tmWeight;
        LONG tmOverhang;
        LONG tmDigitizedAspectX;
        LONG tmDigitizedAspectY;
        BYTE tmFirstChar;
        BYTE tmLastChar;
        BYTE tmDefaultChar;
        BYTE tmBreakChar;
        BYTE tmItalic;
        BYTE tmUnderlined;
        BYTE tmStruckOut;
        BYTE tmPitchAndFamily;
        BYTE tmCharSet;
} TEXTMETRICA,*PTEXTMETRICA,*LPTEXTMETRICA;
typedef struct tagTEXTMETRICW {
        LONG tmHeight;
        LONG tmAscent;
        LONG tmDescent;
        LONG tmInternalLeading;
        LONG tmExternalLeading;
        LONG tmAveCharWidth;
        LONG tmMaxCharWidth;
        LONG tmWeight;
        LONG tmOverhang;
        LONG tmDigitizedAspectX;
        LONG tmDigitizedAspectY;
        WCHAR tmFirstChar;
        WCHAR tmLastChar;
        WCHAR tmDefaultChar;
        WCHAR tmBreakChar;
        BYTE tmItalic;
        BYTE tmUnderlined;
        BYTE tmStruckOut;
        BYTE tmPitchAndFamily;
        BYTE tmCharSet;
} TEXTMETRICW,*PTEXTMETRICW,*LPTEXTMETRICW;
typedef struct _RGNDATAHEADER {
        DWORD dwSize;
        DWORD iType;
        DWORD nCount;
        DWORD nRgnSize;
        RECT rcBound;
} RGNDATAHEADER;
typedef struct _RGNDATA {
        RGNDATAHEADER rdh;
        char Buffer[1];
} RGNDATA,*PRGNDATA, *LPRGNDATA;


typedef struct tagGCP_RESULTSA {
        DWORD lStructSize;
        LPSTR lpOutString;
        UINT *lpOrder;
        INT *lpDx;
        INT *lpCaretPos;
        LPSTR lpClass;
        UINT *lpGlyphs;
        UINT nGlyphs;
        UINT nMaxFit;
} GCP_RESULTSA,*LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW {
        DWORD lStructSize;
        LPWSTR lpOutString;
        UINT *lpOrder;
        INT *lpDx;
        INT *lpCaretPos;
        LPWSTR lpClass;
        UINT *lpGlyphs;
        UINT nGlyphs;
        UINT nMaxFit;
} GCP_RESULTSW,*LPGCP_RESULTSW;
typedef struct _GLYPHMETRICS {
        UINT gmBlackBoxX;
        UINT gmBlackBoxY;
        POINT gmptGlyphOrigin;
        short gmCellIncX;
        short gmCellIncY;
} GLYPHMETRICS,*LPGLYPHMETRICS;
typedef struct tagKERNINGPAIR {
        WORD wFirst;
        WORD wSecond;
        int iKernAmount;
} KERNINGPAIR,*LPKERNINGPAIR;
typedef struct _FIXED {
        WORD fract;
        short value;
} FIXED;
typedef struct _MAT2 {
        FIXED eM11;
        FIXED eM12;
        FIXED eM21;
        FIXED eM22;
} MAT2,*LPMAT2;
typedef struct _OUTLINETEXTMETRICA {
        UINT otmSize;
        TEXTMETRICA otmTextMetrics;
        BYTE otmFiller;
        PANOSE otmPanoseNumber;
        UINT otmfsSelection;
        UINT otmfsType;
        int otmsCharSlopeRise;
        int otmsCharSlopeRun;
        int otmItalicAngle;
        UINT otmEMSquare;
        int otmAscent;
        int otmDescent;
        UINT otmLineGap;
        UINT otmsCapEmHeight;
        UINT otmsXHeight;
        RECT otmrcFontBox;
        int otmMacAscent;
        int otmMacDescent;
        UINT otmMacLineGap;
        UINT otmusMinimumPPEM;
        POINT otmptSubscriptSize;
        POINT otmptSubscriptOffset;
        POINT otmptSuperscriptSize;
        POINT otmptSuperscriptOffset;
        UINT otmsStrikeoutSize;
        int otmsStrikeoutPosition;
        int otmsUnderscoreSize;
        int otmsUnderscorePosition;
        PSTR otmpFamilyName;
        PSTR otmpFaceName;
        PSTR otmpStyleName;
        PSTR otmpFullName;
} OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,*LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
        UINT otmSize;
        TEXTMETRICW otmTextMetrics;
        BYTE otmFiller;
        PANOSE otmPanoseNumber;
        UINT otmfsSelection;
        UINT otmfsType;
        int otmsCharSlopeRise;
        int otmsCharSlopeRun;
        int otmItalicAngle;
        UINT otmEMSquare;
        int otmAscent;
        int otmDescent;
        UINT otmLineGap;
        UINT otmsCapEmHeight;
        UINT otmsXHeight;
        RECT otmrcFontBox;
        int otmMacAscent;
        int otmMacDescent;
        UINT otmMacLineGap;
        UINT otmusMinimumPPEM;
        POINT otmptSubscriptSize;
        POINT otmptSubscriptOffset;
        POINT otmptSuperscriptSize;
        POINT otmptSuperscriptOffset;
        UINT otmsStrikeoutSize;
        int otmsStrikeoutPosition;
        int otmsUnderscoreSize;
        int otmsUnderscorePosition;
        PSTR otmpFamilyName;
        PSTR otmpFaceName;
        PSTR otmpStyleName;
        PSTR otmpFullName;
} OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,*LPOUTLINETEXTMETRICW;
typedef struct _RASTERIZER_STATUS {
        short nSize;
        short wFlags;
        short nLanguageID;
} RASTERIZER_STATUS,*LPRASTERIZER_STATUS;
typedef struct _POLYTEXTA {
        int x;
        int y;
        UINT n;
        LPCSTR lpstr;
        UINT uiFlags;
        RECT rcl;
        int *pdx;
} POLYTEXTA, *PPOLYTEXTA;
typedef struct _POLYTEXTW {
        int x;
        int y;
        UINT n;
        LPCWSTR lpstr;
        UINT uiFlags;
        RECT rcl;
        int *pdx;
} POLYTEXTW, *PPOLYTEXTW;
typedef struct tagPIXELFORMATDESCRIPTOR {
        WORD nSize;
        WORD nVersion;
        DWORD dwFlags;
        BYTE iPixelType;
        BYTE cColorBits;
        BYTE cRedBits;
        BYTE cRedShift;
        BYTE cGreenBits;
        BYTE cGreenShift;
        BYTE cBlueBits;
        BYTE cBlueShift;
        BYTE cAlphaBits;
        BYTE cAlphaShift;
        BYTE cAccumBits;
        BYTE cAccumRedBits;
        BYTE cAccumGreenBits;
        BYTE cAccumBlueBits;
        BYTE cAccumAlphaBits;
        BYTE cDepthBits;
        BYTE cStencilBits;
        BYTE cAuxBuffers;
        BYTE iLayerType;
        BYTE bReserved;
        DWORD dwLayerMask;
        DWORD dwVisibleMask;
        DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,*LPPIXELFORMATDESCRIPTOR;
typedef struct tagMETAFILEPICT {
        LONG mm;
        LONG xExt;
        LONG yExt;
        HMETAFILE hMF;
} METAFILEPICT,*LPMETAFILEPICT;
typedef struct tagLOCALESIGNATURE {
        DWORD lsUsb[4];
        DWORD lsCsbDefault[2];
        DWORD lsCsbSupported[2];
} LOCALESIGNATURE,*PLOCALESIGNATURE,*LPLOCALESIGNATURE;
typedef LONG LCSTYPE;
#pragma pack(push,4)
typedef struct tagNEWTEXTMETRICA {
        LONG tmHeight;
        LONG tmAscent;
        LONG tmDescent;
        LONG tmInternalLeading;
        LONG tmExternalLeading;
        LONG tmAveCharWidth;
        LONG tmMaxCharWidth;
        LONG tmWeight;
        LONG tmOverhang;
        LONG tmDigitizedAspectX;
        LONG tmDigitizedAspectY;
        BYTE tmFirstChar;
        BYTE tmLastChar;
        BYTE tmDefaultChar;
        BYTE tmBreakChar;
        BYTE tmItalic;
        BYTE tmUnderlined;
        BYTE tmStruckOut;
        BYTE tmPitchAndFamily;
        BYTE tmCharSet;
        DWORD ntmFlags;
        UINT ntmSizeEM;
        UINT ntmCellHeight;
        UINT ntmAvgWidth;
} NEWTEXTMETRICA,*PNEWTEXTMETRICA,*LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW {
        LONG tmHeight;
        LONG tmAscent;
        LONG tmDescent;
        LONG tmInternalLeading;
        LONG tmExternalLeading;
        LONG tmAveCharWidth;
        LONG tmMaxCharWidth;
        LONG tmWeight;
        LONG tmOverhang;
        LONG tmDigitizedAspectX;
        LONG tmDigitizedAspectY;
        WCHAR tmFirstChar;
        WCHAR tmLastChar;
        WCHAR tmDefaultChar;
        WCHAR tmBreakChar;
        BYTE tmItalic;
        BYTE tmUnderlined;
        BYTE tmStruckOut;
        BYTE tmPitchAndFamily;
        BYTE tmCharSet;
        DWORD ntmFlags;
        UINT ntmSizeEM;
        UINT ntmCellHeight;
        UINT ntmAvgWidth;
} NEWTEXTMETRICW,*PNEWTEXTMETRICW,*LPNEWTEXTMETRICW;
#pragma pack(pop)
typedef struct tagNEWTEXTMETRICEXA {
        NEWTEXTMETRICA ntmTm;
        FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW {
        NEWTEXTMETRICW ntmTm;
        FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXW;
typedef struct tagPELARRAY {
        LONG paXCount;
        LONG paYCount;
        LONG paXExt;
        LONG paYExt;
        BYTE paRGBs;
} PELARRAY,*PPELARRAY,*LPPELARRAY;
typedef struct tagENUMLOGFONTA {
        LOGFONTA elfLogFont;
        BYTE elfFullName[64];
        BYTE elfStyle[32];
} ENUMLOGFONTA,*LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW {
        LOGFONTW elfLogFont;
        WCHAR elfFullName[64];
        WCHAR elfStyle[32];
} ENUMLOGFONTW,*LPENUMLOGFONTW;
typedef struct tagENUMLOGFONTEXA {
        LOGFONTA elfLogFont;
        BYTE elfFullName[64];
        BYTE elfStyle[32];
        BYTE elfScript[32];
} ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW {
        LOGFONTW elfLogFont;
        WCHAR elfFullName[64];
        BYTE elfStyle[32];
        BYTE elfScript[32];
} ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;
typedef struct tagPOINTFX {
        FIXED x;
        FIXED y;
} POINTFX,*LPPOINTFX;
typedef struct tagTTPOLYCURVE {
        WORD wType;
        WORD cpfx;
        POINTFX apfx[1];
} TTPOLYCURVE,*LPTTPOLYCURVE;
typedef struct tagTTPOLYGONHEADER {
        DWORD cb;
        DWORD dwType;
        POINTFX pfxStart;
} TTPOLYGONHEADER,*LPTTPOLYGONHEADER;
typedef struct _POINTFLOAT {
        FLOAT x;
        FLOAT y;
} POINTFLOAT,*PPOINTFLOAT;
typedef struct _GLYPHMETRICSFLOAT {
        FLOAT gmfBlackBoxX;
        FLOAT gmfBlackBoxY;
        POINTFLOAT gmfptGlyphOrigin;
        FLOAT gmfCellIncX;
        FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,*LPGLYPHMETRICSFLOAT;
typedef struct tagLAYERPLANEDESCRIPTOR {
        WORD nSize;
        WORD nVersion;
        DWORD dwFlags;
        BYTE iPixelType;
        BYTE cColorBits;
        BYTE cRedBits;
        BYTE cRedShift;
        BYTE cGreenBits;
        BYTE cGreenShift;
        BYTE cBlueBits;
        BYTE cBlueShift;
        BYTE cAlphaBits;
        BYTE cAlphaShift;
        BYTE cAccumBits;
        BYTE cAccumRedBits;
        BYTE cAccumGreenBits;
        BYTE cAccumBlueBits;
        BYTE cAccumAlphaBits;
        BYTE cDepthBits;
        BYTE cStencilBits;
        BYTE cAuxBuffers;
        BYTE iLayerPlane;
        BYTE bReserved;
        COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,*LPLAYERPLANEDESCRIPTOR;
typedef struct _BLENDFUNCTION {
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
} BLENDFUNCTION,*PBLENDFUNCTION,*LPBLENDFUNCTION;

typedef struct _DESIGNVECTOR {
        DWORD dvReserved;
        DWORD dvNumAxes;
        LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;
typedef USHORT COLOR16;
typedef struct _TRIVERTEX {
        LONG x;
        LONG y;
        COLOR16 Red;
        COLOR16 Green;
        COLOR16 Blue;
        COLOR16 Alpha;
} TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX;
typedef struct _DISPLAY_DEVICE {
  DWORD cb;
  WCHAR DeviceName[32];
  WCHAR DeviceString[128];
  DWORD StateFlags;
  WCHAR DeviceID[128];
  WCHAR DeviceKey[128];
} DISPLAY_DEVICE, *PDISPLAY_DEVICE;

typedef BOOL (__attribute__((__stdcall__)) *ABORTPROC)(HDC,int);
typedef int (__attribute__((__stdcall__)) *MFENUMPROC)(HDC,HANDLETABLE*,METARECORD*,int,LPARAM);
typedef int (__attribute__((__stdcall__)) *ENHMFENUMPROC)(HDC,HANDLETABLE*,ENHMETARECORD*,int,LPARAM);
typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCA)(const LOGFONTA*,const TEXTMETRICA*,DWORD,LPARAM);
typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCW)(const LOGFONTW*,const TEXTMETRICW*,DWORD,LPARAM);
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef int (__attribute__((__stdcall__)) *ICMENUMPROCA)(LPSTR,LPARAM);
typedef int (__attribute__((__stdcall__)) *ICMENUMPROCW)(LPWSTR,LPARAM);
typedef void (__attribute__((__stdcall__)) *GOBJENUMPROC)(LPVOID,LPARAM);
typedef void (__attribute__((__stdcall__)) *LINEDDAPROC)(int,int,LPARAM);
typedef UINT (__attribute__((__stdcall__)) *LPFNDEVMODE)(HWND,HMODULE,LPDEVMODEA,LPSTR,LPSTR,LPDEVMODEA,LPSTR,UINT);
typedef DWORD (__attribute__((__stdcall__)) *LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODEA);







int __attribute__((__stdcall__)) AbortDoc(HDC);
BOOL __attribute__((__stdcall__)) AbortPath(HDC);
int __attribute__((__stdcall__)) AddFontResourceA(LPCSTR);
int __attribute__((__stdcall__)) AddFontResourceW(LPCWSTR);
BOOL __attribute__((__stdcall__)) AngleArc(HDC,int,int,DWORD,FLOAT,FLOAT);
BOOL __attribute__((__stdcall__)) AnimatePalette(HPALETTE,UINT,UINT,const PALETTEENTRY*);
BOOL __attribute__((__stdcall__)) Arc(HDC,int,int,int,int,int,int,int,int);
BOOL __attribute__((__stdcall__)) ArcTo(HDC,int,int,int,int,int,int,int,int);
BOOL __attribute__((__stdcall__)) BeginPath(HDC);
BOOL __attribute__((__stdcall__)) BitBlt(HDC,int,int,int,int,HDC,int,int,DWORD);
BOOL __attribute__((__stdcall__)) CancelDC(HDC);
BOOL __attribute__((__stdcall__)) CheckColorsInGamut(HDC,PVOID,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) Chord(HDC,int,int,int,int,int,int,int,int);
int __attribute__((__stdcall__)) ChoosePixelFormat(HDC,const PIXELFORMATDESCRIPTOR*);
HENHMETAFILE __attribute__((__stdcall__)) CloseEnhMetaFile(HDC);
BOOL __attribute__((__stdcall__)) CloseFigure(HDC);
HMETAFILE __attribute__((__stdcall__)) CloseMetaFile(HDC);
BOOL __attribute__((__stdcall__)) ColorMatchToTarget(HDC,HDC,DWORD);
int __attribute__((__stdcall__)) CombineRgn(HRGN,HRGN,HRGN,int);
BOOL __attribute__((__stdcall__)) CombineTransform(LPXFORM,const XFORM*,const XFORM*);
HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileA(HENHMETAFILE,LPCSTR);
HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileW(HENHMETAFILE,LPCWSTR);
HMETAFILE __attribute__((__stdcall__)) CopyMetaFileA(HMETAFILE,LPCSTR);
HMETAFILE __attribute__((__stdcall__)) CopyMetaFileW(HMETAFILE,LPCWSTR);
HBITMAP __attribute__((__stdcall__)) CreateBitmap(int,int,UINT,UINT,PCVOID);
HBITMAP __attribute__((__stdcall__)) CreateBitmapIndirect(const BITMAP*);
HBRUSH __attribute__((__stdcall__)) CreateBrushIndirect(const LOGBRUSH*);
HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceA(LPLOGCOLORSPACEA);
HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceW(LPLOGCOLORSPACEW);
HBITMAP __attribute__((__stdcall__)) CreateCompatibleBitmap(HDC,int,int);
HDC __attribute__((__stdcall__)) CreateCompatibleDC(HDC);
HDC __attribute__((__stdcall__)) CreateDCA(LPCSTR,LPCSTR,LPCSTR,const DEVMODEA*);
HDC __attribute__((__stdcall__)) CreateDCW(LPCWSTR,LPCWSTR,LPCWSTR,const DEVMODEW*);
HBITMAP __attribute__((__stdcall__)) CreateDIBitmap(HDC,const BITMAPINFOHEADER*,DWORD,PCVOID,const BITMAPINFO*,UINT);
HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrush(HGLOBAL,UINT);
HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrushPt(PCVOID,UINT);
HBITMAP __attribute__((__stdcall__)) CreateDIBSection(HDC,const BITMAPINFO*,UINT,void**,HANDLE,DWORD);
HBITMAP __attribute__((__stdcall__)) CreateDiscardableBitmap(HDC,int,int);
HRGN __attribute__((__stdcall__)) CreateEllipticRgn(int,int,int,int);
HRGN __attribute__((__stdcall__)) CreateEllipticRgnIndirect(LPCRECT);
HDC __attribute__((__stdcall__)) CreateEnhMetaFileA(HDC,LPCSTR,LPCRECT,LPCSTR);
HDC __attribute__((__stdcall__)) CreateEnhMetaFileW(HDC,LPCWSTR,LPCRECT,LPCWSTR);
HFONT __attribute__((__stdcall__)) CreateFontA(int,int,int,int,int,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCSTR);
HFONT __attribute__((__stdcall__)) CreateFontW(int,int,int,int,int,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCWSTR);
HFONT __attribute__((__stdcall__)) CreateFontIndirectA(const LOGFONTA*);
HFONT __attribute__((__stdcall__)) CreateFontIndirectW(const LOGFONTW*);
HPALETTE __attribute__((__stdcall__)) CreateHalftonePalette(HDC);
HBRUSH __attribute__((__stdcall__)) CreateHatchBrush(int,COLORREF);
HDC __attribute__((__stdcall__)) CreateICA(LPCSTR,LPCSTR,LPCSTR,const DEVMODEA*);
HDC __attribute__((__stdcall__)) CreateICW(LPCWSTR,LPCWSTR,LPCWSTR,const DEVMODEW*);
HDC __attribute__((__stdcall__)) CreateMetaFileA(LPCSTR);
HDC __attribute__((__stdcall__)) CreateMetaFileW(LPCWSTR);
HPALETTE __attribute__((__stdcall__)) CreatePalette(const LOGPALETTE*);
HBRUSH __attribute__((__stdcall__)) CreatePatternBrush(HBITMAP);
HPEN __attribute__((__stdcall__)) CreatePen(int,int,COLORREF);
HPEN __attribute__((__stdcall__)) CreatePenIndirect(const LOGPEN*);
HRGN __attribute__((__stdcall__)) CreatePolygonRgn(const POINT*,int,int);
HRGN __attribute__((__stdcall__)) CreatePolyPolygonRgn(const POINT*,const INT*,int,int);
HRGN __attribute__((__stdcall__)) CreateRectRgn(int,int,int,int);
HRGN __attribute__((__stdcall__)) CreateRectRgnIndirect(LPCRECT);
HRGN __attribute__((__stdcall__)) CreateRoundRectRgn(int,int,int,int,int,int);
BOOL __attribute__((__stdcall__)) CreateScalableFontResourceA(DWORD,LPCSTR,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) CreateScalableFontResourceW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR);
HBRUSH __attribute__((__stdcall__)) CreateSolidBrush(COLORREF);
BOOL __attribute__((__stdcall__)) DeleteColorSpace(HCOLORSPACE);
BOOL __attribute__((__stdcall__)) DeleteDC(HDC);
BOOL __attribute__((__stdcall__)) DeleteEnhMetaFile(HENHMETAFILE);
BOOL __attribute__((__stdcall__)) DeleteMetaFile(HMETAFILE);
BOOL __attribute__((__stdcall__)) DeleteObject(HGDIOBJ);
int __attribute__((__stdcall__)) DescribePixelFormat(HDC,int,UINT,LPPIXELFORMATDESCRIPTOR);
DWORD __attribute__((__stdcall__)) DeviceCapabilitiesA(LPCSTR,LPCSTR,WORD,LPSTR,const DEVMODEA*);
DWORD __attribute__((__stdcall__)) DeviceCapabilitiesW(LPCWSTR,LPCWSTR,WORD,LPWSTR,const DEVMODEW*);
BOOL __attribute__((__stdcall__)) DPtoLP(HDC,LPPOINT,int);
int __attribute__((__stdcall__)) DrawEscape(HDC,int,int,LPCSTR);
BOOL __attribute__((__stdcall__)) Ellipse(HDC,int,int,int,int);
int __attribute__((__stdcall__)) EndDoc(HDC);
int __attribute__((__stdcall__)) EndPage(HDC);
BOOL __attribute__((__stdcall__)) EndPath(HDC);
BOOL __attribute__((__stdcall__)) EnumEnhMetaFile(HDC,HENHMETAFILE,ENHMFENUMPROC,PVOID,LPCRECT);
int __attribute__((__stdcall__)) EnumFontFamiliesA(HDC,LPCSTR,FONTENUMPROCA,LPARAM);
int __attribute__((__stdcall__)) EnumFontFamiliesW(HDC,LPCWSTR,FONTENUMPROCW,LPARAM);
int __attribute__((__stdcall__)) EnumFontFamiliesExA(HDC,PLOGFONTA,FONTENUMPROCA,LPARAM,DWORD);
int __attribute__((__stdcall__)) EnumFontFamiliesExW(HDC,PLOGFONTW,FONTENUMPROCW,LPARAM,DWORD);
int __attribute__((__stdcall__)) EnumFontsA(HDC,LPCSTR,FONTENUMPROCA,LPARAM);
int __attribute__((__stdcall__)) EnumFontsW(HDC,LPCWSTR,FONTENUMPROCW,LPARAM);
int __attribute__((__stdcall__)) EnumICMProfilesA(HDC,ICMENUMPROCA,LPARAM);
int __attribute__((__stdcall__)) EnumICMProfilesW(HDC,ICMENUMPROCW,LPARAM);
BOOL __attribute__((__stdcall__)) EnumMetaFile(HDC,HMETAFILE,MFENUMPROC,LPARAM);
int __attribute__((__stdcall__)) EnumObjects(HDC,int,GOBJENUMPROC,LPARAM);
BOOL __attribute__((__stdcall__)) EqualRgn(HRGN,HRGN);
int __attribute__((__stdcall__)) Escape(HDC,int,int,LPCSTR,PVOID);
int __attribute__((__stdcall__)) ExcludeClipRect(HDC,int,int,int,int);
int __attribute__((__stdcall__)) ExcludeUpdateRgn(HDC,HWND);
HPEN __attribute__((__stdcall__)) ExtCreatePen(DWORD,DWORD,const LOGBRUSH*,DWORD,const DWORD*);
HRGN __attribute__((__stdcall__)) ExtCreateRegion(const XFORM*,DWORD,const RGNDATA*);
int __attribute__((__stdcall__)) ExtEscape(HDC,int,int,LPCSTR,int,LPSTR);
BOOL __attribute__((__stdcall__)) ExtFloodFill(HDC,int,int,COLORREF,UINT);
int __attribute__((__stdcall__)) ExtSelectClipRgn(HDC,HRGN,int);
BOOL __attribute__((__stdcall__)) ExtTextOutA(HDC,int,int,UINT,LPCRECT,LPCSTR,UINT,const INT*);
BOOL __attribute__((__stdcall__)) ExtTextOutW(HDC,int,int,UINT,LPCRECT,LPCWSTR,UINT,const INT*);
BOOL __attribute__((__stdcall__)) FillPath(HDC);
int __attribute__((__stdcall__)) FillRect(HDC,LPCRECT,HBRUSH);
int __attribute__((__stdcall__)) FillRgn(HDC,HRGN,HBRUSH);
BOOL __attribute__((__stdcall__)) FixBrushOrgEx(HDC,int,int,LPPOINT);
BOOL __attribute__((__stdcall__)) FlattenPath(HDC);
BOOL __attribute__((__stdcall__)) FloodFill(HDC,int,int,COLORREF);
BOOL __attribute__((__stdcall__)) GdiComment(HDC,UINT,const BYTE*);
BOOL __attribute__((__stdcall__)) GdiFlush(void);
DWORD __attribute__((__stdcall__)) GdiGetBatchLimit(void);
DWORD __attribute__((__stdcall__)) GdiSetBatchLimit(DWORD);
# 2511 "C:/PROGRA~1/WIDEST~1/gcc/include/wingdi.h" 3
int __attribute__((__stdcall__)) GetArcDirection(HDC);
BOOL __attribute__((__stdcall__)) GetAspectRatioFilterEx(HDC,LPSIZE);
LONG __attribute__((__stdcall__)) GetBitmapBits(HBITMAP,LONG,PVOID);
BOOL __attribute__((__stdcall__)) GetBitmapDimensionEx(HBITMAP,LPSIZE);
COLORREF __attribute__((__stdcall__)) GetBkColor(HDC);
int __attribute__((__stdcall__)) GetBkMode(HDC);
UINT __attribute__((__stdcall__)) GetBoundsRect(HDC,LPRECT,UINT);
BOOL __attribute__((__stdcall__)) GetBrushOrgEx(HDC,LPPOINT);
BOOL __attribute__((__stdcall__)) GetCharABCWidthsA(HDC,UINT,UINT,LPABC);
BOOL __attribute__((__stdcall__)) GetCharABCWidthsW(HDC,UINT,UINT,LPABC);
BOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatA(HDC,UINT,UINT,LPABCFLOAT);
BOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatW(HDC,UINT,UINT,LPABCFLOAT);
DWORD __attribute__((__stdcall__)) GetCharacterPlacementA(HDC,LPCSTR,int,int,LPGCP_RESULTSA,DWORD);
DWORD __attribute__((__stdcall__)) GetCharacterPlacementW(HDC,LPCWSTR,int,int,LPGCP_RESULTSW,DWORD);
BOOL __attribute__((__stdcall__)) GetCharWidth32A(HDC,UINT,UINT,LPINT);
BOOL __attribute__((__stdcall__)) GetCharWidth32W(HDC,UINT,UINT,LPINT);
BOOL __attribute__((__stdcall__)) GetCharWidthA(HDC,UINT,UINT,LPINT);
BOOL __attribute__((__stdcall__)) GetCharWidthW(HDC,UINT,UINT,LPINT);
BOOL __attribute__((__stdcall__)) GetCharWidthFloatA(HDC,UINT,UINT,PFLOAT);
BOOL __attribute__((__stdcall__)) GetCharWidthFloatW(HDC,UINT,UINT,PFLOAT);
int __attribute__((__stdcall__)) GetClipBox(HDC,LPRECT);
int __attribute__((__stdcall__)) GetClipRgn(HDC,HRGN);
BOOL __attribute__((__stdcall__)) GetColorAdjustment(HDC,LPCOLORADJUSTMENT);
HANDLE __attribute__((__stdcall__)) GetColorSpace(HDC);
HGDIOBJ __attribute__((__stdcall__)) GetCurrentObject(HDC,UINT);
BOOL __attribute__((__stdcall__)) GetCurrentPositionEx(HDC,LPPOINT);
HCURSOR __attribute__((__stdcall__)) GetCursor(void);
BOOL __attribute__((__stdcall__)) GetDCOrgEx(HDC,LPPOINT);
int __attribute__((__stdcall__)) GetDeviceCaps(HDC,int);
BOOL __attribute__((__stdcall__)) GetDeviceGammaRamp(HDC,PVOID);
UINT __attribute__((__stdcall__)) GetDIBColorTable(HDC,UINT,UINT,RGBQUAD*);
int __attribute__((__stdcall__)) GetDIBits(HDC,HBITMAP,UINT,UINT,PVOID,LPBITMAPINFO,UINT);
HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileA(LPCSTR);
HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileW(LPCWSTR);
UINT __attribute__((__stdcall__)) GetEnhMetaFileBits(HENHMETAFILE,UINT,LPBYTE);
UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionA(HENHMETAFILE,UINT,LPSTR);
UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionW(HENHMETAFILE,UINT,LPWSTR);
UINT __attribute__((__stdcall__)) GetEnhMetaFileHeader(HENHMETAFILE,UINT,LPENHMETAHEADER);
UINT __attribute__((__stdcall__)) GetEnhMetaFilePaletteEntries(HENHMETAFILE,UINT,LPPALETTEENTRY);
UINT __attribute__((__stdcall__)) GetEnhMetaFilePixelFormat(HENHMETAFILE,DWORD,const PIXELFORMATDESCRIPTOR*);
DWORD __attribute__((__stdcall__)) GetFontData(HDC,DWORD,DWORD,PVOID,DWORD);
DWORD __attribute__((__stdcall__)) GetFontLanguageInfo(HDC);
DWORD __attribute__((__stdcall__)) GetGlyphOutlineA(HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,PVOID,const MAT2*);
DWORD __attribute__((__stdcall__)) GetGlyphOutlineW(HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,PVOID,const MAT2*);
int __attribute__((__stdcall__)) GetGraphicsMode(HDC);
BOOL __attribute__((__stdcall__)) GetICMProfileA(HDC,DWORD,LPSTR);
BOOL __attribute__((__stdcall__)) GetICMProfileW(HDC,DWORD,LPWSTR);
DWORD __attribute__((__stdcall__)) GetKerningPairsA(HDC,DWORD,LPKERNINGPAIR);
DWORD __attribute__((__stdcall__)) GetKerningPairsW(HDC,DWORD,LPKERNINGPAIR);
BOOL __attribute__((__stdcall__)) GetLogColorSpaceA(HCOLORSPACE,LPLOGCOLORSPACEA,DWORD);
BOOL __attribute__((__stdcall__)) GetLogColorSpaceW(HCOLORSPACE,LPLOGCOLORSPACEW,DWORD);
int __attribute__((__stdcall__)) GetMapMode(HDC);
HMETAFILE __attribute__((__stdcall__)) GetMetaFileA(LPCSTR);
HMETAFILE __attribute__((__stdcall__)) GetMetaFileW(LPCWSTR);
UINT __attribute__((__stdcall__)) GetMetaFileBitsEx(HMETAFILE,UINT,PVOID);
int __attribute__((__stdcall__)) GetMetaRgn(HDC,HRGN);
BOOL __attribute__((__stdcall__)) GetMiterLimit(HDC,PFLOAT);
COLORREF __attribute__((__stdcall__)) GetNearestColor(HDC,COLORREF);
UINT __attribute__((__stdcall__)) GetNearestPaletteIndex(HPALETTE,COLORREF);
int __attribute__((__stdcall__)) GetObjectA(HGDIOBJ,int,PVOID);
int __attribute__((__stdcall__)) GetObjectW(HGDIOBJ,int,PVOID);
DWORD __attribute__((__stdcall__)) GetObjectType(HGDIOBJ);
UINT __attribute__((__stdcall__)) GetOutlineTextMetricsA(HDC,UINT,LPOUTLINETEXTMETRICA);
UINT __attribute__((__stdcall__)) GetOutlineTextMetricsW(HDC,UINT,LPOUTLINETEXTMETRICW);
UINT __attribute__((__stdcall__)) GetPaletteEntries(HPALETTE,UINT,UINT,LPPALETTEENTRY);
int __attribute__((__stdcall__)) GetPath(HDC,LPPOINT,PBYTE,int);
COLORREF __attribute__((__stdcall__)) GetPixel(HDC,int,int);
int __attribute__((__stdcall__)) GetPixelFormat(HDC);
int __attribute__((__stdcall__)) GetPolyFillMode(HDC);
BOOL __attribute__((__stdcall__)) GetRasterizerCaps(LPRASTERIZER_STATUS,UINT);
int __attribute__((__stdcall__)) GetRandomRgn (HDC,HRGN,INT);
DWORD __attribute__((__stdcall__)) GetRegionData(HRGN,DWORD,LPRGNDATA);
int __attribute__((__stdcall__)) GetRgnBox(HRGN,LPRECT);
int __attribute__((__stdcall__)) GetROP2(HDC);
HGDIOBJ __attribute__((__stdcall__)) GetStockObject(int);
int __attribute__((__stdcall__)) GetStretchBltMode(HDC);
UINT __attribute__((__stdcall__)) GetSystemPaletteEntries(HDC,UINT,UINT,LPPALETTEENTRY);
UINT __attribute__((__stdcall__)) GetSystemPaletteUse(HDC);
UINT __attribute__((__stdcall__)) GetTextAlign(HDC);
int __attribute__((__stdcall__)) GetTextCharacterExtra(HDC);
int __attribute__((__stdcall__)) GetTextCharset(HDC);
int __attribute__((__stdcall__)) GetTextCharsetInfo(HDC,LPFONTSIGNATURE,DWORD);
COLORREF __attribute__((__stdcall__)) GetTextColor(HDC);
BOOL __attribute__((__stdcall__)) GetTextExtentExPointA(HDC,LPCSTR,int,int,LPINT,LPINT,LPSIZE);
BOOL __attribute__((__stdcall__)) GetTextExtentExPointW( HDC,LPCWSTR,int,int,LPINT,LPINT,LPSIZE );
BOOL __attribute__((__stdcall__)) GetTextExtentPointA(HDC,LPCSTR,int,LPSIZE);
BOOL __attribute__((__stdcall__)) GetTextExtentPointW(HDC,LPCWSTR,int,LPSIZE);
BOOL __attribute__((__stdcall__)) GetTextExtentPoint32A(HDC,LPCSTR,int,LPSIZE);
BOOL __attribute__((__stdcall__)) GetTextExtentPoint32W( HDC,LPCWSTR,int,LPSIZE);
int __attribute__((__stdcall__)) GetTextFaceA(HDC,int,LPSTR);
int __attribute__((__stdcall__)) GetTextFaceW(HDC,int,LPWSTR);
BOOL __attribute__((__stdcall__)) GetTextMetricsA(HDC,LPTEXTMETRICA);
BOOL __attribute__((__stdcall__)) GetTextMetricsW(HDC,LPTEXTMETRICW);
BOOL __attribute__((__stdcall__)) GetViewportExtEx(HDC,LPSIZE);
BOOL __attribute__((__stdcall__)) GetViewportOrgEx(HDC,LPPOINT);
BOOL __attribute__((__stdcall__)) GetWindowExtEx(HDC,LPSIZE);
BOOL __attribute__((__stdcall__)) GetWindowOrgEx(HDC,LPPOINT);
UINT __attribute__((__stdcall__)) GetWinMetaFileBits(HENHMETAFILE,UINT,LPBYTE,INT,HDC);
BOOL __attribute__((__stdcall__)) GetWorldTransform(HDC,LPXFORM);
int __attribute__((__stdcall__)) IntersectClipRect(HDC,int,int,int,int);
BOOL __attribute__((__stdcall__)) InvertRgn(HDC,HRGN);
BOOL __attribute__((__stdcall__)) LineDDA(int,int,int,int,LINEDDAPROC,LPARAM);
BOOL __attribute__((__stdcall__)) LineTo(HDC,int,int);
BOOL __attribute__((__stdcall__)) LPtoDP(HDC,LPPOINT,int);
BOOL __attribute__((__stdcall__)) MaskBlt(HDC,int,int,int,int,HDC,int,int,HBITMAP,int,int,DWORD);
BOOL __attribute__((__stdcall__)) ModifyWorldTransform(HDC,const XFORM*,DWORD);
BOOL __attribute__((__stdcall__)) MoveToEx(HDC,int,int,LPPOINT);
int __attribute__((__stdcall__)) OffsetClipRgn(HDC,int,int);
int __attribute__((__stdcall__)) OffsetRgn(HRGN,int,int);
BOOL __attribute__((__stdcall__)) OffsetViewportOrgEx(HDC,int,int,LPPOINT);
BOOL __attribute__((__stdcall__)) OffsetWindowOrgEx(HDC,int,int,LPPOINT);
BOOL __attribute__((__stdcall__)) PaintRgn(HDC,HRGN);
BOOL __attribute__((__stdcall__)) PatBlt(HDC,int,int,int,int,DWORD);
HRGN __attribute__((__stdcall__)) PathToRegion(HDC);
BOOL __attribute__((__stdcall__)) Pie(HDC,int,int,int,int,int,int,int,int);
BOOL __attribute__((__stdcall__)) PlayEnhMetaFile(HDC,HENHMETAFILE,LPCRECT);
BOOL __attribute__((__stdcall__)) PlayEnhMetaFileRecord(HDC,LPHANDLETABLE,const ENHMETARECORD*,UINT);
BOOL __attribute__((__stdcall__)) PlayMetaFile(HDC,HMETAFILE);
BOOL __attribute__((__stdcall__)) PlayMetaFileRecord(HDC,LPHANDLETABLE,LPMETARECORD,UINT);
BOOL __attribute__((__stdcall__)) PlgBlt(HDC,const POINT*,HDC,int,int,int,int,HBITMAP,int,int);
BOOL __attribute__((__stdcall__)) PolyBezier(HDC,const POINT*,DWORD);
BOOL __attribute__((__stdcall__)) PolyBezierTo(HDC,const POINT*,DWORD);
BOOL __attribute__((__stdcall__)) PolyDraw(HDC,const POINT*,const BYTE*,int);
BOOL __attribute__((__stdcall__)) Polygon(HDC,const POINT*,int);
BOOL __attribute__((__stdcall__)) Polyline(HDC,const POINT*,int);
BOOL __attribute__((__stdcall__)) PolylineTo(HDC,const POINT*,DWORD);
BOOL __attribute__((__stdcall__)) PolyPolygon(HDC,const POINT*,const INT*,int);
BOOL __attribute__((__stdcall__)) PolyPolyline(HDC,const POINT*,const DWORD*,DWORD);
BOOL __attribute__((__stdcall__)) PolyTextOutA(HDC,const POLYTEXTA*,int);
BOOL __attribute__((__stdcall__)) PolyTextOutW(HDC,const POLYTEXTW*,int);
BOOL __attribute__((__stdcall__)) PtInRegion(HRGN,int,int);
BOOL __attribute__((__stdcall__)) PtVisible(HDC,int,int);
UINT __attribute__((__stdcall__)) RealizePalette(HDC);
BOOL __attribute__((__stdcall__)) Rectangle(HDC,int,int,int,int);
BOOL __attribute__((__stdcall__)) RectInRegion(HRGN,LPCRECT);
BOOL __attribute__((__stdcall__)) RectVisible(HDC,LPCRECT);
BOOL __attribute__((__stdcall__)) RemoveFontResourceA(LPCSTR);
BOOL __attribute__((__stdcall__)) RemoveFontResourceW(LPCWSTR);
HDC __attribute__((__stdcall__)) ResetDCA(HDC,const DEVMODEA*);
HDC __attribute__((__stdcall__)) ResetDCW(HDC,const DEVMODEW*);
BOOL __attribute__((__stdcall__)) ResizePalette(HPALETTE,UINT);
BOOL __attribute__((__stdcall__)) RestoreDC(HDC,int);
BOOL __attribute__((__stdcall__)) RoundRect(HDC,int,int,int,int,int,int);
int __attribute__((__stdcall__)) SaveDC(HDC);
BOOL __attribute__((__stdcall__)) ScaleViewportExtEx(HDC,int,int,int,int,LPSIZE);
BOOL __attribute__((__stdcall__)) ScaleWindowExtEx(HDC,int,int,int,int,LPSIZE);
BOOL __attribute__((__stdcall__)) SelectClipPath(HDC,int);
int __attribute__((__stdcall__)) SelectClipRgn(HDC,HRGN);
HGDIOBJ __attribute__((__stdcall__)) SelectObject(HDC,HGDIOBJ);
HPALETTE __attribute__((__stdcall__)) SelectPalette(HDC,HPALETTE,BOOL);
int __attribute__((__stdcall__)) SetAbortProc(HDC,ABORTPROC);
int __attribute__((__stdcall__)) SetArcDirection(HDC,int);
LONG __attribute__((__stdcall__)) SetBitmapBits(HBITMAP,DWORD,PCVOID);
BOOL __attribute__((__stdcall__)) SetBitmapDimensionEx(HBITMAP,int,int,LPSIZE);
COLORREF __attribute__((__stdcall__)) SetBkColor(HDC,COLORREF);
int __attribute__((__stdcall__)) SetBkMode(HDC,int);
UINT __attribute__((__stdcall__)) SetBoundsRect(HDC,LPCRECT,UINT);
BOOL __attribute__((__stdcall__)) SetBrushOrgEx(HDC,int,int,LPPOINT);
BOOL __attribute__((__stdcall__)) SetColorAdjustment(HDC,const COLORADJUSTMENT*);
BOOL __attribute__((__stdcall__)) SetColorSpace(HDC,HCOLORSPACE);
BOOL __attribute__((__stdcall__)) SetDeviceGammaRamp(HDC,PVOID);
UINT __attribute__((__stdcall__)) SetDIBColorTable(HDC,UINT,UINT,const RGBQUAD*);
int __attribute__((__stdcall__)) SetDIBits(HDC,HBITMAP,UINT,UINT,PCVOID,const BITMAPINFO*,UINT);
int __attribute__((__stdcall__)) SetDIBitsToDevice(HDC,int,int,DWORD,DWORD,int,int,UINT,UINT,PCVOID,const BITMAPINFO*,UINT);
HENHMETAFILE __attribute__((__stdcall__)) SetEnhMetaFileBits(UINT,const BYTE*);
int __attribute__((__stdcall__)) SetGraphicsMode(HDC,int);
int __attribute__((__stdcall__)) SetICMMode(HDC,int);
BOOL __attribute__((__stdcall__)) SetICMProfileA(HDC,LPSTR);
BOOL __attribute__((__stdcall__)) SetICMProfileW(HDC,LPWSTR);
int __attribute__((__stdcall__)) SetMapMode(HDC,int);
DWORD __attribute__((__stdcall__)) SetMapperFlags(HDC,DWORD);
HMETAFILE __attribute__((__stdcall__)) SetMetaFileBitsEx(UINT,const BYTE *);
int __attribute__((__stdcall__)) SetMetaRgn(HDC);
BOOL __attribute__((__stdcall__)) SetMiterLimit(HDC,FLOAT,PFLOAT);
UINT __attribute__((__stdcall__)) SetPaletteEntries(HPALETTE,UINT,UINT,const PALETTEENTRY*);
COLORREF __attribute__((__stdcall__)) SetPixel(HDC,int,int,COLORREF);
BOOL __attribute__((__stdcall__)) SetPixelFormat(HDC,int,const PIXELFORMATDESCRIPTOR*);
BOOL __attribute__((__stdcall__)) SetPixelV(HDC,int,int,COLORREF);
int __attribute__((__stdcall__)) SetPolyFillMode(HDC,int);
BOOL __attribute__((__stdcall__)) SetRectRgn(HRGN,int,int,int,int);
int __attribute__((__stdcall__)) SetROP2(HDC,int);
int __attribute__((__stdcall__)) SetStretchBltMode(HDC,int);
UINT __attribute__((__stdcall__)) SetSystemPaletteUse(HDC,UINT);
UINT __attribute__((__stdcall__)) SetTextAlign(HDC,UINT);
int __attribute__((__stdcall__)) SetTextCharacterExtra(HDC,int);
COLORREF __attribute__((__stdcall__)) SetTextColor(HDC,COLORREF);
BOOL __attribute__((__stdcall__)) SetTextJustification(HDC,int,int);
BOOL __attribute__((__stdcall__)) SetViewportExtEx(HDC,int,int,LPSIZE);
BOOL __attribute__((__stdcall__)) SetViewportOrgEx(HDC,int,int,LPPOINT);
BOOL __attribute__((__stdcall__)) SetWindowExtEx(HDC,int,int,LPSIZE);
BOOL __attribute__((__stdcall__)) SetWindowOrgEx(HDC,int,int,LPPOINT);
HENHMETAFILE __attribute__((__stdcall__)) SetWinMetaFileBits(UINT,const BYTE*,HDC,const METAFILEPICT*);
BOOL __attribute__((__stdcall__)) SetWorldTransform(HDC,const XFORM *);
int __attribute__((__stdcall__)) StartDocA(HDC,const DOCINFOA*);
int __attribute__((__stdcall__)) StartDocW(HDC,const DOCINFOW*);
int __attribute__((__stdcall__)) StartPage(HDC);
BOOL __attribute__((__stdcall__)) StretchBlt(HDC,int,int,int,int,HDC,int,int,int,int,DWORD);
int __attribute__((__stdcall__)) StretchDIBits(HDC,int,int,int,int,int,int,int,int,const void *,const BITMAPINFO *,UINT,DWORD);
BOOL __attribute__((__stdcall__)) StrokeAndFillPath(HDC);
BOOL __attribute__((__stdcall__)) StrokePath(HDC);
BOOL __attribute__((__stdcall__)) SwapBuffers(HDC);
BOOL __attribute__((__stdcall__)) TextOutA(HDC,int,int,LPCSTR,int);
BOOL __attribute__((__stdcall__)) TextOutW(HDC,int,int,LPCWSTR,int);
BOOL __attribute__((__stdcall__)) TranslateCharsetInfo(PDWORD,LPCHARSETINFO,DWORD);
BOOL __attribute__((__stdcall__)) UnrealizeObject(HGDIOBJ);
BOOL __attribute__((__stdcall__)) UpdateColors(HDC);
BOOL __attribute__((__stdcall__)) UpdateICMRegKeyA(DWORD,DWORD,LPSTR,UINT);
BOOL __attribute__((__stdcall__)) UpdateICMRegKeyW(DWORD,DWORD,LPWSTR,UINT);
BOOL __attribute__((__stdcall__)) WidenPath(HDC);
BOOL __attribute__((__stdcall__)) wglCopyContext(HGLRC,HGLRC,UINT);
HGLRC __attribute__((__stdcall__)) wglCreateContext(HDC);
HGLRC __attribute__((__stdcall__)) wglCreateLayerContext(HDC,int);
BOOL __attribute__((__stdcall__)) wglDeleteContext(HGLRC);
BOOL __attribute__((__stdcall__)) wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR);
HGLRC __attribute__((__stdcall__)) wglGetCurrentContext(void);
HDC __attribute__((__stdcall__)) wglGetCurrentDC(void);
int __attribute__((__stdcall__)) wglGetLayerPaletteEntries(HDC,int,int,int,const COLORREF*);
PROC __attribute__((__stdcall__)) wglGetProcAddress(LPCSTR);
BOOL __attribute__((__stdcall__)) wglMakeCurrent(HDC,HGLRC);
BOOL __attribute__((__stdcall__)) wglRealizeLayerPalette(HDC,int,BOOL);
int __attribute__((__stdcall__)) wglSetLayerPaletteEntries(HDC,int,int,int,const COLORREF*);
BOOL __attribute__((__stdcall__)) wglShareLists(HGLRC,HGLRC);
BOOL __attribute__((__stdcall__)) wglSwapLayerBuffers(HDC,UINT);
BOOL __attribute__((__stdcall__)) wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
BOOL __attribute__((__stdcall__)) wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
# 2808 "C:/PROGRA~1/WIDEST~1/gcc/include/wingdi.h" 3
typedef BYTE BCHAR;
typedef DOCINFOA DOCINFO, *LPDOCINFO;
typedef LOGFONTA LOGFONT,*PLOGFONT,*LPLOGFONT;
typedef TEXTMETRICA TEXTMETRIC,*PTEXTMETRIC,*LPTEXTMETRIC;


typedef DEVMODEA DEVMODE,*PDEVMODE,*LPDEVMODE;
typedef EXTLOGFONTA EXTLOGFONT,*PEXTLOGFONT,*LPEXTLOGFONT;
typedef GCP_RESULTSA GCP_RESULTS,*LPGCP_RESULTS;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC,*POUTLINETEXTMETRIC,*LPOUTLINETEXTMETRIC;
typedef POLYTEXTA POLYTEXT;
typedef LOGCOLORSPACEA LOGCOLORSPACE,*LPLOGCOLORSPACE;
typedef NEWTEXTMETRICA NEWTEXTMETRIC,*PNEWTEXTMETRIC,*LPNEWTEXTMETRIC;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef ENUMLOGFONTA ENUMLOGFONT,*LPENUMLOGFONT;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX,*LPENUMLOGFONTEX;
# 2872 "C:/PROGRA~1/WIDEST~1/gcc/include/wingdi.h" 3
}
# 54 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 3



extern "C" {
# 1916 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 3
typedef BOOL(__attribute__((__stdcall__)) *DLGPROC)(HWND,UINT,WPARAM,LPARAM);
typedef void(__attribute__((__stdcall__)) *TIMERPROC)(HWND,UINT,UINT,DWORD);
typedef BOOL(__attribute__((__stdcall__)) *GRAYSTRINGPROC)(HDC,LPARAM,int);
typedef LRESULT(__attribute__((__stdcall__)) *HOOKPROC)(int,WPARAM,LPARAM);
typedef BOOL(__attribute__((__stdcall__)) *PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
typedef BOOL(__attribute__((__stdcall__)) *PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
typedef BOOL(__attribute__((__stdcall__)) *PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,DWORD);
typedef BOOL(__attribute__((__stdcall__)) *PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,DWORD);
typedef int(__attribute__((__stdcall__)) *EDITWORDBREAKPROCA)(LPSTR,int,int,int);
typedef int(__attribute__((__stdcall__)) *EDITWORDBREAKPROCW)(LPWSTR,int,int,int);
typedef LRESULT(__attribute__((__stdcall__)) *WNDPROC)(HWND,UINT,WPARAM,LPARAM);
typedef BOOL(__attribute__((__stdcall__)) *DRAWSTATEPROC)(HDC,LPARAM,WPARAM,int,int);
typedef BOOL(__attribute__((__stdcall__)) *WNDENUMPROC)(HWND,LPARAM);
typedef BOOL(__attribute__((__stdcall__)) *ENUMWINDOWSPROC)(HWND,LPARAM);
typedef BOOL(__attribute__((__stdcall__))* MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);
typedef BOOL(__attribute__((__stdcall__)) *NAMEENUMPROCA)(LPSTR,LPARAM);
typedef BOOL(__attribute__((__stdcall__)) *NAMEENUMPROCW)(LPWSTR,LPARAM);
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef void(__attribute__((__stdcall__)) *SENDASYNCPROC)(HWND,UINT,DWORD,LRESULT);
typedef struct HHOOK__{int i;}*HHOOK;
typedef struct HDWP__{int i;}*HDWP;
typedef struct HDEVNOTIFY__{int i;}*HDEVNOTIFY;
typedef struct tagACCEL {
        BYTE fVirt;
        WORD key;
        WORD cmd;
} ACCEL,*LPACCEL;
typedef struct tagACCESSTIMEOUT {
        UINT cbSize;
        DWORD dwFlags;
        DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
typedef struct tagANIMATIONINFO {
        UINT cbSize;
        int iMinAnimate;
} ANIMATIONINFO,*LPANIMATIONINFO;
typedef struct tagCREATESTRUCTA {
        LPVOID lpCreateParams;
        HINSTANCE hInstance;
        HMENU hMenu;
        HWND hwndParent;
        int cy;
        int cx;
        int y;
        int x;
        LONG style;
        LPCSTR lpszName;
        LPCSTR lpszClass;
        DWORD dwExStyle;
} CREATESTRUCTA,*LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
        LPVOID lpCreateParams;
        HINSTANCE hInstance;
        HMENU hMenu;
        HWND hwndParent;
        int cy;
        int cx;
        int y;
        int x;
        LONG style;
        LPCWSTR lpszName;
        LPCWSTR lpszClass;
        DWORD dwExStyle;
} CREATESTRUCTW,*LPCREATESTRUCTW;
typedef struct tagCBT_CREATEWNDA {
        LPCREATESTRUCTA lpcs;
        HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW {
        LPCREATESTRUCTW lpcs;
        HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;
typedef struct tagCBTACTIVATESTRUCT {
        BOOL fMouse;
        HWND hWndActive;
} CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;
typedef struct tagCLIENTCREATESTRUCT {
        HANDLE hWindowMenu;
        UINT idFirstChild;
} CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;
typedef struct tagCOMPAREITEMSTRUCT {
        UINT CtlType;
        UINT CtlID;
        HWND hwndItem;
        UINT itemID1;
        DWORD itemData1;
        UINT itemID2;
        DWORD itemData2;
        DWORD dwLocaleId;
} COMPAREITEMSTRUCT,*LPCOMPAREITEMSTRUCT;
typedef struct tagCOPYDATASTRUCT {
        DWORD dwData;
        DWORD cbData;
        PVOID lpData;
} COPYDATASTRUCT,*PCOPYDATASTRUCT;
typedef struct tagCURSORSHAPE {
        int xHotSpot;
        int yHotSpot;
        int cx;
        int cy;
        int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE,*LPCURSORSHAPE;
typedef struct tagCWPRETSTRUCT {
        LRESULT lResult;
        LPARAM lParam;
        WPARAM wParam;
        DWORD message;
        HWND hwnd;
} CWPRETSTRUCT;
typedef struct tagCWPSTRUCT {
        LPARAM lParam;
        WPARAM wParam;
        UINT message;
        HWND hwnd;
} CWPSTRUCT,*PCWPSTRUCT;
typedef struct tagDEBUGHOOKINFO {
        DWORD idThread;
        DWORD idThreadInstaller;
        LPARAM lParam;
        WPARAM wParam;
        int code;
} DEBUGHOOKINFO,*PDEBUGHOOKINFO,*LPDEBUGHOOKINFO;
typedef struct tagDELETEITEMSTRUCT {
        UINT CtlType;
        UINT CtlID;
        UINT itemID;
        HWND hwndItem;
        UINT itemData;
} DELETEITEMSTRUCT,*PDELETEITEMSTRUCT,*LPDELETEITEMSTRUCT;
#pragma pack(push,2)
typedef struct {
        DWORD style;
        DWORD dwExtendedStyle;
        short x;
        short y;
        short cx;
        short cy;
        WORD id;
} DLGITEMTEMPLATE,*LPDLGITEMTEMPLATE;
typedef struct {
        DWORD style;
        DWORD dwExtendedStyle;
        WORD cdit;
        short x;
        short y;
        short cx;
        short cy;
} DLGTEMPLATE,*LPDLGTEMPLATE;
typedef const DLGTEMPLATE *LPCDLGTEMPLATE;
#pragma pack(pop)
typedef struct tagDRAWITEMSTRUCT {
        UINT CtlType;
        UINT CtlID;
        UINT itemID;
        UINT itemAction;
        UINT itemState;
        HWND hwndItem;
        HDC hDC;
        RECT rcItem;
        DWORD itemData;
} DRAWITEMSTRUCT,*LPDRAWITEMSTRUCT,*PDRAWITEMSTRUCT;
typedef struct {
        UINT cbSize;
        int iTabLength;
        int iLeftMargin;
        int iRightMargin;
        UINT uiLengthDrawn;
} DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;
typedef struct tagPAINTSTRUCT {
        HDC hdc;
        BOOL fErase;
        RECT rcPaint;
        BOOL fRestore;
        BOOL fIncUpdate;
        BYTE rgbReserved[32];
} PAINTSTRUCT,*LPPAINTSTRUCT;
typedef struct tagMSG {
        HWND hwnd;
        UINT message;
        WPARAM wParam;
        LPARAM lParam;
        DWORD time;
        POINT pt;
} MSG,*LPMSG,*PMSG;
typedef struct _ICONINFO {
        BOOL fIcon;
        DWORD xHotspot;
        DWORD yHotspot;
        HBITMAP hbmMask;
        HBITMAP hbmColor;
} ICONINFO,*PICONINFO;
typedef struct tagNMHDR {
        HWND hwndFrom;
        UINT idFrom;
        UINT code;
} NMHDR,*LPNMHDR;
typedef struct _WNDCLASSA {
        UINT style;
        WNDPROC lpfnWndProc;
        int cbClsExtra;
        int cbWndExtra;
        HANDLE hInstance;
        HICON hIcon;
        HCURSOR hCursor;
        HBRUSH hbrBackground;
        LPCSTR lpszMenuName;
        LPCSTR lpszClassName;
} WNDCLASSA,*LPWNDCLASSA,*PWNDCLASSA;
typedef struct _WNDCLASSW {
        UINT style;
        WNDPROC lpfnWndProc;
        int cbClsExtra;
        int cbWndExtra;
        HANDLE hInstance;
        HICON hIcon;
        HCURSOR hCursor;
        HBRUSH hbrBackground;
        LPCWSTR lpszMenuName;
        LPCWSTR lpszClassName;
} WNDCLASSW,*LPWNDCLASSW,*PWNDCLASSW;
typedef struct _WNDCLASSEXA {
        UINT cbSize;
        UINT style;
        WNDPROC lpfnWndProc;
        int cbClsExtra;
        int cbWndExtra;
        HANDLE hInstance;
        HICON hIcon;
        HCURSOR hCursor;
        HBRUSH hbrBackground;
        LPCSTR lpszMenuName;
        LPCSTR lpszClassName;
        HICON hIconSm;
} WNDCLASSEXA,*LPWNDCLASSEXA,*PWNDCLASSEXA;
typedef struct _WNDCLASSEXW {
        UINT cbSize;
        UINT style;
        WNDPROC lpfnWndProc;
        int cbClsExtra;
        int cbWndExtra;
        HANDLE hInstance;
        HICON hIcon;
        HCURSOR hCursor;
        HBRUSH hbrBackground;
        LPCWSTR lpszMenuName;
        LPCWSTR lpszClassName;
        HICON hIconSm;
} WNDCLASSEXW,*LPWNDCLASSEXW,*PWNDCLASSEXW;
typedef struct tagMENUITEMINFOA {
        UINT cbSize;
        UINT fMask;
        UINT fType;
        UINT fState;
        UINT wID;
        HMENU hSubMenu;
        HBITMAP hbmpChecked;
        HBITMAP hbmpUnchecked;
        DWORD dwItemData;
        LPSTR dwTypeData;
        UINT cch;



} MENUITEMINFOA,*LPMENUITEMINFOA;
typedef const MENUITEMINFOA *LPCMENUITEMINFOA;
typedef struct tagMENUITEMINFOW {
        UINT cbSize;
        UINT fMask;
        UINT fType;
        UINT fState;
        UINT wID;
        HMENU hSubMenu;
        HBITMAP hbmpChecked;
        HBITMAP hbmpUnchecked;
        DWORD dwItemData;
        LPWSTR dwTypeData;
        UINT cch;



} MENUITEMINFOW,*LPMENUITEMINFOW;
typedef const MENUITEMINFOW *LPCMENUITEMINFOW;
typedef struct tagSCROLLINFO {
        UINT cbSize;
        UINT fMask;
        int nMin;
        int nMax;
        UINT nPage;
        int nPos;
        int nTrackPos;
} SCROLLINFO,*LPSCROLLINFO;
typedef const SCROLLINFO *LPCSCROLLINFO;
typedef struct _WINDOWPLACEMENT {
        UINT length;
        UINT flags;
        UINT showCmd;
        POINT ptMinPosition;
        POINT ptMaxPosition;
        RECT rcNormalPosition;
} WINDOWPLACEMENT,*LPWINDOWPLACEMENT,*PWINDOWPLACEMENT;
typedef struct {
        WORD versionNumber;
        WORD offset;
} MENUITEMTEMPLATEHEADER;
typedef struct {
        WORD mtOption;
        WORD mtID;
        WCHAR mtString[1];
} MENUITEMTEMPLATE;
typedef void MENUTEMPLATE,MENUTEMPLATEA,MENUTEMPLATEW,*LPMENUTEMPLATEA,*LPMENUTEMPLATEW,*LPMENUTEMPLATE;
typedef struct tagHELPINFO {
        UINT cbSize;
        int iContextType;
        int iCtrlId;
        HANDLE hItemHandle;
        DWORD dwContextId;
        POINT MousePos;
} HELPINFO,*LPHELPINFO;
typedef void(__attribute__((__stdcall__)) *MSGBOXCALLBACK)(LPHELPINFO);
typedef struct {
        UINT cbSize;
        HWND hwndOwner;
        HINSTANCE hInstance;
        LPCSTR lpszText;
        LPCSTR lpszCaption;
        DWORD dwStyle;
        LPCSTR lpszIcon;
        DWORD dwContextHelpId;
        MSGBOXCALLBACK lpfnMsgBoxCallback;
        DWORD dwLanguageId;
} MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;
typedef struct {
        UINT cbSize;
        HWND hwndOwner;
        HINSTANCE hInstance;
        LPCWSTR lpszText;
        LPCWSTR lpszCaption;
        DWORD dwStyle;
        LPCWSTR lpszIcon;
        DWORD dwContextHelpId;
        MSGBOXCALLBACK lpfnMsgBoxCallback;
        DWORD dwLanguageId;
} MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;
typedef struct tagUSEROBJECTFLAGS {
        BOOL fInherit;
        BOOL fReserved;
        DWORD dwFlags;
} USEROBJECTFLAGS;
typedef struct tagFILTERKEYS {
        UINT cbSize;
        DWORD dwFlags;
        DWORD iWaitMSec;
        DWORD iDelayMSec;
        DWORD iRepeatMSec;
        DWORD iBounceMSec;
} FILTERKEYS;
typedef struct tagHIGHCONTRASTA {
        UINT cbSize;
        DWORD dwFlags;
        LPSTR lpszDefaultScheme;
} HIGHCONTRASTA,*LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW {
        UINT cbSize;
        DWORD dwFlags;
        LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW,*LPHIGHCONTRASTW;
typedef struct tagICONMETRICSA {
        UINT cbSize;
        int iHorzSpacing;
        int iVertSpacing;
        int iTitleWrap;
        LOGFONTA lfFont;
} ICONMETRICSA,*LPICONMETRICSA;
typedef struct tagICONMETRICSW {
        UINT cbSize;
        int iHorzSpacing;
        int iVertSpacing;
        int iTitleWrap;
        LOGFONTW lfFont;
} ICONMETRICSW,*LPICONMETRICSW;
typedef struct tagMINIMIZEDMETRICS {
        UINT cbSize;
        int iWidth;
        int iHorzGap;
        int iVertGap;
        int iArrange;
} MINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;
typedef struct tagMOUSEKEYS{
        UINT cbSize;
        DWORD dwFlags;
        DWORD iMaxSpeed;
        DWORD iTimeToMaxSpeed;
        DWORD iCtrlSpeed;
        DWORD dwReserved1;
        DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
typedef struct tagNONCLIENTMETRICSA {
        UINT cbSize;
        int iBorderWidth;
        int iScrollWidth;
        int iScrollHeight;
        int iCaptionWidth;
        int iCaptionHeight;
        LOGFONTA lfCaptionFont;
        int iSmCaptionWidth;
        int iSmCaptionHeight;
        LOGFONTA lfSmCaptionFont;
        int iMenuWidth;
        int iMenuHeight;
        LOGFONTA lfMenuFont;
        LOGFONTA lfStatusFont;
        LOGFONTA lfMessageFont;
} NONCLIENTMETRICSA,*LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW {
        UINT cbSize;
        int iBorderWidth;
        int iScrollWidth;
        int iScrollHeight;
        int iCaptionWidth;
        int iCaptionHeight;
        LOGFONTW lfCaptionFont;
        int iSmCaptionWidth;
        int iSmCaptionHeight;
        LOGFONTW lfSmCaptionFont;
        int iMenuWidth;
        int iMenuHeight;
        LOGFONTW lfMenuFont;
        LOGFONTW lfStatusFont;
        LOGFONTW lfMessageFont;
} NONCLIENTMETRICSW,*LPNONCLIENTMETRICSW;
typedef struct tagSERIALKEYSA {
        UINT cbSize;
        DWORD dwFlags;
        LPSTR lpszActivePort;
        LPSTR lpszPort;
        UINT iBaudRate;
        UINT iPortState;
        UINT iActive;
} SERIALKEYSA,*LPSERIALKEYSA;
typedef struct tagSERIALKEYSW {
        UINT cbSize;
        DWORD dwFlags;
        LPWSTR lpszActivePort;
        LPWSTR lpszPort;
        UINT iBaudRate;
        UINT iPortState;
        UINT iActive;
} SERIALKEYSW,*LPSERIALKEYSW;
typedef struct tagSOUNDSENTRYA {
        UINT cbSize;
        DWORD dwFlags;
        DWORD iFSTextEffect;
        DWORD iFSTextEffectMSec;
        DWORD iFSTextEffectColorBits;
        DWORD iFSGrafEffect;
        DWORD iFSGrafEffectMSec;
        DWORD iFSGrafEffectColor;
        DWORD iWindowsEffect;
        DWORD iWindowsEffectMSec;
        LPSTR lpszWindowsEffectDLL;
        DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA,*LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW {
        UINT cbSize;
        DWORD dwFlags;
        DWORD iFSTextEffect;
        DWORD iFSTextEffectMSec;
        DWORD iFSTextEffectColorBits;
        DWORD iFSGrafEffect;
        DWORD iFSGrafEffectMSec;
        DWORD iFSGrafEffectColor;
        DWORD iWindowsEffect;
        DWORD iWindowsEffectMSec;
        LPWSTR lpszWindowsEffectDLL;
        DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW,*LPSOUNDSENTRYW;
typedef struct tagSTICKYKEYS {
        DWORD cbSize;
        DWORD dwFlags;
} STICKYKEYS,*LPSTICKYKEYS;
typedef struct tagTOGGLEKEYS {
        DWORD cbSize;
        DWORD dwFlags;
} TOGGLEKEYS;
typedef struct tagMOUSEHOOKSTRUCT {
        POINT pt;
        HWND hwnd;
        UINT wHitTestCode;
        DWORD dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;
typedef struct tagTRACKMOUSEEVENT {
        DWORD cbSize;
        DWORD dwFlags;
        HWND hwndTrack;
        DWORD dwHoverTime;
} TRACKMOUSEEVENT,*LPTRACKMOUSEEVENT;
typedef struct tagTPMPARAMS {
        UINT cbSize;
        RECT rcExclude;
} TPMPARAMS,*LPTPMPARAMS;
typedef struct tagEVENTMSG {
        UINT message;
        UINT paramL;
        UINT paramH;
        DWORD time;
        HWND hwnd;
} EVENTMSG,*PEVENTMSGMSG,*LPEVENTMSGMSG, *PEVENTMSG, *LPEVENTMSG;
typedef struct _WINDOWPOS {
        HWND hwnd;
        HWND hwndInsertAfter;
        int x;
        int y;
        int cx;
        int cy;
        UINT flags;
} WINDOWPOS,*PWINDOWPOS,*LPWINDOWPOS;
typedef struct tagMDICREATESTRUCTA {
        LPCSTR szClass;
        LPCSTR szTitle;
        HANDLE hOwner;
        int x;
        int y;
        int cx;
        int cy;
        DWORD style;
        LPARAM lParam;
} MDICREATESTRUCTA,*LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
        LPCWSTR szClass;
        LPCWSTR szTitle;
        HANDLE hOwner;
        int x;
        int y;
        int cx;
        int cy;
        DWORD style;
        LPARAM lParam;
} MDICREATESTRUCTW,*LPMDICREATESTRUCTW;
typedef struct tagMINMAXINFO {
        POINT ptReserved;
        POINT ptMaxSize;
        POINT ptMaxPosition;
        POINT ptMinTrackSize;
        POINT ptMaxTrackSize;
} MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;
typedef struct tagMDINEXTMENU {
        HMENU hmenuIn;
        HMENU hmenuNext;
        HWND hwndNext;
} MDINEXTMENU,*PMDINEXTMENU,*LPMDINEXTMENU;
typedef struct tagMEASUREITEMSTRUCT {
        UINT CtlType;
        UINT CtlID;
        UINT itemID;
        UINT itemWidth;
        UINT itemHeight;
        DWORD itemData;
} MEASUREITEMSTRUCT,*PMEASUREITEMSTRUCT,*LPMEASUREITEMSTRUCT;
typedef struct tagDROPSTRUCT {
        HWND hwndSource;
        HWND hwndSink;
        DWORD wFmt;
        DWORD dwData;
        POINT ptDrop;
        DWORD dwControlData;
} DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {
        DWORD mkSize;
        CHAR mkKeylist;
        CHAR szKeyphrase[1];
} MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {
        DWORD mkSize;
        WCHAR mkKeylist;
        WCHAR szKeyphrase[1];
} MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;
typedef struct tagHELPWININFOA {
        int wStructSize;
        int x;
        int y;
        int dx;
        int dy;
        int wMax;
        CHAR rgchMember[2];
} HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;
typedef struct tagHELPWININFOW {
        int wStructSize;
        int x;
        int y;
        int dx;
        int dy;
        int wMax;
        WCHAR rgchMember[2];
} HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;
typedef struct tagSTYLESTRUCT {
        DWORD styleOld;
        DWORD styleNew;
} STYLESTRUCT,*LPSTYLESTRUCT;
typedef struct tagALTTABINFO {
        DWORD cbSize;
        int cItems;
        int cColumns;
        int cRows;
        int iColFocus;
        int iRowFocus;
        int cxItem;
        int cyItem;
        POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;
typedef struct tagCOMBOBOXINFO {
        DWORD cbSize;
        RECT rcItem;
        RECT rcButton;
        DWORD stateButton;
        HWND hwndCombo;
        HWND hwndItem;
        HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;
typedef struct tagCURSORINFO {
        DWORD cbSize;
        DWORD flags;
        HCURSOR hCursor;
        POINT ptScreenPos;
} CURSORINFO,*PCURSORINFO,*LPCURSORINFO;
typedef struct tagMENUBARINFO {
        DWORD cbSize;
        RECT rcBar;
        HMENU hMenu;
        HWND hwndMenu;
        BOOL fBarFocused:1;
        BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO;
typedef struct tagMENUINFO {
        DWORD cbSize;
        DWORD fMask;
        DWORD dwStyle;
        UINT cyMax;
        HBRUSH hbrBack;
        DWORD dwContextHelpID;
        ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

typedef struct tagSCROLLBARINFO {
        DWORD cbSize;
        RECT rcScrollBar;
        int dxyLineButton;
        int xyThumbTop;
        int xyThumbBottom;
        int reserved;
        DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

typedef struct tagTITLEBARINFO {
        DWORD cbSize;
        RECT rcTitleBar;
        DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;
typedef struct tagWINDOWINFO {
        DWORD cbSize;
        RECT rcWindow;
        RECT rcClient;
        DWORD dwStyle;
        DWORD dwExStyle;
        DWORD dwWindowStatus;
        UINT cxWindowBorders;
        UINT cyWindowBorders;
        ATOM atomWindowType;
        WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;
typedef struct tagLASTINPUTINFO {
        UINT cbSize;
        DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;
typedef struct tagMONITORINFO {
        DWORD cbSize;
        RECT rcMonitor;
        RECT rcWork;
        DWORD dwFlags;
} MONITORINFO,*LPMONITORINFO;
typedef struct tagKBDLLHOOKSTRUCT {
        DWORD vkCode;
        DWORD scanCode;
        DWORD flags;
        DWORD time;
        DWORD dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;
# 2618 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 3
typedef struct tagMOUSEMOVEPOINT {
  int x;
  int y;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT;
typedef struct tagMOUSEINPUT {
  LONG dx;
  LONG dy;
  DWORD mouseData;
  DWORD dwFlags;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT;
typedef struct tagKEYBDINPUT {
  WORD wVk;
  WORD wScan;
  DWORD dwFlags;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT;
typedef struct tagHARDWAREINPUT {
  DWORD uMsg;
  WORD wParamL;
  WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT;
typedef struct tagINPUT {
  DWORD type;
  __extension__ union {
                MOUSEINPUT mi;
                KEYBDINPUT ki;
                HARDWAREINPUT hi;
  } ;
} INPUT, *PINPUT, *LPINPUT;
typedef struct tagGUITHREADINFO {
        DWORD cbSize;
        DWORD flags;
        HWND hwndActive;
        HWND hwndFocus;
        HWND hwndCapture;
        HWND hwndMenuOwner;
        HWND hwndMoveSize;
        HWND hwndCaret;
        RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO;
# 2683 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 3
HKL __attribute__((__stdcall__)) ActivateKeyboardLayout(HKL,UINT);
BOOL __attribute__((__stdcall__)) AdjustWindowRect(LPRECT,DWORD,BOOL);
BOOL __attribute__((__stdcall__)) AdjustWindowRectEx(LPRECT,DWORD,BOOL,DWORD);
BOOL __attribute__((__stdcall__)) AnyPopup(void);
BOOL __attribute__((__stdcall__)) AppendMenuA(HMENU,UINT,UINT,LPCSTR);
BOOL __attribute__((__stdcall__)) AppendMenuW(HMENU,UINT,UINT,LPCWSTR);
UINT __attribute__((__stdcall__)) ArrangeIconicWindows(HWND);
BOOL __attribute__((__stdcall__)) AttachThreadInput(DWORD,DWORD,BOOL);
HDWP __attribute__((__stdcall__)) BeginDeferWindowPos(int);
HDC __attribute__((__stdcall__)) BeginPaint(HWND,LPPAINTSTRUCT);
BOOL __attribute__((__stdcall__)) BringWindowToTop(HWND);
long __attribute__((__stdcall__)) BroadcastSystemMessage(DWORD,LPDWORD,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) CallMsgFilter(PMSG,int);
LRESULT __attribute__((__stdcall__)) CallNextHookEx(HHOOK,int,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) CallWindowProcA(WNDPROC,HWND,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) CallWindowProcW(WNDPROC,HWND,UINT,WPARAM,LPARAM);
WORD __attribute__((__stdcall__)) CascadeWindows(HWND,UINT,LPCRECT,UINT,const HWND*);
BOOL __attribute__((__stdcall__)) ChangeClipboardChain(HWND,HWND);
LONG __attribute__((__stdcall__)) ChangeDisplaySettingsA(PDEVMODEA,DWORD);
LONG __attribute__((__stdcall__)) ChangeDisplaySettingsW(PDEVMODEW,DWORD);
BOOL __attribute__((__stdcall__)) ChangeMenuA(HMENU,UINT,LPCSTR,UINT,UINT);
BOOL __attribute__((__stdcall__)) ChangeMenuW(HMENU,UINT,LPCWSTR,UINT,UINT);
LPSTR __attribute__((__stdcall__)) CharLowerA(LPSTR);
LPWSTR __attribute__((__stdcall__)) CharLowerW(LPWSTR);
DWORD __attribute__((__stdcall__)) CharLowerBuffA(LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) CharLowerBuffW(LPWSTR,DWORD);
LPSTR __attribute__((__stdcall__)) CharNextA(LPCSTR);
LPWSTR __attribute__((__stdcall__)) CharNextW(LPCWSTR);
LPSTR __attribute__((__stdcall__)) CharNextExA(WORD,LPCSTR,DWORD);
LPWSTR __attribute__((__stdcall__)) CharNextExW(WORD,LPCWSTR,DWORD);
LPSTR __attribute__((__stdcall__)) CharPrevA(LPCSTR,LPCSTR);
LPWSTR __attribute__((__stdcall__)) CharPrevW(LPCWSTR,LPCWSTR);
LPSTR __attribute__((__stdcall__)) CharPrevExA(WORD,LPCSTR,LPCSTR,DWORD);
LPWSTR __attribute__((__stdcall__)) CharPrevExW(WORD,LPCWSTR,LPCWSTR,DWORD);
BOOL __attribute__((__stdcall__)) CharToOemA(LPCSTR,LPSTR);
BOOL __attribute__((__stdcall__)) CharToOemW(LPCWSTR,LPSTR);
BOOL __attribute__((__stdcall__)) CharToOemBuffA(LPCSTR,LPSTR,DWORD);
BOOL __attribute__((__stdcall__)) CharToOemBuffW(LPCWSTR,LPSTR,DWORD);
LPSTR __attribute__((__stdcall__)) CharUpperA(LPSTR);
LPWSTR __attribute__((__stdcall__)) CharUpperW(LPWSTR);
DWORD __attribute__((__stdcall__)) CharUpperBuffA(LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) CharUpperBuffW(LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) CheckDlgButton(HWND,int,UINT);
DWORD __attribute__((__stdcall__)) CheckMenuItem(HMENU,UINT,UINT);
BOOL __attribute__((__stdcall__)) CheckMenuRadioItem(HMENU,UINT,UINT,UINT,UINT);
BOOL __attribute__((__stdcall__)) CheckRadioButton(HWND,int,int,int);
HWND __attribute__((__stdcall__)) ChildWindowFromPoint(HWND,POINT);
HWND __attribute__((__stdcall__)) ChildWindowFromPointEx(HWND,POINT,UINT);
BOOL __attribute__((__stdcall__)) ClientToScreen(HWND,LPPOINT);
BOOL __attribute__((__stdcall__)) ClipCursor(LPCRECT);
BOOL __attribute__((__stdcall__)) CloseClipboard(void);
BOOL __attribute__((__stdcall__)) CloseDesktop(HDESK);
BOOL __attribute__((__stdcall__)) CloseWindow(HWND);
BOOL __attribute__((__stdcall__)) CloseWindowStation(HWINSTA);
int __attribute__((__stdcall__)) CopyAcceleratorTableA(HACCEL,LPACCEL,int);
int __attribute__((__stdcall__)) CopyAcceleratorTableW(HACCEL,LPACCEL,int);
HCURSOR __attribute__((__stdcall__)) CopyCursor(HCURSOR);
HICON __attribute__((__stdcall__)) CopyIcon(HICON);
HANDLE __attribute__((__stdcall__)) CopyImage(HANDLE,UINT,int,int,UINT);
BOOL __attribute__((__stdcall__)) CopyRect(LPRECT,LPCRECT);
int __attribute__((__stdcall__)) CountClipboardFormats(void);
HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableA(LPACCEL,int);
HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableW(LPACCEL,int);
BOOL __attribute__((__stdcall__)) CreateCaret(HWND,HBITMAP,int,int);
HCURSOR __attribute__((__stdcall__)) CreateCursor(HINSTANCE,int,int,int,int,PCVOID,PCVOID);
HDESK __attribute__((__stdcall__)) CreateDesktopA(LPCSTR,LPCSTR,LPDEVMODEA,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
HDESK __attribute__((__stdcall__)) CreateDesktopW(LPCWSTR,LPCWSTR,LPDEVMODEW,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);




HWND __attribute__((__stdcall__)) CreateDialogIndirectParamA(HINSTANCE,LPCDLGTEMPLATE,HWND,DLGPROC,LPARAM);
HWND __attribute__((__stdcall__)) CreateDialogIndirectParamW(HINSTANCE,LPCDLGTEMPLATE,HWND,DLGPROC,LPARAM);
HWND __attribute__((__stdcall__)) CreateDialogParamA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
HWND __attribute__((__stdcall__)) CreateDialogParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
HICON __attribute__((__stdcall__)) CreateIcon(HINSTANCE,int,int,BYTE,BYTE,const BYTE*,const BYTE*);
HICON __attribute__((__stdcall__)) CreateIconFromResource(PBYTE,DWORD,BOOL,DWORD);
HICON __attribute__((__stdcall__)) CreateIconFromResourceEx(PBYTE,DWORD,BOOL,DWORD,int,int,UINT);
HICON __attribute__((__stdcall__)) CreateIconIndirect(PICONINFO);
HWND __attribute__((__stdcall__)) CreateMDIWindowA(LPCSTR,LPCSTR,DWORD,int,int,int,int,HWND,HINSTANCE,LPARAM);
HWND __attribute__((__stdcall__)) CreateMDIWindowW(LPCWSTR,LPCWSTR,DWORD,int,int,int,int,HWND,HINSTANCE,LPARAM);
HMENU __attribute__((__stdcall__)) CreateMenu(void);
HMENU __attribute__((__stdcall__)) CreatePopupMenu(void);


HWND __attribute__((__stdcall__)) CreateWindowExA(DWORD,LPCSTR,LPCSTR,DWORD,int,int,int,int,HWND,HMENU,HINSTANCE,LPVOID);
HWND __attribute__((__stdcall__)) CreateWindowExW(DWORD,LPCWSTR,LPCWSTR,DWORD,int,int,int,int,HWND,HMENU,HINSTANCE,LPVOID);
HWINSTA __attribute__((__stdcall__)) CreateWindowStationA(LPSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
HWINSTA __attribute__((__stdcall__)) CreateWindowStationW(LPWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
LRESULT __attribute__((__stdcall__)) DefDlgProcA(HWND,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) DefDlgProcW(HWND,UINT,WPARAM,LPARAM);
HDWP __attribute__((__stdcall__)) DeferWindowPos(HDWP,HWND,HWND,int,int,int,int,UINT);
LRESULT __attribute__((__stdcall__)) DefFrameProcA(HWND,HWND,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) DefFrameProcW(HWND,HWND,UINT,WPARAM,LPARAM);

LRESULT __attribute__((__stdcall__)) DefMDIChildProcA(HWND,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) DefMDIChildProcW(HWND,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) DefWindowProcA(HWND,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) DefWindowProcW(HWND,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) DeleteMenu(HMENU,UINT,UINT);
BOOL __attribute__((__stdcall__)) DestroyAcceleratorTable(HACCEL);
BOOL __attribute__((__stdcall__)) DestroyCaret(void);
BOOL __attribute__((__stdcall__)) DestroyCursor(HCURSOR);
BOOL __attribute__((__stdcall__)) DestroyIcon(HICON);
BOOL __attribute__((__stdcall__)) DestroyMenu(HMENU);
BOOL __attribute__((__stdcall__)) DestroyWindow(HWND);




int __attribute__((__stdcall__)) DialogBoxIndirectParamA(HINSTANCE,LPCDLGTEMPLATE,HWND,DLGPROC,LPARAM);
int __attribute__((__stdcall__)) DialogBoxIndirectParamW(HINSTANCE,LPCDLGTEMPLATE,HWND,DLGPROC,LPARAM);
int __attribute__((__stdcall__)) DialogBoxParamA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
int __attribute__((__stdcall__)) DialogBoxParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
LONG __attribute__((__stdcall__)) DispatchMessageA(const MSG*);
LONG __attribute__((__stdcall__)) DispatchMessageW(const MSG*);
int __attribute__((__stdcall__)) DlgDirListA(HWND,LPSTR,int,int,UINT);
int __attribute__((__stdcall__)) DlgDirListW(HWND,LPWSTR,int,int,UINT);
int __attribute__((__stdcall__)) DlgDirListComboBoxA(HWND,LPSTR,int,int,UINT);
int __attribute__((__stdcall__)) DlgDirListComboBoxW(HWND,LPWSTR,int,int,UINT);
BOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExA(HWND,LPSTR,int,int);
BOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExW(HWND,LPWSTR,int,int);
BOOL __attribute__((__stdcall__)) DlgDirSelectExA(HWND,LPSTR,int,int);
BOOL __attribute__((__stdcall__)) DlgDirSelectExW(HWND,LPWSTR,int,int);
BOOL __attribute__((__stdcall__)) DragDetect(HWND,POINT);
DWORD __attribute__((__stdcall__)) DragObject(HWND,HWND,UINT,DWORD,HCURSOR);
BOOL __attribute__((__stdcall__)) DrawAnimatedRects(HWND,int,LPCRECT,LPCRECT);
BOOL __attribute__((__stdcall__)) DrawCaption(HWND,HDC,LPCRECT,UINT);
BOOL __attribute__((__stdcall__)) DrawEdge(HDC,LPRECT,UINT,UINT);
BOOL __attribute__((__stdcall__)) DrawFocusRect(HDC,LPCRECT);
BOOL __attribute__((__stdcall__)) DrawFrameControl(HDC,LPRECT,UINT,UINT);
BOOL __attribute__((__stdcall__)) DrawIcon(HDC,int,int,HICON);
BOOL __attribute__((__stdcall__)) DrawIconEx(HDC,int,int,HICON,int,int,UINT,HBRUSH,UINT);
BOOL __attribute__((__stdcall__)) DrawMenuBar(HWND);
BOOL __attribute__((__stdcall__)) DrawStateA(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,int,int,int,int,UINT);
BOOL __attribute__((__stdcall__)) DrawStateW(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,int,int,int,int,UINT);
int __attribute__((__stdcall__)) DrawTextA(HDC,LPCSTR,int,LPRECT,UINT);
int __attribute__((__stdcall__)) DrawTextW(HDC,LPCWSTR,int,LPRECT,UINT);
int __attribute__((__stdcall__)) DrawTextExA(HDC,LPSTR,int,LPRECT,UINT,LPDRAWTEXTPARAMS);
int __attribute__((__stdcall__)) DrawTextExW(HDC,LPWSTR,int,LPRECT,UINT,LPDRAWTEXTPARAMS);
BOOL __attribute__((__stdcall__)) EmptyClipboard(void);
BOOL __attribute__((__stdcall__)) EnableMenuItem(HMENU,UINT,UINT);
BOOL __attribute__((__stdcall__)) EnableScrollBar(HWND,UINT,UINT);
BOOL __attribute__((__stdcall__)) EnableWindow(HWND,BOOL);
BOOL __attribute__((__stdcall__)) EndDeferWindowPos(HDWP);
BOOL __attribute__((__stdcall__)) EndDialog(HWND,int);
BOOL __attribute__((__stdcall__)) EndMenu(void);
BOOL __attribute__((__stdcall__)) EndPaint(HWND,const PAINTSTRUCT*);
BOOL __attribute__((__stdcall__)) EnumChildWindows(HWND,ENUMWINDOWSPROC,LPARAM);
UINT __attribute__((__stdcall__)) EnumClipboardFormats(UINT);
BOOL __attribute__((__stdcall__)) EnumDesktopsA(HWINSTA,DESKTOPENUMPROCA,LPARAM);
BOOL __attribute__((__stdcall__)) EnumDesktopsW(HWINSTA,DESKTOPENUMPROCW,LPARAM);
BOOL __attribute__((__stdcall__)) EnumDesktopWindows(HDESK,ENUMWINDOWSPROC,LPARAM);
BOOL __attribute__((__stdcall__)) EnumDisplayMonitors(HDC,LPCRECT,MONITORENUMPROC,LPARAM);
BOOL __attribute__((__stdcall__)) EnumDisplaySettingsA(LPCSTR,DWORD,PDEVMODEA);
BOOL __attribute__((__stdcall__)) EnumDisplaySettingsW(LPCWSTR,DWORD,PDEVMODEW);
int __attribute__((__stdcall__)) EnumPropsA(HWND,PROPENUMPROCA);
int __attribute__((__stdcall__)) EnumPropsW(HWND,PROPENUMPROCW);
int __attribute__((__stdcall__)) EnumPropsExA(HWND,PROPENUMPROCEXA,LPARAM);
int __attribute__((__stdcall__)) EnumPropsExW(HWND,PROPENUMPROCEXW,LPARAM);

BOOL __attribute__((__stdcall__)) EnumThreadWindows(DWORD,WNDENUMPROC,LPARAM);
BOOL __attribute__((__stdcall__)) EnumWindows(WNDENUMPROC,LPARAM);
BOOL __attribute__((__stdcall__)) EnumWindowStationsA(WINSTAENUMPROCA,LPARAM);
BOOL __attribute__((__stdcall__)) EnumWindowStationsW(WINSTAENUMPROCW,LPARAM);
BOOL __attribute__((__stdcall__)) EqualRect(LPCRECT,LPCRECT);

BOOL __attribute__((__stdcall__)) ExitWindowsEx(UINT,DWORD);
HWND __attribute__((__stdcall__)) FindWindowA(LPCSTR,LPCSTR);
HWND __attribute__((__stdcall__)) FindWindowExA(HWND,HWND,LPCSTR,LPCSTR);
HWND __attribute__((__stdcall__)) FindWindowExW(HWND,HWND,LPCWSTR,LPCWSTR);
HWND __attribute__((__stdcall__)) FindWindowW(LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) FlashWindow(HWND,BOOL);
int __attribute__((__stdcall__)) FrameRect(HDC,LPCRECT,HBRUSH);
BOOL __attribute__((__stdcall__)) FrameRgn(HDC,HRGN,HBRUSH,int,int);
HWND __attribute__((__stdcall__)) GetActiveWindow(void);
SHORT __attribute__((__stdcall__)) GetAsyncKeyState(int);
HWND __attribute__((__stdcall__)) GetCapture(void);
UINT __attribute__((__stdcall__)) GetCaretBlinkTime(void);
BOOL __attribute__((__stdcall__)) GetCaretPos(LPPOINT);
BOOL __attribute__((__stdcall__)) GetClassInfoA(HINSTANCE,LPCSTR,LPWNDCLASSA);
BOOL __attribute__((__stdcall__)) GetClassInfoExA(HINSTANCE,LPCSTR,LPWNDCLASSEXA);
BOOL __attribute__((__stdcall__)) GetClassInfoW(HINSTANCE,LPCWSTR,LPWNDCLASSW);
BOOL __attribute__((__stdcall__)) GetClassInfoExW(HINSTANCE,LPCWSTR,LPWNDCLASSEXW);
DWORD __attribute__((__stdcall__)) GetClassLongA(HWND,int);
DWORD __attribute__((__stdcall__)) GetClassLongW(HWND,int);
int __attribute__((__stdcall__)) GetClassNameA(HWND,LPSTR,int);
int __attribute__((__stdcall__)) GetClassNameW(HWND,LPWSTR,int);
WORD __attribute__((__stdcall__)) GetClassWord(HWND,int);
BOOL __attribute__((__stdcall__)) GetClientRect(HWND,LPRECT);
HANDLE __attribute__((__stdcall__)) GetClipboardData(UINT);
int __attribute__((__stdcall__)) GetClipboardFormatNameA(UINT,LPSTR,int);
int __attribute__((__stdcall__)) GetClipboardFormatNameW(UINT,LPWSTR,int);
HWND __attribute__((__stdcall__)) GetClipboardOwner(void);
HWND __attribute__((__stdcall__)) GetClipboardViewer(void);
BOOL __attribute__((__stdcall__)) GetClipCursor(LPRECT);
BOOL __attribute__((__stdcall__)) GetCursorPos(LPPOINT);
HDC __attribute__((__stdcall__)) GetDC(HWND);
HDC __attribute__((__stdcall__)) GetDCEx(HWND,HRGN,DWORD);
HWND __attribute__((__stdcall__)) GetDesktopWindow(void);
long __attribute__((__stdcall__)) GetDialogBaseUnits(void);
int __attribute__((__stdcall__)) GetDlgCtrlID(HWND);
HWND __attribute__((__stdcall__)) GetDlgItem(HWND,int);
UINT __attribute__((__stdcall__)) GetDlgItemInt(HWND,int,PBOOL,BOOL);
UINT __attribute__((__stdcall__)) GetDlgItemTextA(HWND,int,LPSTR,int);
UINT __attribute__((__stdcall__)) GetDlgItemTextW(HWND,int,LPWSTR,int);
UINT __attribute__((__stdcall__)) GetDoubleClickTime(void);
HWND __attribute__((__stdcall__)) GetFocus(void);
HWND __attribute__((__stdcall__)) GetForegroundWindow(void);
BOOL __attribute__((__stdcall__)) GetIconInfo(HICON,PICONINFO);
BOOL __attribute__((__stdcall__)) GetInputState(void);
UINT __attribute__((__stdcall__)) GetKBCodePage(void);
HKL __attribute__((__stdcall__)) GetKeyboardLayout(DWORD);
UINT __attribute__((__stdcall__)) GetKeyboardLayoutList(int,HKL*);
BOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameA(LPSTR);
BOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameW(LPWSTR);
BOOL __attribute__((__stdcall__)) GetKeyboardState(PBYTE);
int __attribute__((__stdcall__)) GetKeyboardType(int);
int __attribute__((__stdcall__)) GetKeyNameTextA(LONG,LPSTR,int);
int __attribute__((__stdcall__)) GetKeyNameTextW(LONG,LPWSTR,int);
SHORT __attribute__((__stdcall__)) GetKeyState(int);
HWND __attribute__((__stdcall__)) GetLastActivePopup(HWND);
DWORD __attribute__((__stdcall__)) GetLastError(void);
HMENU __attribute__((__stdcall__)) GetMenu(HWND);
LONG __attribute__((__stdcall__)) GetMenuCheckMarkDimensions(void);
DWORD __attribute__((__stdcall__)) GetMenuContextHelpId(HMENU);
UINT __attribute__((__stdcall__)) GetMenuDefaultItem(HMENU,UINT,UINT);
int __attribute__((__stdcall__)) GetMenuItemCount(HMENU);
UINT __attribute__((__stdcall__)) GetMenuItemID(HMENU,int);
BOOL __attribute__((__stdcall__)) GetMenuItemInfoA(HMENU,UINT,BOOL,LPMENUITEMINFOA);
BOOL __attribute__((__stdcall__)) GetMenuItemInfoW(HMENU,UINT,BOOL,LPMENUITEMINFOW);
BOOL __attribute__((__stdcall__)) GetMenuItemRect(HWND,HMENU,UINT,LPRECT);
UINT __attribute__((__stdcall__)) GetMenuState(HMENU,UINT,UINT);
int __attribute__((__stdcall__)) GetMenuStringA(HMENU,UINT,LPSTR,int,UINT);
int __attribute__((__stdcall__)) GetMenuStringW(HMENU,UINT,LPWSTR,int,UINT);
BOOL __attribute__((__stdcall__)) GetMessageA(LPMSG,HWND,UINT,UINT);
BOOL __attribute__((__stdcall__)) GetMessageW(LPMSG,HWND,UINT,UINT);
LONG __attribute__((__stdcall__)) GetMessageExtraInfo(void);
DWORD __attribute__((__stdcall__)) GetMessagePos(void);
LONG __attribute__((__stdcall__)) GetMessageTime(void);
HWND __attribute__((__stdcall__)) GetNextDlgGroupItem(HWND,HWND,BOOL);
HWND __attribute__((__stdcall__)) GetNextDlgTabItem(HWND,HWND,BOOL);

HWND __attribute__((__stdcall__)) GetOpenClipboardWindow(void);
HWND __attribute__((__stdcall__)) GetParent(HWND);
int __attribute__((__stdcall__)) GetPriorityClipboardFormat(UINT*,int);
HANDLE __attribute__((__stdcall__)) GetPropA(HWND,LPCSTR);
HANDLE __attribute__((__stdcall__)) GetPropW(HWND,LPCWSTR);
DWORD __attribute__((__stdcall__)) GetQueueStatus(UINT);
BOOL __attribute__((__stdcall__)) GetScrollInfo(HWND,int,LPSCROLLINFO);
int __attribute__((__stdcall__)) GetScrollPos(HWND,int);
BOOL __attribute__((__stdcall__)) GetScrollRange(HWND,int,LPINT,LPINT);
HMENU __attribute__((__stdcall__)) GetSubMenu(HMENU,int);
DWORD __attribute__((__stdcall__)) GetSysColor(int);
HBRUSH __attribute__((__stdcall__)) GetSysColorBrush(int);

HMENU __attribute__((__stdcall__)) GetSystemMenu(HWND,BOOL);
int __attribute__((__stdcall__)) GetSystemMetrics(int);
DWORD __attribute__((__stdcall__)) GetTabbedTextExtentA(HDC,LPCSTR,int,int,LPINT);
DWORD __attribute__((__stdcall__)) GetTabbedTextExtentW(HDC,LPCWSTR,int,int,LPINT);
LONG __attribute__((__stdcall__)) GetWindowLongA(HWND,int);
LONG __attribute__((__stdcall__)) GetWindowLongW(HWND,int);







HDESK __attribute__((__stdcall__)) GetThreadDesktop(DWORD);
HWND __attribute__((__stdcall__)) GetTopWindow(HWND);
BOOL __attribute__((__stdcall__)) GetUpdateRect(HWND,LPRECT,BOOL);
int __attribute__((__stdcall__)) GetUpdateRgn(HWND,HRGN,BOOL);
BOOL __attribute__((__stdcall__)) GetUserObjectInformationA(HANDLE,int,PVOID,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetUserObjectInformationW(HANDLE,int,PVOID,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetUserObjectSecurity(HANDLE,PSECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
HWND __attribute__((__stdcall__)) GetWindow(HWND,UINT);
DWORD __attribute__((__stdcall__)) GetWindowContextHelpId(HWND);
HDC __attribute__((__stdcall__)) GetWindowDC(HWND);
BOOL __attribute__((__stdcall__)) GetWindowExtEx(HDC,LPSIZE);
BOOL __attribute__((__stdcall__)) GetWindowPlacement(HWND,WINDOWPLACEMENT*);
BOOL __attribute__((__stdcall__)) GetWindowRect(HWND,LPRECT);
int __attribute__((__stdcall__)) GetWindowRgn(HWND,HRGN);

int __attribute__((__stdcall__)) GetWindowTextA(HWND,LPSTR,int);
int __attribute__((__stdcall__)) GetWindowTextLengthA(HWND);
int __attribute__((__stdcall__)) GetWindowTextLengthW(HWND);
int __attribute__((__stdcall__)) GetWindowTextW(HWND,LPWSTR,int);
WORD __attribute__((__stdcall__)) GetWindowWord(HWND,int);
BOOL __attribute__((__stdcall__)) GetAltTabInfoA(HWND,int,PALTTABINFO,LPSTR,UINT);
BOOL __attribute__((__stdcall__)) GetAltTabInfoW(HWND,int,PALTTABINFO,LPWSTR,UINT);
BOOL __attribute__((__stdcall__)) GetComboBoxInfo(HWND,PCOMBOBOXINFO);
BOOL __attribute__((__stdcall__)) GetCursorInfo(PCURSORINFO);
BOOL __attribute__((__stdcall__)) GetLastInputInfo(PLASTINPUTINFO);
DWORD __attribute__((__stdcall__)) GetListBoxInfo(HWND);
BOOL __attribute__((__stdcall__)) GetMenuBarInfo(HWND,LONG,LONG,PMENUBARINFO);
BOOL __attribute__((__stdcall__)) GetMenuInfo(HMENU,LPMENUINFO);
BOOL __attribute__((__stdcall__)) GetScrollBarInfo(HWND,LONG,PSCROLLBARINFO);
BOOL __attribute__((__stdcall__)) GetTitleBarInfo(HWND,PTITLEBARINFO);
BOOL __attribute__((__stdcall__)) GetWindowInfo(HWND,PWINDOWINFO);
BOOL __attribute__((__stdcall__)) GetMonitorInfoA(HMONITOR,LPMONITORINFO);
BOOL __attribute__((__stdcall__)) GetMonitorInfoW(HMONITOR,LPMONITORINFO);
UINT __attribute__((__stdcall__)) GetWindowModuleFileNameA(HWND,LPSTR,UINT);
UINT __attribute__((__stdcall__)) GetWindowModuleFileNameW(HWND,LPWSTR,UINT);
BOOL __attribute__((__stdcall__)) GrayStringA(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,int,int,int,int,int);
BOOL __attribute__((__stdcall__)) GrayStringW(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,int,int,int,int,int);
BOOL __attribute__((__stdcall__)) HideCaret(HWND);
BOOL __attribute__((__stdcall__)) HiliteMenuItem(HWND,HMENU,UINT,UINT);
BOOL __attribute__((__stdcall__)) InflateRect(LPRECT,int,int);
BOOL __attribute__((__stdcall__)) InSendMessage(void);
BOOL __attribute__((__stdcall__)) InsertMenuA(HMENU,UINT,UINT,UINT,LPCSTR);
BOOL __attribute__((__stdcall__)) InsertMenuW(HMENU,UINT,UINT,UINT,LPCWSTR);
BOOL __attribute__((__stdcall__)) InsertMenuItemA(HMENU,UINT,BOOL,LPCMENUITEMINFOA);
BOOL __attribute__((__stdcall__)) InsertMenuItemW(HMENU,UINT,BOOL,LPCMENUITEMINFOW);
BOOL __attribute__((__stdcall__)) IntersectRect(LPRECT,LPCRECT,LPCRECT);
BOOL __attribute__((__stdcall__)) InvalidateRect(HWND,LPCRECT,BOOL);
BOOL __attribute__((__stdcall__)) InvalidateRgn(HWND,HRGN,BOOL);
BOOL __attribute__((__stdcall__)) InvertRect(HDC,LPCRECT);
BOOL __attribute__((__stdcall__)) IsCharAlphaA(CHAR ch);
BOOL __attribute__((__stdcall__)) IsCharAlphaNumericA(CHAR);
BOOL __attribute__((__stdcall__)) IsCharAlphaNumericW(WCHAR);
BOOL __attribute__((__stdcall__)) IsCharAlphaW(WCHAR);
BOOL __attribute__((__stdcall__)) IsCharLowerA(CHAR);
BOOL __attribute__((__stdcall__)) IsCharLowerW(WCHAR);
BOOL __attribute__((__stdcall__)) IsCharUpperA(CHAR);
BOOL __attribute__((__stdcall__)) IsCharUpperW(WCHAR);
BOOL __attribute__((__stdcall__)) IsChild(HWND,HWND);
BOOL __attribute__((__stdcall__)) IsClipboardFormatAvailable(UINT);
BOOL __attribute__((__stdcall__)) IsDialogMessageA(HWND,LPMSG);
BOOL __attribute__((__stdcall__)) IsDialogMessageW(HWND,LPMSG);
UINT __attribute__((__stdcall__)) IsDlgButtonChecked(HWND,int);
BOOL __attribute__((__stdcall__)) IsIconic(HWND);
BOOL __attribute__((__stdcall__)) IsMenu(HMENU);
BOOL __attribute__((__stdcall__)) IsRectEmpty(LPCRECT);
BOOL __attribute__((__stdcall__)) IsWindow(HWND);
BOOL __attribute__((__stdcall__)) IsWindowEnabled(HWND);
BOOL __attribute__((__stdcall__)) IsWindowUnicode(HWND);
BOOL __attribute__((__stdcall__)) IsWindowVisible(HWND);
BOOL __attribute__((__stdcall__)) IsZoomed(HWND);
void __attribute__((__stdcall__)) keybd_event(BYTE,BYTE,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) KillTimer(HWND,UINT);
HACCEL __attribute__((__stdcall__)) LoadAcceleratorsA(HINSTANCE,LPCSTR);
HACCEL __attribute__((__stdcall__)) LoadAcceleratorsW(HINSTANCE,LPCWSTR);
HBITMAP __attribute__((__stdcall__)) LoadBitmapA(HINSTANCE,LPCSTR);
HBITMAP __attribute__((__stdcall__)) LoadBitmapW(HINSTANCE,LPCWSTR);
HCURSOR __attribute__((__stdcall__)) LoadCursorA(HINSTANCE,LPCSTR);
HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileA(LPCSTR);
HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileW(LPCWSTR);
HCURSOR __attribute__((__stdcall__)) LoadCursorW(HINSTANCE,LPCWSTR);
HICON __attribute__((__stdcall__)) LoadIconA(HINSTANCE,LPCSTR);
HICON __attribute__((__stdcall__)) LoadIconW(HINSTANCE,LPCWSTR);
HANDLE __attribute__((__stdcall__)) LoadImageA(HINSTANCE,LPCSTR,UINT,int,int,UINT);
HANDLE __attribute__((__stdcall__)) LoadImageW(HINSTANCE,LPCWSTR,UINT,int,int,UINT);
HKL __attribute__((__stdcall__)) LoadKeyboardLayoutA(LPCSTR,UINT);
HKL __attribute__((__stdcall__)) LoadKeyboardLayoutW(LPCWSTR,UINT);
HMENU __attribute__((__stdcall__)) LoadMenuA(HINSTANCE,LPCSTR);
HMENU __attribute__((__stdcall__)) LoadMenuIndirectA(const MENUTEMPLATE*);
HMENU __attribute__((__stdcall__)) LoadMenuIndirectW(const MENUTEMPLATE*);
HMENU __attribute__((__stdcall__)) LoadMenuW(HINSTANCE,LPCWSTR);
int __attribute__((__stdcall__)) LoadStringA(HINSTANCE,UINT,LPSTR,int);
int __attribute__((__stdcall__)) LoadStringW(HINSTANCE,UINT,LPWSTR,int);
BOOL __attribute__((__stdcall__)) LockWindowUpdate(HWND);
int __attribute__((__stdcall__)) LookupIconIdFromDirectory(PBYTE,BOOL);
int __attribute__((__stdcall__)) LookupIconIdFromDirectoryEx(PBYTE,BOOL,int,int,UINT);
BOOL __attribute__((__stdcall__)) MapDialogRect(HWND,LPRECT);
UINT __attribute__((__stdcall__)) MapVirtualKeyA(UINT,UINT);
UINT __attribute__((__stdcall__)) MapVirtualKeyExA(UINT,UINT,HKL);
UINT __attribute__((__stdcall__)) MapVirtualKeyExW(UINT,UINT,HKL);
UINT __attribute__((__stdcall__)) MapVirtualKeyW(UINT,UINT);
int __attribute__((__stdcall__)) MapWindowPoints(HWND,HWND,LPPOINT,UINT);
int __attribute__((__stdcall__)) MenuItemFromPoint(HWND,HMENU,POINT);
BOOL __attribute__((__stdcall__)) MessageBeep(UINT);
int __attribute__((__stdcall__)) MessageBoxA(HWND,LPCSTR,LPCSTR,UINT);
int __attribute__((__stdcall__)) MessageBoxW(HWND,LPCWSTR,LPCWSTR,UINT);
int __attribute__((__stdcall__)) MessageBoxExA(HWND,LPCSTR,LPCSTR,UINT,WORD);
int __attribute__((__stdcall__)) MessageBoxExW(HWND,LPCWSTR,LPCWSTR,UINT,WORD);
int __attribute__((__stdcall__)) MessageBoxIndirectA(const MSGBOXPARAMSA*);
int __attribute__((__stdcall__)) MessageBoxIndirectW(const MSGBOXPARAMSW*);
BOOL __attribute__((__stdcall__)) ModifyMenuA(HMENU,UINT,UINT,UINT,LPCSTR);
BOOL __attribute__((__stdcall__)) ModifyMenuW(HMENU,UINT,UINT,UINT,LPCWSTR);
void __attribute__((__stdcall__)) mouse_event(DWORD,DWORD,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) MoveWindow(HWND,int,int,int,int,BOOL);
DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjects(DWORD,const HANDLE*,BOOL,DWORD,DWORD);
DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjectsEx(DWORD,const HANDLE*,DWORD,DWORD,DWORD);
DWORD __attribute__((__stdcall__)) OemKeyScan(WORD);
BOOL __attribute__((__stdcall__)) OemToCharA(LPCSTR,LPSTR);
BOOL __attribute__((__stdcall__)) OemToCharBuffA(LPCSTR,LPSTR,DWORD);
BOOL __attribute__((__stdcall__)) OemToCharBuffW(LPCSTR,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) OemToCharW(LPCSTR,LPWSTR);
BOOL __attribute__((__stdcall__)) OffsetRect(LPRECT,int,int);
BOOL __attribute__((__stdcall__)) OpenClipboard(HWND);
HDESK __attribute__((__stdcall__)) OpenDesktopA(LPSTR,DWORD,BOOL,DWORD);
HDESK __attribute__((__stdcall__)) OpenDesktopW(LPWSTR,DWORD,BOOL,DWORD);
BOOL __attribute__((__stdcall__)) OpenIcon(HWND);
HDESK __attribute__((__stdcall__)) OpenInputDesktop(DWORD,BOOL,DWORD);
HWINSTA __attribute__((__stdcall__)) OpenWindowStationA(LPSTR,BOOL,DWORD);
HWINSTA __attribute__((__stdcall__)) OpenWindowStationW(LPWSTR,BOOL,DWORD);
BOOL __attribute__((__stdcall__)) PaintDesktop(HDC);
BOOL __attribute__((__stdcall__)) PeekMessageA(LPMSG,HWND,UINT,UINT,UINT);
BOOL __attribute__((__stdcall__)) PeekMessageW(LPMSG,HWND,UINT,UINT,UINT);


BOOL __attribute__((__stdcall__)) PostMessageA(HWND,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) PostMessageW(HWND,UINT,WPARAM,LPARAM);
void __attribute__((__stdcall__)) PostQuitMessage(int);
BOOL __attribute__((__stdcall__)) PostThreadMessageA(DWORD,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) PostThreadMessageW(DWORD,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) PtInRect(LPCRECT,POINT);
BOOL __attribute__((__stdcall__)) RedrawWindow(HWND,LPCRECT,HRGN,UINT);
ATOM __attribute__((__stdcall__)) RegisterClassA(const WNDCLASSA*);
ATOM __attribute__((__stdcall__)) RegisterClassW(const WNDCLASSW*);
ATOM __attribute__((__stdcall__)) RegisterClassExA(const WNDCLASSEXA*);
ATOM __attribute__((__stdcall__)) RegisterClassExW(const WNDCLASSEXW*);
UINT __attribute__((__stdcall__)) RegisterClipboardFormatA(LPCSTR);
UINT __attribute__((__stdcall__)) RegisterClipboardFormatW(LPCWSTR);
BOOL __attribute__((__stdcall__)) RegisterHotKey(HWND,int,UINT,UINT);
UINT __attribute__((__stdcall__)) RegisterWindowMessageA(LPCSTR);
UINT __attribute__((__stdcall__)) RegisterWindowMessageW(LPCWSTR);
BOOL __attribute__((__stdcall__)) ReleaseCapture(void);
int __attribute__((__stdcall__)) ReleaseDC(HWND,HDC);
BOOL __attribute__((__stdcall__)) RemoveMenu(HMENU,UINT,UINT);
HANDLE __attribute__((__stdcall__)) RemovePropA(HWND,LPCSTR);
HANDLE __attribute__((__stdcall__)) RemovePropW(HWND,LPCWSTR);
BOOL __attribute__((__stdcall__)) ReplyMessage(LRESULT);
BOOL __attribute__((__stdcall__)) ScreenToClient(HWND,LPPOINT);
BOOL __attribute__((__stdcall__)) ScrollDC(HDC,int,int,LPCRECT,LPCRECT,HRGN,LPRECT);
BOOL __attribute__((__stdcall__)) ScrollWindow(HWND,int,int,LPCRECT,LPCRECT);
int __attribute__((__stdcall__)) ScrollWindowEx(HWND,int,int,LPCRECT,LPCRECT,HRGN,LPRECT,UINT);
LONG __attribute__((__stdcall__)) SendDlgItemMessageA(HWND,int,UINT,WPARAM,LPARAM);
LONG __attribute__((__stdcall__)) SendDlgItemMessageW(HWND,int,UINT,WPARAM,LPARAM);
LRESULT __attribute__((__stdcall__)) SendMessageA(HWND,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) SendMessageCallbackA(HWND,UINT,WPARAM,LPARAM,SENDASYNCPROC,DWORD);
BOOL __attribute__((__stdcall__)) SendMessageCallbackW(HWND,UINT,WPARAM,LPARAM,SENDASYNCPROC,DWORD);
LRESULT __attribute__((__stdcall__)) SendMessageTimeoutA(HWND,UINT,WPARAM,LPARAM,UINT,UINT,PDWORD);
LRESULT __attribute__((__stdcall__)) SendMessageTimeoutW(HWND,UINT,WPARAM,LPARAM,UINT,UINT,PDWORD);
LRESULT __attribute__((__stdcall__)) SendMessageW(HWND,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) SendNotifyMessageA(HWND,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) SendNotifyMessageW(HWND,UINT,WPARAM,LPARAM);
HWND __attribute__((__stdcall__)) SetActiveWindow(HWND);
HWND __attribute__((__stdcall__)) SetCapture(HWND hWnd);
BOOL __attribute__((__stdcall__)) SetCaretBlinkTime(UINT);
BOOL __attribute__((__stdcall__)) SetCaretPos(int,int);
DWORD __attribute__((__stdcall__)) SetClassLongA(HWND,int,LONG);
DWORD __attribute__((__stdcall__)) SetClassLongW(HWND,int,LONG);
WORD __attribute__((__stdcall__)) SetClassWord(HWND,int,WORD);
HANDLE __attribute__((__stdcall__)) SetClipboardData(UINT,HANDLE);
HWND __attribute__((__stdcall__)) SetClipboardViewer(HWND);
HCURSOR __attribute__((__stdcall__)) SetCursor(HCURSOR);
BOOL __attribute__((__stdcall__)) SetCursorPos(int,int);
void __attribute__((__stdcall__)) SetDebugErrorLevel(DWORD);
BOOL __attribute__((__stdcall__)) SetDlgItemInt(HWND,int,UINT,BOOL);
BOOL __attribute__((__stdcall__)) SetDlgItemTextA(HWND,int,LPCSTR);
BOOL __attribute__((__stdcall__)) SetDlgItemTextW(HWND,int,LPCWSTR);
BOOL __attribute__((__stdcall__)) SetDoubleClickTime(UINT);
HWND __attribute__((__stdcall__)) SetFocus(HWND);
BOOL __attribute__((__stdcall__)) SetForegroundWindow(HWND);
BOOL __attribute__((__stdcall__)) SetKeyboardState(PBYTE);
BOOL __attribute__((__stdcall__)) SetMenu(HWND,HMENU);
BOOL __attribute__((__stdcall__)) SetMenuContextHelpId(HMENU,DWORD);
BOOL __attribute__((__stdcall__)) SetMenuDefaultItem(HMENU,UINT,UINT);
BOOL __attribute__((__stdcall__)) SetMenuInfo(HMENU,LPCMENUINFO);
BOOL __attribute__((__stdcall__)) SetMenuItemBitmaps(HMENU,UINT,UINT,HBITMAP,HBITMAP);
BOOL __attribute__((__stdcall__)) SetMenuItemInfoA(HMENU,UINT,BOOL,LPCMENUITEMINFOA);
BOOL __attribute__((__stdcall__)) SetMenuItemInfoW( HMENU,UINT,BOOL,LPCMENUITEMINFOW);
LPARAM __attribute__((__stdcall__)) SetMessageExtraInfo(LPARAM);
BOOL __attribute__((__stdcall__)) SetMessageQueue(int);
HWND __attribute__((__stdcall__)) SetParent(HWND,HWND);
BOOL __attribute__((__stdcall__)) SetProcessWindowStation(HWINSTA);
BOOL __attribute__((__stdcall__)) SetPropA(HWND,LPCSTR,HANDLE);
BOOL __attribute__((__stdcall__)) SetPropW(HWND,LPCWSTR,HANDLE);
BOOL __attribute__((__stdcall__)) SetRect(LPRECT,int,int,int,int);
BOOL __attribute__((__stdcall__)) SetRectEmpty(LPRECT);
int __attribute__((__stdcall__)) SetScrollInfo(HWND,int,LPCSCROLLINFO,BOOL);
int __attribute__((__stdcall__)) SetScrollPos(HWND,int,int,BOOL);
BOOL __attribute__((__stdcall__)) SetScrollRange(HWND,int,int,int,BOOL);
BOOL __attribute__((__stdcall__)) SetSysColors(int,const INT *,const COLORREF *);

BOOL __attribute__((__stdcall__)) SetSystemCursor(HCURSOR,DWORD);
BOOL __attribute__((__stdcall__)) SetThreadDesktop(HDESK);
UINT __attribute__((__stdcall__)) SetTimer(HWND,UINT,UINT,TIMERPROC);
BOOL __attribute__((__stdcall__)) SetUserObjectInformationA(HANDLE,int,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) SetUserObjectInformationW(HANDLE,int,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) SetUserObjectSecurity(HANDLE,PSECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
BOOL __attribute__((__stdcall__)) SetWindowContextHelpId(HWND,DWORD);
LONG __attribute__((__stdcall__)) SetWindowLongA(HWND,int,LONG);
LONG __attribute__((__stdcall__)) SetWindowLongW(HWND,int,LONG);







BOOL __attribute__((__stdcall__)) SetWindowPlacement(HWND hWnd,const WINDOWPLACEMENT*);
BOOL __attribute__((__stdcall__)) SetWindowPos(HWND,HWND,int,int,int,int,UINT);
int __attribute__((__stdcall__)) SetWindowRgn(HWND,HRGN,BOOL);
HOOKPROC __attribute__((__stdcall__)) SetWindowsHookA(int,HOOKPROC);
HHOOK __attribute__((__stdcall__)) SetWindowsHookExA(int,HOOKPROC,HINSTANCE,DWORD);
HHOOK __attribute__((__stdcall__)) SetWindowsHookExW(int,HOOKPROC,HINSTANCE,DWORD);
BOOL __attribute__((__stdcall__)) SetWindowTextA(HWND,LPCSTR);
BOOL __attribute__((__stdcall__)) SetWindowTextW(HWND,LPCWSTR);
WORD __attribute__((__stdcall__)) SetWindowWord(HWND,int,WORD);
BOOL __attribute__((__stdcall__)) ShowCaret(HWND);
int __attribute__((__stdcall__)) ShowCursor(BOOL);
BOOL __attribute__((__stdcall__)) ShowOwnedPopups(HWND,BOOL);
BOOL __attribute__((__stdcall__)) ShowScrollBar(HWND,int,BOOL);
BOOL __attribute__((__stdcall__)) ShowWindow(HWND,int);
BOOL __attribute__((__stdcall__)) ShowWindowAsync(HWND,int);
BOOL __attribute__((__stdcall__)) SubtractRect(LPRECT,LPCRECT,LPCRECT);
BOOL __attribute__((__stdcall__)) SwapMouseButton(BOOL);
BOOL __attribute__((__stdcall__)) SwitchDesktop(HDESK);
BOOL __attribute__((__stdcall__)) SystemParametersInfoA(UINT,UINT,PVOID,UINT);
BOOL __attribute__((__stdcall__)) SystemParametersInfoW(UINT,UINT,PVOID,UINT);
LONG __attribute__((__stdcall__)) TabbedTextOutA(HDC,int,int,LPCSTR,int,int,LPINT,int);
LONG __attribute__((__stdcall__)) TabbedTextOutW(HDC,int,int,LPCWSTR,int,int,LPINT,int);
WORD __attribute__((__stdcall__)) TileWindows(HWND,UINT,LPCRECT,UINT,const HWND *);
int __attribute__((__stdcall__)) ToAscii(UINT,UINT,PBYTE,LPWORD,UINT);
int __attribute__((__stdcall__)) ToAsciiEx(UINT,UINT,PBYTE,LPWORD,UINT,HKL);
int __attribute__((__stdcall__)) ToUnicode(UINT,UINT,PBYTE,LPWSTR,int,UINT);
int __attribute__((__stdcall__)) ToUnicodeEx(UINT,UINT,PBYTE,LPWSTR,int,UINT,HKL);
BOOL __attribute__((__stdcall__)) TrackMouseEvent(LPTRACKMOUSEEVENT);
BOOL __attribute__((__stdcall__)) TrackPopupMenu(HMENU,UINT,int,int,int,HWND,LPCRECT);
BOOL __attribute__((__stdcall__)) TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS);
int __attribute__((__stdcall__)) TranslateAcceleratorA(HWND,HACCEL,LPMSG);
int __attribute__((__stdcall__)) TranslateAcceleratorW(HWND,HACCEL,LPMSG);
BOOL __attribute__((__stdcall__)) TranslateMDISysAccel(HWND,LPMSG);
BOOL __attribute__((__stdcall__)) TranslateMessage(const MSG*);
BOOL __attribute__((__stdcall__)) UnhookWindowsHook(int,HOOKPROC);
BOOL __attribute__((__stdcall__)) UnhookWindowsHookEx(HHOOK);
BOOL __attribute__((__stdcall__)) UnionRect(LPRECT,LPCRECT,LPCRECT);
BOOL __attribute__((__stdcall__)) UnloadKeyboardLayout(HKL);
BOOL __attribute__((__stdcall__)) UnregisterClassA(LPCSTR,HINSTANCE);
BOOL __attribute__((__stdcall__)) UnregisterClassW(LPCWSTR,HINSTANCE);
BOOL __attribute__((__stdcall__)) UnregisterHotKey(HWND,int);
BOOL __attribute__((__stdcall__)) UpdateWindow(HWND);
BOOL __attribute__((__stdcall__)) ValidateRect(HWND,LPCRECT);
BOOL __attribute__((__stdcall__)) ValidateRgn(HWND,HRGN);
SHORT __attribute__((__stdcall__)) VkKeyScanA(CHAR);
SHORT __attribute__((__stdcall__)) VkKeyScanExA(CHAR,HKL);
SHORT __attribute__((__stdcall__)) VkKeyScanExW(WCHAR,HKL);
SHORT __attribute__((__stdcall__)) VkKeyScanW(WCHAR);
DWORD __attribute__((__stdcall__)) WaitForInputIdle(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) WaitMessage(void);
HWND __attribute__((__stdcall__)) WindowFromDC(HDC hDC);
HWND __attribute__((__stdcall__)) WindowFromPoint(POINT);
UINT __attribute__((__stdcall__)) WinExec(LPCSTR,UINT);
BOOL __attribute__((__stdcall__)) WinHelpA(HWND,LPCSTR,UINT,DWORD);
BOOL __attribute__((__stdcall__)) WinHelpW(HWND,LPCWSTR,UINT,DWORD);
int __attribute__((__cdecl__)) wsprintfA(LPSTR,LPCSTR,...);
int __attribute__((__cdecl__)) wsprintfW(LPWSTR,LPCWSTR,...);
int __attribute__((__stdcall__)) wvsprintfA(LPSTR,LPCSTR,va_list arglist);
int __attribute__((__stdcall__)) wvsprintfW(LPWSTR,LPCWSTR,va_list arglist);
# 3398 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 3
typedef WNDCLASSA WNDCLASS,*LPWNDCLASS,*PWNDCLASS;
typedef WNDCLASSEXA WNDCLASSEX,*LPWNDCLASSEX,*PWNDCLASSEX;
typedef MENUITEMINFOA MENUITEMINFO,*LPMENUITEMINFO;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
typedef MSGBOXPARAMSA MSGBOXPARAMS,*PMSGBOXPARAMS,*LPMSGBOXPARAMS;
typedef HIGHCONTRASTA HIGHCONTRAST,*LPHIGHCONTRAST;
typedef ICONMETRICSA ICONMETRICS,*LPICONMETRICS;
typedef NONCLIENTMETRICSA NONCLIENTMETRICS,*LPNONCLIENTMETRICS;
typedef SERIALKEYSA SERIALKEYS,*LPSERIALKEYS;
typedef SOUNDSENTRYA SOUNDSENTRY,*LPSOUNDSENTRY;
typedef CREATESTRUCTA CREATESTRUCT, *LPCREATESTRUCT;
typedef CBT_CREATEWNDA CBT_CREATEWND, *LPCBT_CREATEWND;
typedef MDICREATESTRUCTA MDICREATESTRUCT,*LPMDICREATESTRUCT;
typedef MULTIKEYHELPA MULTIKEYHELP,*PMULTIKEYHELP,*LPMULTIKEYHELP;
# 3545 "C:/PROGRA~1/WIDEST~1/gcc/include/winuser.h" 3
}
# 57 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winnls.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winnls.h" 3



extern "C" {
# 422 "C:/PROGRA~1/WIDEST~1/gcc/include/winnls.h" 3
typedef DWORD LCTYPE;
typedef DWORD CALTYPE;
typedef DWORD CALID;
typedef DWORD LGRPID;
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__))* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__attribute__((__stdcall__))* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__attribute__((__stdcall__))* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__))* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__))* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__))* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__))* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__))* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__))* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__attribute__((__stdcall__))* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCW)(LPWSTR);

typedef struct _cpinfo {
        UINT MaxCharSize;
        BYTE DefaultChar[2];
        BYTE LeadByte[12];
} CPINFO,*LPCPINFO;
typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;
typedef struct _currencyfmtA {
        UINT NumDigits;
        UINT LeadingZero;
        UINT Grouping;
        LPSTR lpDecimalSep;
        LPSTR lpThousandSep;
        UINT NegativeOrder;
        UINT PositiveOrder;
        LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
        UINT NumDigits;
        UINT LeadingZero;
        UINT Grouping;
        LPWSTR lpDecimalSep;
        LPWSTR lpThousandSep;
        UINT NegativeOrder;
        UINT PositiveOrder;
        LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;
typedef struct _numberfmtA {
        UINT NumDigits;
        UINT LeadingZero;
        UINT Grouping;
        LPSTR lpDecimalSep;
        LPSTR lpThousandSep;
        UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
        UINT NumDigits;
        UINT LeadingZero;
        UINT Grouping;
        LPWSTR lpDecimalSep;
        LPWSTR lpThousandSep;
        UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;

int __attribute__((__stdcall__)) CompareStringA(LCID,DWORD,LPCSTR,int,LPCSTR,int);
int __attribute__((__stdcall__)) CompareStringW(LCID,DWORD,LPCWSTR,int,LPCWSTR,int);
LCID __attribute__((__stdcall__)) ConvertDefaultLocale(LCID);
BOOL __attribute__((__stdcall__)) EnumCalendarInfoA(CALINFO_ENUMPROCA,LCID,CALID,CALTYPE);
BOOL __attribute__((__stdcall__)) EnumCalendarInfoW(CALINFO_ENUMPROCW,LCID,CALID,CALTYPE);
BOOL __attribute__((__stdcall__)) EnumDateFormatsA(DATEFMT_ENUMPROCA,LCID,DWORD);
BOOL __attribute__((__stdcall__)) EnumDateFormatsW(DATEFMT_ENUMPROCW,LCID,DWORD);
BOOL __attribute__((__stdcall__)) EnumSystemCodePagesA(CODEPAGE_ENUMPROCA,DWORD);
BOOL __attribute__((__stdcall__)) EnumSystemCodePagesW(CODEPAGE_ENUMPROCW,DWORD);
BOOL __attribute__((__stdcall__)) EnumSystemLocalesA(LOCALE_ENUMPROCA,DWORD);
BOOL __attribute__((__stdcall__)) EnumSystemLocalesW(LOCALE_ENUMPROCW,DWORD);
BOOL __attribute__((__stdcall__)) EnumTimeFormatsA(TIMEFMT_ENUMPROCA,LCID,DWORD);
BOOL __attribute__((__stdcall__)) EnumTimeFormatsW(TIMEFMT_ENUMPROCW,LCID,DWORD);
int __attribute__((__stdcall__)) FoldStringA(DWORD,LPCSTR,int,LPSTR,int);
int __attribute__((__stdcall__)) FoldStringW(DWORD,LPCWSTR,int,LPWSTR,int);
UINT __attribute__((__stdcall__)) GetACP(void);
BOOL __attribute__((__stdcall__)) GetCPInfo(UINT,LPCPINFO);
BOOL __attribute__((__stdcall__)) GetCPInfoExA(UINT,DWORD,LPCPINFOEXA);
BOOL __attribute__((__stdcall__)) GetCPInfoExW(UINT,DWORD,LPCPINFOEXW);
int __attribute__((__stdcall__)) GetCurrencyFormatA(LCID,DWORD,LPCSTR,const CURRENCYFMTA*,LPSTR,int);
int __attribute__((__stdcall__)) GetCurrencyFormatW(LCID,DWORD,LPCWSTR,const CURRENCYFMTW*,LPWSTR,int);
int __attribute__((__stdcall__)) GetDateFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,int);
int __attribute__((__stdcall__)) GetDateFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,int);
int __attribute__((__stdcall__)) GetLocaleInfoA(LCID,LCTYPE,LPSTR,int);
int __attribute__((__stdcall__)) GetLocaleInfoW(LCID,LCTYPE,LPWSTR,int);
int __attribute__((__stdcall__)) GetNumberFormatA(LCID,DWORD,LPCSTR,const NUMBERFMTA*,LPSTR,int);
int __attribute__((__stdcall__)) GetNumberFormatW(LCID,DWORD,LPCWSTR,const NUMBERFMTW*,LPWSTR,int);
UINT __attribute__((__stdcall__)) GetOEMCP(void);
BOOL __attribute__((__stdcall__)) GetStringTypeA(LCID,DWORD,LPCSTR,int,LPWORD);
BOOL __attribute__((__stdcall__)) GetStringTypeW(DWORD,LPCWSTR,int,LPWORD);
BOOL __attribute__((__stdcall__)) GetStringTypeExA(LCID,DWORD,LPCSTR,int,LPWORD);
BOOL __attribute__((__stdcall__)) GetStringTypeExW(LCID,DWORD,LPCWSTR,int,LPWORD);
LANGID __attribute__((__stdcall__)) GetSystemDefaultLangID(void);
LCID __attribute__((__stdcall__)) GetSystemDefaultLCID(void);
LCID __attribute__((__stdcall__)) GetThreadLocale(void);
int __attribute__((__stdcall__)) GetTimeFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,int);
int __attribute__((__stdcall__)) GetTimeFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,int);
LANGID __attribute__((__stdcall__)) GetUserDefaultLangID(void);
LCID __attribute__((__stdcall__)) GetUserDefaultLCID(void);
BOOL __attribute__((__stdcall__)) IsDBCSLeadByte(BYTE);
BOOL __attribute__((__stdcall__)) IsDBCSLeadByteEx(UINT,BYTE);
BOOL __attribute__((__stdcall__)) IsValidCodePage(UINT);
BOOL __attribute__((__stdcall__)) IsValidLocale(LCID,DWORD);
int __attribute__((__stdcall__)) LCMapStringA(LCID,DWORD,LPCSTR,int,LPSTR,int);
int __attribute__((__stdcall__)) LCMapStringW(LCID,DWORD,LPCWSTR,int,LPWSTR,int);
int __attribute__((__stdcall__)) MultiByteToWideChar(UINT,DWORD,LPCSTR,int,LPWSTR,int);
BOOL __attribute__((__stdcall__)) SetLocaleInfoA(LCID,LCTYPE,LPCSTR);
BOOL __attribute__((__stdcall__)) SetLocaleInfoW(LCID,LCTYPE,LPCWSTR);
BOOL __attribute__((__stdcall__)) SetThreadLocale(LCID);
int __attribute__((__stdcall__)) WideCharToMultiByte(UINT,DWORD,LPCWSTR,int,LPSTR,int,LPCSTR,LPBOOL);
# 621 "C:/PROGRA~1/WIDEST~1/gcc/include/winnls.h" 3
typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
# 652 "C:/PROGRA~1/WIDEST~1/gcc/include/winnls.h" 3
}
# 60 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winver.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winver.h" 3



extern "C" {
# 85 "C:/PROGRA~1/WIDEST~1/gcc/include/winver.h" 3
typedef struct tagVS_FIXEDFILEINFO {
        DWORD dwSignature;
        DWORD dwStrucVersion;
        DWORD dwFileVersionMS;
        DWORD dwFileVersionLS;
        DWORD dwProductVersionMS;
        DWORD dwProductVersionLS;
        DWORD dwFileFlagsMask;
        DWORD dwFileFlags;
        DWORD dwFileOS;
        DWORD dwFileType;
        DWORD dwFileSubtype;
        DWORD dwFileDateMS;
        DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;
DWORD __attribute__((__stdcall__)) VerFindFileA(DWORD,LPSTR,LPSTR,LPSTR,LPSTR,PUINT,LPSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerFindFileW(DWORD,LPWSTR,LPWSTR,LPWSTR,LPWSTR,PUINT,LPWSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerInstallFileA(DWORD,LPSTR,LPSTR,LPSTR,LPSTR,LPSTR,LPSTR,PUINT);
DWORD __attribute__((__stdcall__)) VerInstallFileW(DWORD,LPWSTR,LPWSTR,LPWSTR,LPWSTR,LPWSTR,LPWSTR,PUINT);
DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeA(LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeW(LPWSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetFileVersionInfoA(LPSTR,DWORD,DWORD,PVOID);
BOOL __attribute__((__stdcall__)) GetFileVersionInfoW(LPWSTR,DWORD,DWORD,PVOID);
DWORD __attribute__((__stdcall__)) VerLanguageNameA(DWORD,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) VerLanguageNameW(DWORD,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) VerQueryValueA(const LPVOID,LPSTR,LPVOID*,PUINT);
BOOL __attribute__((__stdcall__)) VerQueryValueW(const LPVOID,LPWSTR,LPVOID*,PUINT);
# 131 "C:/PROGRA~1/WIDEST~1/gcc/include/winver.h" 3
}
# 63 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winnetwk.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winnetwk.h" 3



extern "C" {
# 160 "C:/PROGRA~1/WIDEST~1/gcc/include/winnetwk.h" 3
typedef struct _NETRESOURCEA {
        DWORD dwScope;
        DWORD dwType;
        DWORD dwDisplayType;
        DWORD dwUsage;
        LPSTR lpLocalName;
        LPSTR lpRemoteName;
        LPSTR lpComment ;
        LPSTR lpProvider;
}NETRESOURCEA,*LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
        DWORD dwScope;
        DWORD dwType;
        DWORD dwDisplayType;
        DWORD dwUsage;
        LPWSTR lpLocalName;
        LPWSTR lpRemoteName;
        LPWSTR lpComment ;
        LPWSTR lpProvider;
}NETRESOURCEW,*LPNETRESOURCEW;
typedef struct _CONNECTDLGSTRUCTA{
        DWORD cbStructure;
        HWND hwndOwner;
        LPNETRESOURCEA lpConnRes;
        DWORD dwFlags;
        DWORD dwDevNum;
} CONNECTDLGSTRUCTA,*LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
        DWORD cbStructure;
        HWND hwndOwner;
        LPNETRESOURCEW lpConnRes;
        DWORD dwFlags;
        DWORD dwDevNum;
} CONNECTDLGSTRUCTW,*LPCONNECTDLGSTRUCTW;
typedef struct _DISCDLGSTRUCTA{
        DWORD cbStructure;
        HWND hwndOwner;
        LPSTR lpLocalName;
        LPSTR lpRemoteName;
        DWORD dwFlags;
} DISCDLGSTRUCTA,*LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
        DWORD cbStructure;
        HWND hwndOwner;
        LPWSTR lpLocalName;
        LPWSTR lpRemoteName;
        DWORD dwFlags;
} DISCDLGSTRUCTW,*LPDISCDLGSTRUCTW;
typedef struct _UNIVERSAL_NAME_INFOA { LPSTR lpUniversalName; }UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW { LPWSTR lpUniversalName; }UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;
typedef struct _REMOTE_NAME_INFOA {
        LPSTR lpUniversalName;
        LPSTR lpConnectionName;
        LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
        LPWSTR lpUniversalName;
        LPWSTR lpConnectionName;
        LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;
typedef struct _NETINFOSTRUCT{
        DWORD cbStructure;
        DWORD dwProviderVersion;
        DWORD dwStatus;
        DWORD dwCharacteristics;
        DWORD dwHandle;
        WORD wNetType;
        DWORD dwPrinters;
        DWORD dwDrives;
} NETINFOSTRUCT,*LPNETINFOSTRUCT;
typedef UINT(__attribute__((__stdcall__)) *PFNGETPROFILEPATHA)(LPCSTR,LPSTR,UINT);
typedef UINT(__attribute__((__stdcall__)) *PFNGETPROFILEPATHW)(LPCWSTR,LPWSTR,UINT);
typedef UINT(__attribute__((__stdcall__)) *PFNRECONCILEPROFILEA)(LPCSTR,LPCSTR,DWORD);
typedef UINT(__attribute__((__stdcall__)) *PFNRECONCILEPROFILEW)(LPCWSTR,LPCWSTR,DWORD);
typedef BOOL(__attribute__((__stdcall__)) *PFNPROCESSPOLICIESA)(HWND,LPCSTR,LPCSTR,LPCSTR,DWORD);
typedef BOOL(__attribute__((__stdcall__)) *PFNPROCESSPOLICIESW)(HWND,LPCWSTR,LPCWSTR,LPCWSTR,DWORD);
typedef struct _NETCONNECTINFOSTRUCT{
        DWORD cbStructure;
        DWORD dwFlags;
        DWORD dwSpeed;
        DWORD dwDelay;
        DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;

DWORD __attribute__((__stdcall__)) WNetAddConnectionA(LPCSTR,LPCSTR,LPCSTR);
DWORD __attribute__((__stdcall__)) WNetAddConnectionW(LPCWSTR,LPCWSTR,LPCWSTR);
DWORD __attribute__((__stdcall__)) WNetAddConnection2A(LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection2W(LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection3A(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection3W(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetCancelConnectionA(LPCSTR,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnectionW(LPCWSTR,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnection2A(LPCSTR,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnection2W(LPCWSTR,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WNetGetConnectionA(LPCSTR,LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetConnectionW(LPCWSTR,LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetUseConnectionA(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD,LPSTR,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) WNetUseConnectionW(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD,LPWSTR,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) WNetSetConnectionA(LPCSTR,DWORD,PVOID);
DWORD __attribute__((__stdcall__)) WNetSetConnectionW(LPCWSTR,DWORD,PVOID);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog(HWND,DWORD);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog(HWND,DWORD);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1A(LPDISCDLGSTRUCTA);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1W(LPDISCDLGSTRUCTW);
DWORD __attribute__((__stdcall__)) WNetOpenEnumA(DWORD,DWORD,DWORD,LPNETRESOURCEA,LPHANDLE);
DWORD __attribute__((__stdcall__)) WNetOpenEnumW(DWORD,DWORD,DWORD,LPNETRESOURCEW,LPHANDLE);
DWORD __attribute__((__stdcall__)) WNetEnumResourceA(HANDLE,PDWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetEnumResourceW(HANDLE,PDWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetCloseEnum(HANDLE);
DWORD __attribute__((__stdcall__)) WNetGetUniversalNameA(LPCSTR,DWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUniversalNameW(LPCWSTR,DWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUserA(LPCSTR,LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUserW(LPCWSTR,LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetProviderNameA(DWORD,LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetProviderNameW(DWORD,LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationA(LPCSTR,LPNETINFOSTRUCT);
DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationW(LPCWSTR,LPNETINFOSTRUCT);
DWORD __attribute__((__stdcall__)) WNetGetResourceInformationA(LPNETRESOURCEA,LPVOID,LPDWORD,LPCSTR*);
DWORD __attribute__((__stdcall__)) WNetGetResourceInformationW(LPNETRESOURCEA,LPVOID,LPDWORD,LPCWSTR*);
DWORD __attribute__((__stdcall__)) WNetGetLastErrorA(PDWORD,LPSTR,DWORD,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetGetLastErrorW(PDWORD,LPWSTR,DWORD,LPWSTR,DWORD);
DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceA(LPNETRESOURCEA,LPNETCONNECTINFOSTRUCT);
DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceW(LPNETRESOURCEW,LPNETCONNECTINFOSTRUCT);
# 317 "C:/PROGRA~1/WIDEST~1/gcc/include/winnetwk.h" 3
typedef NETRESOURCEA NETRESOURCE,*LPNETRESOURCE;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT,*LPCONNECTDLGSTRUCT;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT,*LPDISCDLGSTRUCT;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO,*LPUNIVERSAL_NAME_INFO;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO,*LPREMOTE_NAME_INFO;
# 344 "C:/PROGRA~1/WIDEST~1/gcc/include/winnetwk.h" 3
}
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winreg.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winreg.h" 3



extern "C" {
# 41 "C:/PROGRA~1/WIDEST~1/gcc/include/winreg.h" 3
typedef ACCESS_MASK REGSAM;
typedef struct value_entA {
        LPSTR ve_valuename;
        DWORD ve_valuelen;
        DWORD ve_valueptr;
        DWORD ve_type;
} VALENTA,*PVALENTA;
typedef struct value_entW {
        LPWSTR ve_valuename;
        DWORD ve_valuelen;
        DWORD ve_valueptr;
        DWORD ve_type;
} VALENTW,*PVALENTW;
BOOL __attribute__((__stdcall__)) AbortSystemShutdownA(LPCSTR);
BOOL __attribute__((__stdcall__)) AbortSystemShutdownW(LPCWSTR);
BOOL __attribute__((__stdcall__)) InitiateSystemShutdownA(LPSTR,LPSTR,DWORD,BOOL,BOOL);
BOOL __attribute__((__stdcall__)) InitiateSystemShutdownW(LPWSTR,LPWSTR,DWORD,BOOL,BOOL);
LONG __attribute__((__stdcall__)) RegCloseKey(HKEY);
LONG __attribute__((__stdcall__)) RegConnectRegistryA(LPCSTR,HKEY,PHKEY);
LONG __attribute__((__stdcall__)) RegConnectRegistryW(LPCWSTR,HKEY,PHKEY);
LONG __attribute__((__stdcall__)) RegCreateKeyA(HKEY,LPCSTR,PHKEY);
LONG __attribute__((__stdcall__)) RegCreateKeyExA(HKEY,LPCSTR,DWORD,LPSTR,DWORD,REGSAM,LPSECURITY_ATTRIBUTES,PHKEY,PDWORD);
LONG __attribute__((__stdcall__)) RegCreateKeyExW(HKEY,LPCWSTR,DWORD,LPWSTR,DWORD,REGSAM,LPSECURITY_ATTRIBUTES,PHKEY,PDWORD);
LONG __attribute__((__stdcall__)) RegCreateKeyW(HKEY,LPCWSTR,PHKEY);
LONG __attribute__((__stdcall__)) RegDeleteKeyA(HKEY,LPCSTR);
LONG __attribute__((__stdcall__)) RegDeleteKeyW(HKEY,LPCWSTR);
LONG __attribute__((__stdcall__)) RegDeleteValueA(HKEY,LPCSTR);
LONG __attribute__((__stdcall__)) RegDeleteValueW(HKEY,LPCWSTR);
LONG __attribute__((__stdcall__)) RegEnumKeyA(HKEY,DWORD,LPSTR,DWORD);
LONG __attribute__((__stdcall__)) RegEnumKeyW(HKEY,DWORD,LPWSTR,DWORD);
LONG __attribute__((__stdcall__)) RegEnumKeyExA(HKEY,DWORD,LPSTR,PDWORD,PDWORD,LPSTR,PDWORD,PFILETIME);
LONG __attribute__((__stdcall__)) RegEnumKeyExW(HKEY,DWORD,LPWSTR,PDWORD,PDWORD,LPWSTR,PDWORD,PFILETIME);
LONG __attribute__((__stdcall__)) RegEnumValueA(HKEY,DWORD,LPSTR,PDWORD,PDWORD,PDWORD,LPBYTE,PDWORD);
LONG __attribute__((__stdcall__)) RegEnumValueW(HKEY,DWORD,LPWSTR,PDWORD,PDWORD,PDWORD,LPBYTE,PDWORD);
LONG __attribute__((__stdcall__)) RegFlushKey(HKEY);
LONG __attribute__((__stdcall__)) RegGetKeySecurity(HKEY,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,PDWORD);
LONG __attribute__((__stdcall__)) RegLoadKeyA(HKEY,LPCSTR,LPCSTR);
LONG __attribute__((__stdcall__)) RegLoadKeyW(HKEY,LPCWSTR,LPCWSTR);
LONG __attribute__((__stdcall__)) RegNotifyChangeKeyValue(HKEY,BOOL,DWORD,HANDLE,BOOL);
LONG __attribute__((__stdcall__)) RegOpenKeyA(HKEY,LPCSTR,PHKEY);
LONG __attribute__((__stdcall__)) RegOpenKeyExA(HKEY,LPCSTR,DWORD,REGSAM,PHKEY);
LONG __attribute__((__stdcall__)) RegOpenKeyExW(HKEY,LPCWSTR,DWORD,REGSAM,PHKEY);
LONG __attribute__((__stdcall__)) RegOpenKeyW(HKEY,LPCWSTR,PHKEY);
LONG __attribute__((__stdcall__)) RegQueryInfoKeyA(HKEY,LPSTR,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PFILETIME);
LONG __attribute__((__stdcall__)) RegQueryInfoKeyW(HKEY,LPWSTR,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PDWORD,PFILETIME);
LONG __attribute__((__stdcall__)) RegQueryMultipleValuesA(HKEY,PVALENTA,DWORD,LPSTR,LPDWORD);
LONG __attribute__((__stdcall__)) RegQueryMultipleValuesW(HKEY,PVALENTW,DWORD,LPWSTR,LPDWORD);
LONG __attribute__((__stdcall__)) RegQueryValueA(HKEY,LPCSTR,LPSTR,PLONG);
LONG __attribute__((__stdcall__)) RegQueryValueExA(HKEY,LPCSTR,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
LONG __attribute__((__stdcall__)) RegQueryValueExW(HKEY,LPCWSTR,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
LONG __attribute__((__stdcall__)) RegQueryValueW(HKEY,LPCWSTR,LPWSTR,PLONG);
LONG __attribute__((__stdcall__)) RegReplaceKeyA(HKEY,LPCSTR,LPCSTR,LPCSTR);
LONG __attribute__((__stdcall__)) RegReplaceKeyW(HKEY,LPCWSTR,LPCWSTR,LPCWSTR);
LONG __attribute__((__stdcall__)) RegRestoreKeyA(HKEY,LPCSTR,DWORD);
LONG __attribute__((__stdcall__)) RegRestoreKeyW(HKEY,LPCWSTR,DWORD);
LONG __attribute__((__stdcall__)) RegSaveKeyA(HKEY,LPCSTR,LPSECURITY_ATTRIBUTES);
LONG __attribute__((__stdcall__)) RegSaveKeyW(HKEY,LPCWSTR,LPSECURITY_ATTRIBUTES);
LONG __attribute__((__stdcall__)) RegSetKeySecurity(HKEY,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
LONG __attribute__((__stdcall__)) RegSetValueA(HKEY,LPCSTR,DWORD,LPCSTR,DWORD);
LONG __attribute__((__stdcall__)) RegSetValueExA(HKEY,LPCSTR,DWORD,DWORD,const BYTE*,DWORD);
LONG __attribute__((__stdcall__)) RegSetValueExW(HKEY,LPCWSTR,DWORD,DWORD,const BYTE*,DWORD);
LONG __attribute__((__stdcall__)) RegSetValueW(HKEY,LPCWSTR,DWORD,LPCWSTR,DWORD);
LONG __attribute__((__stdcall__)) RegUnLoadKeyA(HKEY,LPCSTR);
LONG __attribute__((__stdcall__)) RegUnLoadKeyW(HKEY,LPCWSTR);
# 132 "C:/PROGRA~1/WIDEST~1/gcc/include/winreg.h" 3
typedef VALENTA VALENT,*PVALENT;
# 159 "C:/PROGRA~1/WIDEST~1/gcc/include/winreg.h" 3
}
# 69 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winsvc.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winsvc.h" 3



extern "C" {
# 70 "C:/PROGRA~1/WIDEST~1/gcc/include/winsvc.h" 3
typedef struct _SERVICE_STATUS {
        DWORD dwServiceType;
        DWORD dwCurrentState;
        DWORD dwControlsAccepted;
        DWORD dwWin32ExitCode;
        DWORD dwServiceSpecificExitCode;
        DWORD dwCheckPoint;
        DWORD dwWaitHint;
} SERVICE_STATUS,*LPSERVICE_STATUS;
typedef struct _SERVICE_STATUS_PROCESS {
        DWORD dwServiceType;
        DWORD dwCurrentState;
        DWORD dwControlsAccepted;
        DWORD dwWin32ExitCode;
        DWORD dwServiceSpecificExitCode;
        DWORD dwCheckPoint;
        DWORD dwWaitHint;
        DWORD dwProcessId;
        DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;
typedef enum _SC_STATUS_TYPE {
        SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;
typedef enum _SC_ENUM_TYPE {
        SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;
typedef struct _ENUM_SERVICE_STATUSA {
        LPSTR lpServiceName;
        LPSTR lpDisplayName;
        SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
        LPWSTR lpServiceName;
        LPWSTR lpDisplayName;
        SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
        LPSTR lpServiceName;
        LPSTR lpDisplayName;
        SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
        LPWSTR lpServiceName;
        LPWSTR lpDisplayName;
        SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;
typedef struct _QUERY_SERVICE_CONFIGA {
        DWORD dwServiceType;
        DWORD dwStartType;
        DWORD dwErrorControl;
        LPSTR lpBinaryPathName;
        LPSTR lpLoadOrderGroup;
        DWORD dwTagId;
        LPSTR lpDependencies;
        LPSTR lpServiceStartName;
        LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
        DWORD dwServiceType;
        DWORD dwStartType;
        DWORD dwErrorControl;
        LPWSTR lpBinaryPathName;
        LPWSTR lpLoadOrderGroup;
        DWORD dwTagId;
        LPWSTR lpDependencies;
        LPWSTR lpServiceStartName;
        LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;
typedef struct _QUERY_SERVICE_LOCK_STATUSA {
        DWORD fIsLocked;
        LPSTR lpLockOwner;
        DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
        DWORD fIsLocked;
        LPWSTR lpLockOwner;
        DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;
typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONA)(DWORD,LPSTR*);
typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONW)(DWORD,LPWSTR*);
typedef struct _SERVICE_TABLE_ENTRYA {
        LPSTR lpServiceName;
        LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
} SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
        LPWSTR lpServiceName;
        LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
} SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;
typedef struct SC_HANDLE__{int i;}*SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;
typedef PVOID SC_LOCK;
typedef DWORD SERVICE_STATUS_HANDLE;
typedef void(__attribute__((__stdcall__)) *LPHANDLER_FUNCTION)(DWORD);
typedef DWORD (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION_EX)(DWORD,DWORD,LPVOID,LPVOID);
typedef struct _SERVICE_DESCRIPTIONA {
        LPSTR lpDescription;
} SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW {
        LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;
typedef struct _SC_ACTION {
        SC_ACTION_TYPE Type;
        DWORD Delay;
} SC_ACTION,*LPSC_ACTION;
typedef struct _SERVICE_FAILURE_ACTIONSA {
        DWORD dwResetPeriod;
        LPSTR lpRebootMsg;
        LPSTR lpCommand;
        DWORD cActions;
        SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
        DWORD dwResetPeriod;
        LPWSTR lpRebootMsg;
        LPWSTR lpCommand;
        DWORD cActions;
        SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;

BOOL __attribute__((__stdcall__)) ChangeServiceConfigA(SC_HANDLE,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,LPDWORD,LPCSTR,LPCSTR,LPCSTR,LPCSTR);
BOOL __attribute__((__stdcall__)) ChangeServiceConfigW(SC_HANDLE,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,LPDWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) ChangeServiceConfig2A(SC_HANDLE,DWORD,LPVOID);
BOOL __attribute__((__stdcall__)) ChangeServiceConfig2W(SC_HANDLE,DWORD,LPVOID);
BOOL __attribute__((__stdcall__)) CloseServiceHandle(SC_HANDLE);
BOOL __attribute__((__stdcall__)) ControlService(SC_HANDLE,DWORD,LPSERVICE_STATUS);
SC_HANDLE __attribute__((__stdcall__)) CreateServiceA(SC_HANDLE,LPCSTR,LPCSTR,DWORD,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,PDWORD,LPCSTR,LPCSTR,LPCSTR);
SC_HANDLE __attribute__((__stdcall__)) CreateServiceW(SC_HANDLE,LPCWSTR,LPCWSTR,DWORD,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,PDWORD,LPCWSTR,LPCWSTR,LPCWSTR);
BOOL __attribute__((__stdcall__)) DeleteService(SC_HANDLE);
BOOL __attribute__((__stdcall__)) EnumDependentServicesA(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSA,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumDependentServicesW(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSW,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumServicesStatusA(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSA,DWORD,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumServicesStatusW(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSW,DWORD,PDWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumServicesStatusExA(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCSTR);
BOOL __attribute__((__stdcall__)) EnumServicesStatusExW(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCWSTR);
BOOL __attribute__((__stdcall__)) GetServiceDisplayNameA(SC_HANDLE,LPCSTR,LPSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetServiceDisplayNameW(SC_HANDLE,LPCWSTR,LPWSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetServiceKeyNameA(SC_HANDLE,LPCSTR,LPSTR,PDWORD);
BOOL __attribute__((__stdcall__)) GetServiceKeyNameW(SC_HANDLE,LPCWSTR,LPWSTR,PDWORD);
SC_LOCK __attribute__((__stdcall__)) LockServiceDatabase(SC_HANDLE);
BOOL __attribute__((__stdcall__)) NotifyBootConfigStatus(BOOL);
SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerA(LPCSTR,LPCSTR,DWORD);
SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerW(LPCWSTR,LPCWSTR,DWORD);
SC_HANDLE __attribute__((__stdcall__)) OpenServiceA(SC_HANDLE,LPCSTR,DWORD);
SC_HANDLE __attribute__((__stdcall__)) OpenServiceW(SC_HANDLE,LPCWSTR,DWORD);
BOOL __attribute__((__stdcall__)) QueryServiceConfigA(SC_HANDLE,LPQUERY_SERVICE_CONFIGA,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceConfigW(SC_HANDLE,LPQUERY_SERVICE_CONFIGW,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceConfig2A(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceConfig2W(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceLockStatusA(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSA,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceLockStatusW(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSW,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
BOOL __attribute__((__stdcall__)) QueryServiceStatus(SC_HANDLE,LPSERVICE_STATUS);
BOOL __attribute__((__stdcall__)) QueryServiceStatusEx(SC_HANDLE,SC_STATUS_TYPE,LPBYTE,DWORD,LPDWORD);
SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerA(LPCSTR,LPHANDLER_FUNCTION);
SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerW(LPCWSTR,LPHANDLER_FUNCTION);
SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExA(LPCSTR,LPHANDLER_FUNCTION_EX,LPVOID);
SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExW(LPCWSTR,LPHANDLER_FUNCTION_EX,LPVOID);
BOOL __attribute__((__stdcall__)) SetServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
BOOL __attribute__((__stdcall__)) SetServiceStatus(SERVICE_STATUS_HANDLE,LPSERVICE_STATUS);
BOOL __attribute__((__stdcall__)) StartServiceA(SC_HANDLE,DWORD,LPCSTR*);
BOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherA(LPSERVICE_TABLE_ENTRYA);
BOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherW(LPSERVICE_TABLE_ENTRYW);
BOOL __attribute__((__stdcall__)) StartServiceW(SC_HANDLE,DWORD,LPCWSTR*);
BOOL __attribute__((__stdcall__)) UnlockServiceDatabase(SC_LOCK);
# 274 "C:/PROGRA~1/WIDEST~1/gcc/include/winsvc.h" 3
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS,*LPENUM_SERVICE_STATUS;
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG,*LPQUERY_SERVICE_CONFIG;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS,*LPQUERY_SERVICE_LOCK_STATUS;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY,*LPSERVICE_TABLE_ENTRY;
typedef LPSERVICE_MAIN_FUNCTIONA LPSERVICE_MAIN_FUNCTION;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
# 307 "C:/PROGRA~1/WIDEST~1/gcc/include/winsvc.h" 3
}
# 72 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3



# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/commdlg.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/commdlg.h" 3



extern "C" {

#pragma pack(push,1)
# 212 "C:/PROGRA~1/WIDEST~1/gcc/include/commdlg.h" 3
typedef UINT (__attribute__((__stdcall__)) *__CDHOOKPROC)(HWND,UINT,WPARAM,LPARAM);
typedef __CDHOOKPROC LPCCHOOKPROC;
typedef __CDHOOKPROC LPCFHOOKPROC;
typedef __CDHOOKPROC LPFRHOOKPROC;
typedef __CDHOOKPROC LPOFNHOOKPROC;
typedef __CDHOOKPROC LPPAGEPAINTHOOK;
typedef __CDHOOKPROC LPPAGESETUPHOOK;
typedef __CDHOOKPROC LPSETUPHOOKPROC;
typedef __CDHOOKPROC LPPRINTHOOKPROC;
typedef struct tagCHOOSECOLORA {
        DWORD lStructSize;
        HWND hwndOwner;
        HWND hInstance;
        COLORREF rgbResult;
        COLORREF* lpCustColors;
        DWORD Flags;
        LPARAM lCustData;
        LPCCHOOKPROC lpfnHook;
        LPCSTR lpTemplateName;
} CHOOSECOLORA,*LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
        DWORD lStructSize;
        HWND hwndOwner;
        HWND hInstance;
        COLORREF rgbResult;
        COLORREF* lpCustColors;
        DWORD Flags;
        LPARAM lCustData;
        LPCCHOOKPROC lpfnHook;
        LPCWSTR lpTemplateName;
} CHOOSECOLORW,*LPCHOOSECOLORW;
typedef struct tagCHOOSEFONTA {
        DWORD lStructSize;
        HWND hwndOwner;
        HDC hDC;
        LPLOGFONTA lpLogFont;
        INT iPointSize;
        DWORD Flags;
        DWORD rgbColors;
        LPARAM lCustData;
        LPCFHOOKPROC lpfnHook;
        LPCSTR lpTemplateName;
        HINSTANCE hInstance;
        LPSTR lpszStyle;
        WORD nFontType;
        WORD ___MISSING_ALIGNMENT__;
        INT nSizeMin;
        INT nSizeMax;
} CHOOSEFONTA,*LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
        DWORD lStructSize;
        HWND hwndOwner;
        HDC hDC;
        LPLOGFONTW lpLogFont;
        INT iPointSize;
        DWORD Flags;
        DWORD rgbColors;
        LPARAM lCustData;
        LPCFHOOKPROC lpfnHook;
        LPCWSTR lpTemplateName;
        HINSTANCE hInstance;
        LPWSTR lpszStyle;
        WORD nFontType;
        WORD ___MISSING_ALIGNMENT__;
        INT nSizeMin;
        INT nSizeMax;
} CHOOSEFONTW,*LPCHOOSEFONTW;
typedef struct tagDEVNAMES {
        WORD wDriverOffset;
        WORD wDeviceOffset;
        WORD wOutputOffset;
        WORD wDefault;
} DEVNAMES,*LPDEVNAMES;
typedef struct {
        DWORD lStructSize;
        HWND hwndOwner;
        HINSTANCE hInstance;
        DWORD Flags;
        LPSTR lpstrFindWhat;
        LPSTR lpstrReplaceWith;
        WORD wFindWhatLen;
        WORD wReplaceWithLen;
        LPARAM lCustData;
        LPFRHOOKPROC lpfnHook;
        LPCSTR lpTemplateName;
} FINDREPLACEA,*LPFINDREPLACEA;
typedef struct {
        DWORD lStructSize;
        HWND hwndOwner;
        HINSTANCE hInstance;
        DWORD Flags;
        LPWSTR lpstrFindWhat;
        LPWSTR lpstrReplaceWith;
        WORD wFindWhatLen;
        WORD wReplaceWithLen;
        LPARAM lCustData;
        LPFRHOOKPROC lpfnHook;
        LPCWSTR lpTemplateName;
} FINDREPLACEW,*LPFINDREPLACEW;
typedef struct tagOFNA {
        DWORD lStructSize;
        HWND hwndOwner;
        HINSTANCE hInstance;
        LPCSTR lpstrFilter;
        LPSTR lpstrCustomFilter;
        DWORD nMaxCustFilter;
        DWORD nFilterIndex;
        LPSTR lpstrFile;
        DWORD nMaxFile;
        LPSTR lpstrFileTitle;
        DWORD nMaxFileTitle;
        LPCSTR lpstrInitialDir;
        LPCSTR lpstrTitle;
        DWORD Flags;
        WORD nFileOffset;
        WORD nFileExtension;
        LPCSTR lpstrDefExt;
        DWORD lCustData;
        LPOFNHOOKPROC lpfnHook;
        LPCSTR lpTemplateName;
} OPENFILENAMEA,*LPOPENFILENAMEA;
typedef struct tagOFNW {
        DWORD lStructSize;
        HWND hwndOwner;
        HINSTANCE hInstance;
        LPCWSTR lpstrFilter;
        LPWSTR lpstrCustomFilter;
        DWORD nMaxCustFilter;
        DWORD nFilterIndex;
        LPWSTR lpstrFile;
        DWORD nMaxFile;
        LPWSTR lpstrFileTitle;
        DWORD nMaxFileTitle;
        LPCWSTR lpstrInitialDir;
        LPCWSTR lpstrTitle;
        DWORD Flags;
        WORD nFileOffset;
        WORD nFileExtension;
        LPCWSTR lpstrDefExt;
        DWORD lCustData;
        LPOFNHOOKPROC lpfnHook;
        LPCWSTR lpTemplateName;
} OPENFILENAMEW,*LPOPENFILENAMEW;
typedef struct _OFNOTIFYA {
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR pszFile;
} OFNOTIFYA,*LPOFNOTIFYA;
typedef struct _OFNOTIFYW {
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR pszFile;
} OFNOTIFYW,*LPOFNOTIFYW;
typedef struct tagPSDA {
        DWORD lStructSize;
        HWND hwndOwner;
        HGLOBAL hDevMode;
        HGLOBAL hDevNames;
        DWORD Flags;
        POINT ptPaperSize;
        RECT rtMinMargin;
        RECT rtMargin;
        HINSTANCE hInstance;
        LPARAM lCustData;
        LPPAGESETUPHOOK lpfnPageSetupHook;
        LPPAGEPAINTHOOK lpfnPagePaintHook;
        LPCSTR lpPageSetupTemplateName;
        HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGA,*LPPAGESETUPDLGA;
typedef struct tagPSDW {
        DWORD lStructSize;
        HWND hwndOwner;
        HGLOBAL hDevMode;
        HGLOBAL hDevNames;
        DWORD Flags;
        POINT ptPaperSize;
        RECT rtMinMargin;
        RECT rtMargin;
        HINSTANCE hInstance;
        LPARAM lCustData;
        LPPAGESETUPHOOK lpfnPageSetupHook;
        LPPAGEPAINTHOOK lpfnPagePaintHook;
        LPCWSTR lpPageSetupTemplateName;
        HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGW,*LPPAGESETUPDLGW;
typedef struct tagPDA {
        DWORD lStructSize;
        HWND hwndOwner;
        HANDLE hDevMode;
        HANDLE hDevNames;
        HDC hDC;
        DWORD Flags;
        WORD nFromPage;
        WORD nToPage;
        WORD nMinPage;
        WORD nMaxPage;
        WORD nCopies;
        HINSTANCE hInstance;
        DWORD lCustData;
        LPPRINTHOOKPROC lpfnPrintHook;
        LPSETUPHOOKPROC lpfnSetupHook;
        LPCSTR lpPrintTemplateName;
        LPCSTR lpSetupTemplateName;
        HANDLE hPrintTemplate;
        HANDLE hSetupTemplate;
} PRINTDLGA,*LPPRINTDLGA;
typedef struct tagPDW {
        DWORD lStructSize;
        HWND hwndOwner;
        HANDLE hDevMode;
        HANDLE hDevNames;
        HDC hDC;
        DWORD Flags;
        WORD nFromPage;
        WORD nToPage;
        WORD nMinPage;
        WORD nMaxPage;
        WORD nCopies;
        HINSTANCE hInstance;
        DWORD lCustData;
        LPPRINTHOOKPROC lpfnPrintHook;
        LPSETUPHOOKPROC lpfnSetupHook;
        LPCWSTR lpPrintTemplateName;
        LPCWSTR lpSetupTemplateName;
        HANDLE hPrintTemplate;
        HANDLE hSetupTemplate;
} PRINTDLGW,*LPPRINTDLGW;
# 494 "C:/PROGRA~1/WIDEST~1/gcc/include/commdlg.h" 3
BOOL __attribute__((__stdcall__)) ChooseColorA(LPCHOOSECOLORA);
BOOL __attribute__((__stdcall__)) ChooseColorW(LPCHOOSECOLORW);
BOOL __attribute__((__stdcall__)) ChooseFontA(LPCHOOSEFONTA);
BOOL __attribute__((__stdcall__)) ChooseFontW(LPCHOOSEFONTW);
DWORD __attribute__((__stdcall__)) CommDlgExtendedError(void);
HWND __attribute__((__stdcall__)) FindTextA(LPFINDREPLACEA);
HWND __attribute__((__stdcall__)) FindTextW(LPFINDREPLACEW);
short __attribute__((__stdcall__)) GetFileTitleA(LPCSTR,LPSTR,WORD);
short __attribute__((__stdcall__)) GetFileTitleW(LPCWSTR,LPWSTR,WORD);
BOOL __attribute__((__stdcall__)) GetOpenFileNameA(LPOPENFILENAMEA);
BOOL __attribute__((__stdcall__)) GetOpenFileNameW(LPOPENFILENAMEW);
BOOL __attribute__((__stdcall__)) GetSaveFileNameA(LPOPENFILENAMEA);
BOOL __attribute__((__stdcall__)) GetSaveFileNameW(LPOPENFILENAMEW);
BOOL __attribute__((__stdcall__)) PageSetupDlgA(LPPAGESETUPDLGA);
BOOL __attribute__((__stdcall__)) PageSetupDlgW(LPPAGESETUPDLGW);
BOOL __attribute__((__stdcall__)) PrintDlgA(LPPRINTDLGA);
BOOL __attribute__((__stdcall__)) PrintDlgW(LPPRINTDLGW);
HWND __attribute__((__stdcall__)) ReplaceTextA(LPFINDREPLACEA);
HWND __attribute__((__stdcall__)) ReplaceTextW(LPFINDREPLACEW);
# 554 "C:/PROGRA~1/WIDEST~1/gcc/include/commdlg.h" 3
typedef CHOOSECOLORA CHOOSECOLOR,*LPCHOOSECOLOR;
typedef CHOOSEFONTA CHOOSEFONT,*LPCHOOSEFONT;
typedef FINDREPLACEA FINDREPLACE,*LPFINDREPLACE;
typedef OPENFILENAMEA OPENFILENAME,*LPOPENFILENAME;
typedef OFNOTIFYA OFNOTIFY,*LPOFNOTIFY;
typedef PAGESETUPDLGA PAGESETUPDLG,*LPPAGESETUPDLG;
typedef PRINTDLGA PRINTDLG,*LPPRINTDLG;
# 575 "C:/PROGRA~1/WIDEST~1/gcc/include/commdlg.h" 3
#pragma pack(pop)

}
# 76 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/cderr.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/cderr.h" 3
# 77 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/dde.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/dde.h" 3



extern "C" {
# 23 "C:/PROGRA~1/WIDEST~1/gcc/include/dde.h" 3
typedef struct {
        unsigned short bAppReturnCode:8,reserved:6,fBusy:1,fAck:1;
} DDEACK;
typedef struct {
        unsigned short reserved:14,fDeferUpd:1,fAckReq:1;
        short cfFormat;
} DDEADVISE;
typedef struct {
        unsigned short unused:12,fResponse:1,fRelease:1,reserved:1,fAckReq:1;
        short cfFormat;
        BYTE Value[1];
} DDEDATA;
typedef struct {
        unsigned short unused:13,fRelease:1,fReserved:2;
        short cfFormat;
        BYTE Value[1];
} DDEPOKE;
typedef struct {
        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
         fAckReq:1;
    short cfFormat;
} DDELN;

typedef struct {
        unsigned short unused:12,fAck:1,fRelease:1,fReserved:1,fAckReq:1;
    short cfFormat;
    BYTE rgb[1];
} DDEUP;
BOOL __attribute__((__stdcall__)) DdeSetQualityOfService(HWND,const SECURITY_QUALITY_OF_SERVICE*,PSECURITY_QUALITY_OF_SERVICE);
BOOL __attribute__((__stdcall__)) ImpersonateDdeClientWindow(HWND,HWND);
LONG __attribute__((__stdcall__)) PackDDElParam(UINT,UINT,UINT);
BOOL __attribute__((__stdcall__)) UnpackDDElParam(UINT,LONG,PUINT,PUINT);
BOOL __attribute__((__stdcall__)) FreeDDElParam(UINT,LONG);
LONG __attribute__((__stdcall__)) ReuseDDElParam(LONG,UINT,UINT,UINT,UINT);



}
# 78 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/ddeml.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/ddeml.h" 3



extern "C" {
# 145 "C:/PROGRA~1/WIDEST~1/gcc/include/ddeml.h" 3
typedef struct HCONVLIST__{int i;}*HCONVLIST;
typedef struct HCONV__{int i;}*HCONV;
typedef struct HSZ__{int i;}*HSZ;
typedef struct HDDEDATA__{int i;}*HDDEDATA;
typedef HDDEDATA __attribute__((__stdcall__)) FNCALLBACK(UINT,UINT,HCONV,HSZ,HSZ,HDDEDATA,DWORD,DWORD);
typedef HDDEDATA(__attribute__((__stdcall__)) *PFNCALLBACK)(UINT,UINT,HCONV,HSZ,HSZ,HDDEDATA,DWORD,DWORD);
typedef struct tagHSZPAIR {
        HSZ hszSvc;
        HSZ hszTopic;
} HSZPAIR, *PHSZPAIR;
typedef struct tagCONVCONTEXT {
        UINT cb;
        UINT wFlags;
        UINT wCountryID;
        int iCodePage;
        DWORD dwLangID;
        DWORD dwSecurity;
        SECURITY_QUALITY_OF_SERVICE qos;
} CONVCONTEXT,*PCONVCONTEXT;
typedef struct tagCONVINFO {
        DWORD cb;
        DWORD hUser;
        HCONV hConvPartner;
        HSZ hszSvcPartner;
        HSZ hszServiceReq;
        HSZ hszTopic;
        HSZ hszItem;
        UINT wFmt;
        UINT wType;
        UINT wStatus;
        UINT wConvst;
        UINT wLastError;
        HCONVLIST hConvList;
        CONVCONTEXT ConvCtxt;
        HWND hwnd;
        HWND hwndPartner;
} CONVINFO,*PCONVINFO;
typedef struct tagDDEML_MSG_HOOK_DATA {
        UINT uiLo;
        UINT uiHi;
        DWORD cbData;
        DWORD Data[8];
} DDEML_MSG_HOOK_DATA;
typedef struct tagMONHSZSTRUCT {
        UINT cb;
        BOOL fsAction;
        DWORD dwTime;
        HSZ hsz;
        HANDLE hTask;
        TCHAR str[1];
} MONHSZSTRUCT, *PMONHSZSTRUCT;
typedef struct tagMONLINKSTRUCT {
        UINT cb;
        DWORD dwTime;
        HANDLE hTask;
        BOOL fEstablished;
        BOOL fNoData;
        HSZ hszSvc;
        HSZ hszTopic;
        HSZ hszItem;
        UINT wFmt;
        BOOL fServer;
        HCONV hConvServer;
        HCONV hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;
typedef struct tagMONCONVSTRUCT {
        UINT cb;
        BOOL fConnect;
        DWORD dwTime;
        HANDLE hTask;
        HSZ hszSvc;
        HSZ hszTopic;
        HCONV hConvClient;
        HCONV hConvServer;
} MONCONVSTRUCT, *PMONCONVSTRUCT;
typedef struct tagMONCBSTRUCT {
        UINT cb;
        DWORD dwTime;
        HANDLE hTask;
        DWORD dwRet;
        UINT wType;
        UINT wFmt;
        HCONV hConv;
        HSZ hsz1;
        HSZ hsz2;
        HDDEDATA hData;
        ULONG_PTR dwData1;
        ULONG_PTR dwData2;
        CONVCONTEXT cc;
        DWORD cbData;
        DWORD Data[8];
} MONCBSTRUCT, *PMONCBSTRUCT;
typedef struct tagMONERRSTRUCT {
        UINT cb;
        UINT wLastError;
        DWORD dwTime;
        HANDLE hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;
typedef struct tagMONMSGSTRUCT {
        UINT cb;
        HWND hwndTo;
        DWORD dwTime;
        HANDLE hTask;
        UINT wMsg;
        WPARAM wParam;
        LPARAM lParam;
        DDEML_MSG_HOOK_DATA dmhd;
} MONMSGSTRUCT, *PMONMSGSTRUCT;

BOOL __attribute__((__stdcall__)) DdeAbandonTransaction(DWORD,HCONV,DWORD);
PBYTE __attribute__((__stdcall__)) DdeAccessData(HDDEDATA,PDWORD);
HDDEDATA __attribute__((__stdcall__)) DdeAddData(HDDEDATA,PBYTE,DWORD,DWORD);
HDDEDATA __attribute__((__stdcall__)) DdeClientTransaction(PBYTE,DWORD,HCONV,HSZ,UINT,UINT,DWORD,PDWORD);
int __attribute__((__stdcall__)) DdeCmpStringHandles(HSZ,HSZ);
HCONV __attribute__((__stdcall__)) DdeConnect(DWORD,HSZ,HSZ,PCONVCONTEXT);
HCONVLIST __attribute__((__stdcall__)) DdeConnectList(DWORD,HSZ,HSZ,HCONVLIST,PCONVCONTEXT);
HDDEDATA __attribute__((__stdcall__)) DdeCreateDataHandle(DWORD,PBYTE,DWORD,DWORD,HSZ,UINT,UINT);
HSZ __attribute__((__stdcall__)) DdeCreateStringHandleA(DWORD,LPSTR,int);
HSZ __attribute__((__stdcall__)) DdeCreateStringHandleW(DWORD,LPWSTR,int);
BOOL __attribute__((__stdcall__)) DdeDisconnect(HCONV);
BOOL __attribute__((__stdcall__)) DdeDisconnectList(HCONVLIST);
BOOL __attribute__((__stdcall__)) DdeEnableCallback(DWORD,HCONV,UINT);
BOOL __attribute__((__stdcall__)) DdeFreeDataHandle(HDDEDATA);
BOOL __attribute__((__stdcall__)) DdeFreeStringHandle(DWORD,HSZ);
DWORD __attribute__((__stdcall__)) DdeGetData(HDDEDATA,PBYTE,DWORD,DWORD);
UINT __attribute__((__stdcall__)) DdeGetLastError(DWORD);
BOOL __attribute__((__stdcall__)) DdeImpersonateClient(HCONV);
UINT __attribute__((__stdcall__)) DdeInitializeA(PDWORD,PFNCALLBACK,DWORD,DWORD);
UINT __attribute__((__stdcall__)) DdeInitializeW(PDWORD,PFNCALLBACK,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) DdeKeepStringHandle(DWORD,HSZ);
HDDEDATA __attribute__((__stdcall__)) DdeNameService(DWORD,HSZ,HSZ,UINT);
BOOL __attribute__((__stdcall__)) DdePostAdvise(DWORD,HSZ,HSZ);
UINT __attribute__((__stdcall__)) DdeQueryConvInfo(HCONV,DWORD,PCONVINFO);
HCONV __attribute__((__stdcall__)) DdeQueryNextServer(HCONVLIST,HCONV);
DWORD __attribute__((__stdcall__)) DdeQueryStringA(DWORD,HSZ,LPSTR,DWORD,int);
DWORD __attribute__((__stdcall__)) DdeQueryStringW(DWORD,HSZ,LPWSTR,DWORD,int);
HCONV __attribute__((__stdcall__)) DdeReconnect(HCONV);
BOOL __attribute__((__stdcall__)) DdeSetUserHandle(HCONV,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) DdeUnaccessData(HDDEDATA);
BOOL __attribute__((__stdcall__)) DdeUninitialize(DWORD);
# 312 "C:/PROGRA~1/WIDEST~1/gcc/include/ddeml.h" 3
}
# 79 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/dlgs.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/dlgs.h" 3



extern "C" {
# 176 "C:/PROGRA~1/WIDEST~1/gcc/include/dlgs.h" 3
typedef struct tagCRGB {
 BYTE bRed;
 BYTE bGreen;
 BYTE bBlue;
 BYTE bExtra;
} CRGB;


}
# 80 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/imm.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/imm.h" 3



extern "C" {
# 244 "C:/PROGRA~1/WIDEST~1/gcc/include/imm.h" 3
typedef DWORD HIMC;
typedef DWORD HIMCC;
typedef HKL *LPHKL;
typedef struct tagCOMPOSITIONFORM {
        DWORD dwStyle;
        POINT ptCurrentPos;
        RECT rcArea;
} COMPOSITIONFORM,*PCOMPOSITIONFORM,*LPCOMPOSITIONFORM;
typedef struct tagCANDIDATEFORM {
        DWORD dwIndex;
        DWORD dwStyle;
        POINT ptCurrentPos;
        RECT rcArea;
} CANDIDATEFORM,*PCANDIDATEFORM,*LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST {
        DWORD dwSize;
        DWORD dwStyle;
        DWORD dwCount;
        DWORD dwSelection;
        DWORD dwPageStart;
        DWORD dwPageSize;
        DWORD dwOffset[1];
} CANDIDATELIST,*PCANDIDATELIST,*LPCANDIDATELIST;
typedef struct tagREGISTERWORDA {
        LPSTR lpReading;
        LPSTR lpWord;
} REGISTERWORDA,*PREGISTERWORDA,*LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
        LPWSTR lpReading;
        LPWSTR lpWord;
} REGISTERWORDW,*PREGISTERWORDW,*LPREGISTERWORDW;
typedef struct tagSTYLEBUFA {
        DWORD dwStyle;
        CHAR szDescription[32];
} STYLEBUFA,*PSTYLEBUFA,*LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
        DWORD dwStyle;
        WCHAR szDescription[32];
} STYLEBUFW,*PSTYLEBUFW,*LPSTYLEBUFW;
typedef struct tagIMEMENUITEMINFOA {
        UINT cbSize;
        UINT fType;
        UINT fState;
        UINT wID;
        HBITMAP hbmpChecked;
        HBITMAP hbmpUnchecked;
        DWORD dwItemData;
        CHAR szString[80];
        HBITMAP hbmpItem;
} IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,*LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
        UINT cbSize;
        UINT fType;
        UINT fState;
        UINT wID;
        HBITMAP hbmpChecked;
        HBITMAP hbmpUnchecked;
        DWORD dwItemData;
        WCHAR szString[80];
        HBITMAP hbmpItem;
} IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,*LPIMEMENUITEMINFOW;
typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);







typedef REGISTERWORDA REGISTERWORD,*PREGISTERWORD,*LPREGISTERWORD;
typedef STYLEBUFA STYLEBUF,*PSTYLEBUF,*LPSTYLEBUF;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO,*PIMEMENUITEMINFO,*LPIMEMENUITEMINFO;

HKL __attribute__((__stdcall__)) ImmInstallIMEA(LPCSTR,LPCSTR);
HKL __attribute__((__stdcall__)) ImmInstallIMEW(LPCWSTR,LPCWSTR);
HWND __attribute__((__stdcall__)) ImmGetDefaultIMEWnd(HWND);
UINT __attribute__((__stdcall__)) ImmGetDescriptionA(HKL,LPSTR,UINT);
UINT __attribute__((__stdcall__)) ImmGetDescriptionW(HKL,LPWSTR,UINT);
UINT __attribute__((__stdcall__)) ImmGetIMEFileNameA(HKL,LPSTR,UINT);
UINT __attribute__((__stdcall__)) ImmGetIMEFileNameW(HKL,LPWSTR,UINT);
DWORD __attribute__((__stdcall__)) ImmGetProperty(HKL,DWORD);
BOOL __attribute__((__stdcall__)) ImmIsIME(HKL);
BOOL __attribute__((__stdcall__)) ImmSimulateHotKey(HWND,DWORD);
HIMC __attribute__((__stdcall__)) ImmCreateContext(void);
BOOL __attribute__((__stdcall__)) ImmDestroyContext(HIMC);
HIMC __attribute__((__stdcall__)) ImmGetContext(HWND);
BOOL __attribute__((__stdcall__)) ImmReleaseContext(HWND,HIMC);
HIMC __attribute__((__stdcall__)) ImmAssociateContext(HWND,HIMC);
LONG __attribute__((__stdcall__)) ImmGetCompositionStringA(HIMC,DWORD,PVOID,DWORD);
LONG __attribute__((__stdcall__)) ImmGetCompositionStringW(HIMC,DWORD,PVOID,DWORD);
BOOL __attribute__((__stdcall__)) ImmSetCompositionStringA(HIMC,DWORD,PCVOID,DWORD,PCVOID,DWORD);
BOOL __attribute__((__stdcall__)) ImmSetCompositionStringW(HIMC,DWORD,PCVOID,DWORD,PCVOID,DWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountA(HIMC,PDWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountW(HIMC,PDWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListA(HIMC,DWORD,PCANDIDATELIST,DWORD);
DWORD __attribute__((__stdcall__)) ImmGetCandidateListW(HIMC,DWORD,PCANDIDATELIST,DWORD);
DWORD __attribute__((__stdcall__)) ImmGetGuideLineA(HIMC,DWORD,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) ImmGetGuideLineW(HIMC,DWORD,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) ImmGetConversionStatus(HIMC,LPDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) ImmSetConversionStatus(HIMC,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) ImmGetOpenStatus(HIMC);
BOOL __attribute__((__stdcall__)) ImmSetOpenStatus(HIMC,BOOL);
BOOL __attribute__((__stdcall__)) ImmGetCompositionFontA(HIMC,LPLOGFONTA);
BOOL __attribute__((__stdcall__)) ImmGetCompositionFontW(HIMC,LPLOGFONTW);
BOOL __attribute__((__stdcall__)) ImmSetCompositionFontA(HIMC,LPLOGFONTA);
BOOL __attribute__((__stdcall__)) ImmSetCompositionFontW(HIMC,LPLOGFONTW);
BOOL __attribute__((__stdcall__)) ImmConfigureIMEA(HKL,HWND,DWORD,PVOID);
BOOL __attribute__((__stdcall__)) ImmConfigureIMEW(HKL,HWND,DWORD,PVOID);
LRESULT __attribute__((__stdcall__)) ImmEscapeA(HKL,HIMC,UINT,PVOID);
LRESULT __attribute__((__stdcall__)) ImmEscapeW(HKL,HIMC,UINT,PVOID);
DWORD __attribute__((__stdcall__)) ImmGetConversionListA(HKL,HIMC,LPCSTR,PCANDIDATELIST,DWORD,UINT);
DWORD __attribute__((__stdcall__)) ImmGetConversionListW(HKL,HIMC,LPCWSTR,PCANDIDATELIST,DWORD,UINT);
BOOL __attribute__((__stdcall__)) ImmNotifyIME(HIMC,DWORD,DWORD,DWORD);
BOOL __attribute__((__stdcall__)) ImmGetStatusWindowPos(HIMC,LPPOINT);
BOOL __attribute__((__stdcall__)) ImmSetStatusWindowPos(HIMC,LPPOINT);
BOOL __attribute__((__stdcall__)) ImmGetCompositionWindow(HIMC,PCOMPOSITIONFORM);
BOOL __attribute__((__stdcall__)) ImmSetCompositionWindow(HIMC,PCOMPOSITIONFORM);
BOOL __attribute__((__stdcall__)) ImmGetCandidateWindow(HIMC,DWORD,PCANDIDATEFORM);
BOOL __attribute__((__stdcall__)) ImmSetCandidateWindow(HIMC,PCANDIDATEFORM);
BOOL __attribute__((__stdcall__)) ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM);
BOOL __attribute__((__stdcall__)) ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM);
UINT __attribute__((__stdcall__)) ImmGetVirtualKey(HWND);
BOOL __attribute__((__stdcall__)) ImmRegisterWordA(HKL,LPCSTR,DWORD,LPCSTR);
BOOL __attribute__((__stdcall__)) ImmRegisterWordW(HKL,LPCWSTR,DWORD,LPCWSTR);
BOOL __attribute__((__stdcall__)) ImmUnregisterWordA(HKL,LPCSTR,DWORD,LPCSTR);
BOOL __attribute__((__stdcall__)) ImmUnregisterWordW(HKL,LPCWSTR,DWORD,LPCWSTR);
UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleA(HKL,UINT,PSTYLEBUFA);
UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleW(HKL,UINT,PSTYLEBUFW);
UINT __attribute__((__stdcall__)) ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR,DWORD,LPCSTR,PVOID);
UINT __attribute__((__stdcall__)) ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR,DWORD,LPCWSTR,PVOID);
BOOL __attribute__((__stdcall__)) EnableEUDC(BOOL);
BOOL __attribute__((__stdcall__)) ImmDisableIME(DWORD);
DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD);
DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD);
# 422 "C:/PROGRA~1/WIDEST~1/gcc/include/imm.h" 3
}
# 81 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/lzexpand.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/lzexpand.h" 3



extern "C" {
# 18 "C:/PROGRA~1/WIDEST~1/gcc/include/lzexpand.h" 3
LONG __attribute__((__stdcall__)) CopyLZFile(INT,INT);
INT __attribute__((__stdcall__)) GetExpandedNameA(LPSTR,LPSTR);
INT __attribute__((__stdcall__)) GetExpandedNameW(LPWSTR,LPWSTR);
void __attribute__((__stdcall__)) LZClose(INT);
LONG __attribute__((__stdcall__)) LZCopy(INT,INT);
void __attribute__((__stdcall__)) LZDone(void);
INT __attribute__((__stdcall__)) LZInit(INT);
INT __attribute__((__stdcall__)) LZOpenFileA(LPSTR,LPOFSTRUCT,WORD);
INT __attribute__((__stdcall__)) LZOpenFileW(LPWSTR,LPOFSTRUCT,WORD);
INT __attribute__((__stdcall__)) LZRead(INT,LPSTR,INT);
LONG __attribute__((__stdcall__)) LZSeek(INT,LONG,INT);
INT __attribute__((__stdcall__)) LZStart(void);
# 38 "C:/PROGRA~1/WIDEST~1/gcc/include/lzexpand.h" 3
}
# 82 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/mmsystem.h" 1 3
# 6 "C:/PROGRA~1/WIDEST~1/gcc/include/mmsystem.h" 3

#pragma pack(push,1)

extern "C" {
# 899 "C:/PROGRA~1/WIDEST~1/gcc/include/mmsystem.h" 3
typedef DWORD MCIERROR;
typedef UINT MCIDEVICEID;
typedef UINT(__attribute__((__stdcall__)) *YIELDPROC)(MCIDEVICEID,DWORD);
typedef UINT MMVERSION;
typedef UINT MMRESULT;
typedef struct mmtime_tag {
        UINT wType;
        union {
                DWORD ms;
                DWORD sample;
                DWORD cb;
                DWORD ticks;
                struct {
                        BYTE hour;
                        BYTE min;
                        BYTE sec;
                        BYTE frame;
                        BYTE fps;
                        BYTE dummy;
                        BYTE pad[2];
                } smpte;
                struct {
                        DWORD songptrpos;
                } midi;
        } u;
} MMTIME,*PMMTIME,*LPMMTIME;
typedef struct HDRVR__{int i;}*HDRVR;
typedef struct tagDRVCONFIGINFO {
        DWORD dwDCISize;
        LPCWSTR lpszDCISectionName;
        LPCWSTR lpszDCIAliasName;
} DRVCONFIGINFO,*PDRVCONFIGINFO,*LPDRVCONFIGINFO;
typedef struct DRVCONFIGINFOEX {
        DWORD dwDCISize;
        LPCWSTR lpszDCISectionName;
        LPCWSTR lpszDCIAliasName;
        DWORD dnDevNode;
} DRVCONFIGINFOEX,*PDRVCONFIGINFOEX,*LPDRVCONFIGINFOEX;
typedef LRESULT(__attribute__((__stdcall__))* DRIVERPROC)(DWORD,HDRVR,UINT,LPARAM,LPARAM);
typedef void (__attribute__((__stdcall__)) DRVCALLBACK)(HDRVR,UINT,DWORD,DWORD,DWORD);
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef DRVCALLBACK *PDRVCALLBACK;
typedef struct HWAVE__{int i;}*HWAVE;
typedef struct HWAVEIN__{int i;}*HWAVEIN;
typedef struct HWAVEOUT__{int i;}*HWAVEOUT;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
typedef struct wavehdr_tag {
        LPSTR lpData;
        DWORD dwBufferLength;
        DWORD dwBytesRecorded;
        DWORD dwUser;
        DWORD dwFlags;
        DWORD dwLoops;
        struct wavehdr_tag *lpNext;
        DWORD reserved;
} WAVEHDR,*PWAVEHDR,*LPWAVEHDR;
typedef struct tagWAVEOUTCAPSA {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
        DWORD dwFormats;
        WORD wChannels;
        WORD wReserved1;
        DWORD dwSupport;
} WAVEOUTCAPSA,*PWAVEOUTCAPSA,*LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
        DWORD dwFormats;
        WORD wChannels;
        WORD wReserved1;
        DWORD dwSupport;
} WAVEOUTCAPSW,*PWAVEOUTCAPSW,*LPWAVEOUTCAPSW;
typedef struct tagWAVEINCAPSA {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
        DWORD dwFormats;
        WORD wChannels;
        WORD wReserved1;
} WAVEINCAPSA,*PWAVEINCAPSA,*LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
        DWORD dwFormats;
        WORD wChannels;
        WORD wReserved1;
} WAVEINCAPSW,*PWAVEINCAPSW,*LPWAVEINCAPSW;
typedef struct waveformat_tag {
        WORD wFormatTag;
        WORD nChannels;
        DWORD nSamplesPerSec;
        DWORD nAvgBytesPerSec;
        WORD nBlockAlign;
} WAVEFORMAT,*PWAVEFORMAT,*LPWAVEFORMAT;
typedef struct pcmwaveformat_tag {
        WAVEFORMAT wf;
        WORD wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT,*LPPCMWAVEFORMAT;


typedef struct tWAVEFORMATEX {
        WORD wFormatTag;
        WORD nChannels;
        DWORD nSamplesPerSec;
        DWORD nAvgBytesPerSec;
        WORD nBlockAlign;
        WORD wBitsPerSample;
        WORD cbSize;
} WAVEFORMATEX,*PWAVEFORMATEX,*LPWAVEFORMATEX;
typedef const WAVEFORMATEX *LPCWAVEFORMATEX;

typedef struct HMIDI__{int i;}*HMIDI;
typedef struct HMIDIIN__{int i;}*HMIDIIN;
typedef struct HMIDIOUT__{int i;}*HMIDIOUT;
typedef struct HMIDISTRM__{int i;}*HMIDISTRM;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WORD PATCHARRAY[128];
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD *LPKEYARRAY;
typedef struct tagMIDIOUTCAPSA {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
        WORD wTechnology;
        WORD wVoices;
        WORD wNotes;
        WORD wChannelMask;
        DWORD dwSupport;
} MIDIOUTCAPSA,*PMIDIOUTCAPSA,*LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
        WORD wTechnology;
        WORD wVoices;
        WORD wNotes;
        WORD wChannelMask;
        DWORD dwSupport;
} MIDIOUTCAPSW,*PMIDIOUTCAPSW,*LPMIDIOUTCAPSW;
typedef struct tagMIDIINCAPSA {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
        DWORD dwSupport;
} MIDIINCAPSA,*PMIDIINCAPSA,*LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
        DWORD dwSupport;
} MIDIINCAPSW,*PMIDIINCAPSW,*NPMIDIINCAPSW,*LPMIDIINCAPSW;
typedef struct midihdr_tag {
        LPSTR lpData;
        DWORD dwBufferLength;
        DWORD dwBytesRecorded;
        DWORD dwUser;
        DWORD dwFlags;
        struct midihdr_tag *lpNext;
        DWORD reserved;
        DWORD dwOffset;
        DWORD dwReserved[8];
} MIDIHDR,*PMIDIHDR,*LPMIDIHDR;
typedef struct midievent_tag {
        DWORD dwDeltaTime;
        DWORD dwStreamID;
        DWORD dwEvent;
        DWORD dwParms[1];
} MIDIEVENT;
typedef struct midistrmbuffver_tag {
        DWORD dwVersion;
        DWORD dwMid;
        DWORD dwOEMVersion;
} MIDISTRMBUFFVER;
typedef struct midiproptimediv_tag {
        DWORD cbStruct;
        DWORD dwTimeDiv;
} MIDIPROPTIMEDIV,*LPMIDIPROPTIMEDIV;
typedef struct midiproptempo_tag {
        DWORD cbStruct;
        DWORD dwTempo;
} MIDIPROPTEMPO,*LPMIDIPROPTEMPO;
typedef struct tagAUXCAPSA {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
        WORD wTechnology;
        WORD wReserved1;
        DWORD dwSupport;
} AUXCAPSA,*PAUXCAPSA,*LPAUXCAPSA;
typedef struct tagAUXCAPSW {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
        WORD wTechnology;
        WORD wReserved1;
        DWORD dwSupport;
} AUXCAPSW,*PAUXCAPSW,*LPAUXCAPSW;
typedef struct HMIXEROBJ__{int i;}*HMIXEROBJ;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef struct HMIXER__{int i;}*HMIXER;
typedef HMIXER *LPHMIXER;
typedef struct tagMIXERCAPSA {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
        DWORD fdwSupport;
        DWORD cDestinations;
} MIXERCAPSA,*PMIXERCAPSA,*LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
        DWORD fdwSupport;
        DWORD cDestinations;
} MIXERCAPSW,*PMIXERCAPSW,*LPMIXERCAPSW;
typedef struct tagMIXERLINEA {
        DWORD cbStruct;
        DWORD dwDestination;
        DWORD dwSource;
        DWORD dwLineID;
        DWORD fdwLine;
        DWORD dwUser;
        DWORD dwComponentType;
        DWORD cChannels;
        DWORD cConnections;
        DWORD cControls;
        CHAR szShortName[16];
        CHAR szName[64];
        struct {
                DWORD dwType;
                DWORD dwDeviceID;
                WORD wMid;
                WORD wPid;
                MMVERSION vDriverVersion;
                CHAR szPname[32];
        } Target;
} MIXERLINEA,*PMIXERLINEA,*LPMIXERLINEA;
typedef struct tagMIXERLINEW {
        DWORD cbStruct;
        DWORD dwDestination;
        DWORD dwSource;
        DWORD dwLineID;
        DWORD fdwLine;
        DWORD dwUser;
        DWORD dwComponentType;
        DWORD cChannels;
        DWORD cConnections;
        DWORD cControls;
        WCHAR szShortName[16];
        WCHAR szName[64];
        struct {
                DWORD dwType;
                DWORD dwDeviceID;
                WORD wMid;
                WORD wPid;
                MMVERSION vDriverVersion;
                WCHAR szPname[32];
        } Target;
} MIXERLINEW,*PMIXERLINEW,*LPMIXERLINEW;
typedef struct tagMIXERCONTROLA {
        DWORD cbStruct;
        DWORD dwControlID;
        DWORD dwControlType;
        DWORD fdwControl;
        DWORD cMultipleItems;
        CHAR szShortName[16];
        CHAR szName[64];
        union {
                __extension__ struct {
                        LONG lMinimum;
                        LONG lMaximum;
                };
                __extension__ struct {
                        DWORD dwMinimum;
                        DWORD dwMaximum;
                };
                DWORD dwReserved[6];
        } Bounds;
        union {
                DWORD cSteps;
                DWORD cbCustomData;
                DWORD dwReserved[6];
        } Metrics;
} MIXERCONTROLA,*PMIXERCONTROLA,*LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
        DWORD cbStruct;
        DWORD dwControlID;
        DWORD dwControlType;
        DWORD fdwControl;
        DWORD cMultipleItems;
        WCHAR szShortName[16];
        WCHAR szName[64];
        union {
                __extension__ struct {
                        LONG lMinimum;
                        LONG lMaximum;
                };
                __extension__ struct {
                        DWORD dwMinimum;
                        DWORD dwMaximum;
                };
                DWORD dwReserved[6];
        } Bounds;
        union {
                DWORD cSteps;
                DWORD cbCustomData;
                DWORD dwReserved[6];
        } Metrics;
} MIXERCONTROLW,*PMIXERCONTROLW,*LPMIXERCONTROLW;
typedef struct tagMIXERLINECONTROLSA {
        DWORD cbStruct;
        DWORD dwLineID;
        __extension__ union {
                DWORD dwControlID;
                DWORD dwControlType;
        } ;
        DWORD cControls;
        DWORD cbmxctrl;
        LPMIXERCONTROLA pamxctrl;
} MIXERLINECONTROLSA,*PMIXERLINECONTROLSA,*LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
        DWORD cbStruct;
        DWORD dwLineID;
        __extension__ union {
                DWORD dwControlID;
                DWORD dwControlType;
        } ;
        DWORD cControls;
        DWORD cbmxctrl;
        LPMIXERCONTROLW pamxctrl;
} MIXERLINECONTROLSW,*PMIXERLINECONTROLSW,*LPMIXERLINECONTROLSW;
typedef struct tMIXERCONTROLDETAILS {
        DWORD cbStruct;
        DWORD dwControlID;
        DWORD cChannels;
        __extension__ union {
                HWND hwndOwner;
                DWORD cMultipleItems;
        } ;
        DWORD cbDetails;
        PVOID paDetails;
} MIXERCONTROLDETAILS,*PMIXERCONTROLDETAILS,*LPMIXERCONTROLDETAILS;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
        DWORD dwParam1;
        DWORD dwParam2;
        CHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA,*PMIXERCONTROLDETAILS_LISTTEXTA,*LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
        DWORD dwParam1;
        DWORD dwParam2;
        WCHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW,*PMIXERCONTROLDETAILS_LISTTEXTW,*LPMIXERCONTROLDETAILS_LISTTEXTW;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
        LONG fValue;
} MIXERCONTROLDETAILS_BOOLEAN,*PMIXERCONTROLDETAILS_BOOLEAN,*LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct tMIXERCONTROLDETAILS_SIGNED {
        LONG lValue;
} MIXERCONTROLDETAILS_SIGNED,*PMIXERCONTROLDETAILS_SIGNED,*LPMIXERCONTROLDETAILS_SIGNED;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
        DWORD dwValue;
} MIXERCONTROLDETAILS_UNSIGNED,*PMIXERCONTROLDETAILS_UNSIGNED,*LPMIXERCONTROLDETAILS_UNSIGNED;
typedef void(__attribute__((__stdcall__)) TIMECALLBACK)(UINT,UINT,DWORD,DWORD,DWORD);
typedef TIMECALLBACK *LPTIMECALLBACK;
typedef struct timecaps_tag {
        UINT wPeriodMin;
        UINT wPeriodMax;
} TIMECAPS,*PTIMECAPS,*LPTIMECAPS;
typedef struct tagJOYCAPSA {
        WORD wMid;
        WORD wPid;
        CHAR szPname[32];
        UINT wXmin;
        UINT wXmax;
        UINT wYmin;
        UINT wYmax;
        UINT wZmin;
        UINT wZmax;
        UINT wNumButtons;
        UINT wPeriodMin;
        UINT wPeriodMax;
        UINT wRmin;
        UINT wRmax;
        UINT wUmin;
        UINT wUmax;
        UINT wVmin;
        UINT wVmax;
        UINT wCaps;
        UINT wMaxAxes;
        UINT wNumAxes;
        UINT wMaxButtons;
        CHAR szRegKey[32];
        CHAR szOEMVxD[260];
} JOYCAPSA,*PJOYCAPSA,*LPJOYCAPSA;
typedef struct tagJOYCAPSW {
        WORD wMid;
        WORD wPid;
        WCHAR szPname[32];
        UINT wXmin;
        UINT wXmax;
        UINT wYmin;
        UINT wYmax;
        UINT wZmin;
        UINT wZmax;
        UINT wNumButtons;
        UINT wPeriodMin;
        UINT wPeriodMax;
        UINT wRmin;
        UINT wRmax;
        UINT wUmin;
        UINT wUmax;
        UINT wVmin;
        UINT wVmax;
        UINT wCaps;
        UINT wMaxAxes;
        UINT wNumAxes;
        UINT wMaxButtons;
        WCHAR szRegKey[32];
        WCHAR szOEMVxD[260];
} JOYCAPSW,*PJOYCAPSW,*LPJOYCAPSW;
typedef struct joyinfo_tag {
        UINT wXpos;
        UINT wYpos;
        UINT wZpos;
        UINT wButtons;
} JOYINFO,*PJOYINFO,*LPJOYINFO;
typedef struct joyinfoex_tag {
        DWORD dwSize;
        DWORD dwFlags;
        DWORD dwXpos;
        DWORD dwYpos;
        DWORD dwZpos;
        DWORD dwRpos;
        DWORD dwUpos;
        DWORD dwVpos;
        DWORD dwButtons;
        DWORD dwButtonNumber;
        DWORD dwPOV;
        DWORD dwReserved1;
        DWORD dwReserved2;
} JOYINFOEX,*PJOYINFOEX,*LPJOYINFOEX;
typedef DWORD FOURCC;
typedef char *HPSTR;
typedef struct HMMIO__{int i;}*HMMIO;
typedef LRESULT (__attribute__((__stdcall__)) MMIOPROC)(LPSTR,UINT,LPARAM,LPARAM);
typedef MMIOPROC *LPMMIOPROC;
typedef struct _MMIOINFO {
        DWORD dwFlags;
        FOURCC fccIOProc;
        LPMMIOPROC pIOProc;
        UINT wErrorRet;
        HTASK htask;
        LONG cchBuffer;
        HPSTR pchBuffer;
        HPSTR pchNext;
        HPSTR pchEndRead;
        HPSTR pchEndWrite;
        LONG lBufOffset;
        LONG lDiskOffset;
        DWORD adwInfo[3];
        DWORD dwReserved1;
        DWORD dwReserved2;
        HMMIO hmmio;
} MMIOINFO,*PMMIOINFO,*LPMMIOINFO;
typedef const MMIOINFO *LPCMMIOINFO;
typedef struct _MMCKINFO {
        FOURCC ckid;
        DWORD cksize;
        FOURCC fccType;
        DWORD dwDataOffset;
        DWORD dwFlags;
} MMCKINFO,*PMMCKINFO,*LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;
typedef struct tagMCI_GENERIC_PARMS {
        DWORD dwCallback;
} MCI_GENERIC_PARMS,*PMCI_GENERIC_PARMS,*LPMCI_GENERIC_PARMS;
typedef struct tagMCI_OPEN_PARMSA {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCSTR lpstrDeviceType;
        LPCSTR lpstrElementName;
        LPCSTR lpstrAlias;
} MCI_OPEN_PARMSA,*PMCI_OPEN_PARMSA,*LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCWSTR lpstrDeviceType;
        LPCWSTR lpstrElementName;
        LPCWSTR lpstrAlias;
} MCI_OPEN_PARMSW,*PMCI_OPEN_PARMSW,*LPMCI_OPEN_PARMSW;
typedef struct tagMCI_PLAY_PARMS {
        DWORD dwCallback;
        DWORD dwFrom;
        DWORD dwTo;
} MCI_PLAY_PARMS,*PMCI_PLAY_PARMS,*LPMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS {
        DWORD dwCallback;
        DWORD dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS,*LPMCI_SEEK_PARMS;
typedef struct tagMCI_STATUS_PARMS {
        DWORD dwCallback;
        DWORD dwReturn;
        DWORD dwItem;
        DWORD dwTrack;
} MCI_STATUS_PARMS,*PMCI_STATUS_PARMS,*LPMCI_STATUS_PARMS;
typedef struct tagMCI_INFO_PARMSA {
        DWORD dwCallback;
        LPSTR lpstrReturn;
        DWORD dwRetSize;
} MCI_INFO_PARMSA,*LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
        DWORD dwCallback;
        LPWSTR lpstrReturn;
        DWORD dwRetSize;
} MCI_INFO_PARMSW,*LPMCI_INFO_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS {
        DWORD dwCallback;
        DWORD dwReturn;
        DWORD dwItem;
} MCI_GETDEVCAPS_PARMS,*PMCI_GETDEVCAPS_PARMS,*LPMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_SYSINFO_PARMSA {
        DWORD dwCallback;
        LPSTR lpstrReturn;
        DWORD dwRetSize;
        DWORD dwNumber;
        UINT wDeviceType;
} MCI_SYSINFO_PARMSA,*PMCI_SYSINFO_PARMSA,*LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
        DWORD dwCallback;
        LPWSTR lpstrReturn;
        DWORD dwRetSize;
        DWORD dwNumber;
        UINT wDeviceType;
} MCI_SYSINFO_PARMSW,*PMCI_SYSINFO_PARMSW,*LPMCI_SYSINFO_PARMSW;
typedef struct tagMCI_SET_PARMS {
        DWORD dwCallback;
        DWORD dwTimeFormat;
        DWORD dwAudio;
} MCI_SET_PARMS,*PMCI_SET_PARMS,*LPMCI_SET_PARMS;
typedef struct tagMCI_BREAK_PARMS {
        DWORD dwCallback;
        int nVirtKey;
        HWND hwndBreak;
} MCI_BREAK_PARMS,*PMCI_BREAK_PARMS,*LPMCI_BREAK_PARMS;
typedef struct tagMCI_SAVE_PARMSA {
        DWORD dwCallback;
        LPCSTR lpfilename;
} MCI_SAVE_PARMSA,*PMCI_SAVE_PARMSA,*LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
        DWORD dwCallback;
        LPCWSTR lpfilename;
} MCI_SAVE_PARMSW,*PMCI_SAVE_PARMSW,*LPMCI_SAVE_PARMSW;
typedef struct tagMCI_LOAD_PARMSA {
        DWORD dwCallback;
        LPCSTR lpfilename;
} MCI_LOAD_PARMSA,*PMCI_LOAD_PARMSA,*LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
        DWORD dwCallback;
        LPCWSTR lpfilename;
} MCI_LOAD_PARMSW,*PMCI_LOAD_PARMSW,*LPMCI_LOAD_PARMSW;
typedef struct tagMCI_RECORD_PARMS {
        DWORD dwCallback;
        DWORD dwFrom;
        DWORD dwTo;
} MCI_RECORD_PARMS,*LPMCI_RECORD_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS {
        DWORD dwCallback;
        DWORD dwFrom;
        DWORD dwTo;
        DWORD dwSpeed;
} MCI_VD_PLAY_PARMS,*PMCI_VD_PLAY_PARMS,*LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS {
        DWORD dwCallback;
        DWORD dwFrames;
} MCI_VD_STEP_PARMS,*PMCI_VD_STEP_PARMS,*LPMCI_VD_STEP_PARMS;
typedef struct tagMCI_VD_ESCAPE_PARMSA {
        DWORD dwCallback;
        LPCSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSA,*PMCI_VD_ESCAPE_PARMSA,*LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
        DWORD dwCallback;
        LPCWSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSW,*PMCI_VD_ESCAPE_PARMSW,*LPMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCSTR lpstrDeviceType;
        LPCSTR lpstrElementName;
        LPCSTR lpstrAlias;
        DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA,*PMCI_WAVE_OPEN_PARMSA,*LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCWSTR lpstrDeviceType;
        LPCWSTR lpstrElementName;
        LPCWSTR lpstrAlias;
        DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW,*PMCI_WAVE_OPEN_PARMSW,*LPMCI_WAVE_OPEN_PARMSW;
typedef struct tagMCI_WAVE_DELETE_PARMS {
        DWORD dwCallback;
        DWORD dwFrom;
        DWORD dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS,*LPMCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_WAVE_SET_PARMS {
        DWORD dwCallback;
        DWORD dwTimeFormat;
        DWORD dwAudio;
        UINT wInput;
        UINT wOutput;
        WORD wFormatTag;
        WORD wReserved2;
        WORD nChannels;
        WORD wReserved3;
        DWORD nSamplesPerSec;
        DWORD nAvgBytesPerSec;
        WORD nBlockAlign;
        WORD wReserved4;
        WORD wBitsPerSample;
        WORD wReserved5;
} MCI_WAVE_SET_PARMS,*PMCI_WAVE_SET_PARMS,*LPMCI_WAVE_SET_PARMS;

LRESULT __attribute__((__stdcall__)) CloseDriver(HDRVR,LONG,LONG);
HDRVR __attribute__((__stdcall__)) OpenDriver(LPCWSTR,LPCWSTR,LONG);
LRESULT __attribute__((__stdcall__)) SendDriverMessage(HDRVR,UINT,LONG,LONG);
HMODULE __attribute__((__stdcall__)) DrvGetModuleHandle(HDRVR);
HMODULE __attribute__((__stdcall__)) GetDriverModuleHandle(HDRVR);
LRESULT __attribute__((__stdcall__)) DefDriverProc(DWORD,HDRVR,UINT,LPARAM,LPARAM);
UINT __attribute__((__stdcall__)) mmsystemGetVersion(void);

BOOL __attribute__((__stdcall__)) sndPlaySoundA(LPCSTR,UINT);
BOOL __attribute__((__stdcall__)) sndPlaySoundW(LPCWSTR,UINT);
BOOL __attribute__((__stdcall__)) PlaySoundA(LPCSTR,HMODULE,DWORD);
BOOL __attribute__((__stdcall__)) PlaySoundW(LPCWSTR,HMODULE,DWORD);
UINT __attribute__((__stdcall__)) waveOutGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) waveOutGetDevCapsA(UINT,LPWAVEOUTCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutGetDevCapsW(UINT,LPWAVEOUTCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutGetVolume(HWAVEOUT,PDWORD);
MMRESULT __attribute__((__stdcall__)) waveOutSetVolume(HWAVEOUT,DWORD);
MMRESULT __attribute__((__stdcall__)) waveOutGetErrorTextA(MMRESULT,LPSTR,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutGetErrorTextW(MMRESULT,LPWSTR,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutOpen(LPHWAVEOUT,UINT,LPCWAVEFORMATEX,DWORD,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) waveOutClose(HWAVEOUT);
MMRESULT __attribute__((__stdcall__)) waveOutPrepareHeader(HWAVEOUT,LPWAVEHDR,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutUnprepareHeader(HWAVEOUT,LPWAVEHDR,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutWrite(HWAVEOUT,LPWAVEHDR,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutPause(HWAVEOUT);
MMRESULT __attribute__((__stdcall__)) waveOutRestart(HWAVEOUT);
MMRESULT __attribute__((__stdcall__)) waveOutReset(HWAVEOUT);
MMRESULT __attribute__((__stdcall__)) waveOutBreakLoop(HWAVEOUT);
MMRESULT __attribute__((__stdcall__)) waveOutGetPosition(HWAVEOUT,LPMMTIME,UINT);
MMRESULT __attribute__((__stdcall__)) waveOutGetPitch(HWAVEOUT,PDWORD);
MMRESULT __attribute__((__stdcall__)) waveOutSetPitch(HWAVEOUT,DWORD);
MMRESULT __attribute__((__stdcall__)) waveOutGetPlaybackRate(HWAVEOUT,PDWORD);
MMRESULT __attribute__((__stdcall__)) waveOutSetPlaybackRate(HWAVEOUT,DWORD);
MMRESULT __attribute__((__stdcall__)) waveOutGetID(HWAVEOUT,LPUINT);
MMRESULT __attribute__((__stdcall__)) waveOutMessage(HWAVEOUT,UINT,DWORD,DWORD);
UINT __attribute__((__stdcall__)) waveInGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) waveInGetDevCapsA(UINT,LPWAVEINCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) waveInGetDevCapsW(UINT,LPWAVEINCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) waveInGetErrorTextA(MMRESULT,LPSTR,UINT);
MMRESULT __attribute__((__stdcall__)) waveInGetErrorTextW(MMRESULT,LPWSTR,UINT);
MMRESULT __attribute__((__stdcall__)) waveInOpen(LPHWAVEIN,UINT,LPCWAVEFORMATEX,DWORD,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) waveInClose(HWAVEIN);
MMRESULT __attribute__((__stdcall__)) waveInPrepareHeader(HWAVEIN,LPWAVEHDR,UINT);
MMRESULT __attribute__((__stdcall__)) waveInUnprepareHeader(HWAVEIN,LPWAVEHDR,UINT);
MMRESULT __attribute__((__stdcall__)) waveInAddBuffer(HWAVEIN,LPWAVEHDR,UINT);
MMRESULT __attribute__((__stdcall__)) waveInStart(HWAVEIN);
MMRESULT __attribute__((__stdcall__)) waveInStop(HWAVEIN);
MMRESULT __attribute__((__stdcall__)) waveInReset(HWAVEIN);
MMRESULT __attribute__((__stdcall__)) waveInGetPosition(HWAVEIN,LPMMTIME,UINT);
MMRESULT __attribute__((__stdcall__)) waveInGetID(HWAVEIN,LPUINT);
MMRESULT __attribute__((__stdcall__)) waveInMessage(HWAVEIN,UINT,DWORD,DWORD);
UINT __attribute__((__stdcall__)) midiOutGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) midiStreamOpen(LPHMIDISTRM,LPUINT,DWORD,DWORD,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) midiStreamClose(HMIDISTRM);
MMRESULT __attribute__((__stdcall__)) midiStreamProperty(HMIDISTRM,LPBYTE,DWORD);
MMRESULT __attribute__((__stdcall__)) midiStreamPosition(HMIDISTRM,LPMMTIME,UINT);
MMRESULT __attribute__((__stdcall__)) midiStreamOut(HMIDISTRM,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiStreamPause(HMIDISTRM);
MMRESULT __attribute__((__stdcall__)) midiStreamRestart(HMIDISTRM);
MMRESULT __attribute__((__stdcall__)) midiStreamStop(HMIDISTRM);
MMRESULT __attribute__((__stdcall__)) midiConnect(HMIDI,HMIDIOUT,PVOID);
MMRESULT __attribute__((__stdcall__)) midiDisconnect(HMIDI,HMIDIOUT,PVOID);
MMRESULT __attribute__((__stdcall__)) midiOutGetDevCapsA(UINT,LPMIDIOUTCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutGetDevCapsW(UINT,LPMIDIOUTCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutGetVolume(HMIDIOUT,PDWORD);
MMRESULT __attribute__((__stdcall__)) midiOutSetVolume(HMIDIOUT,DWORD);
MMRESULT __attribute__((__stdcall__)) midiOutGetErrorTextA(MMRESULT,LPSTR,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutGetErrorTextW(MMRESULT,LPWSTR,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutOpen(LPHMIDIOUT,UINT,DWORD,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) midiOutClose(HMIDIOUT);
MMRESULT __attribute__((__stdcall__)) midiOutPrepareHeader(HMIDIOUT,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutUnprepareHeader(HMIDIOUT,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutShortMsg(HMIDIOUT,DWORD);
MMRESULT __attribute__((__stdcall__)) midiOutLongMsg(HMIDIOUT,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutReset(HMIDIOUT);
MMRESULT __attribute__((__stdcall__)) midiOutCachePatches(HMIDIOUT,UINT,LPWORD,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutCacheDrumPatches(HMIDIOUT,UINT,LPWORD,UINT);
MMRESULT __attribute__((__stdcall__)) midiOutGetID(HMIDIOUT,LPUINT);
MMRESULT __attribute__((__stdcall__)) midiOutMessage(HMIDIOUT,UINT,DWORD,DWORD);
UINT __attribute__((__stdcall__)) midiInGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) midiInGetDevCapsA(UINT,LPMIDIINCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) midiInGetDevCapsW(UINT,LPMIDIINCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) midiInGetErrorTextA(MMRESULT,LPSTR,UINT);
MMRESULT __attribute__((__stdcall__)) midiInGetErrorTextW(MMRESULT,LPWSTR,UINT);
MMRESULT __attribute__((__stdcall__)) midiInOpen(LPHMIDIIN,UINT,DWORD,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) midiInClose(HMIDIIN);
MMRESULT __attribute__((__stdcall__)) midiInPrepareHeader(HMIDIIN,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiInUnprepareHeader(HMIDIIN,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiInAddBuffer(HMIDIIN,LPMIDIHDR,UINT);
MMRESULT __attribute__((__stdcall__)) midiInStart(HMIDIIN);
MMRESULT __attribute__((__stdcall__)) midiInStop(HMIDIIN);
MMRESULT __attribute__((__stdcall__)) midiInReset(HMIDIIN);
MMRESULT __attribute__((__stdcall__)) midiInGetID(HMIDIIN,LPUINT);
MMRESULT __attribute__((__stdcall__)) midiInMessage(HMIDIIN,UINT,DWORD,DWORD);
UINT __attribute__((__stdcall__)) auxGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) auxGetDevCapsA(UINT,LPAUXCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) auxGetDevCapsW(UINT,LPAUXCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) auxSetVolume(UINT,DWORD);
MMRESULT __attribute__((__stdcall__)) auxGetVolume(UINT,PDWORD);
MMRESULT __attribute__((__stdcall__)) auxOutMessage(UINT,UINT,DWORD,DWORD);
UINT __attribute__((__stdcall__)) mixerGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) mixerGetDevCapsA(UINT,LPMIXERCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) mixerGetDevCapsW(UINT,LPMIXERCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) mixerOpen(LPHMIXER,UINT,DWORD,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerClose(HMIXER);
DWORD __attribute__((__stdcall__)) mixerMessage(HMIXER,UINT,DWORD,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetLineInfoA(HMIXEROBJ,LPMIXERLINEA,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetLineInfoW(HMIXEROBJ,LPMIXERLINEW,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetID(HMIXEROBJ,PUINT,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetLineControlsA(HMIXEROBJ,LPMIXERLINECONTROLSA,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetLineControlsW(HMIXEROBJ,LPMIXERLINECONTROLSW,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetControlDetailsA(HMIXEROBJ,LPMIXERCONTROLDETAILS,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerGetControlDetailsW(HMIXEROBJ,LPMIXERCONTROLDETAILS,DWORD);
MMRESULT __attribute__((__stdcall__)) mixerSetControlDetails(HMIXEROBJ,LPMIXERCONTROLDETAILS,DWORD);
MMRESULT __attribute__((__stdcall__)) timeGetSystemTime(LPMMTIME,UINT);
DWORD __attribute__((__stdcall__)) timeGetTime(void);
MMRESULT __attribute__((__stdcall__)) timeSetEvent(UINT,UINT,LPTIMECALLBACK,DWORD,UINT);
MMRESULT __attribute__((__stdcall__)) timeKillEvent(UINT);
MMRESULT __attribute__((__stdcall__)) timeGetDevCaps(LPTIMECAPS,UINT);
MMRESULT __attribute__((__stdcall__)) timeBeginPeriod(UINT);
MMRESULT __attribute__((__stdcall__)) timeEndPeriod(UINT);
UINT __attribute__((__stdcall__)) joyGetNumDevs(void);
MMRESULT __attribute__((__stdcall__)) joyGetDevCapsA(UINT,LPJOYCAPSA,UINT);
MMRESULT __attribute__((__stdcall__)) joyGetDevCapsW(UINT,LPJOYCAPSW,UINT);
MMRESULT __attribute__((__stdcall__)) joyGetPos(UINT,LPJOYINFO);
MMRESULT __attribute__((__stdcall__)) joyGetPosEx(UINT,LPJOYINFOEX);
MMRESULT __attribute__((__stdcall__)) joyGetThreshold(UINT,LPUINT);
MMRESULT __attribute__((__stdcall__)) joyReleaseCapture(UINT);
MMRESULT __attribute__((__stdcall__)) joySetCapture(HWND,UINT,UINT,BOOL);
MMRESULT __attribute__((__stdcall__)) joySetThreshold(UINT,UINT);
FOURCC __attribute__((__stdcall__)) mmioStringToFOURCCA(LPCSTR,UINT);
FOURCC __attribute__((__stdcall__)) mmioStringToFOURCCW(LPCWSTR,UINT);
LPMMIOPROC __attribute__((__stdcall__)) mmioInstallIOProcA(FOURCC,LPMMIOPROC,DWORD);
LPMMIOPROC __attribute__((__stdcall__)) mmioInstallIOProcW(FOURCC,LPMMIOPROC,DWORD);
HMMIO __attribute__((__stdcall__)) mmioOpenA(LPSTR,LPMMIOINFO,DWORD);
HMMIO __attribute__((__stdcall__)) mmioOpenW(LPWSTR,LPMMIOINFO,DWORD);
MMRESULT __attribute__((__stdcall__)) mmioRenameA(LPCSTR,LPCSTR,LPCMMIOINFO,DWORD);
MMRESULT __attribute__((__stdcall__)) mmioRenameW(LPCWSTR,LPCWSTR,LPCMMIOINFO,DWORD);
MMRESULT __attribute__((__stdcall__)) mmioClose(HMMIO,UINT);
LONG __attribute__((__stdcall__)) mmioRead(HMMIO,HPSTR,LONG);
LONG __attribute__((__stdcall__)) mmioWrite(HMMIO,LPCSTR,LONG);
LONG __attribute__((__stdcall__)) mmioSeek(HMMIO,LONG,int);
MMRESULT __attribute__((__stdcall__)) mmioGetInfo(HMMIO,LPMMIOINFO,UINT);
MMRESULT __attribute__((__stdcall__)) mmioSetInfo(HMMIO,LPCMMIOINFO,UINT);
MMRESULT __attribute__((__stdcall__)) mmioSetBuffer(HMMIO,LPSTR,LONG,UINT);
MMRESULT __attribute__((__stdcall__)) mmioFlush(HMMIO,UINT);
MMRESULT __attribute__((__stdcall__)) mmioAdvance(HMMIO,LPMMIOINFO,UINT);
LRESULT __attribute__((__stdcall__)) mmioSendMessage(HMMIO,UINT,LPARAM,LPARAM);
MMRESULT __attribute__((__stdcall__)) mmioDescend(HMMIO,LPMMCKINFO,const MMCKINFO*,UINT);
MMRESULT __attribute__((__stdcall__)) mmioAscend(HMMIO,LPMMCKINFO,UINT);
MMRESULT __attribute__((__stdcall__)) mmioCreateChunk(HMMIO,LPMMCKINFO,UINT);
MCIERROR __attribute__((__stdcall__)) mciSendCommandA(MCIDEVICEID,UINT,DWORD,DWORD);
MCIERROR __attribute__((__stdcall__)) mciSendCommandW(MCIDEVICEID,UINT,DWORD,DWORD);
MCIERROR __attribute__((__stdcall__)) mciSendStringA(LPCSTR,LPSTR,UINT,HWND);
MCIERROR __attribute__((__stdcall__)) mciSendStringW(LPCWSTR,LPWSTR,UINT,HWND);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDA(LPCSTR);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDW(LPCWSTR);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDFromElementIDA(DWORD,LPCSTR);
MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDFromElementIDW(DWORD,LPCWSTR);
BOOL __attribute__((__stdcall__)) mciGetErrorStringA(MCIERROR,LPSTR,UINT);
BOOL __attribute__((__stdcall__)) mciGetErrorStringW(MCIERROR,LPWSTR,UINT);
BOOL __attribute__((__stdcall__)) mciSetYieldProc(MCIDEVICEID,YIELDPROC,DWORD);
HTASK __attribute__((__stdcall__)) mciGetCreatorTask(MCIDEVICEID);
YIELDPROC __attribute__((__stdcall__)) mciGetYieldProc(MCIDEVICEID,PDWORD);

typedef struct tagMCI_SEQ_SET_PARMS {
        DWORD dwCallback;
        DWORD dwTimeFormat;
        DWORD dwAudio;
        DWORD dwTempo;
        DWORD dwPort;
        DWORD dwSlave;
        DWORD dwMaster;
        DWORD dwOffset;
} MCI_SEQ_SET_PARMS,*PMCI_SEQ_SET_PARMS,*LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_ANIM_OPEN_PARMSA {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCSTR lpstrDeviceType;
        LPCSTR lpstrElementName;
        LPCSTR lpstrAlias;
        DWORD dwStyle;
        HWND hWndParent;
} MCI_ANIM_OPEN_PARMSA,*PMCI_ANIM_OPEN_PARMSA,*LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCWSTR lpstrDeviceType;
        LPCWSTR lpstrElementName;
        LPCWSTR lpstrAlias;
        DWORD dwStyle;
        HWND hWndParent;
} MCI_ANIM_OPEN_PARMSW,*PMCI_ANIM_OPEN_PARMSW,*LPMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_ANIM_PLAY_PARMS {
        DWORD dwCallback;
        DWORD dwFrom;
        DWORD dwTo;
        DWORD dwSpeed;
} MCI_ANIM_PLAY_PARMS,*PMCI_ANIM_PLAY_PARMS,*LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS {
        DWORD dwCallback;
        DWORD dwFrames;
} MCI_ANIM_STEP_PARMS,*PMCI_ANIM_STEP_PARMS,*LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_ANIM_WINDOW_PARMSA {
        DWORD dwCallback;
        HWND hWnd;
        UINT nCmdShow;
        LPCSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSA,*PMCI_ANIM_WINDOW_PARMSA,*LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
        DWORD dwCallback;
        HWND hWnd;
        UINT nCmdShow;
        LPCWSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSW,*PMCI_ANIM_WINDOW_PARMSW,*LPMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_ANIM_RECT_PARMS {
        DWORD dwCallback;




        RECT rc;

} MCI_ANIM_RECT_PARMS,*PMCI_ANIM_RECT_PARMS,*LPMCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_UPDATE_PARMS {
        DWORD dwCallback;
        RECT rc;
        HDC hDC;
} MCI_ANIM_UPDATE_PARMS,*PMCI_ANIM_UPDATE_PARMS,*LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_OVLY_OPEN_PARMSA {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCSTR lpstrDeviceType;
        LPCSTR lpstrElementName;
        LPCSTR lpstrAlias;
        DWORD dwStyle;
        HWND hWndParent;
} MCI_OVLY_OPEN_PARMSA,*PMCI_OVLY_OPEN_PARMSA,*LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
        DWORD dwCallback;
        MCIDEVICEID wDeviceID;
        LPCWSTR lpstrDeviceType;
        LPCWSTR lpstrElementName;
        LPCWSTR lpstrAlias;
        DWORD dwStyle;
        HWND hWndParent;
} MCI_OVLY_OPEN_PARMSW,*PMCI_OVLY_OPEN_PARMSW,*LPMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA {
        DWORD dwCallback;
        HWND hWnd;
        UINT nCmdShow;
        LPCSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSA,*PMCI_OVLY_WINDOW_PARMSA,*LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
        DWORD dwCallback;
        HWND hWnd;
        UINT nCmdShow;
        LPCWSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSW,*PMCI_OVLY_WINDOW_PARMSW,*LPMCI_OVLY_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_RECT_PARMS {
        DWORD dwCallback;




        RECT rc;

} MCI_OVLY_RECT_PARMS,*PMCI_OVLY_RECT_PARMS,*LPMCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_SAVE_PARMSA {
        DWORD dwCallback;
        LPCSTR lpfilename;
        RECT rc;
} MCI_OVLY_SAVE_PARMSA,*PMCI_OVLY_SAVE_PARMSA,*LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
        DWORD dwCallback;
        LPCWSTR lpfilename;
        RECT rc;
} MCI_OVLY_SAVE_PARMSW,*PMCI_OVLY_SAVE_PARMSW,*LPMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_OVLY_LOAD_PARMSA {
        DWORD dwCallback;
        LPCSTR lpfilename;
        RECT rc;
} MCI_OVLY_LOAD_PARMSA,*PMCI_OVLY_LOAD_PARMSA,*LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
        DWORD dwCallback;
        LPCWSTR lpfilename;
        RECT rc;
} MCI_OVLY_LOAD_PARMSW,*PMCI_OVLY_LOAD_PARMSW,*LPMCI_OVLY_LOAD_PARMSW;
# 1883 "C:/PROGRA~1/WIDEST~1/gcc/include/mmsystem.h" 3
typedef WAVEOUTCAPSA WAVEOUTCAPS,*PWAVEOUTCAPS,*LPWAVEOUTCAPS;
typedef WAVEINCAPSA WAVEINCAPS,*PWAVEINCAPS,*LPWAVEINCAPS;
typedef MIDIOUTCAPSA MIDIOUTCAPS,*PMIDIOUTCAPS,*LPMIDIOUTCAPS;
typedef MIDIINCAPSA MIDIINCAPS,*PMIDIINCAPS,*LPMIDIINCAPS;
typedef AUXCAPSA AUXCAPS,*PAUXCAPS,*LPAUXCAPS;
typedef MIXERCAPSA MIXERCAPS,*PMIXERCAPS,*LPMIXERCAPS;
typedef MIXERLINEA MIXERLINE,*PMIXERLINE,*LPMIXERLINE;
typedef MIXERCONTROLA MIXERCONTROL,*PMIXERCONTROL,*LPMIXERCONTROL;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS,*PMIXERLINECONTROLS,*LPMIXERLINECONTROLS;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT,*PMIXERCONTROLDETAILS_LISTTEXT,*LPMIXERCONTROLDETAILS_LISTTEXT;
typedef JOYCAPSA JOYCAPS,*PJOYCAPS,*LPJOYCAPS;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS,*PMCI_OPEN_PARMS,*LPMCI_OPEN_PARMS;
typedef MCI_INFO_PARMSA MCI_INFO_PARMS,*LPMCI_INFO_PARMS;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS,*PMCI_SYSINFO_PARMS,*LPMCI_SYSINFO_PARMS;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS,*PMCI_SAVE_PARMS,*LPMCI_SAVE_PARMS;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS,*PMCI_LOAD_PARMS,*LPMCI_LOAD_PARMS;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS,*PMCI_VD_ESCAPE_PARMS,*LPMCI_VD_ESCAPE_PARMS;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS,*PMCI_WAVE_OPEN_PARMS,*LPMCI_WAVE_OPEN_PARMS;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS,*PMCI_ANIM_OPEN_PARMS,*LPMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS,*PMCI_ANIM_WINDOW_PARMS,*LPMCI_ANIM_WINDOW_PARMS;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS,*PMCI_OVLY_OPEN_PARMS,*LPMCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS,*PMCI_OVLY_WINDOW_PARMS,*LPMCI_OVLY_WINDOW_PARMS;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS,*PMCI_OVLY_SAVE_PARMS,*LPMCI_OVLY_SAVE_PARMS;
# 1933 "C:/PROGRA~1/WIDEST~1/gcc/include/mmsystem.h" 3
}

#pragma pack(pop)
# 83 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/nb30.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/nb30.h" 3



extern "C" {
# 95 "C:/PROGRA~1/WIDEST~1/gcc/include/nb30.h" 3
typedef struct _ACTION_HEADER {
        ULONG transport_id;
        USHORT action_code;
        USHORT reserved;
} ACTION_HEADER,*PACTION_HEADER;
typedef struct _ADAPTER_STATUS {
        UCHAR adapter_address[6];
        UCHAR rev_major;
        UCHAR reserved0;
        UCHAR adapter_type;
        UCHAR rev_minor;
        WORD duration;
        WORD frmr_recv;
        WORD frmr_xmit;
        WORD iframe_recv_err;
        WORD xmit_aborts;
        DWORD xmit_success;
        DWORD recv_success;
        WORD iframe_xmit_err;
        WORD recv_buff_unavail;
        WORD t1_timeouts;
        WORD ti_timeouts;
        DWORD reserved1;
        WORD free_ncbs;
        WORD max_cfg_ncbs;
        WORD max_ncbs;
        WORD xmit_buf_unavail;
        WORD max_dgram_size;
        WORD pending_sess;
        WORD max_cfg_sess;
        WORD max_sess;
        WORD max_sess_pkt_size;
        WORD name_count;
} ADAPTER_STATUS,*PADAPTER_STATUS;
typedef struct _FIND_NAME_BUFFER {
        UCHAR length;
        UCHAR access_control;
        UCHAR frame_control;
        UCHAR destination_addr[6];
        UCHAR source_addr[6];
        UCHAR routing_info[18];
} FIND_NAME_BUFFER,*PFIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER {
        WORD node_count;
        UCHAR reserved;
        UCHAR unique_group;
} FIND_NAME_HEADER,*PFIND_NAME_HEADER;
typedef struct _LANA_ENUM {
        UCHAR length;
        UCHAR lana[254 +1];
} LANA_ENUM,*PLANA_ENUM;
typedef struct _NAME_BUFFER {
        UCHAR name[16];
        UCHAR name_num;
        UCHAR name_flags;
} NAME_BUFFER,*PNAME_BUFFER;
typedef struct _NCB {
        UCHAR ncb_command;
        UCHAR ncb_retcode;
        UCHAR ncb_lsn;
        UCHAR ncb_num;
        PUCHAR ncb_buffer;
        WORD ncb_length;
        UCHAR ncb_callname[16];
        UCHAR ncb_name[16];
        UCHAR ncb_rto;
        UCHAR ncb_sto;
        void (__attribute__((__stdcall__)) *ncb_post)(struct _NCB*);
        UCHAR ncb_lana_num;
        UCHAR ncb_cmd_cplt;
        UCHAR ncb_reserve[10];
        HANDLE ncb_event;
} NCB,*PNCB;
typedef struct _SESSION_BUFFER {
        UCHAR lsn;
        UCHAR state;
        UCHAR local_name[16];
        UCHAR remote_name[16];
        UCHAR rcvs_outstanding;
        UCHAR sends_outstanding;
} SESSION_BUFFER,*PSESSION_BUFFER;
typedef struct _SESSION_HEADER {
        UCHAR sess_name;
        UCHAR num_sess;
        UCHAR rcv_dg_outstanding;
        UCHAR rcv_any_outstanding;
} SESSION_HEADER,*PSESSION_HEADER;
UCHAR __attribute__((__stdcall__)) Netbios(PNCB);

}
# 84 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 1 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 1 3
# 3 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 2 3
# 9 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 3



extern "C" {
# 31 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 3
typedef void *I_RPC_HANDLE;
typedef long RPC_STATUS;

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdce.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdce.h" 3



extern "C" {
# 91 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdce.h" 3
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
typedef struct _RPC_BINDING_VECTOR {
        unsigned long Count;
        RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;
typedef struct _UUID_VECTOR {
        unsigned long Count;
        UUID *Uuid[1];
} UUID_VECTOR;
typedef void *RPC_IF_HANDLE;
typedef struct _RPC_IF_ID {
        UUID Uuid;
        unsigned short VersMajor;
        unsigned short VersMinor;
} RPC_IF_ID;
typedef struct _RPC_POLICY {
        unsigned int Length ;
        unsigned long EndpointFlags ;
        unsigned long NICFlags ;
} RPC_POLICY,*PRPC_POLICY ;
typedef void __attribute__((__stdcall__)) RPC_OBJECT_INQ_FN(UUID*,UUID*,RPC_STATUS*);
typedef RPC_STATUS RPC_IF_CALLBACK_FN(RPC_IF_HANDLE,void*);
typedef struct {
        unsigned int Count;
        unsigned long Stats[1];
} RPC_STATS_VECTOR;
typedef struct {
        unsigned long Count;
        RPC_IF_ID*IfId[1];
} RPC_IF_ID_VECTOR;
typedef void *RPC_AUTH_IDENTITY_HANDLE;
typedef void *RPC_AUTHZ_HANDLE;
typedef struct _RPC_SECURITY_QOS {
        unsigned long Version;
        unsigned long Capabilities;
        unsigned long IdentityTracking;
        unsigned long ImpersonationType;
} RPC_SECURITY_QOS,*PRPC_SECURITY_QOS;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
        unsigned short *User;
        unsigned long UserLength;
        unsigned short *Domain;
        unsigned long DomainLength;
        unsigned short *Password;
        unsigned long PasswordLength;
        unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W,*PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
        unsigned char *User;
        unsigned long UserLength;
        unsigned char *Domain;
        unsigned long DomainLength;
        unsigned char *Password;
        unsigned long PasswordLength;
        unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A,*PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct {
        unsigned char *UserName;
        unsigned char *ComputerName;
        unsigned short Privilege;
        unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,* PRPC_CLIENT_INFORMATION1;
typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
typedef int(__attribute__((__stdcall__)) *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE,unsigned long,RPC_STATUS*);


typedef struct _RPC_PROTSEQ_VECTORA {
        unsigned int Count;
        unsigned char*Protseq[1];
} RPC_PROTSEQ_VECTORA;
typedef struct _RPC_PROTSEQ_VECTORW {
        unsigned int Count;
        unsigned short*Protseq[1];
} RPC_PROTSEQ_VECTORW;
RPC_STATUS __attribute__((__stdcall__)) RpcBindingFromStringBindingA(unsigned char *,RPC_BINDING_HANDLE *);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingFromStringBindingW(unsigned short *,RPC_BINDING_HANDLE *);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingToStringBindingA(RPC_BINDING_HANDLE,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingToStringBindingW(RPC_BINDING_HANDLE,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingComposeA(unsigned char *,unsigned char *,unsigned char *,unsigned char *,unsigned char *,unsigned char **);
RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingComposeW(unsigned short *,unsigned short *,unsigned short *,unsigned short *,unsigned short *,unsigned short **);
RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingParseA(unsigned char *,unsigned char **,unsigned char **,unsigned char **,unsigned char **,unsigned char **);
RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingParseW(unsigned short *,unsigned short **,unsigned short **,unsigned short **,unsigned short **,unsigned short **);
RPC_STATUS __attribute__((__stdcall__)) RpcStringFreeA(unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcStringFreeW(unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcNetworkIsProtseqValidA(unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNetworkIsProtseqValidW(unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA**);
RPC_STATUS __attribute__((__stdcall__)) RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW**);
RPC_STATUS __attribute__((__stdcall__)) RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA**);
RPC_STATUS __attribute__((__stdcall__)) RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW**);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqA(unsigned char*,unsigned int,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqW(unsigned short*,unsigned int,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqExA(unsigned char*,unsigned int MaxCalls,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqExW(unsigned short*,unsigned int,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpA(unsigned char*,unsigned int,unsigned char*,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpExA(unsigned char*,unsigned int,unsigned char*,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpW(unsigned short*,unsigned int,unsigned short*,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpExW(unsigned short*,unsigned int,unsigned short*,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfA(unsigned char*,unsigned int,RPC_IF_HANDLE,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfExA(unsigned char*,unsigned int,RPC_IF_HANDLE,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfW(unsigned short*,unsigned int,RPC_IF_HANDLE,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfExW(unsigned short*,unsigned int,RPC_IF_HANDLE,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE,unsigned long,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE,unsigned long,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcServerInqDefaultPrincNameA(unsigned long,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcServerInqDefaultPrincNameW(unsigned long,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE,unsigned long,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE,unsigned long,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthClientA(RPC_BINDING_HANDLE,RPC_AUTHZ_HANDLE *,unsigned char**,unsigned long*,unsigned long*,unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthClientW(RPC_BINDING_HANDLE,RPC_AUTHZ_HANDLE *,unsigned short**,unsigned long*,unsigned long*,unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE,unsigned char**,unsigned long*,unsigned long*,RPC_AUTH_IDENTITY_HANDLE*,unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE,unsigned short**,unsigned long*,unsigned long*,RPC_AUTH_IDENTITY_HANDLE*,unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE,unsigned char*,unsigned long,unsigned long,RPC_AUTH_IDENTITY_HANDLE,unsigned long);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE,unsigned char*,unsigned long,unsigned long,RPC_AUTH_IDENTITY_HANDLE,unsigned long,RPC_SECURITY_QOS*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE,unsigned short*,unsigned long,unsigned long,RPC_AUTH_IDENTITY_HANDLE,unsigned long);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE,unsigned short*,unsigned long,unsigned long,RPC_AUTH_IDENTITY_HANDLE,unsigned long,RPC_SECURITY_QOS*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE,unsigned char**,unsigned long*,unsigned long*,RPC_AUTH_IDENTITY_HANDLE*,unsigned long*,unsigned long,RPC_SECURITY_QOS*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE,unsigned short ** , unsigned long *, unsigned long *, RPC_AUTH_IDENTITY_HANDLE *, unsigned long *, unsigned long , RPC_SECURITY_QOS *);
typedef void(__attribute__((__stdcall__)) *RPC_AUTH_KEY_RETRIEVAL_FN)(void*,unsigned short*,unsigned long,void**,RPC_STATUS*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterAuthInfoA(unsigned char*,unsigned long,RPC_AUTH_KEY_RETRIEVAL_FN,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterAuthInfoW(unsigned short*,unsigned long,RPC_AUTH_KEY_RETRIEVAL_FN,void*);
RPC_STATUS __attribute__((__stdcall__)) UuidToStringA(UUID*,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) UuidFromStringA(unsigned char*,UUID*);
RPC_STATUS __attribute__((__stdcall__)) UuidToStringW(UUID*,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) UuidFromStringW(unsigned short*,UUID*);
RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterNoReplaceA(RPC_IF_HANDLE,RPC_BINDING_VECTOR*,UUID_VECTOR*,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterNoReplaceW(RPC_IF_HANDLE,RPC_BINDING_VECTOR*, UUID_VECTOR*,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterA(RPC_IF_HANDLE,RPC_BINDING_VECTOR*,UUID_VECTOR*,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterW(RPC_IF_HANDLE,RPC_BINDING_VECTOR*,UUID_VECTOR*,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) DceErrorInqTextA(RPC_STATUS,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) DceErrorInqTextW(RPC_STATUS,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE,RPC_IF_ID*,RPC_BINDING_HANDLE*,UUID*,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE,RPC_IF_ID*,RPC_BINDING_HANDLE*,UUID*,unsigned short**);
# 329 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdce.h" 3
RPC_STATUS __attribute__((__stdcall__)) RpcBindingCopy(RPC_BINDING_HANDLE,RPC_BINDING_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingFree(RPC_BINDING_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqObject(RPC_BINDING_HANDLE,UUID *);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingReset(RPC_BINDING_HANDLE);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetObject(RPC_BINDING_HANDLE,UUID *);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqDefaultProtectLevel(unsigned long,unsigned long *);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingVectorFree(RPC_BINDING_VECTOR **);
RPC_STATUS __attribute__((__stdcall__)) RpcIfInqId(RPC_IF_HANDLE,RPC_IF_ID *);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqComTimeout(RPC_BINDING_HANDLE,unsigned int*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetComTimeout(RPC_BINDING_HANDLE,unsigned int);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetCancelTimeout(long Timeout);
RPC_STATUS __attribute__((__stdcall__)) RpcObjectInqType(UUID *,UUID *);
RPC_STATUS __attribute__((__stdcall__)) RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *);
RPC_STATUS __attribute__((__stdcall__)) RpcObjectSetType(UUID *,UUID *);
RPC_STATUS __attribute__((__stdcall__)) RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **);
RPC_STATUS __attribute__((__stdcall__)) RpcServerInqIf(RPC_IF_HANDLE,UUID*,void**);
RPC_STATUS __attribute__((__stdcall__)) RpcServerListen(unsigned int,unsigned int,unsigned int);
RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterIf(RPC_IF_HANDLE,UUID*,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterIfEx(RPC_IF_HANDLE,UUID*,void*,unsigned int,unsigned int,RPC_IF_CALLBACK_FN*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUnregisterIf(RPC_IF_HANDLE,UUID*,unsigned int);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqs(unsigned int,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqsEx(unsigned int,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqsIf(unsigned int,RPC_IF_HANDLE,void*);
RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqsIfEx(unsigned int,RPC_IF_HANDLE,void*,PRPC_POLICY);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtStatsVectorFree(RPC_STATS_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqStats(RPC_BINDING_HANDLE,RPC_STATS_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtIsServerListening(RPC_BINDING_HANDLE);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtStopServerListening(RPC_BINDING_HANDLE);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtWaitServerListen(void);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetServerStackSize(unsigned long);
void __attribute__((__stdcall__)) RpcSsDontSerializeContext(void);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEnableIdleCleanup(void);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqIfIds(RPC_BINDING_HANDLE,RPC_IF_ID_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcIfIdVectorFree(RPC_IF_ID_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcEpResolveBinding(RPC_BINDING_HANDLE,RPC_IF_HANDLE);
RPC_STATUS __attribute__((__stdcall__)) RpcBindingServerFromClient(RPC_BINDING_HANDLE,RPC_BINDING_HANDLE*);
__attribute__((noreturn)) void __attribute__((__stdcall__)) RpcRaiseException(RPC_STATUS);
RPC_STATUS __attribute__((__stdcall__)) RpcTestCancel(void);
RPC_STATUS __attribute__((__stdcall__)) RpcCancelThread(void*);
RPC_STATUS __attribute__((__stdcall__)) UuidCreate(UUID*);
signed int __attribute__((__stdcall__)) UuidCompare(UUID*,UUID*, RPC_STATUS*);
RPC_STATUS __attribute__((__stdcall__)) UuidCreateNil(UUID*);
int __attribute__((__stdcall__)) UuidEqual(UUID*,UUID*, RPC_STATUS*);
unsigned short __attribute__((__stdcall__)) UuidHash(UUID*,RPC_STATUS*);
int __attribute__((__stdcall__)) UuidIsNil(UUID*,RPC_STATUS*);
RPC_STATUS __attribute__((__stdcall__)) RpcEpUnregister(RPC_IF_HANDLE,RPC_BINDING_VECTOR*,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE,unsigned long,RPC_IF_ID*,unsigned long,UUID*,RPC_EP_INQ_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpUnregister(RPC_BINDING_HANDLE,RPC_IF_ID*,RPC_BINDING_HANDLE,UUID*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqParameter(unsigned int,unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetParameter(unsigned int,unsigned long);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtBindingInqParameter(RPC_BINDING_HANDLE,unsigned int,unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcMgmtBindingSetParameter(RPC_BINDING_HANDLE,unsigned int,unsigned long);
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdcep.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdcep.h" 3



extern "C" {
# 22 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdcep.h" 3
typedef struct _RPC_VERSION {
        unsigned short MajorVersion;
        unsigned short MinorVersion;
} RPC_VERSION;
typedef struct _RPC_SYNTAX_IDENTIFIER {
        GUID SyntaxGUID;
        RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER;
typedef struct _RPC_MESSAGE {
        HANDLE Handle;
        unsigned long DataRepresentation;
        void *Buffer;
        unsigned int BufferLength;
        unsigned int ProcNum;
        PRPC_SYNTAX_IDENTIFIER TransferSyntax;
        void *RpcInterfaceInformation;
        void *ReservedForRuntime;
        void *ManagerEpv;
        void *ImportContext;
        unsigned long RpcFlags;
} RPC_MESSAGE,*PRPC_MESSAGE;
typedef long __attribute__((__stdcall__)) RPC_FORWARD_FUNCTION(GUID*,RPC_VERSION*,GUID*,unsigned char*,void**);
typedef void(__attribute__((__stdcall__)) *RPC_DISPATCH_FUNCTION) ( PRPC_MESSAGE Message);
typedef struct {
        unsigned int DispatchTableCount;
        RPC_DISPATCH_FUNCTION *DispatchTable;
        int Reserved;
} RPC_DISPATCH_TABLE,*PRPC_DISPATCH_TABLE;
typedef struct _RPC_PROTSEQ_ENDPOINT {
        unsigned char *RpcProtocolSequence;
        unsigned char *Endpoint;
} RPC_PROTSEQ_ENDPOINT,*PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE {
        unsigned int Length;
        RPC_SYNTAX_IDENTIFIER InterfaceId;
        RPC_SYNTAX_IDENTIFIER TransferSyntax;
        PRPC_DISPATCH_TABLE DispatchTable;
        unsigned int RpcProtseqEndpointCount;
        PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
        void *DefaultManagerEpv;
        void const *InterpreterInfo;
} RPC_SERVER_INTERFACE,*PRPC_SERVER_INTERFACE;
typedef struct _RPC_CLIENT_INTERFACE {
        unsigned int Length;
        RPC_SYNTAX_IDENTIFIER InterfaceId;
        RPC_SYNTAX_IDENTIFIER TransferSyntax;
        PRPC_DISPATCH_TABLE DispatchTable;
        unsigned int RpcProtseqEndpointCount;
        PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
        unsigned long Reserved;
        void const *InterpreterInfo;
} RPC_CLIENT_INTERFACE,*PRPC_CLIENT_INTERFACE;
typedef void *I_RPC_MUTEX;
typedef struct _RPC_TRANSFER_SYNTAX {
        GUID Uuid;
        unsigned short VersMajor;
        unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;
typedef long(__attribute__((__stdcall__)) *RPC_BLOCKING_FUNCTION)(void*,void*);

long __attribute__((__stdcall__)) I_RpcGetBuffer(RPC_MESSAGE*);
long __attribute__((__stdcall__)) I_RpcSendReceive(RPC_MESSAGE*);
long __attribute__((__stdcall__)) I_RpcFreeBuffer(RPC_MESSAGE*);
void __attribute__((__stdcall__)) I_RpcRequestMutex(I_RPC_MUTEX*);
void __attribute__((__stdcall__)) I_RpcClearMutex(I_RPC_MUTEX);
void __attribute__((__stdcall__)) I_RpcDeleteMutex(I_RPC_MUTEX);
__attribute__((__stdcall__)) void * I_RpcAllocate(unsigned int);
void __attribute__((__stdcall__)) I_RpcFree(void*);
void __attribute__((__stdcall__)) I_RpcPauseExecution(unsigned long);
typedef void(__attribute__((__stdcall__)) *PRPC_RUNDOWN) (void*);
long __attribute__((__stdcall__)) I_RpcMonitorAssociation(HANDLE,PRPC_RUNDOWN,void*);
long __attribute__((__stdcall__)) I_RpcStopMonitorAssociation(HANDLE);
HANDLE __attribute__((__stdcall__)) I_RpcGetCurrentCallHandle(void);
long __attribute__((__stdcall__)) I_RpcGetAssociationContext(void**);
long __attribute__((__stdcall__)) I_RpcSetAssociationContext(void*);

long __attribute__((__stdcall__)) I_RpcNsBindingSetEntryName(HANDLE,unsigned long,unsigned short*);
long __attribute__((__stdcall__)) I_RpcBindingInqDynamicEndpoint(HANDLE, unsigned short**);




long __attribute__((__stdcall__)) I_RpcBindingInqTransportType(HANDLE,unsigned int*);
long __attribute__((__stdcall__)) I_RpcIfInqTransferSyntaxes(HANDLE,RPC_TRANSFER_SYNTAX*,unsigned int,unsigned int*);
long __attribute__((__stdcall__)) I_UuidCreate(GUID*);
long __attribute__((__stdcall__)) I_RpcBindingCopy(HANDLE,HANDLE*);
long __attribute__((__stdcall__)) I_RpcBindingIsClientLocal(HANDLE,unsigned int*);
void __attribute__((__stdcall__)) I_RpcSsDontSerializeContext(void);
long __attribute__((__stdcall__)) I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION*);
long __attribute__((__stdcall__)) I_RpcConnectionInqSockBuffSize(unsigned long*,unsigned long*);
long __attribute__((__stdcall__)) I_RpcConnectionSetSockBuffSize(unsigned long,unsigned long);
long __attribute__((__stdcall__)) I_RpcBindingSetAsync(HANDLE,RPC_BLOCKING_FUNCTION);
long __attribute__((__stdcall__)) I_RpcAsyncSendReceive(RPC_MESSAGE*,void*);
long __attribute__((__stdcall__)) I_RpcGetThreadWindowHandle(void**);
long __attribute__((__stdcall__)) I_RpcServerThreadPauseListening(void);
long __attribute__((__stdcall__)) I_RpcServerThreadContinueListening(void);
long __attribute__((__stdcall__)) I_RpcServerUnregisterEndpointA(unsigned char*,unsigned char*);
long __attribute__((__stdcall__)) I_RpcServerUnregisterEndpointW(unsigned short*,unsigned short*);






}
# 384 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcdce.h" 2 3

}
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnsi.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnsi.h" 3



extern "C" {

typedef void *RPC_NS_HANDLE;
# 20 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnsi.h" 3
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingExportA(unsigned long,unsigned char*,RPC_IF_HANDLE,RPC_BINDING_VECTOR*,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingUnexportA(unsigned long,unsigned char*,RPC_IF_HANDLE,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupBeginA(unsigned long,unsigned char*,RPC_IF_HANDLE,UUID*,unsigned long,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupNext(RPC_NS_HANDLE,RPC_BINDING_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupDone(RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupDeleteA(unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrAddA(unsigned long,unsigned char*,unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrRemoveA(unsigned long,unsigned char*,unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqBeginA(unsigned long,unsigned char*,unsigned long,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqNextA(RPC_NS_HANDLE,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqDone(RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileDeleteA(unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltAddA(unsigned long,unsigned char*,RPC_IF_ID*,unsigned long,unsigned char*,unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltRemoveA(unsigned long,unsigned char*,RPC_IF_ID*,unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqBeginA(unsigned long,unsigned char*,unsigned long,RPC_IF_ID*,unsigned long,unsigned long,unsigned char*,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqNextA(RPC_NS_HANDLE,RPC_IF_ID*,unsigned char**,unsigned long*,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqDone(RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqNext( RPC_NS_HANDLE, UUID*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqDone( RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryExpandNameA(unsigned long,unsigned char*,unsigned char**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtBindingUnexportA(unsigned long,unsigned char*,RPC_IF_ID*,unsigned long,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryCreateA(unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryDeleteA(unsigned long,unsigned char*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryInqIfIdsA(unsigned long,unsigned char*,RPC_IF_ID_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE,unsigned long);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtInqExpAge(unsigned long*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtSetExpAge(unsigned long);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportNext(RPC_NS_HANDLE,RPC_BINDING_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportDone(RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingSelect(RPC_BINDING_VECTOR*,RPC_BINDING_HANDLE*);

RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqBeginA(unsigned long,unsigned char*,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportBeginA(unsigned long,unsigned char*,RPC_IF_HANDLE,UUID*,RPC_NS_HANDLE*);


RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingExportW(unsigned long,unsigned short*,RPC_IF_HANDLE,RPC_BINDING_VECTOR*,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingUnexportW(unsigned long,unsigned short*,RPC_IF_HANDLE,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupBeginW(unsigned long,unsigned short*,RPC_IF_HANDLE,UUID*,unsigned long,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupDeleteW(unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrAddW(unsigned long,unsigned short*,unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrRemoveW(unsigned long,unsigned short*,unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqBeginW(unsigned long,unsigned short*,unsigned long,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqNextW(RPC_NS_HANDLE,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileDeleteW(unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltAddW(unsigned long,unsigned short*, RPC_IF_ID*,unsigned long,unsigned short*,unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltRemoveW(unsigned long,unsigned short*, RPC_IF_ID*,unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqBeginW(unsigned long,unsigned short*, unsigned long,RPC_IF_ID*,unsigned long,unsigned long,unsigned short*, RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqNextW(RPC_NS_HANDLE,RPC_IF_ID*, unsigned short**,unsigned long*,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqBeginW(unsigned long,unsigned short*,RPC_NS_HANDLE*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryExpandNameW(unsigned long,unsigned short*,unsigned short**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtBindingUnexportW(unsigned long,unsigned short*,RPC_IF_ID*,unsigned long,UUID_VECTOR*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryCreateW(unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryDeleteW(unsigned long,unsigned short*);
RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryInqIfIdsW(unsigned long,unsigned short , RPC_IF_ID_VECTOR**);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportBeginW(unsigned long,unsigned short*,RPC_IF_HANDLE,UUID*,RPC_NS_HANDLE*);
# 120 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnsi.h" 3
}
# 36 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnterr.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnterr.h" 3
# 37 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 2 3
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 3
RPC_STATUS __attribute__((__stdcall__)) RpcImpersonateClient(RPC_BINDING_HANDLE);
RPC_STATUS __attribute__((__stdcall__)) RpcRevertToSelf(void);
long __attribute__((__stdcall__)) I_RpcMapWin32Status(RPC_STATUS);

}
# 85 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/shellapi.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/shellapi.h" 3



extern "C" {
# 94 "C:/PROGRA~1/WIDEST~1/gcc/include/shellapi.h" 3
typedef WORD FILEOP_FLAGS;
typedef WORD PRINTEROP_FLAGS;
typedef struct _AppBarData {
        DWORD cbSize;
        HWND hWnd;
        UINT uCallbackMessage;
        UINT uEdge;
        RECT rc;
        LPARAM lParam;
} APPBARDATA,*PAPPBARDATA;
typedef struct HDROP__{int i;}*HDROP;
typedef struct _NOTIFYICONDATAA {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        CHAR szTip[64];
} NOTIFYICONDATAA,*PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        WCHAR szTip[64];
} NOTIFYICONDATAW,*PNOTIFYICONDATAW;
typedef struct _SHELLEXECUTEINFOA {
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR lpVerb;
        LPCSTR lpFile;
        LPCSTR lpParameters;
        LPCSTR lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        PVOID lpIDList;
        LPCSTR lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        HANDLE hIcon;
        HANDLE hProcess;
} SHELLEXECUTEINFOA,*LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW {
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR lpVerb;
        LPCWSTR lpFile;
        LPCWSTR lpParameters;
        LPCWSTR lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        PVOID lpIDList;
        LPCWSTR lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        HANDLE hIcon;
        HANDLE hProcess;
} SHELLEXECUTEINFOW,*LPSHELLEXECUTEINFOW;
typedef struct _SHFILEOPSTRUCTA {
        HWND hwnd;
        UINT wFunc;
        LPCSTR pFrom;
        LPCSTR pTo;
        FILEOP_FLAGS fFlags;
        BOOL fAnyOperationsAborted;
        PVOID hNameMappings;
        LPCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA,*LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW {
        HWND hwnd;
        UINT wFunc;
        LPCWSTR pFrom;
        LPCWSTR pTo;
        FILEOP_FLAGS fFlags;
        BOOL fAnyOperationsAborted;
        PVOID hNameMappings;
        LPCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW,*LPSHFILEOPSTRUCTW;
typedef struct _SHFILEINFOA {
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        CHAR szDisplayName[260];
        CHAR szTypeName[80];
} SHFILEINFOA;
typedef struct _SHFILEINFOW {
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        WCHAR szDisplayName[260];
        WCHAR szTypeName[80];
} SHFILEINFOW;

LPWSTR * __attribute__((__stdcall__)) CommandLineToArgvW(LPCWSTR,int*);
void __attribute__((__stdcall__)) DragAcceptFiles(HWND,BOOL);
void __attribute__((__stdcall__)) DragFinish(HDROP);
UINT __attribute__((__stdcall__)) DragQueryFileA(HDROP,UINT,LPSTR,UINT);
UINT __attribute__((__stdcall__)) DragQueryFileW(HDROP,UINT,LPWSTR,UINT);
BOOL __attribute__((__stdcall__)) DragQueryPoint(HDROP,LPPOINT);
HICON __attribute__((__stdcall__)) ExtractAssociatedIconA(HINSTANCE,LPCSTR,PWORD);
HICON __attribute__((__stdcall__)) ExtractAssociatedIconW(HINSTANCE,LPCWSTR,PWORD);
HICON __attribute__((__stdcall__)) ExtractIconA(HINSTANCE,LPCSTR,UINT);
HICON __attribute__((__stdcall__)) ExtractIconW(HINSTANCE,LPCWSTR,UINT);
HICON __attribute__((__stdcall__)) ExtractIconExA(LPCSTR,int,HICON*,HICON*,UINT);
HICON __attribute__((__stdcall__)) ExtractIconExW(LPCWSTR,int,HICON*,HICON*,UINT);
HINSTANCE __attribute__((__stdcall__)) FindExecutableA(LPCSTR,LPCSTR,LPSTR);
HINSTANCE __attribute__((__stdcall__)) FindExecutableW(LPCWSTR,LPCWSTR,LPWSTR);
UINT __attribute__((__stdcall__)) SHAppBarMessage(DWORD,PAPPBARDATA);
BOOL __attribute__((__stdcall__)) Shell_NotifyIconA(DWORD,PNOTIFYICONDATAA);
BOOL __attribute__((__stdcall__)) Shell_NotifyIconW(DWORD,PNOTIFYICONDATAW);
int __attribute__((__stdcall__)) ShellAboutA(HWND,LPCSTR,LPCSTR,HICON);
int __attribute__((__stdcall__)) ShellAboutW(HWND,LPCWSTR,LPCWSTR,HICON);
HINSTANCE __attribute__((__stdcall__)) ShellExecuteA(HWND,LPCSTR,LPCSTR,LPCSTR,LPCSTR,INT);
HINSTANCE __attribute__((__stdcall__)) ShellExecuteW(HWND,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,INT);
BOOL __attribute__((__stdcall__)) ShellExecuteExA(LPSHELLEXECUTEINFOA);
BOOL __attribute__((__stdcall__)) ShellExecuteExW(LPSHELLEXECUTEINFOW);
int __attribute__((__stdcall__)) SHFileOperationA(LPSHFILEOPSTRUCTA);
int __attribute__((__stdcall__)) SHFileOperationW(LPSHFILEOPSTRUCTW);
void __attribute__((__stdcall__)) SHFreeNameMappings(HANDLE);
DWORD __attribute__((__stdcall__)) SHGetFileInfoA(LPCSTR,DWORD,SHFILEINFOA*,UINT,UINT);
DWORD __attribute__((__stdcall__)) SHGetFileInfoW(LPCWSTR,DWORD,SHFILEINFOW*,UINT,UINT);
# 238 "C:/PROGRA~1/WIDEST~1/gcc/include/shellapi.h" 3
typedef NOTIFYICONDATAA NOTIFYICONDATA,*PNOTIFYICONDATA;
typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO,*LPSHELLEXECUTEINFO;
typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT,*LPSHFILEOPSTRUCT;
typedef SHFILEINFOA SHFILEINFO;
# 255 "C:/PROGRA~1/WIDEST~1/gcc/include/shellapi.h" 3
}
# 86 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winperf.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winperf.h" 3



extern "C" {
# 78 "C:/PROGRA~1/WIDEST~1/gcc/include/winperf.h" 3
typedef struct _PERF_DATA_BLOCK {
        WCHAR Signature[4];
        DWORD LittleEndian;
        DWORD Version;
        DWORD Revision;
        DWORD TotalByteLength;
        DWORD HeaderLength;
        DWORD NumObjectTypes;
        LONG DefaultObject;
        SYSTEMTIME SystemTime;
        LARGE_INTEGER PerfTime;
        LARGE_INTEGER PerfFreq;
        LARGE_INTEGER PerfTime100nSec;
        DWORD SystemNameLength;
        DWORD SystemNameOffset;
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;
typedef struct _PERF_OBJECT_TYPE {
        DWORD TotalByteLength;
        DWORD DefinitionLength;
        DWORD HeaderLength;
        DWORD ObjectNameTitleIndex;
        LPWSTR ObjectNameTitle;
        DWORD ObjectHelpTitleIndex;
        LPWSTR ObjectHelpTitle;
        DWORD DetailLevel;
        DWORD NumCounters;
        LONG DefaultCounter;
        LONG NumInstances;
        DWORD CodePage;
        LARGE_INTEGER PerfTime;
        LARGE_INTEGER PerfFreq;
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
typedef struct _PERF_COUNTER_DEFINITION {
        DWORD ByteLength;
        DWORD CounterNameTitleIndex;
        LPWSTR CounterNameTitle;
        DWORD CounterHelpTitleIndex;
        LPWSTR CounterHelpTitle;
        LONG DefaultScale;
        DWORD DetailLevel;
        DWORD CounterType;
        DWORD CounterSize;
        DWORD CounterOffset;
} PERF_COUNTER_DEFINITION,*PPERF_COUNTER_DEFINITION;
typedef struct _PERF_INSTANCE_DEFINITION {
        DWORD ByteLength;
        DWORD ParentObjectTitleIndex;
        DWORD ParentObjectInstance;
        LONG UniqueID;
        DWORD NameOffset;
        DWORD NameLength;
} PERF_INSTANCE_DEFINITION,*PPERF_INSTANCE_DEFINITION;
typedef struct _PERF_COUNTER_BLOCK {
        DWORD ByteLength;
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
typedef DWORD(__attribute__((__stdcall__)) PM_OPEN_PROC)(LPWSTR);
typedef DWORD(__attribute__((__stdcall__)) PM_COLLECT_PROC)(LPWSTR,PVOID*,PDWORD,PDWORD);
typedef DWORD(__attribute__((__stdcall__)) PM_CLOSE_PROC)(void);

}
# 87 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winspool.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/winspool.h" 3



extern "C" {
# 221 "C:/PROGRA~1/WIDEST~1/gcc/include/winspool.h" 3
typedef struct _ADDJOB_INFO_1A {
        LPSTR Path;
        DWORD JobId;
} ADDJOB_INFO_1A,*PADDJOB_INFO_1A,*LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
        LPWSTR Path;
        DWORD JobId;
} ADDJOB_INFO_1W,*PADDJOB_INFO_1W,*LPADDJOB_INFO_1W;
typedef struct _DATATYPES_INFO_1A{LPSTR pName;} DATATYPES_INFO_1A,*PDATATYPES_INFO_1A,*LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{LPWSTR pName;} DATATYPES_INFO_1W,*PDATATYPES_INFO_1W,*LPDATATYPES_INFO_1W;
typedef struct _JOB_INFO_1A {
        DWORD JobId;
        LPSTR pPrinterName;
        LPSTR pMachineName;
        LPSTR pUserName;
        LPSTR pDocument;
        LPSTR pDatatype;
        LPSTR pStatus;
        DWORD Status;
        DWORD Priority;
        DWORD Position;
        DWORD TotalPages;
        DWORD PagesPrinted;
        SYSTEMTIME Submitted;
} JOB_INFO_1A,*PJOB_INFO_1A,*LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
        DWORD JobId;
        LPWSTR pPrinterName;
        LPWSTR pMachineName;
        LPWSTR pUserName;
        LPWSTR pDocument;
        LPWSTR pDatatype;
        LPWSTR pStatus;
        DWORD Status;
        DWORD Priority;
        DWORD Position;
        DWORD TotalPages;
        DWORD PagesPrinted;
        SYSTEMTIME Submitted;
} JOB_INFO_1W,*PJOB_INFO_1W,*LPJOB_INFO_1W;
typedef struct _JOB_INFO_2A {
        DWORD JobId;
        LPSTR pPrinterName;
        LPSTR pMachineName;
        LPSTR pUserName;
        LPSTR pDocument;
        LPSTR pNotifyName;
        LPSTR pDatatype;
        LPSTR pPrintProcessor;
        LPSTR pParameters;
        LPSTR pDriverName;
        LPDEVMODEA pDevMode;
        LPSTR pStatus;
        PSECURITY_DESCRIPTOR pSecurityDescriptor;
        DWORD Status;
        DWORD Priority;
        DWORD Position;
        DWORD StartTime;
        DWORD UntilTime;
        DWORD TotalPages;
        DWORD Size;
        SYSTEMTIME Submitted;
        DWORD Time;
        DWORD PagesPrinted;
} JOB_INFO_2A,*PJOB_INFO_2A,*LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
        DWORD JobId;
        LPWSTR pPrinterName;
        LPWSTR pMachineName;
        LPWSTR pUserName;
        LPWSTR pDocument;
        LPWSTR pNotifyName;
        LPWSTR pDatatype;
        LPWSTR pPrintProcessor;
        LPWSTR pParameters;
        LPWSTR pDriverName;
        LPDEVMODEW pDevMode;
        LPWSTR pStatus;
        PSECURITY_DESCRIPTOR pSecurityDescriptor;
        DWORD Status;
        DWORD Priority;
        DWORD Position;
        DWORD StartTime;
        DWORD UntilTime;
        DWORD TotalPages;
        DWORD Size;
        SYSTEMTIME Submitted;
        DWORD Time;
        DWORD PagesPrinted;
} JOB_INFO_2W,*PJOB_INFO_2W,*LPJOB_INFO_2W;
typedef struct _DOC_INFO_1A {
        LPSTR pDocName;
        LPSTR pOutputFile;
        LPSTR pDatatype;
} DOC_INFO_1A,*PDOC_INFO_1A,*LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
        LPWSTR pDocName;
        LPWSTR pOutputFile;
        LPWSTR pDatatype;
} DOC_INFO_1W,*PDOC_INFO_1W,*LPDOC_INFO_1W;
typedef struct _DOC_INFO_2A {
        LPSTR pDocName;
        LPSTR pOutputFile;
        LPSTR pDatatype;
        DWORD dwMode;
        DWORD JobId;
} DOC_INFO_2A,*PDOC_INFO_2A,*LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
        LPWSTR pDocName;
        LPWSTR pOutputFile;
        LPWSTR pDatatype;
        DWORD dwMode;
        DWORD JobId;
} DOC_INFO_2W,*PDOC_INFO_2W,*LPDOC_INFO_2W;
typedef struct _DRIVER_INFO_1A {LPSTR pName;} DRIVER_INFO_1A,*PDRIVER_INFO_1A,*LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {LPWSTR pName;} DRIVER_INFO_1W,*PDRIVER_INFO_1W,*LPDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A {
        DWORD cVersion;
        LPSTR pName;
        LPSTR pEnvironment;
        LPSTR pDriverPath;
        LPSTR pDataFile;
        LPSTR pConfigFile;
} DRIVER_INFO_2A,*PDRIVER_INFO_2A,*LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
        DWORD cVersion;
        LPWSTR pName;
        LPWSTR pEnvironment;
        LPWSTR pDriverPath;
        LPWSTR pDataFile;
        LPWSTR pConfigFile;
} DRIVER_INFO_2W,*PDRIVER_INFO_2W,*LPDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A {
        DWORD cVersion;
        LPSTR pName;
        LPSTR pEnvironment;
        LPSTR pDriverPath;
        LPSTR pDataFile;
        LPSTR pConfigFile;
        LPSTR pHelpFile;
        LPSTR pDependentFiles;
        LPSTR pMonitorName;
        LPSTR pDefaultDataType;
} DRIVER_INFO_3A,*PDRIVER_INFO_3A,*LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
        DWORD cVersion;
        LPWSTR pName;
        LPWSTR pEnvironment;
        LPWSTR pDriverPath;
        LPWSTR pDataFile;
        LPWSTR pConfigFile;
        LPWSTR pHelpFile;
        LPWSTR pDependentFiles;
        LPWSTR pMonitorName;
        LPWSTR pDefaultDataType;
} DRIVER_INFO_3W,*PDRIVER_INFO_3W,*LPDRIVER_INFO_3W;
typedef struct _MONITOR_INFO_1A{LPSTR pName;} MONITOR_INFO_1A,*PMONITOR_INFO_1A,*LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{LPWSTR pName;} MONITOR_INFO_1W,*PMONITOR_INFO_1W,*LPMONITOR_INFO_1W;
typedef struct _PORT_INFO_1A {LPSTR pName;} PORT_INFO_1A,*PPORT_INFO_1A,*LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {LPWSTR pName;} PORT_INFO_1W,*PPORT_INFO_1W,*LPPORT_INFO_1W;
typedef struct _MONITOR_INFO_2A{
        LPSTR pName;
        LPSTR pEnvironment;
        LPSTR pDLLName;
} MONITOR_INFO_2A,*PMONITOR_INFO_2A,*LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
        LPWSTR pName;
        LPWSTR pEnvironment;
        LPWSTR pDLLName;
} MONITOR_INFO_2W,*PMONITOR_INFO_2W,*LPMONITOR_INFO_2W;
typedef struct _PORT_INFO_2A {
        LPSTR pPortName;
        LPSTR pMonitorName;
        LPSTR pDescription;
        DWORD fPortType;
        DWORD Reserved;
} PORT_INFO_2A,*PPORT_INFO_2A,*LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
        LPWSTR pPortName;
        LPWSTR pMonitorName;
        LPWSTR pDescription;
        DWORD fPortType;
        DWORD Reserved;
} PORT_INFO_2W,*PPORT_INFO_2W,*LPPORT_INFO_2W;
typedef struct _PORT_INFO_3A {
        DWORD dwStatus;
        LPSTR pszStatus;
        DWORD dwSeverity;
} PORT_INFO_3A,*PPORT_INFO_3A,*LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
        DWORD dwStatus;
        LPWSTR pszStatus;
        DWORD dwSeverity;
} PORT_INFO_3W,*PPORT_INFO_3W,*LPPORT_INFO_3W;
typedef struct _PRINTER_INFO_1A {
        DWORD Flags;
        LPSTR pDescription;
        LPSTR pName;
        LPSTR pComment;
} PRINTER_INFO_1A,*PPRINTER_INFO_1A,*LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
        DWORD Flags;
        LPWSTR pDescription;
        LPWSTR pName;
        LPWSTR pComment;
} PRINTER_INFO_1W,*PPRINTER_INFO_1W,*LPPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A {
        LPSTR pServerName;
        LPSTR pPrinterName;
        LPSTR pShareName;
        LPSTR pPortName;
        LPSTR pDriverName;
        LPSTR pComment;
        LPSTR pLocation;
        LPDEVMODEA pDevMode;
        LPSTR pSepFile;
        LPSTR pPrintProcessor;
        LPSTR pDatatype;
        LPSTR pParameters;
        PSECURITY_DESCRIPTOR pSecurityDescriptor;
        DWORD Attributes;
        DWORD Priority;
        DWORD DefaultPriority;
        DWORD StartTime;
        DWORD UntilTime;
        DWORD Status;
        DWORD cJobs;
        DWORD AveragePPM;
} PRINTER_INFO_2A,*PPRINTER_INFO_2A,*LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
        LPWSTR pServerName;
        LPWSTR pPrinterName;
        LPWSTR pShareName;
        LPWSTR pPortName;
        LPWSTR pDriverName;
        LPWSTR pComment;
        LPWSTR pLocation;
        LPDEVMODEW pDevMode;
        LPWSTR pSepFile;
        LPWSTR pPrintProcessor;
        LPWSTR pDatatype;
        LPWSTR pParameters;
        PSECURITY_DESCRIPTOR pSecurityDescriptor;
        DWORD Attributes;
        DWORD Priority;
        DWORD DefaultPriority;
        DWORD StartTime;
        DWORD UntilTime;
        DWORD Status;
        DWORD cJobs;
        DWORD AveragePPM;
} PRINTER_INFO_2W,*PPRINTER_INFO_2W,*LPPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_3 {
        PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3,*PPRINTER_INFO_3,*LPPRINTER_INFO_3;
typedef struct _PRINTER_INFO_4A {
        LPSTR pPrinterName;
        LPSTR pServerName;
        DWORD Attributes;
} PRINTER_INFO_4A,*PPRINTER_INFO_4A,*LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
        LPWSTR pPrinterName;
        LPWSTR pServerName;
        DWORD Attributes;
} PRINTER_INFO_4W,*PPRINTER_INFO_4W,*LPPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A {
        LPSTR pPrinterName;
        LPSTR pPortName;
        DWORD Attributes;
        DWORD DeviceNotSelectedTimeout;
        DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5A,*PPRINTER_INFO_5A,*LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
        LPWSTR pPrinterName;
        LPWSTR pPortName;
        DWORD Attributes;
        DWORD DeviceNotSelectedTimeout;
        DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5W,*PPRINTER_INFO_5W,*LPPRINTER_INFO_5W;
typedef struct _PRINTPROCESSOR_INFO_1A {LPSTR pName;} PRINTPROCESSOR_INFO_1A,*PPRINTPROCESSOR_INFO_1A,*LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {LPWSTR pName;} PRINTPROCESSOR_INFO_1W,*PPRINTPROCESSOR_INFO_1W,*LPPRINTPROCESSOR_INFO_1W;
typedef struct _PRINTER_NOTIFY_INFO_DATA {
        WORD Type;
        WORD Field;
        DWORD Reserved;
        DWORD Id;
        union {
                DWORD adwData[2];
                struct {
                        DWORD cbBuf;
                        PVOID pBuf;
                } Data;
        } NotifyData;
} PRINTER_NOTIFY_INFO_DATA,*PPRINTER_NOTIFY_INFO_DATA,*LPPRINTER_NOTIFY_INFO_DATA;
typedef struct _PRINTER_NOTIFY_INFO {
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO,*PPRINTER_NOTIFY_INFO,*LPPRINTER_NOTIFY_INFO;
typedef struct _FORM_INFO_1A {
        DWORD Flags;
        LPSTR pName;
        SIZEL Size;
        RECTL ImageableArea;
} FORM_INFO_1A,*PFORM_INFO_1A,*LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
        DWORD Flags;
        LPWSTR pName;
        SIZEL Size;
        RECTL ImageableArea;
} FORM_INFO_1W,*PFORM_INFO_1W,*LPFORM_INFO_1W;
typedef struct _PRINTER_DEFAULTSA {
        LPSTR pDatatype;
        LPDEVMODE pDevMode;
        ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA,*PPRINTER_DEFAULTSA,*LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW {
        LPWSTR pDatatype;
        LPDEVMODE pDevMode;
        ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW,*PPRINTER_DEFAULTSW,*LPPRINTER_DEFAULTSW;

BOOL __attribute__((__stdcall__)) AbortPrinter(HANDLE);
BOOL __attribute__((__stdcall__)) AddFormA(HANDLE,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddFormW(HANDLE,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddJobA(HANDLE,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) AddJobW(HANDLE,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) AddMonitorA(LPSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddMonitorW(LPWSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddPortA(LPSTR,HWND,LPSTR);
BOOL __attribute__((__stdcall__)) AddPortW(LPWSTR,HWND,LPWSTR);
HANDLE __attribute__((__stdcall__)) AddPrinterA(LPSTR,DWORD,PBYTE);
HANDLE __attribute__((__stdcall__)) AddPrinterW(LPWSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddPrinterConnectionA(LPSTR);
BOOL __attribute__((__stdcall__)) AddPrinterConnectionW(LPWSTR);
BOOL __attribute__((__stdcall__)) AddPrinterDriverA(LPSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddPrinterDriverW(LPWSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddPrintProcessorA(LPSTR,LPSTR,LPSTR,LPSTR);
BOOL __attribute__((__stdcall__)) AddPrintProcessorW(LPWSTR,LPWSTR,LPWSTR,LPWSTR);
BOOL __attribute__((__stdcall__)) AddPrintProvidorA(LPSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) AddPrintProvidorW(LPWSTR,DWORD,PBYTE);
LONG __attribute__((__stdcall__)) AdvancedDocumentPropertiesA(HWND,HANDLE,LPSTR,PDEVMODE,PDEVMODEA);
LONG __attribute__((__stdcall__)) AdvancedDocumentPropertiesW(HWND,HANDLE,LPWSTR,PDEVMODE,PDEVMODEW);
BOOL __attribute__((__stdcall__)) ClosePrinter(HANDLE);
BOOL __attribute__((__stdcall__)) ConfigurePortA(LPSTR,HWND,LPSTR);
BOOL __attribute__((__stdcall__)) ConfigurePortW(LPWSTR,HWND,LPWSTR);
HANDLE __attribute__((__stdcall__)) ConnectToPrinterDlg(HWND,DWORD);
BOOL __attribute__((__stdcall__)) DeleteFormA(HANDLE,LPSTR);
BOOL __attribute__((__stdcall__)) DeleteFormW(HANDLE,LPWSTR);
BOOL __attribute__((__stdcall__)) DeleteMonitorA(LPSTR,LPSTR,LPSTR);
BOOL __attribute__((__stdcall__)) DeleteMonitorW(LPWSTR,LPWSTR,LPWSTR);
BOOL __attribute__((__stdcall__)) DeletePortA(LPSTR,HWND,LPSTR);
BOOL __attribute__((__stdcall__)) DeletePortW(LPWSTR,HWND,LPWSTR);
BOOL __attribute__((__stdcall__)) DeletePrinter(HANDLE);
BOOL __attribute__((__stdcall__)) DeletePrinterConnectionA(LPSTR);
BOOL __attribute__((__stdcall__)) DeletePrinterConnectionW(LPWSTR);
DWORD __attribute__((__stdcall__)) DeletePrinterDataA(HANDLE,LPSTR);
DWORD __attribute__((__stdcall__)) DeletePrinterDataW(HANDLE,LPWSTR);
BOOL __attribute__((__stdcall__)) DeletePrinterDriverA(LPSTR,LPSTR,LPSTR);
BOOL __attribute__((__stdcall__)) DeletePrinterDriverW(LPWSTR,LPWSTR,LPWSTR);
BOOL __attribute__((__stdcall__)) DeletePrintProcessorA(LPSTR,LPSTR,LPSTR);
BOOL __attribute__((__stdcall__)) DeletePrintProcessorW(LPWSTR,LPWSTR,LPWSTR);
BOOL __attribute__((__stdcall__)) DeletePrintProvidorA(LPSTR,LPSTR,LPSTR);
BOOL __attribute__((__stdcall__)) DeletePrintProvidorW(LPWSTR,LPWSTR,LPWSTR);
LONG __attribute__((__stdcall__)) DocumentPropertiesA(HWND,HANDLE,LPSTR,PDEVMODEA,PDEVMODEA,DWORD);
LONG __attribute__((__stdcall__)) DocumentPropertiesW(HWND,HANDLE,LPWSTR,PDEVMODEA,PDEVMODEA,DWORD);
BOOL __attribute__((__stdcall__)) EndDocPrinter(HANDLE);
BOOL __attribute__((__stdcall__)) EndPagePrinter(HANDLE);
BOOL __attribute__((__stdcall__)) EnumFormsA(HANDLE,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumFormsW(HANDLE,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumJobsA(HANDLE,DWORD,DWORD,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumJobsW(HANDLE,DWORD,DWORD,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumMonitorsA(LPSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumMonitorsW(LPWSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPortsA(LPSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPortsW(LPWSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) EnumPrinterDataA(HANDLE,DWORD,LPSTR,DWORD,PDWORD,PDWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) EnumPrinterDataW(HANDLE,DWORD,LPWSTR,DWORD,PDWORD,PDWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrinterDriversA(LPSTR,LPSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrinterDriversW(LPWSTR,LPWSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrintersA(DWORD,LPSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrintersW(DWORD,LPWSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorDatatypesA(LPSTR,LPSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorDatatypesW(LPWSTR,LPWSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorsA(LPSTR,LPSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) EnumPrintProcessorsW(LPWSTR,LPWSTR,DWORD,PBYTE,DWORD,PDWORD,PDWORD);
BOOL __attribute__((__stdcall__)) FindClosePrinterChangeNotification(HANDLE);
HANDLE __attribute__((__stdcall__)) FindFirstPrinterChangeNotification(HANDLE,DWORD,DWORD,PVOID);
HANDLE __attribute__((__stdcall__)) FindNextPrinterChangeNotification(HANDLE,PDWORD,PVOID,PVOID*);
BOOL __attribute__((__stdcall__)) FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO);
BOOL __attribute__((__stdcall__)) GetFormA(HANDLE,LPSTR,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetFormW(HANDLE,LPWSTR,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetJobA(HANDLE,DWORD,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetJobW(HANDLE,DWORD,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetPrinterA(HANDLE,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) GetPrinterW(HANDLE,DWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrinterDataA(HANDLE,LPSTR,PDWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrinterDataW(HANDLE,LPWSTR,PDWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrinterDriverA(HANDLE,LPSTR,DWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrinterDriverW(HANDLE,LPWSTR,DWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrinterDriverDirectoryA(LPSTR,LPSTR,DWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrinterDriverDirectoryW(LPWSTR,LPWSTR,DWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrintProcessorDirectoryA(LPSTR,LPSTR,DWORD,PBYTE,DWORD,PDWORD);
DWORD __attribute__((__stdcall__)) GetPrintProcessorDirectoryW(LPWSTR,LPWSTR,DWORD,PBYTE,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) OpenPrinterA(LPSTR,PHANDLE,LPPRINTER_DEFAULTSA);
BOOL __attribute__((__stdcall__)) OpenPrinterW(LPWSTR,PHANDLE,LPPRINTER_DEFAULTSW);
DWORD __attribute__((__stdcall__)) PrinterMessageBoxA(HANDLE,DWORD,HWND,LPSTR,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) PrinterMessageBoxW(HANDLE,DWORD,HWND,LPWSTR,LPWSTR,DWORD);
BOOL __attribute__((__stdcall__)) PrinterProperties(HWND,HANDLE);
BOOL __attribute__((__stdcall__)) ReadPrinter(HANDLE,PVOID,DWORD,PDWORD);
BOOL __attribute__((__stdcall__)) ResetPrinterA(HANDLE,LPPRINTER_DEFAULTSA);
BOOL __attribute__((__stdcall__)) ResetPrinterW(HANDLE,LPPRINTER_DEFAULTSW);
BOOL __attribute__((__stdcall__)) ScheduleJob(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) SetFormA(HANDLE,LPSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) SetFormW(HANDLE,LPWSTR,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) SetJobA(HANDLE,DWORD,DWORD,PBYTE,DWORD);
BOOL __attribute__((__stdcall__)) SetJobW(HANDLE,DWORD,DWORD,PBYTE,DWORD);
BOOL __attribute__((__stdcall__)) SetPrinterA(HANDLE,DWORD,PBYTE,DWORD);
BOOL __attribute__((__stdcall__)) SetPrinterW(HANDLE,DWORD,PBYTE,DWORD);
BOOL __attribute__((__stdcall__)) SetPrinterDataA(HANDLE,LPSTR,DWORD,PBYTE,DWORD);
BOOL __attribute__((__stdcall__)) SetPrinterDataW(HANDLE,LPWSTR,DWORD,PBYTE,DWORD);
DWORD __attribute__((__stdcall__)) StartDocPrinterA(HANDLE,DWORD,PBYTE);
DWORD __attribute__((__stdcall__)) StartDocPrinterW(HANDLE,DWORD,PBYTE);
BOOL __attribute__((__stdcall__)) StartPagePrinter(HANDLE);
DWORD __attribute__((__stdcall__)) WaitForPrinterChange(HANDLE,DWORD);
BOOL __attribute__((__stdcall__)) WritePrinter(HANDLE,PVOID,DWORD,PDWORD);
# 714 "C:/PROGRA~1/WIDEST~1/gcc/include/winspool.h" 3
typedef JOB_INFO_1A JOB_INFO_1,*PJOB_INFO_1,*LPJOB_INFO_1;
typedef JOB_INFO_2A JOB_INFO_2,*PJOB_INFO_2,*LPJOB_INFO_2;
typedef ADDJOB_INFO_1A ADDJOB_INFO_1,*PADDJOB_INFO_1,*LPADDJOB_INFO_1;
typedef DATATYPES_INFO_1A DATATYPES_INFO_1,*PDATATYPES_INFO_1,*LPDATATYPES_INFO_1;
typedef MONITOR_INFO_1A MONITOR_INFO_1,*PMONITOR_INFO_1,*LPMONITOR_INFO_1;
typedef MONITOR_INFO_2A MONITOR_INFO_2,*PMONITOR_INFO_2,*LPMONITOR_INFO_2;
typedef DOC_INFO_1A DOC_INFO_1,*PDOC_INFO_1,*LPDOC_INFO_1;
typedef DOC_INFO_2A DOC_INFO_2,*PDOC_INFO_2,*LPDOC_INFO_2;
typedef PORT_INFO_1A PORT_INFO_1,*PPORT_INFO_1,*LPPORT_INFO_1;
typedef PORT_INFO_2A PORT_INFO_2,*PPORT_INFO_2,*LPPORT_INFO_2;
typedef PORT_INFO_3A PORT_INFO_3,*PPORT_INFO_3,*LPPORT_INFO_3;
typedef DRIVER_INFO_2A DRIVER_INFO_2,*PDRIVER_INFO_2,*LPDRIVER_INFO_2;
typedef PRINTER_INFO_1A PRINTER_INFO_1,*PPRINTER_INFO_1,*LPPRINTER_INFO_1;
typedef PRINTER_INFO_2A PRINTER_INFO_2,*PPRINTER_INFO_2,*LPPRINTER_INFO_2;
typedef PRINTER_INFO_4A PRINTER_INFO_4,*PPRINTER_INFO_4,*LPPRINTER_INFO_4;
typedef PRINTER_INFO_5A PRINTER_INFO_5,*PPRINTER_INFO_5,*LPPRINTER_INFO_5;
typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1,*PPRINTPROCESSOR_INFO_1,*LPPRINTPROCESSOR_INFO_1;
typedef FORM_INFO_1A FORM_INFO_1,*PFORM_INFO_1,*LPFORM_INFO_1;
typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS,*PPRINTER_DEFAULTS,*LPPRINTER_DEFAULTS;
# 780 "C:/PROGRA~1/WIDEST~1/gcc/include/winspool.h" 3
}
# 88 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 97 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 1 3
# 18 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3







extern "C" {




typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef u_int SOCKET;
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
typedef struct fd_set {
        u_int fd_count;
        SOCKET fd_array[64];
} fd_set;
int __attribute__((__stdcall__)) __WSAFDIsSet(SOCKET,fd_set*);
# 99 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
struct timeval {
        long tv_sec;
        long tv_usec;
};
struct hostent {
        char *h_name;
        char **h_aliases;
        short h_addrtype;
        short h_length;
        char **h_addr_list;

};
struct linger {
        u_short l_onoff;
        u_short l_linger;
};
# 144 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
struct netent {
        char * n_name;
        char **n_aliases;
        short n_addrtype;
        u_long n_net;
};
struct servent {
        char *s_name;
        char **s_aliases;
        short s_port;
        char *s_proto;
};
struct protoent {
        char *p_name;
        char **p_aliases;
        short p_proto;
};
# 212 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
struct in_addr {
        union {
                struct { u_char s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { u_short s_w1,s_w2; } S_un_w;
                u_long S_addr;
        } S_un;






};
# 243 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
struct sockaddr_in {
        short sin_family;
        u_short sin_port;
        struct in_addr sin_addr;
        char sin_zero[8];
};


typedef struct WSAData {
        WORD wVersion;
        WORD wHighVersion;
        char szDescription[256 +1];
        char szSystemStatus[128 +1];
        unsigned short iMaxSockets;
        unsigned short iMaxUdpDg;
        char * lpVendorInfo;
} WSADATA;
typedef WSADATA *LPWSADATA;
# 324 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
struct sockaddr {
        u_short sa_family;
        char sa_data[14];
};





struct sockaddr_storage {
    short ss_family;
    char __ss_pad1[6];
    long long __ss_align;
    char __ss_pad2[112];
};

struct sockproto {
        u_short sp_family;
        u_short sp_protocol;
};
# 466 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
SOCKET __attribute__((__stdcall__)) accept(SOCKET,struct sockaddr*,int*);
int __attribute__((__stdcall__)) bind(SOCKET,const struct sockaddr*,int);
int __attribute__((__stdcall__)) closesocket(SOCKET);
int __attribute__((__stdcall__)) connect(SOCKET,const struct sockaddr*,int);
int __attribute__((__stdcall__)) ioctlsocket(SOCKET,long,u_long *);
int __attribute__((__stdcall__)) getpeername(SOCKET,struct sockaddr*,int*);
int __attribute__((__stdcall__)) getsockname(SOCKET,struct sockaddr*,int*);
int __attribute__((__stdcall__)) getsockopt(SOCKET,int,int,char*,int*);
unsigned long __attribute__((__stdcall__)) inet_addr(const char*);
__attribute__((__stdcall__)) char * inet_ntoa(struct in_addr);
int __attribute__((__stdcall__)) listen(SOCKET,int);
int __attribute__((__stdcall__)) recv(SOCKET,char*,int,int);
int __attribute__((__stdcall__)) recvfrom(SOCKET,char*,int,int,struct sockaddr*,int*);
int __attribute__((__stdcall__)) send(SOCKET,const char*,int,int);
int __attribute__((__stdcall__)) sendto(SOCKET,const char*,int,int,const struct sockaddr*,int);
int __attribute__((__stdcall__)) setsockopt(SOCKET,int,int,const char*,int);
int __attribute__((__stdcall__)) shutdown(SOCKET,int);
SOCKET __attribute__((__stdcall__)) socket(int,int,int);
__attribute__((__stdcall__)) struct hostent * gethostbyaddr(const char*,int,int);
__attribute__((__stdcall__)) struct hostent * gethostbyname(const char*);
__attribute__((__stdcall__)) struct servent * getservbyport(int,const char*);
__attribute__((__stdcall__)) struct servent * getservbyname(const char*,const char*);
__attribute__((__stdcall__)) struct protoent * getprotobynumber(int);
__attribute__((__stdcall__)) struct protoent * getprotobyname(const char*);
int __attribute__((__stdcall__)) WSAStartup(WORD,LPWSADATA);
int __attribute__((__stdcall__)) WSACleanup(void);
void __attribute__((__stdcall__)) WSASetLastError(int);
int __attribute__((__stdcall__)) WSAGetLastError(void);




BOOL __attribute__((__stdcall__)) WSAIsBlocking(void);
int __attribute__((__stdcall__)) WSAUnhookBlockingHook(void);
FARPROC __attribute__((__stdcall__)) WSASetBlockingHook(FARPROC);
int __attribute__((__stdcall__)) WSACancelBlockingCall(void);

HANDLE __attribute__((__stdcall__)) WSAAsyncGetServByName(HWND,u_int,const char*,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetServByPort(HWND,u_int,int,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetProtoByName(HWND,u_int,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetProtoByNumber(HWND,u_int,int,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetHostByName(HWND,u_int,const char*,char*,int);
HANDLE __attribute__((__stdcall__)) WSAAsyncGetHostByAddr(HWND,u_int,const char*,int,int,char*,int);
int __attribute__((__stdcall__)) WSACancelAsyncRequest(HANDLE);
int __attribute__((__stdcall__)) WSAAsyncSelect(SOCKET,HWND,u_int,long);

u_long __attribute__((__stdcall__)) htonl(u_long);
u_long __attribute__((__stdcall__)) ntohl(u_long);
u_short __attribute__((__stdcall__)) htons(u_short);
u_short __attribute__((__stdcall__)) ntohs(u_short);
int __attribute__((__stdcall__)) select(int nfds,fd_set*,fd_set*,fd_set*,const struct timeval*);
int __attribute__((__stdcall__)) gethostname(char*,int);
# 527 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr *LPSOCKADDR;
typedef struct sockaddr_storage SOCKADDR_STORAGE, *PSOCKADDR_STORAGE;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;
typedef struct in_addr IN_ADDR;
typedef struct in_addr *PIN_ADDR;
typedef struct in_addr *LPIN_ADDR;
typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;
typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;
typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;
typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;
typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
# 631 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
typedef struct _OVERLAPPED *LPWSAOVERLAPPED;
# 648 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
typedef struct _WSABUF {
        unsigned long len;
        char *buf;
} WSABUF, *LPWSABUF;

typedef enum
{
        BestEffortService,
        ControlledLoadService,
        PredictiveService,
        GuaranteedDelayService,
        GuaranteedService
} GUARANTEE;
# 672 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
typedef unsigned int SERVICETYPE;
typedef struct _flowspec
{
        unsigned int TokenRate;
        unsigned int TokenBucketSize;
        unsigned int PeakBandwidth;
        unsigned int Latency;
        unsigned int DelayVariation;
        SERVICETYPE ServiceType;
        unsigned int MaxSduSize;
        unsigned int MinimumPolicedSize;
   } FLOWSPEC, *PFLOWSPEC, *LPFLOWSPEC;

typedef struct _QualityOfService
{
        FLOWSPEC SendingFlowspec;
        FLOWSPEC ReceivingFlowspec;
        WSABUF ProviderSpecific;
} QOS, *LPQOS;







typedef unsigned int GROUP;



typedef struct _WSANETWORKEVENTS {
        long lNetworkEvents;
        int iErrorCode[10];
} WSANETWORKEVENTS, *LPWSANETWORKEVENTS;






typedef enum _WSAESETSERVICEOP
{
        RNRSERVICE_REGISTER=0,
        RNRSERVICE_DEREGISTER,
        RNRSERVICE_DELETE
} WSAESETSERVICEOP, *PWSAESETSERVICEOP, *LPWSAESETSERVICEOP;

typedef struct _AFPROTOCOLS {
        INT iAddressFamily;
        INT iProtocol;
} AFPROTOCOLS, *PAFPROTOCOLS, *LPAFPROTOCOLS;

typedef enum _WSAEcomparator
{
        COMP_EQUAL = 0,
        COMP_NOTLESS
} WSAECOMPARATOR, *PWSAECOMPARATOR, *LPWSAECOMPARATOR;

typedef struct _WSAVersion
{
        DWORD dwVersion;
        WSAECOMPARATOR ecHow;
} WSAVERSION, *PWSAVERSION, *LPWSAVERSION;



typedef struct _SOCKET_ADDRESS {
        LPSOCKADDR lpSockaddr;
        INT iSockaddrLength;
} SOCKET_ADDRESS,*PSOCKET_ADDRESS,*LPSOCKET_ADDRESS;
typedef struct _CSADDR_INFO {
        SOCKET_ADDRESS LocalAddr;
        SOCKET_ADDRESS RemoteAddr;
        INT iSocketType;
        INT iProtocol;
} CSADDR_INFO,*PCSADDR_INFO,*LPCSADDR_INFO;


typedef struct _SOCKET_ADDRESS_LIST {
    INT iAddressCount;
    SOCKET_ADDRESS Address[1];
} SOCKET_ADDRESS_LIST, * LPSOCKET_ADDRESS_LIST;



typedef struct _BLOB {
        ULONG cbSize;
        BYTE *pBlobData;
} BLOB,*PBLOB,*LPBLOB;


typedef struct _WSAQuerySetA
{
        DWORD dwSize;
        LPSTR lpszServiceInstanceName;
        LPGUID lpServiceClassId;
        LPWSAVERSION lpVersion;
        LPSTR lpszComment;
        DWORD dwNameSpace;
        LPGUID lpNSProviderId;
        LPSTR lpszContext;
        DWORD dwNumberOfProtocols;
        LPAFPROTOCOLS lpafpProtocols;
        LPSTR lpszQueryString;
        DWORD dwNumberOfCsAddrs;
        LPCSADDR_INFO lpcsaBuffer;
        DWORD dwOutputFlags;
        LPBLOB lpBlob;
} WSAQUERYSETA, *PWSAQUERYSETA, *LPWSAQUERYSETA;

typedef struct _WSAQuerySetW
{
        DWORD dwSize;
        LPWSTR lpszServiceInstanceName;
        LPGUID lpServiceClassId;
        LPWSAVERSION lpVersion;
        LPWSTR lpszComment;
        DWORD dwNameSpace;
        LPGUID lpNSProviderId;
        LPWSTR lpszContext;
        DWORD dwNumberOfProtocols;
        LPAFPROTOCOLS lpafpProtocols;
        LPWSTR lpszQueryString;
        DWORD dwNumberOfCsAddrs;
        LPCSADDR_INFO lpcsaBuffer;
        DWORD dwOutputFlags;
        LPBLOB lpBlob;
} WSAQUERYSETW, *PWSAQUERYSETW, *LPWSAQUERYSETW;






typedef WSAQUERYSETA WSAQUERYSET;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef LPWSAQUERYSETA LPWSAQUERYSET;


typedef struct _WSANSClassInfoA
{
        LPSTR lpszName;
        DWORD dwNameSpace;
        DWORD dwValueType;
        DWORD dwValueSize;
        LPVOID lpValue;
} WSANSCLASSINFOA, *PWSANSCLASSINFOA, *LPWSANSCLASSINFOA;

typedef struct _WSANSClassInfoW
{
        LPWSTR lpszName;
        DWORD dwNameSpace;
        DWORD dwValueType;
        DWORD dwValueSize;
        LPVOID lpValue;
} WSANSCLASSINFOW, *PWSANSCLASSINFOW, *LPWSANSCLASSINFOW;






typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;


typedef struct _WSAServiceClassInfoA
{
        LPGUID lpServiceClassId;
        LPSTR lpszServiceClassName;
        DWORD dwCount;
        LPWSANSCLASSINFOA lpClassInfos;
} WSASERVICECLASSINFOA, *PWSASERVICECLASSINFOA, *LPWSASERVICECLASSINFOA;

typedef struct _WSAServiceClassInfoW
{
        LPGUID lpServiceClassId;
        LPWSTR lpszServiceClassName;
        DWORD dwCount;
        LPWSANSCLASSINFOW lpClassInfos;
} WSASERVICECLASSINFOW, *PWSASERVICECLASSINFOW, *LPWSASERVICECLASSINFOW;






typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;


typedef struct _WSANAMESPACE_INFOA {
        GUID NSProviderId;
        DWORD dwNameSpace;
        BOOL fActive;
        DWORD dwVersion;
        LPSTR lpszIdentifier;
} WSANAMESPACE_INFOA, *PWSANAMESPACE_INFOA, *LPWSANAMESPACE_INFOA;

typedef struct _WSANAMESPACE_INFOW {
        GUID NSProviderId;
        DWORD dwNameSpace;
        BOOL fActive;
        DWORD dwVersion;
        LPWSTR lpszIdentifier;
} WSANAMESPACE_INFOW, *PWSANAMESPACE_INFOW, *LPWSANAMESPACE_INFOW;






typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;


typedef struct _WSAPROTOCOLCHAIN {
        int ChainLen;
        DWORD ChainEntries[7];
} WSAPROTOCOLCHAIN, *LPWSAPROTOCOLCHAIN;



typedef struct _WSAPROTOCOL_INFOA {
        DWORD dwServiceFlags1;
        DWORD dwServiceFlags2;
        DWORD dwServiceFlags3;
        DWORD dwServiceFlags4;
        DWORD dwProviderFlags;
        GUID ProviderId;
        DWORD dwCatalogEntryId;
        WSAPROTOCOLCHAIN ProtocolChain;
        int iVersion;
        int iAddressFamily;
        int iMaxSockAddr;
        int iMinSockAddr;
        int iSocketType;
        int iProtocol;
        int iProtocolMaxOffset;
        int iNetworkByteOrder;
        int iSecurityScheme;
        DWORD dwMessageSize;
        DWORD dwProviderReserved;
        CHAR szProtocol[255 +1];
} WSAPROTOCOL_INFOA, *LPWSAPROTOCOL_INFOA;

typedef struct _WSAPROTOCOL_INFOW {
        DWORD dwServiceFlags1;
        DWORD dwServiceFlags2;
        DWORD dwServiceFlags3;
        DWORD dwServiceFlags4;
        DWORD dwProviderFlags;
        GUID ProviderId;
        DWORD dwCatalogEntryId;
        WSAPROTOCOLCHAIN ProtocolChain;
        int iVersion;
        int iAddressFamily;
        int iMaxSockAddr;
        int iMinSockAddr;
        int iSocketType;
        int iProtocol;
        int iProtocolMaxOffset;
        int iNetworkByteOrder;
        int iSecurityScheme;
        DWORD dwMessageSize;
        DWORD dwProviderReserved;
        WCHAR szProtocol[255 +1];
} WSAPROTOCOL_INFOW, * LPWSAPROTOCOL_INFOW;

typedef int (__attribute__((__stdcall__)) *LPCONDITIONPROC)(LPWSABUF, LPWSABUF, LPQOS, LPQOS, LPWSABUF, LPWSABUF, GROUP *, DWORD);
typedef void (__attribute__((__stdcall__)) *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(DWORD, DWORD, LPWSAOVERLAPPED, DWORD);






typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;



typedef enum _WSACOMPLETIONTYPE {
    NSP_NOTIFY_IMMEDIATELY = 0,
    NSP_NOTIFY_HWND,
    NSP_NOTIFY_EVENT,
    NSP_NOTIFY_PORT,
    NSP_NOTIFY_APC
} WSACOMPLETIONTYPE, * PWSACOMPLETIONTYPE, * LPWSACOMPLETIONTYPE;
typedef struct _WSACOMPLETION {
    WSACOMPLETIONTYPE Type;
    union {
        struct {
            HWND hWnd;
            UINT uMsg;
            WPARAM context;
        } WindowMessage;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
        } Event;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;
        } Apc;
        struct {
            LPWSAOVERLAPPED lpOverlapped;
            HANDLE hPort;
            ULONG_PTR Key;
        } Port;
    } Parameters;
} WSACOMPLETION, *PWSACOMPLETION, *LPWSACOMPLETION;
# 1056 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
SOCKET __attribute__((__stdcall__)) WSAAccept(SOCKET, struct sockaddr *, LPINT, LPCONDITIONPROC, DWORD);
INT __attribute__((__stdcall__)) WSAAddressToStringA(LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFOA, LPSTR, LPDWORD);
INT __attribute__((__stdcall__)) WSAAddressToStringW(LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFOW, LPWSTR, LPDWORD);
BOOL __attribute__((__stdcall__)) WSACloseEvent(HANDLE);
int __attribute__((__stdcall__)) WSAConnect(SOCKET, const struct sockaddr *, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS);
HANDLE __attribute__((__stdcall__)) WSACreateEvent(void);
int __attribute__((__stdcall__)) WSADuplicateSocketA(SOCKET, DWORD, LPWSAPROTOCOL_INFOA);
int __attribute__((__stdcall__)) WSADuplicateSocketW(SOCKET, DWORD, LPWSAPROTOCOL_INFOW);
INT __attribute__((__stdcall__)) WSAEnumNameSpaceProvidersA(LPDWORD, LPWSANAMESPACE_INFOA);
INT __attribute__((__stdcall__)) WSAEnumNameSpaceProvidersW(LPDWORD, LPWSANAMESPACE_INFOW);
int __attribute__((__stdcall__)) WSAEnumNetworkEvents(SOCKET, HANDLE, LPWSANETWORKEVENTS);
int __attribute__((__stdcall__)) WSAEnumProtocolsA(LPINT, LPWSAPROTOCOL_INFOA, LPDWORD);
int __attribute__((__stdcall__)) WSAEnumProtocolsW(LPINT, LPWSAPROTOCOL_INFOW, LPDWORD);
int __attribute__((__stdcall__)) WSAEventSelect(SOCKET, HANDLE, long);
BOOL __attribute__((__stdcall__)) WSAGetOverlappedResult(SOCKET, LPWSAOVERLAPPED, LPDWORD, BOOL, LPDWORD);
BOOL __attribute__((__stdcall__)) WSAGetQOSByName(SOCKET, LPWSABUF, LPQOS);
INT __attribute__((__stdcall__)) WSAGetServiceClassInfoA(LPGUID, LPGUID, LPDWORD, LPWSASERVICECLASSINFOA);
INT __attribute__((__stdcall__)) WSAGetServiceClassInfoW(LPGUID, LPGUID, LPDWORD, LPWSASERVICECLASSINFOW);
INT __attribute__((__stdcall__)) WSAGetServiceClassNameByClassIdA(LPGUID, LPSTR, LPDWORD);
INT __attribute__((__stdcall__)) WSAGetServiceClassNameByClassIdW(LPGUID, LPWSTR, LPDWORD);
int __attribute__((__stdcall__)) WSAHtonl(SOCKET, unsigned long, unsigned long *);
int __attribute__((__stdcall__)) WSAHtons(SOCKET, unsigned short, unsigned short *);
INT __attribute__((__stdcall__)) WSAInstallServiceClassA(LPWSASERVICECLASSINFOA);
INT __attribute__((__stdcall__)) WSAInstallServiceClassW(LPWSASERVICECLASSINFOW);
int __attribute__((__stdcall__)) WSAIoctl(SOCKET, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
SOCKET __attribute__((__stdcall__)) WSAJoinLeaf(SOCKET, const struct sockaddr *, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS, DWORD);
INT __attribute__((__stdcall__)) WSALookupServiceBeginA(LPWSAQUERYSETA, DWORD, LPHANDLE);
INT __attribute__((__stdcall__)) WSALookupServiceBeginW(LPWSAQUERYSETW lpqsRestrictions, DWORD, LPHANDLE);
INT __attribute__((__stdcall__)) WSALookupServiceNextA(HANDLE, DWORD, LPDWORD, LPWSAQUERYSETA);
INT __attribute__((__stdcall__)) WSALookupServiceNextW(HANDLE, DWORD, LPDWORD, LPWSAQUERYSETW);
INT __attribute__((__stdcall__)) WSALookupServiceEnd(HANDLE);
int __attribute__((__stdcall__)) WSANSPIoctl(HANDLE,DWORD,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPWSACOMPLETION);
int __attribute__((__stdcall__)) WSANtohl(SOCKET, unsigned long, unsigned long *);
int __attribute__((__stdcall__)) WSANtohs(SOCKET, unsigned short, unsigned short *);
int __attribute__((__stdcall__)) WSARecv(SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
int __attribute__((__stdcall__)) WSARecvDisconnect(SOCKET, LPWSABUF);
int __attribute__((__stdcall__)) WSARecvFrom(SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, struct sockaddr *, LPINT, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
INT __attribute__((__stdcall__)) WSARemoveServiceClass(LPGUID);
BOOL __attribute__((__stdcall__)) WSAResetEvent(HANDLE);
int __attribute__((__stdcall__)) WSASend(SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
int __attribute__((__stdcall__)) WSASendDisconnect(SOCKET, LPWSABUF);
int __attribute__((__stdcall__)) WSASendTo(SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, const struct sockaddr *, int, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
BOOL __attribute__((__stdcall__)) WSASetEvent(HANDLE);
INT __attribute__((__stdcall__)) WSASetServiceA(LPWSAQUERYSETA, WSAESETSERVICEOP, DWORD);
INT __attribute__((__stdcall__)) WSASetServiceW(LPWSAQUERYSETW, WSAESETSERVICEOP, DWORD);
SOCKET __attribute__((__stdcall__)) WSASocketA(int, int, int, LPWSAPROTOCOL_INFOA, GROUP, DWORD);
SOCKET __attribute__((__stdcall__)) WSASocketW(int, int, int, LPWSAPROTOCOL_INFOW, GROUP, DWORD);
INT __attribute__((__stdcall__)) WSAStringToAddressA(LPSTR, INT, LPWSAPROTOCOL_INFOA, LPSOCKADDR, LPINT);
INT __attribute__((__stdcall__)) WSAStringToAddressW(LPWSTR, INT, LPWSAPROTOCOL_INFOW, LPSOCKADDR, LPINT);
DWORD __attribute__((__stdcall__)) WSAWaitForMultipleEvents(DWORD, const HANDLE *, BOOL, DWORD, BOOL);
typedef SOCKET (__attribute__((__stdcall__)) *LPFN_WSAACCEPT)(SOCKET, struct sockaddr *, LPINT, LPCONDITIONPROC, DWORD);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAADDRESSTOSTRINGA)(LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFOA, LPSTR, LPDWORD);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAADDRESSTOSTRINGW)(LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFOW, LPWSTR, LPDWORD);
typedef BOOL (__attribute__((__stdcall__)) *LPFN_WSACLOSEEVENT)(HANDLE);
typedef int (__attribute__((__stdcall__)) *LPFN_WSACONNECT)(SOCKET, const struct sockaddr *, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS);
typedef HANDLE (__attribute__((__stdcall__)) *LPFN_WSACREATEEVENT)(void);
typedef int (__attribute__((__stdcall__)) *LPFN_WSADUPLICATESOCKETA)(SOCKET, DWORD, LPWSAPROTOCOL_INFOA);
typedef int (__attribute__((__stdcall__)) *LPFN_WSADUPLICATESOCKETW)(SOCKET, DWORD, LPWSAPROTOCOL_INFOW);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAENUMNAMESPACEPROVIDERSA)(LPDWORD, LPWSANAMESPACE_INFOA);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAENUMNAMESPACEPROVIDERSW)(LPDWORD, LPWSANAMESPACE_INFOW);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAENUMNETWORKEVENTS)(SOCKET, HANDLE, LPWSANETWORKEVENTS);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAENUMPROTOCOLSA)(LPINT, LPWSAPROTOCOL_INFOA, LPDWORD);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAENUMPROTOCOLSW)(LPINT, LPWSAPROTOCOL_INFOW, LPDWORD);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAEVENTSELECT)(SOCKET, HANDLE, long);
typedef BOOL (__attribute__((__stdcall__)) *LPFN_WSAGETOVERLAPPEDRESULT)(SOCKET, LPWSAOVERLAPPED, LPDWORD, BOOL, LPDWORD);
typedef BOOL (__attribute__((__stdcall__)) *LPFN_WSAGETQOSBYNAME)(SOCKET, LPWSABUF, LPQOS);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAGETSERVICECLASSINFOA)(LPGUID, LPGUID, LPDWORD, LPWSASERVICECLASSINFOA);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAGETSERVICECLASSINFOW)(LPGUID, LPGUID, LPDWORD, LPWSASERVICECLASSINFOW);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA)(LPGUID, LPSTR, LPDWORD);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW)(LPGUID, LPWSTR, LPDWORD);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAHTONL)(SOCKET, unsigned long, unsigned long *);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAHTONS)(SOCKET, unsigned short, unsigned short *);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAINSTALLSERVICECLASSA)(LPWSASERVICECLASSINFOA);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAINSTALLSERVICECLASSW)(LPWSASERVICECLASSINFOW);
typedef int (__attribute__((__stdcall__)) *LPFN_WSAIOCTL)(SOCKET, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
typedef SOCKET (__attribute__((__stdcall__)) *LPFN_WSAJOINLEAF)(SOCKET, const struct sockaddr *, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS, DWORD);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSALOOKUPSERVICEBEGINA)(LPWSAQUERYSETA, DWORD, LPHANDLE);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSALOOKUPSERVICEBEGINW)(LPWSAQUERYSETW, DWORD, LPHANDLE);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSALOOKUPSERVICENEXTA)(HANDLE, DWORD, LPDWORD, LPWSAQUERYSETA);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSALOOKUPSERVICENEXTW)(HANDLE, DWORD, LPDWORD, LPWSAQUERYSETW);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSALOOKUPSERVICEEND)(HANDLE);
typedef int (__attribute__((__stdcall__)) *LPFN_WSANSPIoctl)(HANDLE, DWORD,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPWSACOMPLETION);
typedef int (__attribute__((__stdcall__)) *LPFN_WSANTOHL)(SOCKET, unsigned long, unsigned long *);
typedef int (__attribute__((__stdcall__)) *LPFN_WSANTOHS)(SOCKET, unsigned short, unsigned short *);
typedef int (__attribute__((__stdcall__)) *LPFN_WSARECV)(SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
typedef int (__attribute__((__stdcall__)) *LPFN_WSARECVDISCONNECT)(SOCKET, LPWSABUF);
typedef int (__attribute__((__stdcall__)) *LPFN_WSARECVFROM)(SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, struct sockaddr *, LPINT, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSAREMOVESERVICECLASS)(LPGUID);
typedef BOOL (__attribute__((__stdcall__)) *LPFN_WSARESETEVENT)(HANDLE);
typedef int (__attribute__((__stdcall__)) *LPFN_WSASEND)(SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
typedef int (__attribute__((__stdcall__)) *LPFN_WSASENDDISCONNECT)(SOCKET, LPWSABUF);
typedef int (__attribute__((__stdcall__)) *LPFN_WSASENDTO)(SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, const struct sockaddr *, int, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE);
typedef BOOL (__attribute__((__stdcall__)) *LPFN_WSASETEVENT)(HANDLE);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSASETSERVICEA)(LPWSAQUERYSETA, WSAESETSERVICEOP, DWORD);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSASETSERVICEW)(LPWSAQUERYSETW, WSAESETSERVICEOP, DWORD);
typedef SOCKET (__attribute__((__stdcall__)) *LPFN_WSASOCKETA)(int, int, int, LPWSAPROTOCOL_INFOA, GROUP, DWORD);
typedef SOCKET (__attribute__((__stdcall__)) *LPFN_WSASOCKETW)(int, int, int, LPWSAPROTOCOL_INFOW, GROUP, DWORD);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSASTRINGTOADDRESSA)(LPSTR, INT, LPWSAPROTOCOL_INFOA, LPSOCKADDR, LPINT);
typedef INT (__attribute__((__stdcall__)) *LPFN_WSASTRINGTOADDRESSW)(LPWSTR, INT, LPWSAPROTOCOL_INFOW, LPSOCKADDR, LPINT);
typedef DWORD (__attribute__((__stdcall__)) *LPFN_WSAWAITFORMULTIPLEEVENTS)(DWORD, const HANDLE *, BOOL, DWORD, BOOL);
# 1210 "C:/PROGRA~1/WIDEST~1/gcc/include/winsock2.h" 3
}
# 98 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 109 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 3


#pragma pack(push,8)

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 1 3
# 8 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcndr.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcndr.h" 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnsip.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcnsip.h" 3



extern "C" {

typedef struct {
        RPC_NS_HANDLE LookupContext;
        RPC_BINDING_HANDLE ProposedHandle;
        RPC_BINDING_VECTOR *Bindings;
} RPC_IMPORT_CONTEXT_P,*PRPC_IMPORT_CONTEXT_P;
RPC_STATUS __attribute__((__stdcall__)) I_RpcNsGetBuffer( PRPC_MESSAGE);
RPC_STATUS __attribute__((__stdcall__)) I_RpcNsSendReceive( PRPC_MESSAGE, RPC_BINDING_HANDLE*);
void __attribute__((__stdcall__)) I_RpcNsRaiseException( PRPC_MESSAGE, RPC_STATUS);
RPC_STATUS __attribute__((__stdcall__)) I_RpcReBindBuffer( PRPC_MESSAGE);
RPC_STATUS __attribute__((__stdcall__)) I_NsServerBindSearch(void);
RPC_STATUS __attribute__((__stdcall__)) I_NsClientBindSearch(void);
void __attribute__((__stdcall__)) I_NsClientBindDone(void);

}
# 11 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcndr.h" 2 3

extern "C" {

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/objfwd.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/objfwd.h" 3



extern "C" {

typedef struct IMoniker *LPMONIKER;
typedef struct IStream *LPSTREAM;
typedef struct IMarshal *LPMARSHAL;
typedef struct IMalloc *LPMALLOC;
typedef struct IMallocSpy *LPMALLOCSPY;
typedef struct IMessageFilter *LPMESSAGEFILTER;
typedef struct IPersist *LPPERSIST;
typedef struct IPersistStream *LPPERSISTSTREAM;
typedef struct IRunningObjectTable *LPRUNNINGOBJECTTABLE;
typedef struct IBindCtx *LPBINDCTX,*LPBC;
typedef struct IAdviseSink *LPADVISESINK;
typedef struct IAdviseSink2 *LPADVISESINK2;
typedef struct IDataObject *LPDATAOBJECT;
typedef struct IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct IEnumMoniker *LPENUMMONIKER;
typedef struct IEnumFORMATETC *LPENUMFORMATETC;
typedef struct IEnumSTATDATA *LPENUMSTATDATA;
typedef struct IEnumSTATSTG *LPENUMSTATSTG;
typedef struct IEnumSTATPROPSTG LPENUMSTATPROPSTG;
typedef struct IEnumString *LPENUMSTRING;
typedef struct IEnumUnknown *LPENUMUNKNOWN;
typedef struct IStorage *LPSTORAGE;
typedef struct IPersistStorage *LPPERSISTSTORAGE;
typedef struct ILockBytes *LPLOCKBYTES;
typedef struct IStdMarshalInfo *LPSTDMARSHALINFO;
typedef struct IExternalConnection *LPEXTERNALCONNECTION;
typedef struct IRunnableObject *LPRUNNABLEOBJECT;
typedef struct IROTData *LPROTDATA;
typedef struct IPersistFile *LPPERSISTFILE;
typedef struct IRootStorage *LPROOTSTORAGE;
typedef struct IRpcChannelBuffer *LPRPCCHANNELBUFFER;
typedef struct IRpcProxyBuffer *LPRPCPROXYBUFFER;
typedef struct IRpcStubBuffer *LPRPCSTUBBUFFER;
typedef struct IPropertyStorage *LPPROPERTYSTORAGE;
typedef struct IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
typedef struct IPropertySetStorage *LPPROPERTYSETSTORAGE;
typedef struct IClientSecurity *LPCLIENTSECURITY;
typedef struct IServerSecurity *LPSERVERSECURITY;
typedef struct IClassActivator *LPCLASSACTIVATOR;
typedef struct IFillLockBytes *LPFILLLOCKBYTES;
typedef struct IProgressNotify *LPPROGRESSNOTIFY;
typedef struct ILayoutStorage *LPLAYOUTSTORAGE;

}
# 15 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcndr.h" 2 3
# 50 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcndr.h" 3
typedef unsigned char byte;
# 94 "C:/PROGRA~1/WIDEST~1/gcc/include/rpcndr.h" 3
typedef void *NDR_CCONTEXT;
typedef struct {
        void *pad[2];
        void *userContext;
} *NDR_SCONTEXT;
typedef void (__attribute__((__stdcall__)) *NDR_RUNDOWN)(void*);
typedef struct _SCONTEXT_QUEUE {
        unsigned long NumberOfObjects;
        NDR_SCONTEXT *ArrayOfObjects;
} SCONTEXT_QUEUE,*PSCONTEXT_QUEUE;
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;
typedef unsigned char *RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;
typedef void(__attribute__((__stdcall__)) *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE*);
typedef const unsigned char *PFORMAT_STRING;
typedef struct {
        long Dimension;
        unsigned long *BufferConformanceMark;
        unsigned long *BufferVarianceMark;
        unsigned long *MaxCountArray;
        unsigned long *OffsetArray;
        unsigned long *ActualCountArray;
} ARRAY_INFO,*PARRAY_INFO;

RPC_BINDING_HANDLE __attribute__((__stdcall__)) NDRCContextBinding(NDR_CCONTEXT);
void __attribute__((__stdcall__)) NDRCContextMarshall(NDR_CCONTEXT,void*);
void __attribute__((__stdcall__)) NDRCContextUnmarshall(NDR_CCONTEXT*,RPC_BINDING_HANDLE,void*,unsigned long);
void __attribute__((__stdcall__)) NDRSContextMarshall(NDR_SCONTEXT,void*,NDR_RUNDOWN);
NDR_SCONTEXT __attribute__((__stdcall__)) NDRSContextUnmarshall(void*pBuff,unsigned long);
void __attribute__((__stdcall__)) RpcSsDestroyClientContext(void**);
void __attribute__((__stdcall__)) NDRcopy(void*,void*,unsigned int);
unsigned int __attribute__((__stdcall__)) MIDL_wchar_strlen(wchar_t*);
void __attribute__((__stdcall__)) MIDL_wchar_strcpy(void*,wchar_t*);
void __attribute__((__stdcall__)) char_from_ndr(PRPC_MESSAGE,unsigned char*);
void __attribute__((__stdcall__)) char_array_from_ndr(PRPC_MESSAGE,unsigned long,unsigned long,unsigned char*);
void __attribute__((__stdcall__)) short_from_ndr(PRPC_MESSAGE,unsigned short*);
void __attribute__((__stdcall__)) short_array_from_ndr(PRPC_MESSAGE,unsigned long,unsigned long,unsigned short*);
void __attribute__((__stdcall__)) short_from_ndr_temp(unsigned char**,unsigned short*,unsigned long);
void __attribute__((__stdcall__)) long_from_ndr(PRPC_MESSAGE,unsigned long*);
void __attribute__((__stdcall__)) long_array_from_ndr(PRPC_MESSAGE,unsigned long,unsigned long,unsigned long*);
void __attribute__((__stdcall__)) long_from_ndr_temp(unsigned char**,unsigned long*,unsigned long);
void __attribute__((__stdcall__)) enum_from_ndr(PRPC_MESSAGE,unsigned int*);
void __attribute__((__stdcall__)) float_from_ndr(PRPC_MESSAGE,void*);
void __attribute__((__stdcall__)) float_array_from_ndr(PRPC_MESSAGE,unsigned long,unsigned long,void*);
void __attribute__((__stdcall__)) double_from_ndr(PRPC_MESSAGE,void*);
void __attribute__((__stdcall__)) double_array_from_ndr(PRPC_MESSAGE,unsigned long,unsigned long,void*);
void __attribute__((__stdcall__)) hyper_from_ndr(PRPC_MESSAGE,long long*);
void __attribute__((__stdcall__)) hyper_array_from_ndr(PRPC_MESSAGE,unsigned long,unsigned long,long long*);
void __attribute__((__stdcall__)) hyper_from_ndr_temp(unsigned char**,long long*,unsigned long);
void __attribute__((__stdcall__)) data_from_ndr(PRPC_MESSAGE,void*,char*,unsigned char);
void __attribute__((__stdcall__)) data_into_ndr(void*,PRPC_MESSAGE,char*,unsigned char);
void __attribute__((__stdcall__)) tree_into_ndr(void*,PRPC_MESSAGE,char*,unsigned char);
void __attribute__((__stdcall__)) data_size_ndr(void*,PRPC_MESSAGE,char*,unsigned char);
void __attribute__((__stdcall__)) tree_size_ndr(void*,PRPC_MESSAGE,char*,unsigned char);
void __attribute__((__stdcall__)) tree_peek_ndr(PRPC_MESSAGE,unsigned char**,char*,unsigned char);
void *__attribute__((__stdcall__)) midl_allocate(int);

#pragma pack(push,4)
typedef struct _MIDL_STUB_MESSAGE {
        PRPC_MESSAGE RpcMsg;
        unsigned char *Buffer;
        unsigned char *BufferStart;
        unsigned char *BufferEnd;
        unsigned char *BufferMark;
        unsigned long BufferLength;
        unsigned long MemorySize;
        unsigned char *Memory;
        int IsClient;
        int ReuseBuffer;
        unsigned char *AllocAllNodesMemory;
        unsigned char *AllocAllNodesMemoryEnd;
        int IgnoreEmbeddedPointers;
        unsigned char *PointerBufferMark;
        unsigned char fBufferValid;
        unsigned char Unused;
        unsigned long MaxCount;
        unsigned long Offset;
        unsigned long ActualCount;
        void*(__attribute__((__stdcall__)) *pfnAllocate)(unsigned int);
        void(__attribute__((__stdcall__)) *pfnFree)(void*);
        unsigned char *StackTop;
        unsigned char *pPresentedType;
        unsigned char *pTransmitType;
        handle_t SavedHandle;
        const struct _MIDL_STUB_DESC *StubDesc;
        struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
        unsigned long FullPtrRefId;
        int fCheckBounds;
        int fInDontFree :1;
        int fDontCallFreeInst :1;
        int fInOnlyParam :1;
        int fHasReturn :1;
        unsigned long dwDestContext;
        void*pvDestContext;
        NDR_SCONTEXT *SavedContextHandles;
        long ParamNumber;
        struct IRpcChannelBuffer *pRpcChannelBuffer;
        PARRAY_INFO pArrayInfo;
        unsigned long *SizePtrCountArray;
        unsigned long *SizePtrOffsetArray;
        unsigned long *SizePtrLengthArray;
        void*pArgQueue;
        unsigned long dwStubPhase;
        unsigned long Reserved[5];
} MIDL_STUB_MESSAGE,*PMIDL_STUB_MESSAGE;
#pragma pack(pop)
typedef void*(__attribute__((__stdcall__)) *GENERIC_BINDING_ROUTINE)(void*);
typedef void (__attribute__((__stdcall__)) *GENERIC_UNBIND_ROUTINE)(void*,unsigned char*);
typedef struct _GENERIC_BINDING_ROUTINE_PAIR {
        GENERIC_BINDING_ROUTINE pfnBind;
        GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_ROUTINE_PAIR,*PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct __GENERIC_BINDING_INFO {
        void *pObj;
        unsigned int Size;
        GENERIC_BINDING_ROUTINE pfnBind;
        GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_INFO,*PGENERIC_BINDING_INFO;
typedef void(__attribute__((__stdcall__)) *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
typedef struct _XMIT_ROUTINE_QUINTUPLE {
        XMIT_HELPER_ROUTINE pfnTranslateToXmit;
        XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
        XMIT_HELPER_ROUTINE pfnFreeXmit;
        XMIT_HELPER_ROUTINE pfnFreeInst;
} XMIT_ROUTINE_QUINTUPLE,*PXMIT_ROUTINE_QUINTUPLE;
typedef struct _MALLOC_FREE_STRUCT {
void*(__attribute__((__stdcall__)) *pfnAllocate)(unsigned int);
void(__attribute__((__stdcall__)) *pfnFree)(void*);
} MALLOC_FREE_STRUCT;
typedef struct _COMM_FAULT_OFFSETS {
        short CommOffset;
        short FaultOffset;
} COMM_FAULT_OFFSETS;
typedef struct _MIDL_STUB_DESC {
        void*RpcInterfaceInformation;
        void*(__attribute__((__stdcall__)) *pfnAllocate)(unsigned int);
        void(__attribute__((__stdcall__)) *pfnFree)(void*);
        union {
                handle_t *pAutoHandle;
                handle_t *pPrimitiveHandle;
                PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;
        const NDR_RUNDOWN *apfnNdrRundownRoutines;
        const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
        const EXPR_EVAL *apfnExprEval;
        const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
        const unsigned char *pFormatTypes;
        int fCheckBounds;
        unsigned long Version;
        MALLOC_FREE_STRUCT *pMallocFreeStruct;
        long MIDLVersion;
        const COMM_FAULT_OFFSETS *CommFaultOffsets;
} MIDL_STUB_DESC;
typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;
typedef void*PMIDL_XMIT_TYPE;
typedef struct _MIDL_FORMAT_STRING {
        short Pad;
        unsigned char Format[1];
} MIDL_FORMAT_STRING;
typedef void(__attribute__((__stdcall__)) *STUB_THUNK)(PMIDL_STUB_MESSAGE);
typedef long(__attribute__((__stdcall__)) *SERVER_ROUTINE)(void);
typedef struct _MIDL_SERVER_INFO_ {
        PMIDL_STUB_DESC pStubDesc;
        const SERVER_ROUTINE *DispatchTable;
        PFORMAT_STRING ProcString;
        const unsigned short *FmtStringOffset;
        const STUB_THUNK *ThunkTable;
} MIDL_SERVER_INFO,*PMIDL_SERVER_INFO;
typedef struct _MIDL_STUBLESS_PROXY_INFO {
        PMIDL_STUB_DESC pStubDesc;
        PFORMAT_STRING ProcFormatString;
        const unsigned short *FormatStringOffset;
} MIDL_STUBLESS_PROXY_INFO;
typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
typedef union _CLIENT_CALL_RETURN {
        void *Pointer;
        long Simple;
} CLIENT_CALL_RETURN;
typedef enum { XLAT_SERVER = 1,XLAT_CLIENT } XLAT_SIDE;
typedef struct _FULL_PTR_TO_REFID_ELEMENT {
        struct _FULL_PTR_TO_REFID_ELEMENT *Next;
        void*Pointer;
        unsigned long RefId;
        unsigned char State;
} FULL_PTR_TO_REFID_ELEMENT,*PFULL_PTR_TO_REFID_ELEMENT;
typedef struct _FULL_PTR_XLAT_TABLES {
        struct {
                void **XlatTable;
                unsigned char *StateTable;
                unsigned long NumberOfEntries;
        } RefIdToPointer;
        struct {
                PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
                unsigned long NumberOfBuckets;
                unsigned long HashMask;
        } PointerToRefId;
        unsigned long NextRefId;
        XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES,*PFULL_PTR_XLAT_TABLES;
void __attribute__((__stdcall__)) NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE,unsigned char*,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrPointerMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING pFormat);
unsigned char *__attribute__((__stdcall__)) NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrConformantStructMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrHardStructMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrComplexStructMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrConformantStringMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned char *__attribute__((__stdcall__)) NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrClientContextMarshall(PMIDL_STUB_MESSAGE,NDR_CCONTEXT,int);
void __attribute__((__stdcall__)) NdrServerContextMarshall(PMIDL_STUB_MESSAGE,NDR_SCONTEXT,NDR_RUNDOWN);
void __attribute__((__stdcall__)) NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE,unsigned char*,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrPointerUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrHardStructUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
unsigned char *__attribute__((__stdcall__)) NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE,unsigned char**,PFORMAT_STRING,unsigned char);
void __attribute__((__stdcall__)) NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE,NDR_CCONTEXT*,RPC_BINDING_HANDLE);
NDR_SCONTEXT __attribute__((__stdcall__)) NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE);
void __attribute__((__stdcall__)) NdrPointerBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrHardStructBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrContextHandleSize(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrPointerMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrHardStructMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
unsigned long __attribute__((__stdcall__)) NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrPointerFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrSimpleStructFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantStructFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrHardStructFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrComplexStructFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrFixedArrayFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantArrayFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrVaryingArrayFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrComplexArrayFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrByteCountPointerFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrInterfacePointerFree(PMIDL_STUB_MESSAGE,unsigned char*,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrConvert(PMIDL_STUB_MESSAGE,PFORMAT_STRING);
void __attribute__((__stdcall__)) NdrClientInitializeNew(PRPC_MESSAGE,PMIDL_STUB_MESSAGE,PMIDL_STUB_DESC,unsigned int);
unsigned char *__attribute__((__stdcall__)) NdrServerInitializeNew(PRPC_MESSAGE,PMIDL_STUB_MESSAGE,PMIDL_STUB_DESC);
void __attribute__((__stdcall__)) NdrClientInitialize(PRPC_MESSAGE,PMIDL_STUB_MESSAGE,PMIDL_STUB_DESC,unsigned int);
unsigned char *__attribute__((__stdcall__)) NdrServerInitialize(PRPC_MESSAGE,PMIDL_STUB_MESSAGE,PMIDL_STUB_DESC);
unsigned char *__attribute__((__stdcall__)) NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE,PMIDL_STUB_DESC,PRPC_MESSAGE);
void __attribute__((__stdcall__)) NdrServerInitializeMarshall(PRPC_MESSAGE,PMIDL_STUB_MESSAGE);
unsigned char *__attribute__((__stdcall__)) NdrGetBuffer(PMIDL_STUB_MESSAGE,unsigned long,RPC_BINDING_HANDLE);
unsigned char *__attribute__((__stdcall__)) NdrNsGetBuffer(PMIDL_STUB_MESSAGE,unsigned long,RPC_BINDING_HANDLE);
unsigned char *__attribute__((__stdcall__)) NdrSendReceive(PMIDL_STUB_MESSAGE,unsigned char*);
unsigned char *__attribute__((__stdcall__)) NdrNsSendReceive(PMIDL_STUB_MESSAGE,unsigned char*,RPC_BINDING_HANDLE*);
void __attribute__((__stdcall__)) NdrFreeBuffer(PMIDL_STUB_MESSAGE);
CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall(PMIDL_STUB_DESC,PFORMAT_STRING,...);
typedef enum {
        STUB_UNMARSHAL,
        STUB_CALL_SERVER,
        STUB_MARSHAL,
        STUB_CALL_SERVER_NO_HRESULT
} STUB_PHASE;
typedef enum {
        PROXY_CALCSIZE,
        PROXY_GETBUFFER,
        PROXY_MARSHAL,
        PROXY_SENDRECEIVE,
        PROXY_UNMARSHAL
} PROXY_PHASE;
long __attribute__((__stdcall__)) NdrStubCall(struct IRpcStubBuffer*,struct IRpcChannelBuffer*,PRPC_MESSAGE,unsigned long*);
void __attribute__((__stdcall__)) NdrServerCall(PRPC_MESSAGE);
int __attribute__((__stdcall__)) NdrServerUnmarshall(struct IRpcChannelBuffer*,PRPC_MESSAGE,PMIDL_STUB_MESSAGE,PMIDL_STUB_DESC,PFORMAT_STRING,void*);
void __attribute__((__stdcall__)) NdrServerMarshall(struct IRpcStubBuffer*,struct IRpcChannelBuffer*,PMIDL_STUB_MESSAGE,PFORMAT_STRING);
RPC_STATUS __attribute__((__stdcall__)) NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE,unsigned long*,unsigned long*,RPC_STATUS);
int __attribute__((__stdcall__)) NdrSH_UPDecision(PMIDL_STUB_MESSAGE,unsigned char**,RPC_BUFPTR);
int __attribute__((__stdcall__)) NdrSH_TLUPDecision(PMIDL_STUB_MESSAGE,unsigned char**);
int __attribute__((__stdcall__)) NdrSH_TLUPDecisionBuffer(PMIDL_STUB_MESSAGE,unsigned char**);
int __attribute__((__stdcall__)) NdrSH_IfAlloc(PMIDL_STUB_MESSAGE,unsigned char**,unsigned long);
int __attribute__((__stdcall__)) NdrSH_IfAllocRef(PMIDL_STUB_MESSAGE,unsigned char**,unsigned long);
int __attribute__((__stdcall__)) NdrSH_IfAllocSet(PMIDL_STUB_MESSAGE,unsigned char**,unsigned long);
RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_IfCopy(PMIDL_STUB_MESSAGE,unsigned char**,unsigned long);
RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_IfAllocCopy(PMIDL_STUB_MESSAGE,unsigned char**,unsigned long);
unsigned long __attribute__((__stdcall__)) NdrSH_Copy(unsigned char*,unsigned char*,unsigned long);
void __attribute__((__stdcall__)) NdrSH_IfFree(PMIDL_STUB_MESSAGE,unsigned char*);
RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_StringMarshall(PMIDL_STUB_MESSAGE,unsigned char*,unsigned long,int);
RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_StringUnMarshall(PMIDL_STUB_MESSAGE,unsigned char**,int);
typedef void *RPC_SS_THREAD_HANDLE;
typedef void* __attribute__((__stdcall__)) RPC_CLIENT_ALLOC(unsigned int);
typedef void __attribute__((__stdcall__)) RPC_CLIENT_FREE(void*);
void*__attribute__((__stdcall__)) RpcSsAllocate(unsigned int);
void __attribute__((__stdcall__)) RpcSsDisableAllocate(void);
void __attribute__((__stdcall__)) RpcSsEnableAllocate(void);
void __attribute__((__stdcall__)) RpcSsFree(void*);
RPC_SS_THREAD_HANDLE __attribute__((__stdcall__)) RpcSsGetThreadHandle(void);
void __attribute__((__stdcall__)) RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC*,RPC_CLIENT_FREE*);
void __attribute__((__stdcall__)) RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE);
void __attribute__((__stdcall__)) RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC*,RPC_CLIENT_FREE*,RPC_CLIENT_ALLOC**,RPC_CLIENT_FREE**);
void*__attribute__((__stdcall__)) RpcSmAllocate(unsigned int,RPC_STATUS*);
RPC_STATUS __attribute__((__stdcall__)) RpcSmClientFree(void*);
RPC_STATUS __attribute__((__stdcall__)) RpcSmDestroyClientContext(void**);
RPC_STATUS __attribute__((__stdcall__)) RpcSmDisableAllocate(void);
RPC_STATUS __attribute__((__stdcall__)) RpcSmEnableAllocate(void);
RPC_STATUS __attribute__((__stdcall__)) RpcSmFree(void*);
RPC_SS_THREAD_HANDLE __attribute__((__stdcall__)) RpcSmGetThreadHandle(RPC_STATUS*);
RPC_STATUS __attribute__((__stdcall__)) RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC*,RPC_CLIENT_FREE*);
RPC_STATUS __attribute__((__stdcall__)) RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE);
RPC_STATUS __attribute__((__stdcall__)) RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC*,RPC_CLIENT_FREE*,RPC_CLIENT_ALLOC**,RPC_CLIENT_FREE**);
void __attribute__((__stdcall__)) NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE);
void __attribute__((__stdcall__)) NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE);
void __attribute__((__stdcall__)) NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE);
void*__attribute__((__stdcall__)) NdrRpcSmClientAllocate(unsigned int);
void __attribute__((__stdcall__)) NdrRpcSmClientFree(void*);
void*__attribute__((__stdcall__)) NdrRpcSsDefaultAllocate(unsigned int);
void __attribute__((__stdcall__)) NdrRpcSsDefaultFree(void*);
PFULL_PTR_XLAT_TABLES __attribute__((__stdcall__)) NdrFullPointerXlatInit(unsigned long,XLAT_SIDE);
void __attribute__((__stdcall__)) NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES);
int __attribute__((__stdcall__)) NdrFullPointerQueryPointer(PFULL_PTR_XLAT_TABLES,void*,unsigned char,unsigned long*);
int __attribute__((__stdcall__)) NdrFullPointerQueryRefId(PFULL_PTR_XLAT_TABLES,unsigned long,unsigned char,void**);
void __attribute__((__stdcall__)) NdrFullPointerInsertRefId(PFULL_PTR_XLAT_TABLES,unsigned long,void*);
int __attribute__((__stdcall__)) NdrFullPointerFree(PFULL_PTR_XLAT_TABLES,void*);
void*__attribute__((__stdcall__)) NdrAllocate(PMIDL_STUB_MESSAGE,unsigned int);
void __attribute__((__stdcall__)) NdrClearOutParameters(PMIDL_STUB_MESSAGE,PFORMAT_STRING,void*);
void*__attribute__((__stdcall__)) NdrOleAllocate(unsigned int);
void __attribute__((__stdcall__)) NdrOleFree(void*);

}
# 9 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 1 3
# 38 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 39 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 2 3
# 77 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
extern "C" {
# 86 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
extern int _argc;
extern char** _argv;




extern int* __p___argc(void);
extern char*** __p___argv(void);
extern wchar_t*** __p___wargv(void);
# 129 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
   extern __attribute__((dllimport)) int __mb_cur_max;
# 153 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
int* _errno(void);


int* __doserrno(void);







  extern char *** __p__environ(void);
  extern wchar_t *** __p__wenviron(void);
# 187 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
  extern __attribute__((dllimport)) int _sys_nerr;
# 211 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
extern __attribute__((dllimport)) char* _sys_errlist[];
# 225 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
extern unsigned int* __p__osver(void);
extern unsigned int* __p__winver(void);
extern unsigned int* __p__winmajor(void);
extern unsigned int* __p__winminor(void);
# 269 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
char** __p__pgmptr(void);

wchar_t** __p__wpgmptr(void);
# 292 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
double atof (const char*);
int atoi (const char*);
long atol (const char*);
int _wtoi (const wchar_t *);
long _wtol (const wchar_t *);

double strtod (const char*, char**);

extern __inline__ float strtof (const char *nptr, char **endptr)
  { return (strtod (nptr, endptr));}


long strtol (const char*, char**, int);
unsigned long strtoul (const char*, char**, int);



double wcstod (const wchar_t*, wchar_t**);

extern __inline__ float wcstof( const wchar_t *nptr, wchar_t **endptr)
{ return (wcstod(nptr, endptr)); }


long wcstol (const wchar_t*, wchar_t**, int);
unsigned long wcstoul (const wchar_t*, wchar_t**, int);



size_t wcstombs (char*, const wchar_t*, size_t);
int wctomb (char*, wchar_t);

int mblen (const char*, size_t);
size_t mbstowcs (wchar_t*, const char*, size_t);
int mbtowc (wchar_t*, const char*, size_t);

int rand (void);
void srand (unsigned int);

void* calloc (size_t, size_t);
void* malloc (size_t);
void* realloc (void*, size_t);
void free (void*);

void abort (void) __attribute__ ((noreturn));
void exit (int) __attribute__ ((noreturn));
int atexit (void (*)(void));

int system (const char*);
char* getenv (const char*);

void* bsearch (const void*, const void*, size_t, size_t,
                 int (*)(const void*, const void*));
void qsort (const void*, size_t, size_t,
                 int (*)(const void*, const void*));

int abs (int);
long labs (long);
# 358 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

div_t div (int, int);
ldiv_t ldiv (long, long);







void _beep (unsigned int, unsigned int);
void _seterrormode (int);
void _sleep (unsigned long);

void _exit (int) __attribute__ ((noreturn));


void _Exit(int) __attribute__ ((noreturn));
extern __inline__ void _Exit(int status)
        { _exit(status); }


typedef int (* _onexit_t)(void);
_onexit_t _onexit( _onexit_t );

int _putenv (const char*);
void _searchenv (const char*, const char*, char*);


char* _ecvt (double, int, int*, int*);
char* _fcvt (double, int, int*, int*);
char* _gcvt (double, int, char*);

void _makepath (char*, const char*, const char*, const char*, const char*);
void _splitpath (const char*, char*, char*, char*, char*);
char* _fullpath (char*, const char*, size_t);


char* _itoa (int, char*, int);
char* _ltoa (long, char*, int);
char* _ultoa(unsigned long, char*, int);
wchar_t* _itow (int, wchar_t*, int);
wchar_t* _ltow (long, wchar_t*, int);
wchar_t* _ultow (unsigned long, wchar_t*, int);


long long _atoi64(const char *);
char* _i64toa(long long, char *, int);
char* _ui64toa(unsigned long long, char *, int);
long long _wtoi64(const wchar_t *);
wchar_t* _i64tow(long long, wchar_t *, int);
wchar_t* _ui64tow(unsigned long long, wchar_t *, int);

wchar_t* _wgetenv(const wchar_t*);
int _wputenv(const wchar_t*);
void _wsearchenv(const wchar_t*, const wchar_t*, wchar_t*);
void _wmakepath(wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*);
void _wsplitpath (const wchar_t*, wchar_t*, wchar_t*, wchar_t*, wchar_t*);
wchar_t* _wfullpath (wchar_t*, const wchar_t*, size_t);

unsigned int _rotl(unsigned int, int);
unsigned int _rotr(unsigned int, int);
unsigned long _lrotl(unsigned long, int);
unsigned long _lrotr(unsigned long, int);




int putenv (const char*);
void searchenv (const char*, const char*, char*);

char* itoa (int, char*, int);
char* ltoa (long, char*, int);


char* ecvt (double, int, int*, int*);
char* fcvt (double, int, int*, int*);
char* gcvt (double, int, char*);
# 447 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
typedef struct { long long quot, rem; } lldiv_t;

lldiv_t lldiv (long long, long long);

extern __inline__ long long llabs(long long _j)
  {return (_j >= 0 ? _j : -_j);}

long long strtoll (const char* __restrict__, char** __restrict, int);
unsigned long long strtoull (const char* __restrict__, char** __restrict__, int);


long long atoll (const char *);


long long wtoll(const wchar_t *);
char* lltoa(long long, char *, int);
char* ulltoa(unsigned long long , char *, int);
wchar_t* lltow(long long, wchar_t *, int);
wchar_t* ulltow(unsigned long long, wchar_t *, int);


extern __inline__ long long atoll (const char * _c)
        { return _atoi64 (_c); }
extern __inline__ char* lltoa(long long _n, char * _c, int _i)
        { return _i64toa (_n, _c, _i); }
extern __inline__ char* ulltoa(unsigned long long _n, char * _c, int _i)
        { return _ui64toa (_n, _c, _i); }
extern __inline__ long long wtoll(const wchar_t * _w)
        { return _wtoi64 (_w); }
extern __inline__ wchar_t* lltow(long long _n, wchar_t * _w, int _i)
        { return _i64tow (_n, _w, _i); }
extern __inline__ wchar_t* ulltow(unsigned long long _n, wchar_t * _w, int _i)
        { return _ui64tow (_n, _w, _i); }
# 492 "C:/PROGRA~1/WIDEST~1/gcc/include/stdlib.h" 3
}
# 10 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3
#pragma pack(push,8)
# 49 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 3
typedef enum tagREGCLS {
        REGCLS_SINGLEUSE = 0,
        REGCLS_MULTIPLEUSE = 1,
        REGCLS_MULTI_SEPARATE = 2
} REGCLS;
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 1 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 1 3
# 2 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 2 3
# 8 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 3



extern "C" {
# 29 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 3
typedef enum tagDVASPECT {
        DVASPECT_CONTENT=1,
        DVASPECT_THUMBNAIL=2,
        DVASPECT_ICON=4,
        DVASPECT_DOCPRINT=8
} DVASPECT;
typedef enum tagDVASPECT2 {
        DVASPECT_OPAQUE=16,
        DVASPECT_TRANSPARENT=32
} DVASPECT2;
typedef enum tagSTATFLAG {
        STATFLAG_DEFAULT=0,
        STATFLAG_NONAME=1
} STATFLAG;
typedef enum tagMEMCTX {
        MEMCTX_TASK=1,
        MEMCTX_SHARED,
        MEMCTX_MACSYSTEM,
        MEMCTX_UNKNOWN=-1,
        MEMCTX_SAME=-2
} MEMCTX;
typedef enum tagMSHCTX {
        MSHCTX_LOCAL,
        MSHCTX_NOSHAREDMEM,
        MSHCTX_DIFFERENTMACHINE,
        MSHCTX_INPROC
} MSHCTX;
typedef enum tagCLSCTX {
        CLSCTX_INPROC_SERVER=1,CLSCTX_INPROC_HANDLER=2,CLSCTX_LOCAL_SERVER=4,
        CLSCTX_INPROC_SERVER16=8,CLSCTX_REMOTE_SERVER=16
} CLSCTX;
typedef enum tagMSHLFLAGS {
        MSHLFLAGS_NORMAL,MSHLFLAGS_TABLESTRONG,MSHLFLAGS_TABLEWEAK
} MSHLFLAGS;
typedef struct _FLAGGED_WORD_BLOB {
        unsigned long fFlags;
        unsigned long clSize;
        unsigned short asData[1];
}FLAGGED_WORD_BLOB;


typedef WCHAR OLECHAR;
typedef LPWSTR LPOLESTR;
typedef LPCWSTR LPCOLESTR;







typedef unsigned short VARTYPE;
typedef short VARIANT_BOOL;
typedef VARIANT_BOOL _VARIANT_BOOL;


typedef OLECHAR *BSTR;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef BSTR *LPBSTR;
typedef LONG SCODE;
typedef void *HCONTEXT;
typedef union tagCY {
        __extension__ struct {
                unsigned long Lo;
                long Hi;
        };
        LONGLONG int64;
} CY;
typedef double DATE;
typedef struct tagBSTRBLOB {
        ULONG cbSize;
        PBYTE pData;
}BSTRBLOB;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct tagCLIPDATA {
        ULONG cbSize;
        long ulClipFmt;
        PBYTE pClipData;
}CLIPDATA;
typedef enum tagSTGC {
        STGC_DEFAULT,STGC_OVERWRITE,STGC_ONLYIFCURRENT,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE
}STGC;
typedef enum tagSTGMOVE {
        STGMOVE_MOVE,STGMOVE_COPY,STGMOVE_SHALLOWCOPY
}STGMOVE;
enum VARENUM {
        VT_EMPTY,VT_NULL,VT_I2,VT_I4,VT_R4,VT_R8,VT_CY,VT_DATE,VT_BSTR,VT_DISPATCH,
        VT_ERROR,VT_BOOL,VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_I1=16,VT_UI1,VT_UI2,VT_UI4,VT_I8,
        VT_UI8,VT_INT,VT_UINT,VT_VOID,VT_HRESULT,VT_PTR,VT_SAFEARRAY,VT_CARRAY,VT_USERDEFINED,
        VT_LPSTR,VT_LPWSTR,VT_RECORD=36,VT_FILETIME=64,VT_BLOB,VT_STREAM,VT_STORAGE,VT_STREAMED_OBJECT,
        VT_STORED_OBJECT,VT_BLOB_OBJECT,VT_CF,VT_CLSID,VT_BSTR_BLOB=0xfff,VT_VECTOR=0x1000,
        VT_ARRAY=0x2000,VT_BYREF=0x4000,VT_RESERVED=0x8000,VT_ILLEGAL= 0xffff,VT_ILLEGALMASKED=0xfff,
        VT_TYPEMASK=0xfff
};
# 132 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 3
typedef struct _BYTE_SIZEDARR {
        unsigned long clSize;
        byte *pData;
}BYTE_SIZEDARR;
typedef struct _SHORT_SIZEDARR {
        unsigned long clSize;
        unsigned short *pData;
}WORD_SIZEDARR;
typedef struct _LONG_SIZEDARR {
        unsigned long clSize;
        unsigned long *pData;
}DWORD_SIZEDARR;
typedef struct _HYPER_SIZEDARR {
        unsigned long clSize;
        long long *pData;
}HYPER_SIZEDARR;
typedef double DOUBLE;
typedef struct tagDEC {
        USHORT wReserved;
        __extension__ union {
                __extension__ struct {
                        BYTE scale;
                        BYTE sign;
                };
                USHORT signscale;
        } ;
        ULONG Hi32;
        __extension__ union {
                __extension__ struct {
                        ULONG Lo32;
                        ULONG Mid32;
                };
                ULONGLONG Lo64;
        } ;
} DECIMAL;
typedef void *HMETAFILEPICT;

}
# 55 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/unknwn.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/unknwn.h" 3




extern "C"{


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 1 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/rpc.h" 1 3
# 2 "C:/PROGRA~1/WIDEST~1/gcc/include/wtypes.h" 2 3
# 13 "C:/PROGRA~1/WIDEST~1/gcc/include/unknwn.h" 2 3

void * __attribute__((__stdcall__)) MIDL_user_allocate(size_t);
void __attribute__((__stdcall__)) MIDL_user_free(void*);
extern "C" const IID IID_IUnknown;
extern "C" const IID IID_IClassFactory;




struct IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
};
typedef IUnknown *LPUNKNOWN;





struct IClassFactory : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) CreateInstance( LPUNKNOWN,const IID&,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) LockServer( BOOL) =0;
};
typedef IClassFactory *LPCLASSFACTORY;

HRESULT __attribute__((__stdcall__)) IUnknown_QueryInterface_Proxy(IUnknown*,const IID&,void**);
void __attribute__((__stdcall__)) IUnknown_QueryInterface_Stub(LPRPCSTUBBUFFER,LPRPCCHANNELBUFFER,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IUnknown_AddRef_Proxy(IUnknown*);
void __attribute__((__stdcall__)) IUnknown_AddRef_Stub(LPRPCSTUBBUFFER,LPRPCCHANNELBUFFER,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IUnknown_Release_Proxy(IUnknown*);
void __attribute__((__stdcall__)) IUnknown_Release_Stub(LPRPCSTUBBUFFER,LPRPCCHANNELBUFFER,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IClassFactory_RemoteCreateInstance_Proxy(IClassFactory*,const IID&,IUnknown**);
void __attribute__((__stdcall__)) IClassFactory_RemoteCreateInstance_Stub(LPRPCSTUBBUFFER,LPRPCCHANNELBUFFER,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IClassFactory_RemoteLockServer_Proxy(IClassFactory*,BOOL);
void __attribute__((__stdcall__)) IClassFactory_RemoteLockServer_Stub(LPRPCSTUBBUFFER,LPRPCCHANNELBUFFER,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IClassFactory_CreateInstance_Proxy(IClassFactory*,IUnknown*,const IID&,void**);
HRESULT __attribute__((__stdcall__)) IClassFactory_CreateInstance_Stub(IClassFactory*,const IID&,IUnknown**);
HRESULT __attribute__((__stdcall__)) IClassFactory_LockServer_Proxy(IClassFactory*,BOOL);
HRESULT __attribute__((__stdcall__)) IClassFactory_LockServer_Stub(IClassFactory*,BOOL);
# 69 "C:/PROGRA~1/WIDEST~1/gcc/include/unknwn.h" 3
}
# 56 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/objidl.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/objidl.h" 3




typedef struct tagSTATSTG {
        LPOLESTR pwcsName;
        DWORD type;
        ULARGE_INTEGER cbSize;
        FILETIME mtime;
        FILETIME ctime;
        FILETIME atime;
        DWORD grfMode;
        DWORD grfLocksSupported;
        CLSID clsid;
        DWORD grfStateBits;
        DWORD reserved;
} STATSTG;
typedef enum tagSTGTY {
        STGTY_STORAGE=1,
        STGTY_STREAM,
        STGTY_LOCKBYTES,
        STGTY_PROPERTY
} STGTY;
typedef enum tagSTREAM_SEEK {
        STREAM_SEEK_SET,
        STREAM_SEEK_CUR,
        STREAM_SEEK_END
} STREAM_SEEK;
typedef struct tagINTERFACEINFO {
        LPUNKNOWN pUnk;
        IID iid;
        WORD wMethod;
} INTERFACEINFO,*LPINTERFACEINFO;
typedef enum tagCALLTYPE {
        CALLTYPE_TOPLEVEL=1,
        CALLTYPE_NESTED,
        CALLTYPE_ASYNC,
        CALLTYPE_TOPLEVEL_CALLPENDING,
        CALLTYPE_ASYNC_CALLPENDING
} CALLTYPE;
typedef enum tagPENDINGTYPE {
        PENDINGTYPE_TOPLEVEL=1,
        PENDINGTYPE_NESTED
} PENDINGTYPE;
typedef enum tagPENDINGMSG {
        PENDINGMSG_CANCELCALL=0,
        PENDINGMSG_WAITNOPROCESS,
        PENDINGMSG_WAITDEFPROCESS
} PENDINGMSG;
typedef OLECHAR **SNB;
typedef enum tagDATADIR {
        DATADIR_GET=1,
        DATADIR_SET
} DATADIR;
typedef WORD CLIPFORMAT,*LPCLIPFORMAT;
typedef struct tagDVTARGETDEVICE {
        DWORD tdSize;
        WORD tdDriverNameOffset;
        WORD tdDeviceNameOffset;
        WORD tdPortNameOffset;
        WORD tdExtDevmodeOffset;
        BYTE tdData[1];
} DVTARGETDEVICE;
typedef struct tagFORMATETC {
        CLIPFORMAT cfFormat;
        DVTARGETDEVICE*ptd;
        DWORD dwAspect;
        LONG lindex;
        DWORD tymed;
} FORMATETC,*LPFORMATETC;
typedef struct tagRemSTGMEDIUM {
        DWORD tymed;
        DWORD dwHandleType;
        ULONG pData;
        unsigned long pUnkForRelease;
        unsigned long cbData;
        BYTE data[1];
} RemSTGMEDIUM;
typedef struct tagHLITEM {
        ULONG uHLID;
        LPWSTR pwzFriendlyName;
} HLITEM;
typedef struct tagSTATDATA {
        FORMATETC formatetc;
        DWORD grfAdvf;
        struct IAdviseSink *pAdvSink;
        DWORD dwConnection;
} STATDATA;
typedef struct tagSTATPROPSETSTG {
        FMTID fmtid;
        CLSID clsid;
        DWORD grfFlags;
        FILETIME mtime;
        FILETIME ctime;
        FILETIME atime;
} STATPROPSETSTG;
typedef enum tagEXTCONN {
        EXTCONN_STRONG=1,
        EXTCONN_WEAK=2,
        EXTCONN_CALLABLE=4
} EXTCONN;
typedef struct tagMULTI_QI {
        const IID *pIID;
        IUnknown *pItf;
        HRESULT hr;
} MULTI_QI;
typedef struct _AUTH_IDENTITY {
        USHORT *User;
        ULONG UserLength;
        USHORT *Domain;
        ULONG DomainLength;
        USHORT *Password;
        ULONG PasswordLength;
        ULONG Flags;
} AUTH_IDENTITY;
typedef struct _COAUTHINFO{
        DWORD dwAuthnSvc;
        DWORD dwAuthzSvc;
        LPWSTR pwszServerPrincName;
        DWORD dwAuthnLevel;
        DWORD dwImpersonationLevel;
        AUTH_IDENTITY *pAuthIdentityData;
        DWORD dwCapabilities;
} COAUTHINFO;
typedef struct _COSERVERINFO {
        DWORD dwReserved1;
        LPWSTR pwszName;
        COAUTHINFO *pAuthInfo;
        DWORD dwReserved2;
} COSERVERINFO;
typedef struct tagBIND_OPTS {
        DWORD cbStruct;
        DWORD grfFlags;
        DWORD grfMode;
        DWORD dwTickCountDeadline;
} BIND_OPTS,*LPBIND_OPTS;
typedef struct tagBIND_OPTS2 {
        DWORD cbStruct;
        DWORD grfFlags;
        DWORD grfMode;
        DWORD dwTickCountDeadline;
        DWORD dwTrackFlags;
        DWORD dwClassContext;
        LCID locale;
        COSERVERINFO *pServerInfo;
} BIND_OPTS2,*LPBIND_OPTS2;
typedef enum tagBIND_FLAGS {
        BIND_MAYBOTHERUSER=1,
        BIND_JUSTTESTEXISTENCE
} BIND_FLAGS;
typedef struct tagSTGMEDIUM {
        DWORD tymed;
        __extension__ union {
                HBITMAP hBitmap;
                PVOID hMetaFilePict;
                HENHMETAFILE hEnhMetaFile;
                HGLOBAL hGlobal;
                LPCSTR lpszFileName;
                LPSTREAM pstm;
                LPSTORAGE pstg;
        } ;
        LPUNKNOWN pUnkForRelease;
} STGMEDIUM,*LPSTGMEDIUM;
typedef enum tagLOCKTYPE {
        LOCK_WRITE=1,
        LOCK_EXCLUSIVE=2,
        LOCK_ONLYONCE=4
} LOCKTYPE;
typedef unsigned long RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE {
        PVOID reserved1;
        RPCOLEDATAREP dataRepresentation;
        PVOID Buffer;
        ULONG cbBuffer;
        ULONG iMethod;
        PVOID reserved2[5];
        ULONG rpcFlags;
} RPCOLEMESSAGE;
typedef enum tagMKSYS {
        MKSYS_NONE,
        MKSYS_GENERICCOMPOSITE,
        MKSYS_FILEMONIKER,
        MKSYS_ANTIMONIKER,
        MKSYS_ITEMMONIKER,
        MKSYS_POINTERMONIKER
} MKSYS;
typedef enum tagMKREDUCE {
        MKRREDUCE_ALL,
        MKRREDUCE_ONE=196608,
        MKRREDUCE_TOUSER=131072,
        MKRREDUCE_THROUGHUSER=65536
} MKRREDUCE;
typedef struct tagRemSNB {
        unsigned long ulCntStr;
        unsigned long ulCntChar;
        OLECHAR rgString[1];
} RemSNB;
typedef enum tagADVF {
        ADVF_NODATA=1,ADVF_PRIMEFIRST=2,ADVF_ONLYONCE=4,ADVF_DATAONSTOP=64,
        ADVFCACHE_NOHANDLER=8,ADVFCACHE_FORCEBUILTIN=16,ADVFCACHE_ONSAVE=32
} ADVF;
typedef enum tagTYMED {
        TYMED_HGLOBAL=1,TYMED_FILE=2,TYMED_ISTREAM=4,TYMED_ISTORAGE=8,
        TYMED_GDI=16,TYMED_MFPICT=32,TYMED_ENHMF=64,TYMED_NULL=0
} TYMED;
typedef enum tagSERVERCALL {
        SERVERCALL_ISHANDLED,SERVERCALL_REJECTED,SERVERCALL_RETRYLATER
} SERVERCALL;
typedef struct tagCAUB {
        ULONG cElems;
        unsigned char *pElems;
}CAUB;
typedef struct tagCAI {
        ULONG cElems;
        short *pElems;
}CAI;
typedef struct tagCAUI {
        ULONG cElems;
        USHORT *pElems;
}CAUI;
typedef struct tagCAL {
        ULONG cElems;
        long *pElems;
}CAL;
typedef struct tagCAUL {
        ULONG cElems;
        ULONG *pElems;
}CAUL;
typedef struct tagCAFLT {
        ULONG cElems;
        float *pElems;
}CAFLT;
typedef struct tagCADBL {
        ULONG cElems;
        double *pElems;
}CADBL;
typedef struct tagCACY {
        ULONG cElems;
        CY *pElems;
}CACY;
typedef struct tagCADATE {
        ULONG cElems;
        DATE *pElems;
}CADATE;
typedef struct tagCABSTR {
        ULONG cElems;
        BSTR *pElems;
}CABSTR;
typedef struct tagCABSTRBLOB {
        ULONG cElems;
        BSTRBLOB *pElems;
}CABSTRBLOB;
typedef struct tagCABOOL {
        ULONG cElems;
        VARIANT_BOOL *pElems;
}CABOOL;
typedef struct tagCASCODE {
        ULONG cElems;
        SCODE *pElems;
}CASCODE;
typedef struct tagCAH {
        ULONG cElems;
        LARGE_INTEGER *pElems;
}CAH;
typedef struct tagCAUH {
        ULONG cElems;
        ULARGE_INTEGER *pElems;
}CAUH;
typedef struct tagCALPSTR {
        ULONG cElems;
        LPSTR *pElems;
}CALPSTR;
typedef struct tagCALPWSTR {
        ULONG cElems;
        LPWSTR *pElems;
}CALPWSTR;
typedef struct tagCAFILETIME {
        ULONG cElems;
        FILETIME *pElems;
}CAFILETIME;
typedef struct tagCACLIPDATA {
        ULONG cElems;
        CLIPDATA *pElems;
}CACLIPDATA;
typedef struct tagCACLSID {
        ULONG cElems;
        CLSID *pElems;
}CACLSID;
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct tagCAPROPVARIANT {
        ULONG cElems;
        LPPROPVARIANT pElems;
}CAPROPVARIANT;
typedef struct tagPROPVARIANT {
        VARTYPE vt;
        WORD wReserved1;
        WORD wReserved2;
        WORD wReserved3;
        __extension__ union {
                UCHAR bVal;
                short iVal;
                USHORT uiVal;
                VARIANT_BOOL boolVal;





                long lVal;
                ULONG ulVal;
                float fltVal;
                SCODE scode;
                LARGE_INTEGER hVal;
                ULARGE_INTEGER uhVal;
                double dblVal;
                CY cyVal;
                DATE date;
                FILETIME filetime;
                CLSID *puuid;
                BLOB blob;
                CLIPDATA *pclipdata;
                LPSTREAM pStream;
                LPSTORAGE pStorage;
                BSTR bstrVal;
                BSTRBLOB bstrblobVal;
                LPSTR pszVal;
                LPWSTR pwszVal;
                CAUB caub;
                CAI cai;
                CAUI caui;
                CABOOL cabool;
                CAL cal;
                CAUL caul;
                CAFLT caflt;
                CASCODE cascode;
                CAH cah;
                CAUH cauh;
                CADBL cadbl;
                CACY cacy;
                CADATE cadate;
                CAFILETIME cafiletime;
                CACLSID cauuid;
                CACLIPDATA caclipdata;
                CABSTR cabstr;
                CABSTRBLOB cabstrblob;
                CALPSTR calpstr;
                CALPWSTR calpwstr;
                CAPROPVARIANT capropvar;
        } ;
} PROPVARIANT;
typedef struct tagPROPSPEC {
        ULONG ulKind;
        __extension__ union {
                PROPID propid;
                LPOLESTR lpwstr;
        } ;
}PROPSPEC;
typedef struct tagSTATPROPSTG {
        LPOLESTR lpwstrName;
        PROPID propid;
        VARTYPE vt;
} STATPROPSTG;
typedef enum PROPSETFLAG {
        PROPSETFLAG_DEFAULT,PROPSETFLAG_NONSIMPLE,PROPSETFLAG_ANSI,
        PROPSETFLAG_UNBUFFERED=4
} PROPSETFLAG;
typedef struct tagSTORAGELAYOUT {
        DWORD LayoutType;
        OLECHAR* pwcsElementName;
        LARGE_INTEGER cOffset;
        LARGE_INTEGER cBytes;
} STORAGELAYOUT;
typedef struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
} SOLE_AUTHENTICATION_SERVICE;

typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 0x1,
        EOAC_STATIC_CLOAKING = 0x20,
        EOAC_DYNAMIC_CLOAKING = 0x40,
        EOAC_ANY_AUTHORITY = 0x80,
        EOAC_MAKE_FULLSIC = 0x100,
        EOAC_DEFAULT = 0x800,
        EOAC_SECURE_REFS = 0x2,
        EOAC_ACCESS_CONTROL = 0x4,
        EOAC_APPID = 0x8,
        EOAC_DYNAMIC = 0x10,
        EOAC_REQUIRE_FULLSIC = 0x200,
        EOAC_AUTO_IMPERSONATE = 0x400,
        EOAC_NO_CUSTOM_MARSHAL = 0x2000,
        EOAC_DISABLE_AAA = 0x1000
} EOLE_AUTHENTICATION_CAPABILITIES;
typedef struct tagSOLE_AUTHENTICATION_INFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void* pAuthInfo;
} SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO* aAuthInfo;
} SOLE_AUTHENTICATION_LIST;
struct IEnumFORMATETC : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,FORMATETC*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumFORMATETC**) =0; };
struct IEnumHLITEM : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,HLITEM*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumHLITEM**) =0; };
struct IEnumSTATDATA : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,STATDATA*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumSTATDATA**) =0; };
struct IEnumSTATPROPSETSTG : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,STATPROPSETSTG*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumSTATPROPSETSTG**) =0; };
struct IEnumSTATPROPSTG : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,STATPROPSTG*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumSTATPROPSTG**) =0; };
struct IEnumSTATSTG : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,STATSTG*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumSTATSTG**) =0; };
struct IEnumString : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,LPOLESTR*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumString**) =0; };
struct IEnumMoniker : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,struct IMoniker**,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumMoniker**) =0; };
struct IEnumUnknown : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,IUnknown**,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumUnknown**) =0; };

extern "C" const IID IID_ISequentialStream;


struct ISequentialStream : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Read( void*,ULONG,ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Write( void const*,ULONG,ULONG*) =0;
};

extern "C" const IID IID_IStream;


struct IStream : public ISequentialStream
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Read( void*,ULONG,ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Write( void const*,ULONG,ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Seek( LARGE_INTEGER,DWORD,ULARGE_INTEGER*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetSize( ULARGE_INTEGER) =0;
        virtual HRESULT __attribute__((__stdcall__)) CopyTo( IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Commit( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Revert(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) LockRegion( ULARGE_INTEGER,ULARGE_INTEGER,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) UnlockRegion( ULARGE_INTEGER,ULARGE_INTEGER,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Stat( STATSTG*,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Clone( LPSTREAM*) =0;
};

extern "C" const IID IID_IMarshal;


struct IMarshal : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetUnmarshalClass ( const IID&,DWORD,PVOID,DWORD,CLSID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetMarshalSizeMax ( const IID&,DWORD,PVOID,DWORD,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) MarshalInterface ( const IID&,DWORD,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) UnmarshalInterface ( IStream*,void**) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReleaseMarshalData ( IStream*) =0;
        virtual HRESULT __attribute__((__stdcall__)) DisconnectObject ( DWORD) =0;
};

extern "C" const IID IID_IStdMarshalInfo;


struct IStdMarshalInfo : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassForHandler( DWORD,PVOID,CLSID*) =0;
};

extern "C" const IID IID_IMalloc;


struct IMalloc : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual void* __attribute__((__stdcall__)) Alloc( ULONG) =0;
        virtual void* __attribute__((__stdcall__)) ReAlloc( void*,ULONG) =0;
        virtual void __attribute__((__stdcall__)) Free( void*) =0;
        virtual ULONG __attribute__((__stdcall__)) GetSize( void*) =0;
        virtual int __attribute__((__stdcall__)) DidAlloc( void*) =0;
        virtual void __attribute__((__stdcall__)) HeapMinimize(void) =0;
};

extern "C" const IID IID_IMallocSpy;


struct IMallocSpy : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual ULONG __attribute__((__stdcall__)) PreAlloc( ULONG) =0;
        virtual void* __attribute__((__stdcall__)) PostAlloc( void*) =0;
        virtual void* __attribute__((__stdcall__)) PreFree( void*,BOOL) =0;
        virtual void __attribute__((__stdcall__)) PostFree( BOOL) =0;
        virtual ULONG __attribute__((__stdcall__)) PreRealloc( void*,ULONG,void*) =0;
        virtual void* __attribute__((__stdcall__)) PostRealloc( void*,BOOL) =0;
        virtual void* __attribute__((__stdcall__)) PreGetSize( void*,BOOL) =0;
        virtual ULONG __attribute__((__stdcall__)) PostGetSize( ULONG,BOOL) =0;
        virtual void* __attribute__((__stdcall__)) PreDidAlloc( void*,BOOL) =0;
        virtual int __attribute__((__stdcall__)) PostDidAlloc( void*,BOOL,int) =0;
        virtual void __attribute__((__stdcall__)) PreHeapMinimize(void) =0;
        virtual void __attribute__((__stdcall__)) PostHeapMinimize(void) =0;
};

extern "C" const IID IID_IMessageFilter;


struct IMessageFilter : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual DWORD __attribute__((__stdcall__)) HandleInComingCall( DWORD,HTASK,DWORD,LPINTERFACEINFO) =0;
        virtual DWORD __attribute__((__stdcall__)) RetryRejectedCall( HTASK,DWORD,DWORD) =0;
        virtual DWORD __attribute__((__stdcall__)) MessagePending( HTASK,DWORD,DWORD) =0;
};

extern "C" const IID IID_IPersist;


struct IPersist : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassID( CLSID*) =0;
};

extern "C" const IID IID_IPersistStream;


struct IPersistStream : public IPersist
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassID( LPCLSID) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsDirty(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Load( IStream*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Save( IStream*,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetSizeMax( PULARGE_INTEGER) =0;
};

extern "C" const IID IID_IRunningObjectTable;


struct IRunningObjectTable : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Register( DWORD,LPUNKNOWN,LPMONIKER,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Revoke( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsRunning( LPMONIKER) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetObjectA( LPMONIKER,LPUNKNOWN*) =0;
        virtual HRESULT __attribute__((__stdcall__)) NoteChangeTime( DWORD,LPFILETIME) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTimeOfLastChange( LPMONIKER,LPFILETIME) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumRunning( IEnumMoniker**) =0;
};

extern "C" const IID IID_IBindCtx;


struct IBindCtx : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) RegisterObjectBound( LPUNKNOWN) =0;
        virtual HRESULT __attribute__((__stdcall__)) RevokeObjectBound( LPUNKNOWN) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReleaseBoundObjects(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetBindOptions( LPBIND_OPTS) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetBindOptions( LPBIND_OPTS) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetRunningObjectTable( IRunningObjectTable**) =0;
        virtual HRESULT __attribute__((__stdcall__)) RegisterObjectParam( LPOLESTR,IUnknown*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetObjectParam( LPOLESTR,IUnknown**) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumObjectParam( IEnumString**) =0;
        virtual HRESULT __attribute__((__stdcall__)) RevokeObjectParam( LPOLESTR) =0;
};

extern "C" const IID IID_IMoniker;


struct IMoniker : public IPersistStream
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassID( LPCLSID) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsDirty(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Load( IStream*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Save( IStream*,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetSizeMax( PULARGE_INTEGER) =0;
        virtual HRESULT __attribute__((__stdcall__)) BindToObject( IBindCtx*,IMoniker*,const IID&,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) BindToStorage( IBindCtx*,IMoniker*,const IID&,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Reduce( IBindCtx*,DWORD,IMoniker**,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) ComposeWith( IMoniker*,BOOL,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) Enum( BOOL,IEnumMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsEqual( IMoniker*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Hash( PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsRunning( IBindCtx*,IMoniker*,IMoniker*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTimeOfLastChange( IBindCtx*,IMoniker*,LPFILETIME) =0;
        virtual HRESULT __attribute__((__stdcall__)) Inverse( IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) CommonPrefixWith( IMoniker*,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) RelativePathTo( IMoniker*,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDisplayName( IBindCtx*,IMoniker*,LPOLESTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ParseDisplayName( IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsSystemMoniker( PDWORD) =0;
};

extern "C" const IID IID_IPersistStorage;


struct IPersistStorage : public IPersist
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassID( CLSID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsDirty(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) InitNew( LPSTORAGE) =0;
        virtual HRESULT __attribute__((__stdcall__)) Load( LPSTORAGE) =0;
        virtual HRESULT __attribute__((__stdcall__)) Save( LPSTORAGE,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) SaveCompleted( LPSTORAGE) =0;
        virtual HRESULT __attribute__((__stdcall__)) HandsOffStorage(void) =0;
};

extern "C" const IID IID_IPersistFile;


struct IPersistFile : public IPersist
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassID( CLSID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsDirty(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Load( LPCOLESTR,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Save( LPCOLESTR,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) SaveCompleted( LPCOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetCurFile( LPOLESTR*) =0;
};

extern "C" const IID IID_IAdviseSink;


struct IAdviseSink : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual void __attribute__((__stdcall__)) OnDataChange( FORMATETC*,STGMEDIUM*) =0;
        virtual void __attribute__((__stdcall__)) OnViewChange( DWORD,LONG) =0;
        virtual void __attribute__((__stdcall__)) OnRename( IMoniker*) =0;
        virtual void __attribute__((__stdcall__)) OnSave(void) =0;
        virtual void __attribute__((__stdcall__)) OnClose(void) =0;
};

extern "C" const IID IID_IAdviseSink2;


struct IAdviseSink2 : public IAdviseSink
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual void __attribute__((__stdcall__)) OnDataChange( FORMATETC*,STGMEDIUM*) =0;
        virtual void __attribute__((__stdcall__)) OnViewChange( DWORD,LONG) =0;
        virtual void __attribute__((__stdcall__)) OnRename( IMoniker*) =0;
        virtual void __attribute__((__stdcall__)) OnSave(void) =0;
        virtual void __attribute__((__stdcall__)) OnClose(void) =0;
        virtual void __attribute__((__stdcall__)) OnLinkSrcChange( IMoniker*);
};

extern "C" const IID IID_IDataObject;


struct IDataObject : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetData( FORMATETC*,STGMEDIUM*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDataHere( FORMATETC*,STGMEDIUM*) =0;
        virtual HRESULT __attribute__((__stdcall__)) QueryGetData( FORMATETC*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetCanonicalFormatEtc( FORMATETC*,FORMATETC*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetData( FORMATETC*,STGMEDIUM*,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumFormatEtc( DWORD,IEnumFORMATETC**) =0;
        virtual HRESULT __attribute__((__stdcall__)) DAdvise( FORMATETC*,DWORD,IAdviseSink*,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) DUnadvise( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumDAdvise( IEnumSTATDATA**) =0;
};

extern "C" const IID IID_IDataAdviseHolder;


struct IDataAdviseHolder : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Advise( IDataObject*,FORMATETC*,DWORD,IAdviseSink*,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Unadvise( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumAdvise( IEnumSTATDATA**) =0;
        virtual HRESULT __attribute__((__stdcall__)) SendOnDataChange( IDataObject*,DWORD,DWORD) =0;
};

extern "C" const IID IID_IStorage;


struct IStorage : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) CreateStream( LPCWSTR,DWORD,DWORD,DWORD,IStream**) =0;
        virtual HRESULT __attribute__((__stdcall__)) OpenStream( LPCWSTR,PVOID,DWORD,DWORD,IStream**) =0;
        virtual HRESULT __attribute__((__stdcall__)) CreateStorage( LPCWSTR,DWORD,DWORD,DWORD,IStorage**) =0;
        virtual HRESULT __attribute__((__stdcall__)) OpenStorage( LPCWSTR,IStorage*,DWORD,SNB,DWORD,IStorage**) =0;
        virtual HRESULT __attribute__((__stdcall__)) CopyTo( DWORD,IID const*,SNB,IStorage*) =0;
        virtual HRESULT __attribute__((__stdcall__)) MoveElementTo( LPCWSTR,IStorage*,LPCWSTR,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Commit( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Revert(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumElements( DWORD,PVOID,DWORD,IEnumSTATSTG**) =0;
        virtual HRESULT __attribute__((__stdcall__)) DestroyElement( LPCWSTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) RenameElement( LPCWSTR,LPCWSTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetElementTimes( LPCWSTR,FILETIME const*,FILETIME const*,FILETIME const*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetClass( const CLSID&) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetStateBits( DWORD,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Stat( STATSTG*,DWORD) =0;
};

extern "C" const IID IID_IRootStorage;


struct IRootStorage : public IPersist
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SwitchToFile( LPOLESTR) =0;
};

extern "C" const IID IID_IRpcChannelBuffer;


struct IRpcChannelBuffer : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetBuffer( RPCOLEMESSAGE*,const IID&) =0;
        virtual HRESULT __attribute__((__stdcall__)) SendReceive( RPCOLEMESSAGE*,PULONG) =0;
        virtual HRESULT __attribute__((__stdcall__)) FreeBuffer( RPCOLEMESSAGE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDestCtx( PDWORD,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsConnected(void) =0;
};

extern "C" const IID IID_IRpcProxyBuffer;


struct IRpcProxyBuffer : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Connect( IRpcChannelBuffer*) =0;
        virtual void __attribute__((__stdcall__)) Disconnect(void) =0;

};

extern "C" const IID IID_IRpcStubBuffer;


struct IRpcStubBuffer : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Connect( LPUNKNOWN) =0;
        virtual void __attribute__((__stdcall__)) Disconnect(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Invoke( RPCOLEMESSAGE*,LPRPCSTUBBUFFER) =0;
        virtual LPRPCSTUBBUFFER __attribute__((__stdcall__)) IsIIDSupported( const IID&) =0;
        virtual ULONG __attribute__((__stdcall__)) CountRefs(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) DebugServerQueryInterface( PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) DebugServerRelease( PVOID) =0;
};

extern "C" const IID IID_IPSFactoryBuffer;


struct IPSFactoryBuffer : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) CreateProxy( LPUNKNOWN,const IID&,LPRPCPROXYBUFFER*,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) CreateStub( const IID&,LPUNKNOWN,LPRPCSTUBBUFFER*) =0;
};

extern "C" const IID IID_ILockBytes;


struct ILockBytes : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReadAt( ULARGE_INTEGER,PVOID,ULONG,ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) WriteAt( ULARGE_INTEGER,PCVOID,ULONG,ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Flush(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetSize( ULARGE_INTEGER) =0;
        virtual HRESULT __attribute__((__stdcall__)) LockRegion( ULARGE_INTEGER,ULARGE_INTEGER,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) UnlockRegion( ULARGE_INTEGER,ULARGE_INTEGER,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Stat( STATSTG*,DWORD) =0;
};

extern "C" const IID IID_IExternalConnection;


struct IExternalConnection : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) AddConnection( DWORD,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReleaseConnection( DWORD,DWORD,BOOL) =0;
};

extern "C" const IID IID_IRunnableObject;


struct IRunnableObject : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetRunningClass( LPCLSID) =0;
        virtual HRESULT __attribute__((__stdcall__)) Run( LPBC) =0;
        virtual BOOL __attribute__((__stdcall__)) IsRunning(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) LockRunning( BOOL,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetContainedObject( BOOL) =0;
};

extern "C" const IID IID_IROTData;


struct IROTData : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetComparisonData( PVOID,ULONG,PULONG) =0;
};

extern "C" const IID IID_IChannelHook;


struct IChannelHook : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual void __attribute__((__stdcall__)) ClientGetSize( const GUID&,const IID&,PULONG) =0;
        virtual void __attribute__((__stdcall__)) ClientFillBuffer( const GUID&,const IID&,PULONG,PVOID) =0;
        virtual void __attribute__((__stdcall__)) ClientNotify( const GUID&,const IID&,ULONG,PVOID,DWORD,HRESULT) =0;
        virtual void __attribute__((__stdcall__)) ServerNotify( const GUID&,const IID&,ULONG,PVOID,DWORD) =0;
        virtual void __attribute__((__stdcall__)) ServerGetSize( const GUID&,const IID&,HRESULT,PULONG) =0;
        virtual void __attribute__((__stdcall__)) ServerFillBuffer( const GUID&,const IID&,PULONG,PVOID,HRESULT) =0;
};

extern "C" const IID IID_IPropertyStorage;


struct IPropertyStorage : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReadMultiple( ULONG,PROPSPEC const*,PROPVARIANT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) WriteMultiple( ULONG,PROPSPEC const*,PROPVARIANT*,PROPID) =0;
        virtual HRESULT __attribute__((__stdcall__)) DeleteMultiple( ULONG,PROPSPEC const*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReadPropertyNames( ULONG,PROPID const*,LPWSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) WritePropertyNames( ULONG,PROPID const*,LPWSTR const*) =0;
        virtual HRESULT __attribute__((__stdcall__)) DeletePropertyNames( ULONG,PROPID const*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetClass( const CLSID&) =0;
        virtual HRESULT __attribute__((__stdcall__)) Commit( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Revert(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Enum( IEnumSTATPROPSTG**) =0;
        virtual HRESULT __attribute__((__stdcall__)) Stat( STATPROPSTG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetTimes( FILETIME const*,FILETIME const*,FILETIME const*) =0;
};

extern "C" const IID IID_IPropertySetStorage;


struct IPropertySetStorage : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Create( REFFMTID,CLSID*,DWORD,DWORD,LPPROPERTYSTORAGE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Open( REFFMTID,DWORD,LPPROPERTYSTORAGE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Delete( REFFMTID) =0;
        virtual HRESULT __attribute__((__stdcall__)) Enum( IEnumSTATPROPSETSTG**) =0;
};

extern "C" const IID IID_IClientSecurity;


struct IClientSecurity : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) QueryBlanket( PVOID,PDWORD,PDWORD,OLECHAR**,PDWORD,PDWORD,RPC_AUTH_IDENTITY_HANDLE**,PDWORD*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetBlanket( PVOID,DWORD,DWORD,LPWSTR,DWORD,DWORD,RPC_AUTH_IDENTITY_HANDLE*,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) CopyProxy( LPUNKNOWN,LPUNKNOWN*) =0;
};

extern "C" const IID IID_IServerSecurity;


struct IServerSecurity : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) QueryBlanket( PDWORD,PDWORD,OLECHAR**,PDWORD,PDWORD,RPC_AUTHZ_HANDLE*,PDWORD*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ImpersonateClient(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) RevertToSelf(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsImpersonating(void) =0;
};

extern "C" const IID IID_IClassActivator;


struct IClassActivator : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClassObject( const CLSID&,DWORD,LCID,const IID&,PVOID*) =0;
};

extern "C" const IID IID_IFillLockBytes;


struct IFillLockBytes : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) FillAppend( void const*,ULONG,PULONG) =0;
        virtual HRESULT __attribute__((__stdcall__)) FillAt( ULARGE_INTEGER,void const*,ULONG,PULONG) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetFillSize( ULARGE_INTEGER) =0;
        virtual HRESULT __attribute__((__stdcall__)) Terminate( BOOL) =0;
};

extern "C" const IID IID_IProgressNotify;


struct IProgressNotify : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnProgress( DWORD,DWORD,BOOL,BOOL) =0;
};

extern "C" const IID IID_ILayoutStorage;


struct ILayoutStorage : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) LayoutScript( STORAGELAYOUT*,DWORD,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) BeginMonitor(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) EndMonitor(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReLayoutDocfile( OLECHAR*) =0;
};

HRESULT __attribute__((__stdcall__)) IMarshal_GetUnmarshalClass_Proxy(IMarshal*,const IID&,void*,DWORD,void*,DWORD,CLSID*);
void __attribute__((__stdcall__)) IMarshal_GetUnmarshalClass_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMarshal_GetMarshalSizeMax_Proxy(IMarshal*,const IID&,void*,DWORD,void*,DWORD,DWORD*);
void __attribute__((__stdcall__)) IMarshal_GetMarshalSizeMax_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMarshal_MarshalInterface_Proxy(IMarshal*,IStream*,const IID&,void*,DWORD,void*,DWORD);
void __attribute__((__stdcall__)) IMarshal_MarshalInterface_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMarshal_UnmarshalInterface_Proxy(IMarshal*,IStream*,const IID&,void**);
void __attribute__((__stdcall__)) IMarshal_UnmarshalInterface_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMarshal_ReleaseMarshalData_Proxy(IMarshal*,IStream*);
void __attribute__((__stdcall__)) IMarshal_ReleaseMarshalData_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMarshal_DisconnectObject_Proxy(IMarshal*,DWORD);
void __attribute__((__stdcall__)) IMarshal_DisconnectObject_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMalloc_Alloc_Proxy(IMalloc*,ULONG);
void __attribute__((__stdcall__)) IMalloc_Alloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMalloc_Realloc_Proxy(IMalloc*,void*,ULONG);
void __attribute__((__stdcall__)) IMalloc_Realloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IMalloc_Free_Proxy(IMalloc*,void*);
void __attribute__((__stdcall__)) IMalloc_Free_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IMalloc_GetSize_Proxy(IMalloc*,void*);
void __attribute__((__stdcall__)) IMalloc_GetSize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
int __attribute__((__stdcall__)) IMalloc_DidAlloc_Proxy(IMalloc*,void*);
void __attribute__((__stdcall__)) IMalloc_DidAlloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IMalloc_HeapMinimize_Proxy(IMalloc*);
void __attribute__((__stdcall__)) IMalloc_HeapMinimize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IMallocSpy_PreAlloc_Proxy(IMallocSpy*,ULONG cbRequest);
void __attribute__((__stdcall__)) IMallocSpy_PreAlloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMallocSpy_PostAlloc_Proxy(IMallocSpy*,void*);
void __attribute__((__stdcall__)) IMallocSpy_PostAlloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMallocSpy_PreFree_Proxy(IMallocSpy*,void*,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PreFree_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IMallocSpy_PostFree_Proxy(IMallocSpy*,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PostFree_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IMallocSpy_PreRealloc_Proxy(IMallocSpy*,void*,ULONG,void**,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PreRealloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMallocSpy_PostRealloc_Proxy(IMallocSpy*,void*,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PostRealloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMallocSpy_PreGetSize_Proxy(IMallocSpy*,void*,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PreGetSize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IMallocSpy_PostGetSize_Proxy(IMallocSpy*,ULONG,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PostGetSize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void* __attribute__((__stdcall__)) IMallocSpy_PreDidAlloc_Proxy(IMallocSpy*,void*,BOOL);
void __attribute__((__stdcall__)) IMallocSpy_PreDidAlloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
int __attribute__((__stdcall__)) IMallocSpy_PostDidAlloc_Proxy(IMallocSpy*,void*,BOOL,int);
void __attribute__((__stdcall__)) IMallocSpy_PostDidAlloc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IMallocSpy_PreHeapMinimize_Proxy(IMallocSpy* );
void __attribute__((__stdcall__)) IMallocSpy_PreHeapMinimize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IMallocSpy_PostHeapMinimize_Proxy(IMallocSpy*);
void __attribute__((__stdcall__)) IMallocSpy_PostHeapMinimize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStdMarshalInfo_GetClassForHandler_Proxy(IStdMarshalInfo*,DWORD,void*,CLSID*);
void __attribute__((__stdcall__)) IStdMarshalInfo_GetClassForHandler_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
DWORD __attribute__((__stdcall__)) IExternalConnection_AddConnection_Proxy(IExternalConnection*,DWORD,DWORD);
void __attribute__((__stdcall__)) IExternalConnection_AddConnection_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
DWORD __attribute__((__stdcall__)) IExternalConnection_ReleaseConnection_Proxy(IExternalConnection*,DWORD,DWORD,BOOL);
void __attribute__((__stdcall__)) IExternalConnection_ReleaseConnection_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_RemoteNext_Proxy(IEnumUnknown*,ULONG,IUnknown**,ULONG*);
void __attribute__((__stdcall__)) IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Skip_Proxy(IEnumUnknown*,ULONG);
void __attribute__((__stdcall__)) IEnumUnknown_Skip_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Reset_Proxy(IEnumUnknown* );
void __attribute__((__stdcall__)) IEnumUnknown_Reset_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Clone_Proxy(IEnumUnknown*,IEnumUnknown**);
void __attribute__((__stdcall__)) IEnumUnknown_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_RegisterObjectBound_Proxy(IBindCtx*,IUnknown*punk);
void __attribute__((__stdcall__)) IBindCtx_RegisterObjectBound_Stub(IRpcStubBuffer*,IRpcChannelBuffer*_pRpcChannelBuffer,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_RevokeObjectBound_Proxy(IBindCtx*,IUnknown*punk);
void __attribute__((__stdcall__)) IBindCtx_RevokeObjectBound_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_ReleaseBoundObjects_Proxy(IBindCtx*);
void __attribute__((__stdcall__)) IBindCtx_ReleaseBoundObjects_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_SetBindOptions_Proxy(IBindCtx*,BIND_OPTS*);
void __attribute__((__stdcall__)) IBindCtx_SetBindOptions_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetBindOptions_Proxy(IBindCtx*,BIND_OPTS*pbindopts);
void __attribute__((__stdcall__)) IBindCtx_GetBindOptions_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetRunningObjectTable_Proxy(IBindCtx*,IRunningObjectTable**);
void __attribute__((__stdcall__)) IBindCtx_GetRunningObjectTable_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_RegisterObjectParam_Proxy(IBindCtx*,LPCSTR,IUnknown*);
void __attribute__((__stdcall__)) IBindCtx_RegisterObjectParam_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetObjectParam_Proxy(IBindCtx*,LPCSTR,IUnknown**);
void __attribute__((__stdcall__)) IBindCtx_GetObjectParam_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_EnumObjectParam_Proxy(IBindCtx*,IEnumString**);
void __attribute__((__stdcall__)) IBindCtx_EnumObjectParam_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IBindCtx_RevokeObjectParam_Proxy(IBindCtx*,LPCSTR);
void __attribute__((__stdcall__)) IBindCtx_RevokeObjectParam_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_RemoteNext_Proxy(IEnumMoniker*,ULONG,IMoniker**,ULONG*);
void __attribute__((__stdcall__)) IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Skip_Proxy(IEnumMoniker*,ULONG);
void __attribute__((__stdcall__)) IEnumMoniker_Skip_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Reset_Proxy(IEnumMoniker*);
void __attribute__((__stdcall__)) IEnumMoniker_Reset_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Clone_Proxy(IEnumMoniker*,IEnumMoniker**);
void __attribute__((__stdcall__)) IEnumMoniker_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunnableObject_GetRunningClass_Proxy(IRunnableObject*,LPCLSID);
void __attribute__((__stdcall__)) IRunnableObject_GetRunningClass_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunnableObject_Run_Proxy(IRunnableObject*,LPBINDCTX);
void __attribute__((__stdcall__)) IRunnableObject_Run_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
BOOL __attribute__((__stdcall__)) IRunnableObject_IsRunning_Proxy(IRunnableObject*);
void __attribute__((__stdcall__)) IRunnableObject_IsRunning_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunnableObject_LockRunning_Proxy(IRunnableObject*,BOOL,BOOL);
void __attribute__((__stdcall__)) IRunnableObject_LockRunning_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunnableObject_SetContainedObject_Proxy(IRunnableObject*,BOOL);
void __attribute__((__stdcall__)) IRunnableObject_SetContainedObject_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_Register_Proxy(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
void __attribute__((__stdcall__)) IRunningObjectTable_Register_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_Revoke_Proxy(IRunningObjectTable*,DWORD);
void __attribute__((__stdcall__)) IRunningObjectTable_Revoke_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_IsRunning_Proxy(IRunningObjectTable*,IMoniker*);
void __attribute__((__stdcall__)) IRunningObjectTable_IsRunning_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_GetObject_Proxy(IRunningObjectTable*,IMoniker*,IUnknown**);
void __attribute__((__stdcall__)) IRunningObjectTable_GetObject_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_NoteChangeTime_Proxy(IRunningObjectTable*,DWORD,FILETIME*);
void __attribute__((__stdcall__)) IRunningObjectTable_NoteChangeTime_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_GetTimeOfLastChange_Proxy(IRunningObjectTable*,IMoniker*,FILETIME*);
void __attribute__((__stdcall__)) IRunningObjectTable_GetTimeOfLastChange_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_EnumRunning_Proxy(IRunningObjectTable*,IEnumMoniker**);
void __attribute__((__stdcall__)) IRunningObjectTable_EnumRunning_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersist_GetClassID_Proxy(IPersist*,CLSID*);
void __attribute__((__stdcall__)) IPersist_GetClassID_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStream_IsDirty_Proxy(IPersistStream*);
void __attribute__((__stdcall__)) IPersistStream_IsDirty_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStream_Load_Proxy(IPersistStream*,IStream*);
void __attribute__((__stdcall__)) IPersistStream_Load_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStream_Save_Proxy(IPersistStream*,IStream*,BOOL);
void __attribute__((__stdcall__)) IPersistStream_Save_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStream_GetSizeMax_Proxy(IPersistStream*,ULARGE_INTEGER*);
void __attribute__((__stdcall__)) IPersistStream_GetSizeMax_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_RemoteBindToObject_Proxy(IMoniker*,IBindCtx*,IMoniker*,const IID&,IUnknown**);
void __attribute__((__stdcall__)) IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_RemoteBindToStorage_Proxy(IMoniker*,IBindCtx*,IMoniker*,const IID&,IUnknown**);
void __attribute__((__stdcall__)) IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_Reduce_Proxy(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
void __attribute__((__stdcall__)) IMoniker_Reduce_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_ComposeWith_Proxy(IMoniker*,IMoniker*,BOOL,IMoniker**);
void __attribute__((__stdcall__)) IMoniker_ComposeWith_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_Enum_Proxy(IMoniker*,BOOL,IEnumMoniker**);
void __attribute__((__stdcall__)) IMoniker_Enum_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_IsEqual_Proxy(IMoniker*,IMoniker*);
void __attribute__((__stdcall__)) IMoniker_IsEqual_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_Hash_Proxy(IMoniker*,DWORD*);
void __attribute__((__stdcall__)) IMoniker_Hash_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_IsRunning_Proxy(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
void __attribute__((__stdcall__)) IMoniker_IsRunning_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_GetTimeOfLastChange_Proxy(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
void __attribute__((__stdcall__)) IMoniker_GetTimeOfLastChange_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_Inverse_Proxy(IMoniker*,IMoniker**);
void __attribute__((__stdcall__)) IMoniker_Inverse_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_CommonPrefixWith_Proxy(IMoniker*,IMoniker*,IMoniker**);
void __attribute__((__stdcall__)) IMoniker_CommonPrefixWith_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_RelativePathTo_Proxy(IMoniker*,IMoniker*,IMoniker**);
void __attribute__((__stdcall__)) IMoniker_RelativePathTo_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_GetDisplayName_Proxy(IMoniker*,IBindCtx*,IMoniker*,LPCSTR*);
void __attribute__((__stdcall__)) IMoniker_GetDisplayName_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_ParseDisplayName_Proxy(IMoniker*,IBindCtx*,IMoniker*,LPCSTR,ULONG*,IMoniker**);
void __attribute__((__stdcall__)) IMoniker_ParseDisplayName_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IMoniker_IsSystemMoniker_Proxy(IMoniker*,DWORD*);
void __attribute__((__stdcall__)) IMoniker_IsSystemMoniker_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IROTData_GetComparisonData_Proxy(IROTData*,BYTE*,ULONG cbMax,ULONG*);
void __attribute__((__stdcall__)) IROTData_GetComparisonData_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumString_RemoteNext_Proxy(IEnumString*,ULONG,LPCSTR*rgelt,ULONG*);
void __attribute__((__stdcall__)) IEnumString_RemoteNext_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumString_Skip_Proxy(IEnumString*,ULONG);
void __attribute__((__stdcall__)) IEnumString_Skip_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumString_Reset_Proxy(IEnumString*);
void __attribute__((__stdcall__)) IEnumString_Reset_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumString_Clone_Proxy(IEnumString*,IEnumString**);
void __attribute__((__stdcall__)) IEnumString_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_RemoteRead_Proxy(IStream*,BYTE*,ULONG,ULONG*);
void __attribute__((__stdcall__)) IStream_RemoteRead_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_RemoteWrite_Proxy(IStream*,BYTE*pv,ULONG,ULONG*);
void __attribute__((__stdcall__)) IStream_RemoteWrite_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_RemoteSeek_Proxy(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
void __attribute__((__stdcall__)) IStream_RemoteSeek_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_SetSize_Proxy(IStream*,ULARGE_INTEGER);
void __attribute__((__stdcall__)) IStream_SetSize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_RemoteCopyTo_Proxy(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
void __attribute__((__stdcall__)) IStream_RemoteCopyTo_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_Commit_Proxy(IStream*,DWORD);
void __attribute__((__stdcall__)) IStream_Commit_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_Revert_Proxy(IStream*);
void __attribute__((__stdcall__)) IStream_Revert_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_LockRegion_Proxy(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
void __attribute__((__stdcall__)) IStream_LockRegion_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_UnlockRegion_Proxy(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
void __attribute__((__stdcall__)) IStream_UnlockRegion_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_Stat_Proxy(IStream*,STATSTG*,DWORD);
void __attribute__((__stdcall__)) IStream_Stat_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStream_Clone_Proxy(IStream*,IStream**);
void __attribute__((__stdcall__)) IStream_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG*,ULONG,STATSTG*,ULONG*);
void __attribute__((__stdcall__)) IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Skip_Proxy(IEnumSTATSTG*,ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATSTG_Skip_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Reset_Proxy(IEnumSTATSTG*);
void __attribute__((__stdcall__)) IEnumSTATSTG_Reset_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Clone_Proxy(IEnumSTATSTG*,IEnumSTATSTG**);
void __attribute__((__stdcall__)) IEnumSTATSTG_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_CreateStream_Proxy(IStorage*,OLECHAR*,DWORD,DWORD,DWORD,IStream**);
void __attribute__((__stdcall__)) IStorage_CreateStream_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteOpenStream_Proxy(IStorage*,const OLECHAR*,unsigned long,BYTE*,DWORD,DWORD,IStream**);
void __attribute__((__stdcall__)) IStorage_RemoteOpenStream_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_CreateStorage_Proxy(IStorage*,OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
void __attribute__((__stdcall__)) IStorage_CreateStorage_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStorage_Proxy(IStorage*,OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
void __attribute__((__stdcall__)) IStorage_OpenStorage_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_CopyTo_Proxy(IStorage*,DWORD,const IID*,SNB,IStorage*);
void __attribute__((__stdcall__)) IStorage_CopyTo_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_MoveElementTo_Proxy(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
void __attribute__((__stdcall__)) IStorage_MoveElementTo_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_Commit_Proxy(IStorage*,DWORD);
void __attribute__((__stdcall__)) IStorage_Commit_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_Revert_Proxy(IStorage*);
void __attribute__((__stdcall__)) IStorage_Revert_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteEnumElements_Proxy(IStorage*,DWORD,unsigned long,BYTE*,DWORD,IEnumSTATSTG**);
void __attribute__((__stdcall__)) IStorage_RemoteEnumElements_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_DestroyElement_Proxy(IStorage*,OLECHAR*);
void __attribute__((__stdcall__)) IStorage_DestroyElement_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_RenameElement_Proxy(IStorage*,const OLECHAR*,const OLECHAR*);
void __attribute__((__stdcall__)) IStorage_RenameElement_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_SetElementTimes_Proxy(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
void __attribute__((__stdcall__)) IStorage_SetElementTimes_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_SetClass_Proxy(IStorage*,const CLSID&);
void __attribute__((__stdcall__)) IStorage_SetClass_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_SetStateBits_Proxy(IStorage*,DWORD,DWORD);
void __attribute__((__stdcall__)) IStorage_SetStateBits_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IStorage_Stat_Proxy(IStorage*,STATSTG*,DWORD);
void __attribute__((__stdcall__)) IStorage_Stat_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistFile_IsDirty_Proxy(IPersistFile*);
void __attribute__((__stdcall__)) IPersistFile_IsDirty_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistFile_Load_Proxy(IPersistFile*,LPCOLESTR,DWORD);
void __attribute__((__stdcall__)) IPersistFile_Load_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistFile_Save_Proxy(IPersistFile*,LPCOLESTR pszFileName,BOOL);
void __attribute__((__stdcall__)) IPersistFile_Save_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistFile_SaveCompleted_Proxy(IPersistFile*,LPCOLESTR);
void __attribute__((__stdcall__)) IPersistFile_SaveCompleted_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistFile_GetCurFile_Proxy(IPersistFile*,LPCSTR*);
void __attribute__((__stdcall__)) IPersistFile_GetCurFile_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStorage_IsDirty_Proxy(IPersistStorage*);
void __attribute__((__stdcall__)) IPersistStorage_IsDirty_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStorage_InitNew_Proxy(IPersistStorage*,IStorage*);
void __attribute__((__stdcall__)) IPersistStorage_InitNew_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStorage_Load_Proxy(IPersistStorage*,IStorage*);
void __attribute__((__stdcall__)) IPersistStorage_Load_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStorage_Save_Proxy(IPersistStorage*,IStorage*,BOOL);
void __attribute__((__stdcall__)) IPersistStorage_Save_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStorage_SaveCompleted_Proxy(IPersistStorage*,IStorage*);
void __attribute__((__stdcall__)) IPersistStorage_SaveCompleted_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPersistStorage_HandsOffStorage_Proxy(IPersistStorage*);
void __attribute__((__stdcall__)) IPersistStorage_HandsOffStorage_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_RemoteReadAt_Proxy(ILockBytes*,ULARGE_INTEGER,BYTE*,ULONG,ULONG*);
void __attribute__((__stdcall__)) ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_RemoteWriteAt_Proxy(ILockBytes*,ULARGE_INTEGER,BYTE*pv,ULONG,ULONG*);
void __attribute__((__stdcall__)) ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_Flush_Proxy(ILockBytes*);
void __attribute__((__stdcall__)) ILockBytes_Flush_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_SetSize_Proxy(ILockBytes*,ULARGE_INTEGER);
void __attribute__((__stdcall__)) ILockBytes_SetSize_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_LockRegion_Proxy(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
void __attribute__((__stdcall__)) ILockBytes_LockRegion_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_UnlockRegion_Proxy(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
void __attribute__((__stdcall__)) ILockBytes_UnlockRegion_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) ILockBytes_Stat_Proxy(ILockBytes*,STATSTG*,DWORD);
void __attribute__((__stdcall__)) ILockBytes_Stat_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC*,ULONG,FORMATETC*,ULONG*);
void __attribute__((__stdcall__)) IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Skip_Proxy(IEnumFORMATETC*,ULONG);
void __attribute__((__stdcall__)) IEnumFORMATETC_Skip_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Reset_Proxy(IEnumFORMATETC*);
void __attribute__((__stdcall__)) IEnumFORMATETC_Reset_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Clone_Proxy(IEnumFORMATETC*,IEnumFORMATETC**);
void __attribute__((__stdcall__)) IEnumFORMATETC_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Next_Proxy(IEnumFORMATETC*,ULONG,FORMATETC*,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Next_Stub(IEnumFORMATETC*,ULONG,FORMATETC*,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA*,ULONG,STATDATA*,ULONG*);
void __attribute__((__stdcall__)) IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Skip_Proxy(IEnumSTATDATA*,ULONG);
void __attribute__((__stdcall__)) IEnumSTATDATA_Skip_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Reset_Proxy(IEnumSTATDATA*);
void __attribute__((__stdcall__)) IEnumSTATDATA_Reset_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Clone_Proxy(IEnumSTATDATA*,IEnumSTATDATA**);
void __attribute__((__stdcall__)) IEnumSTATDATA_Clone_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Next_Proxy(IEnumSTATDATA*,ULONG,STATDATA*,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Next_Stub(IEnumSTATDATA*,ULONG,STATDATA*,ULONG*);
HRESULT __attribute__((__stdcall__)) IRootStorage_SwitchToFile_Proxy(IRootStorage*,LPCSTR);
void __attribute__((__stdcall__)) IRootStorage_SwitchToFile_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink*,FORMATETC*,RemSTGMEDIUM*);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink*,DWORD,LONG);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnRename_Proxy(IAdviseSink*,IMoniker*);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnSave_Proxy(IAdviseSink*);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnClose_Proxy(IAdviseSink*);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IAdviseSink_OnDataChange_Proxy(IAdviseSink*,FORMATETC*,STGMEDIUM*);
void __attribute__((__stdcall__)) IAdviseSink_OnDataChange_Stub(IAdviseSink*,FORMATETC*,RemSTGMEDIUM*);
void __attribute__((__stdcall__)) IAdviseSink_OnViewChange_Proxy(IAdviseSink*,DWORD,LONG);
void __attribute__((__stdcall__)) IAdviseSink_OnViewChange_Stub(IAdviseSink*,DWORD,LONG);
void __attribute__((__stdcall__)) IAdviseSink_OnRename_Proxy(IAdviseSink*,IMoniker*);
void __attribute__((__stdcall__)) IAdviseSink_OnRename_Stub(IAdviseSink*,IMoniker*);
void __attribute__((__stdcall__)) IAdviseSink_OnSave_Proxy(IAdviseSink*);
void __attribute__((__stdcall__)) IAdviseSink_OnSave_Stub(IAdviseSink*);
void __attribute__((__stdcall__)) IAdviseSink_OnClose_Proxy(IAdviseSink*);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnClose_Stub(IAdviseSink*);
void __attribute__((__stdcall__)) IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2*,IMoniker*);
void __attribute__((__stdcall__)) IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2*,IMoniker*);
void __attribute__((__stdcall__)) IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2*,IMoniker*);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteGetData_Proxy(IDataObject*,FORMATETC*,RemSTGMEDIUM**);
void __attribute__((__stdcall__)) IDataObject_RemoteGetData_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteGetDataHere_Proxy(IDataObject*,FORMATETC*,RemSTGMEDIUM**);
void __attribute__((__stdcall__)) IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_QueryGetData_Proxy(IDataObject*,FORMATETC*);
void __attribute__((__stdcall__)) IDataObject_QueryGetData_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_GetCanonicalFormatEtc_Proxy(IDataObject*,FORMATETC*,FORMATETC*);
void __attribute__((__stdcall__)) IDataObject_GetCanonicalFormatEtc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteSetData_Proxy(IDataObject*,FORMATETC*,RemSTGMEDIUM*,BOOL);
void __attribute__((__stdcall__)) IDataObject_RemoteSetData_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_EnumFormatEtc_Proxy(IDataObject*,DWORD,IEnumFORMATETC**);
void __attribute__((__stdcall__)) IDataObject_EnumFormatEtc_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_DAdvise_Proxy(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
void __attribute__((__stdcall__)) IDataObject_DAdvise_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_DUnadvise_Proxy(IDataObject*,DWORD);
void __attribute__((__stdcall__)) IDataObject_DUnadvise_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_EnumDAdvise_Proxy(IDataObject*,IEnumSTATDATA**);
void __attribute__((__stdcall__)) IDataObject_EnumDAdvise_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataObject_GetData_Proxy(IDataObject*,FORMATETC*,STGMEDIUM*);
HRESULT __attribute__((__stdcall__)) IDataObject_GetData_Stub(IDataObject*,FORMATETC*,RemSTGMEDIUM**);
HRESULT __attribute__((__stdcall__)) IDataObject_GetDataHere_Proxy(IDataObject*,FORMATETC*,STGMEDIUM*);
HRESULT __attribute__((__stdcall__)) IDataObject_GetDataHere_Stub(IDataObject*,FORMATETC*,RemSTGMEDIUM**);
HRESULT __attribute__((__stdcall__)) IDataObject_SetData_Proxy(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
HRESULT __attribute__((__stdcall__)) IDataObject_SetData_Stub(IDataObject*,FORMATETC*,RemSTGMEDIUM*,BOOL);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_Advise_Proxy(IDataAdviseHolder*,IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
void __attribute__((__stdcall__)) IDataAdviseHolder_Advise_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_Unadvise_Proxy(IDataAdviseHolder*,DWORD);
void __attribute__((__stdcall__)) IDataAdviseHolder_Unadvise_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_EnumAdvise_Proxy(IDataAdviseHolder*,IEnumSTATDATA**);
void __attribute__((__stdcall__)) IDataAdviseHolder_EnumAdvise_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_SendOnDataChange_Proxy(IDataAdviseHolder*,IDataObject*,DWORD,DWORD);
void __attribute__((__stdcall__)) IDataAdviseHolder_SendOnDataChange_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
DWORD __attribute__((__stdcall__)) IMessageFilter_HandleInComingCall_Proxy(IMessageFilter*,DWORD,HTASK,DWORD,LPINTERFACEINFO);
void __attribute__((__stdcall__)) IMessageFilter_HandleInComingCall_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
DWORD __attribute__((__stdcall__)) IMessageFilter_RetryRejectedCall_Proxy(IMessageFilter*,HTASK,DWORD,DWORD);
void __attribute__((__stdcall__)) IMessageFilter_RetryRejectedCall_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
DWORD __attribute__((__stdcall__)) IMessageFilter_MessagePending_Proxy(IMessageFilter*,HTASK,DWORD,DWORD);
void __attribute__((__stdcall__)) IMessageFilter_MessagePending_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_GetBuffer_Proxy(IRpcChannelBuffer*,RPCOLEMESSAGE*,const IID&);
void __attribute__((__stdcall__)) IRpcChannelBuffer_GetBuffer_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_SendReceive_Proxy(IRpcChannelBuffer*,RPCOLEMESSAGE*,ULONG*);
void __attribute__((__stdcall__)) IRpcChannelBuffer_SendReceive_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_FreeBuffer_Proxy(IRpcChannelBuffer*,RPCOLEMESSAGE*);
void __attribute__((__stdcall__)) IRpcChannelBuffer_FreeBuffer_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_GetDestCtx_Proxy(IRpcChannelBuffer*,DWORD*,void**);
void __attribute__((__stdcall__)) IRpcChannelBuffer_GetDestCtx_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_IsConnected_Proxy(IRpcChannelBuffer*);
void __attribute__((__stdcall__)) IRpcChannelBuffer_IsConnected_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcProxyBuffer_Connect_Proxy(IRpcProxyBuffer*,IRpcChannelBuffer*pRpcChannelBuffer);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Connect_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Disconnect_Proxy(IRpcProxyBuffer*);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Disconnect_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_Connect_Proxy(IRpcStubBuffer*,IUnknown*);
void __attribute__((__stdcall__)) IRpcStubBuffer_Connect_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IRpcStubBuffer_Disconnect_Proxy(IRpcStubBuffer*);
void __attribute__((__stdcall__)) IRpcStubBuffer_Disconnect_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_Invoke_Proxy(IRpcStubBuffer*,RPCOLEMESSAGE*,IRpcChannelBuffer*);
void __attribute__((__stdcall__)) IRpcStubBuffer_Invoke_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
IRpcStubBuffer*__attribute__((__stdcall__)) IRpcStubBuffer_IsIIDSupported_Proxy(IRpcStubBuffer*,const IID&);
void __attribute__((__stdcall__)) IRpcStubBuffer_IsIIDSupported_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
ULONG __attribute__((__stdcall__)) IRpcStubBuffer_CountRefs_Proxy(IRpcStubBuffer*);
void __attribute__((__stdcall__)) IRpcStubBuffer_CountRefs_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerQueryInterface_Proxy(IRpcStubBuffer*,void**);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerQueryInterface_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerRelease_Proxy(IRpcStubBuffer*,void*);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerRelease_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPSFactoryBuffer_CreateProxy_Proxy(IPSFactoryBuffer*,IUnknown*,const IID&,IRpcProxyBuffer**,void**);
void __attribute__((__stdcall__)) IPSFactoryBuffer_CreateProxy_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
HRESULT __attribute__((__stdcall__)) IPSFactoryBuffer_CreateStub_Proxy(IPSFactoryBuffer*,const IID&,IUnknown*,IRpcStubBuffer**);
void __attribute__((__stdcall__)) IPSFactoryBuffer_CreateStub_Stub(IRpcStubBuffer*,IRpcChannelBuffer*,PRPC_MESSAGE,PDWORD);
void __attribute__((__stdcall__)) SNB_to_xmit(SNB*,RemSNB**);
void __attribute__((__stdcall__)) SNB_from_xmit(RemSNB*,SNB*);
void __attribute__((__stdcall__)) SNB_free_inst(SNB*);
void __attribute__((__stdcall__)) SNB_free_xmit(RemSNB*);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Next_Proxy(IEnumUnknown*,ULONG,IUnknown**,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Next_Stub(IEnumUnknown*,ULONG,IUnknown**,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Next_Proxy(IEnumMoniker*,ULONG,IMoniker**,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Next_Stub(IEnumMoniker*,ULONG,IMoniker**,ULONG*);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToObject_Proxy(IMoniker*,IBindCtx*,IMoniker*,const IID&,void**);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToObject_Stub(IMoniker*,IBindCtx*,IMoniker*,const IID&,IUnknown**);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToStorage_Proxy(IMoniker*,IBindCtx*,IMoniker*,const IID&,void**);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToStorage_Stub(IMoniker*,IBindCtx*,IMoniker*,const IID&,IUnknown**);
HRESULT __attribute__((__stdcall__)) IEnumString_Next_Proxy(IEnumString*,ULONG,LPCSTR*,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumString_Next_Stub(IEnumString*,ULONG,LPCSTR*,ULONG*);
HRESULT __attribute__((__stdcall__)) IStream_Read_Proxy(IStream*,void*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) IStream_Read_Stub(IStream*,BYTE*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) IStream_Write_Proxy(IStream*,void*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) IStream_Write_Stub(IStream*,BYTE*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) IStream_Seek_Proxy(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
HRESULT __attribute__((__stdcall__)) IStream_Seek_Stub(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
HRESULT __attribute__((__stdcall__)) IStream_CopyTo_Proxy(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
HRESULT __attribute__((__stdcall__)) IStream_CopyTo_Stub(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Next_Proxy(IEnumSTATSTG*,ULONG,STATSTG*,ULONG*);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Next_Stub(IEnumSTATSTG*,ULONG,STATSTG*,ULONG*);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStream_Proxy(IStorage*,OLECHAR*,void*,DWORD,DWORD,IStream**);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStream_Stub(IStorage*,OLECHAR*,unsigned long,BYTE*,DWORD,DWORD,IStream** );
HRESULT __attribute__((__stdcall__)) IStorage_EnumElements_Proxy(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
HRESULT __attribute__((__stdcall__)) IStorage_EnumElements_Stub(IStorage*,DWORD,unsigned long,BYTE*,DWORD,IEnumSTATSTG**);
HRESULT __attribute__((__stdcall__)) ILockBytes_ReadAt_Proxy(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) ILockBytes_ReadAt_Stub(ILockBytes*,ULARGE_INTEGER,BYTE*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) ILockBytes_WriteAt_Proxy(ILockBytes*,ULARGE_INTEGER,const void*,ULONG,ULONG*);
HRESULT __attribute__((__stdcall__)) ILockBytes_WriteAt_Stub(ILockBytes*,ULARGE_INTEGER,BYTE*,ULONG,ULONG*);
# 57 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3


inline BOOL IsEqualGUID(const GUID& rguid1, const GUID& rguid2)
        { return !memcmp(&rguid1, &rguid2, sizeof(GUID)); }
inline BOOL operator==(const GUID& guidOne, const GUID& guidOther)
        { return !memcmp(&guidOne,&guidOther,sizeof(GUID)); }
inline BOOL operator!=(const GUID& g1, const GUID& g2)
        { return !(g1 == g2); }





# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/cguid.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/cguid.h" 3



extern "C" {

extern const IID GUID_NULL;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;
extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;
extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;
extern const CLSID CLSID_CStdPropertyFrame;
extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;
extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;
extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;
extern const GUID GUID_TRISTATE;

}
# 71 "C:/PROGRA~1/WIDEST~1/gcc/include/objbase.h" 2 3

typedef enum tagCOINIT {
        COINIT_APARTMENTTHREADED = 0x2,
        COINIT_MULTITHREADED = 0x0,
        COINIT_DISABLE_OLE1DDE = 0x4,
        COINIT_SPEED_OVER_MEMORY = 0x8
} COINIT;
typedef enum tagSTDMSHLFLAGS {
    SMEXF_SERVER = 0x01,
    SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;

extern "C" DWORD __attribute__((__stdcall__)) CoBuildVersion(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoInitialize(PVOID);
extern "C" HRESULT __attribute__((__stdcall__)) CoInitializeEx(LPVOID,DWORD);
extern "C" void __attribute__((__stdcall__)) CoUninitialize(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetMalloc(DWORD,LPMALLOC*);
extern "C" DWORD __attribute__((__stdcall__)) CoGetCurrentProcess(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterMallocSpy(LPMALLOCSPY);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevokeMallocSpy(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateStandardMalloc(DWORD,IMalloc**);




extern "C" HRESULT __attribute__((__stdcall__)) CoGetClassObject(const CLSID&,DWORD,COSERVERINFO*,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterClassObject(const CLSID&,LPUNKNOWN,DWORD,DWORD,PDWORD);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevokeClassObject(DWORD);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetMarshalSizeMax(ULONG*,const IID&,LPUNKNOWN,DWORD,PVOID,DWORD);
extern "C" HRESULT __attribute__((__stdcall__)) CoMarshalInterface(LPSTREAM,const IID&,LPUNKNOWN,DWORD,PVOID,DWORD);
extern "C" HRESULT __attribute__((__stdcall__)) CoUnmarshalInterface(LPSTREAM,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) CoMarshalHresult(LPSTREAM,HRESULT);
extern "C" HRESULT __attribute__((__stdcall__)) CoUnmarshalHresult(LPSTREAM,HRESULT*);
extern "C" HRESULT __attribute__((__stdcall__)) CoReleaseMarshalData(LPSTREAM);
extern "C" HRESULT __attribute__((__stdcall__)) CoDisconnectObject(LPUNKNOWN,DWORD);
extern "C" HRESULT __attribute__((__stdcall__)) CoLockObjectExternal(LPUNKNOWN,BOOL,BOOL);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetStandardMarshal(const IID&,LPUNKNOWN,DWORD,PVOID,DWORD,LPMARSHAL*);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetStdMarshalEx(LPUNKNOWN,DWORD,LPUNKNOWN*);
extern "C" BOOL __attribute__((__stdcall__)) CoIsHandlerConnected(LPUNKNOWN);
extern "C" BOOL __attribute__((__stdcall__)) CoHasStrongExternalConnections(LPUNKNOWN);
extern "C" HRESULT __attribute__((__stdcall__)) CoMarshalInterThreadInterfaceInStream(const IID&,LPUNKNOWN,LPSTREAM*);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetInterfaceAndReleaseStream(LPSTREAM,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateFreeThreadedMarshaler(LPUNKNOWN,LPUNKNOWN*);
extern "C" HINSTANCE __attribute__((__stdcall__)) CoLoadLibrary(LPOLESTR,BOOL);
extern "C" void __attribute__((__stdcall__)) CoFreeLibrary(HINSTANCE);
extern "C" void __attribute__((__stdcall__)) CoFreeAllLibraries(void);
extern "C" void __attribute__((__stdcall__)) CoFreeUnusedLibraries(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateInstance(const CLSID&,LPUNKNOWN,DWORD,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateInstanceEx(const CLSID&,IUnknown*,DWORD,COSERVERINFO*,DWORD,MULTI_QI*);
extern "C" HRESULT __attribute__((__stdcall__)) StringFromCLSID(const CLSID&,LPOLESTR*);
extern "C" HRESULT __attribute__((__stdcall__)) CLSIDFromString(LPOLESTR,LPCLSID);
extern "C" HRESULT __attribute__((__stdcall__)) StringFromIID(const IID&,LPOLESTR*);
extern "C" HRESULT __attribute__((__stdcall__)) IIDFromString(LPOLESTR,LPIID);
extern "C" BOOL __attribute__((__stdcall__)) CoIsOle1Class(const CLSID&);
extern "C" HRESULT __attribute__((__stdcall__)) ProgIDFromCLSID(const CLSID&,LPOLESTR*);
extern "C" HRESULT __attribute__((__stdcall__)) CLSIDFromProgID(LPCOLESTR,LPCLSID);
extern "C" int __attribute__((__stdcall__)) StringFromGUID2(const GUID&,LPOLESTR,int);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateGuid(GUID*);
extern "C" BOOL __attribute__((__stdcall__)) CoFileTimeToDosDateTime(FILETIME*,LPWORD,LPWORD);
extern "C" BOOL __attribute__((__stdcall__)) CoDosDateTimeToFileTime(WORD,WORD,FILETIME*);
extern "C" HRESULT __attribute__((__stdcall__)) CoFileTimeNow(FILETIME*);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterMessageFilter(LPMESSAGEFILTER,LPMESSAGEFILTER*);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetTreatAsClass(const CLSID&,LPCLSID);
extern "C" HRESULT __attribute__((__stdcall__)) CoTreatAsClass(const CLSID&,const CLSID&);
typedef HRESULT (__attribute__((__stdcall__)) *LPFNGETCLASSOBJECT)(const CLSID&,const IID&,PVOID*);
typedef HRESULT (__attribute__((__stdcall__)) *LPFNCANUNLOADNOW)(void);
extern "C" HRESULT __attribute__((__stdcall__)) DllGetClassObject(const CLSID&,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) DllCanUnloadNow(void);
extern "C" PVOID __attribute__((__stdcall__)) CoTaskMemAlloc(ULONG);
extern "C" PVOID __attribute__((__stdcall__)) CoTaskMemRealloc(PVOID,ULONG);
extern "C" void __attribute__((__stdcall__)) CoTaskMemFree(PVOID);
extern "C" HRESULT __attribute__((__stdcall__)) CreateDataAdviseHolder(LPDATAADVISEHOLDER*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateDataCache(LPUNKNOWN,const CLSID&,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) StgCreateDocfile(const OLECHAR*,DWORD,DWORD,IStorage**);
extern "C" HRESULT __attribute__((__stdcall__)) StgCreateDocfileOnILockBytes(ILockBytes*,DWORD,DWORD,IStorage**);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenStorage(const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenStorageOnILockBytes(ILockBytes*,IStorage*,DWORD,SNB,DWORD,IStorage**);
extern "C" HRESULT __attribute__((__stdcall__)) StgIsStorageFile(const OLECHAR*);
extern "C" HRESULT __attribute__((__stdcall__)) StgIsStorageILockBytes(ILockBytes*);
extern "C" HRESULT __attribute__((__stdcall__)) StgSetTimes(OLECHAR const*,FILETIME const*,FILETIME const*,FILETIME const*);
extern "C" HRESULT __attribute__((__stdcall__)) BindMoniker(LPMONIKER,DWORD,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetObject(LPCWSTR,BIND_OPTS*,const IID&,void**);
extern "C" HRESULT __attribute__((__stdcall__)) MkParseDisplayName(LPBC,LPCOLESTR,ULONG*,LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) MonikerRelativePathTo(LPMONIKER,LPMONIKER,LPMONIKER*,BOOL);
extern "C" HRESULT __attribute__((__stdcall__)) MonikerCommonPrefixWith(LPMONIKER,LPMONIKER,LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateBindCtx(DWORD,LPBC*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateGenericComposite(LPMONIKER,LPMONIKER,LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) GetClassFile (LPCOLESTR,CLSID*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateFileMoniker(LPCOLESTR,LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateItemMoniker(LPCOLESTR,LPCOLESTR,LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateAntiMoniker(LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) CreatePointerMoniker(LPUNKNOWN,LPMONIKER*);
extern "C" HRESULT __attribute__((__stdcall__)) GetRunningObjectTable(DWORD,LPRUNNINGOBJECTTABLE*);
extern "C" HRESULT __attribute__((__stdcall__)) CoInitializeSecurity(PSECURITY_DESCRIPTOR,LONG,SOLE_AUTHENTICATION_SERVICE*, void*,DWORD,DWORD,void*,DWORD,void*);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetCallContext(const IID&,void**);
extern "C" HRESULT __attribute__((__stdcall__)) CoQueryProxyBlanket(IUnknown*, DWORD*,DWORD*,OLECHAR**,DWORD*,DWORD*,RPC_AUTH_IDENTITY_HANDLE*,DWORD*);
extern "C" HRESULT __attribute__((__stdcall__)) CoSetProxyBlanket(IUnknown*,DWORD,DWORD,OLECHAR*,DWORD,DWORD,RPC_AUTH_IDENTITY_HANDLE, DWORD);
extern "C" HRESULT __attribute__((__stdcall__)) CoCopyProxy(IUnknown*,IUnknown**);
extern "C" HRESULT __attribute__((__stdcall__)) CoQueryClientBlanket(DWORD*,DWORD*,OLECHAR**, DWORD*,DWORD*,RPC_AUTHZ_HANDLE*,DWORD*);
extern "C" HRESULT __attribute__((__stdcall__)) CoImpersonateClient(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevertToSelf(void);
extern "C" HRESULT __attribute__((__stdcall__)) CoQueryAuthenticationServices(DWORD*, SOLE_AUTHENTICATION_SERVICE**);
extern "C" HRESULT __attribute__((__stdcall__)) CoSwitchCallContext(IUnknown*,IUnknown**);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetInstanceFromFile(COSERVERINFO*, CLSID*,IUnknown*,DWORD,DWORD,OLECHAR*,DWORD,MULTI_QI*);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetInstanceFromIStorage(COSERVERINFO*,CLSID*, IUnknown*,DWORD,struct IStorage*, DWORD,MULTI_QI*);

#pragma pack(pop)
# 10 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/olectlid.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/olectlid.h" 3



extern "C" {


extern const GUID IID_IDispatch;
extern const GUID IID_IPropertyNotifySink;
extern const GUID IID_IClassFactory2;
extern const GUID IID_IProvideClassInfo;
extern const GUID IID_IProvideClassInfo2;
extern const GUID IID_IConnectionPointContainer;
extern const GUID IID_IEnumConnectionPoints;
extern const GUID IID_IConnectionPoint;
extern const GUID IID_IEnumConnections;
extern const GUID IID_IOleControl;
extern const GUID IID_IOleControlSite;
extern const GUID IID_ISimpleFrameSite;
extern const GUID IID_IPersistStreamInit;
extern const GUID IID_IPersistMemory;
extern const GUID IID_IPersistPropertyBag;
extern const GUID IID_IPropertyBag;
extern const GUID IID_IErrorLog;
extern const GUID IID_IPropertyFrame;
extern const GUID IID_ISpecifyPropertyPages;
extern const GUID IID_IPerPropertyBrowsing;
extern const GUID IID_IPropertyPageSite;
extern const GUID IID_IPropertyPage;
extern const GUID IID_IPropertyPage2;
extern const GUID CLSID_CFontPropPage;
extern const GUID CLSID_CColorPropPage;
extern const GUID CLSID_CPicturePropPage;
extern const GUID CLSID_PersistPropset;
extern const GUID CLSID_ConvertVBX;
extern const GUID CLSID_StdFont;
extern const GUID CLSID_StdPicture;
extern const GUID IID_IFont;
extern const GUID IID_IFontDisp;
extern const GUID IID_IPicture;
extern const GUID IID_IPictureDisp;
extern const GUID GUID_HIMETRIC;
extern const GUID GUID_COLOR;
extern const GUID GUID_XPOSPIXEL;
extern const GUID GUID_YPOSPIXEL;
extern const GUID GUID_XSIZEPIXEL;
extern const GUID GUID_YSIZEPIXEL;
extern const GUID GUID_XPOS;
extern const GUID GUID_YPOS;
extern const GUID GUID_XSIZE;
extern const GUID GUID_YSIZE;
extern const GUID GUID_TRISTATE;
extern const GUID GUID_OPTIONVALUEEXCLUSIVE;
extern const GUID GUID_CHECKVALUEEXCLUSIVE;
extern const GUID GUID_FONTNAME;
extern const GUID GUID_FONTSIZE;
extern const GUID GUID_FONTBOLD;
extern const GUID GUID_FONTITALIC;
extern const GUID GUID_FONTUNDERSCORE;
extern const GUID GUID_FONTSTRIKETHROUGH;
extern const GUID GUID_HANDLE;
extern const GUID IID_IEnumUnknown;
extern const GUID IID_IEnumString;
extern const GUID IID_IEnumMoniker;
extern const GUID IID_IEnumFORMATETC;
extern const GUID IID_IEnumOLEVERB;
extern const GUID IID_IEnumSTATDATA;
extern const GUID IID_IEnumSTATSTG;
extern const GUID IID_IEnumGeneric;
extern const GUID IID_IEnumHolder;
extern const GUID IID_IEnumCallback;
extern const GUID IID_IPersistStream;
extern const GUID IID_IPersistStorage;
extern const GUID IID_IPersistFile;
extern const GUID IID_IPersist;
extern const GUID IID_IViewObject;
extern const GUID IID_IDataObject;
extern const GUID IID_IAdviseSink;
extern const GUID IID_IDataAdviseHolder;
extern const GUID IID_IOleAdviseHolder;
extern const GUID IID_IOleObject;
extern const GUID IID_IOleInPlaceObject;
extern const GUID IID_IOleWindow;
extern const GUID IID_IOleInPlaceUIWindow;
extern const GUID IID_IOleInPlaceFrame;
extern const GUID IID_IOleInPlaceActiveObject;
extern const GUID IID_IOleClientSite;
extern const GUID IID_IOleInPlaceSite;
extern const GUID IID_IParseDisplayName;
extern const GUID IID_IOleContainer;
extern const GUID IID_IOleItemContainer;
extern const GUID IID_IOleLink;
extern const GUID IID_IOleCache;
extern const GUID IID_IOleManager;
extern const GUID IID_IOlePresObj;
extern const GUID IID_IDropSource;
extern const GUID IID_IDropTarget;
extern const GUID IID_IDebug;
extern const GUID IID_IDebugStream;
extern const GUID IID_IAdviseSink2;
extern const GUID IID_IRunnableObject;
extern const GUID IID_IViewObject2;
extern const GUID IID_IOleCache2;
extern const GUID IID_IOleCacheControl;
extern const GUID CLSID_Picture_Metafile;
extern const GUID CLSID_Picture_Dib;


}
# 11 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/oleauto.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/oleauto.h" 3


#pragma pack(push,8)
# 83 "C:/PROGRA~1/WIDEST~1/gcc/include/oleauto.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/oaidl.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/oaidl.h" 3



extern "C" {
# 56 "C:/PROGRA~1/WIDEST~1/gcc/include/oaidl.h" 3
typedef struct ITypeLib *LPTYPELIB;
typedef struct ICreateTypeInfo *LPCREATETYPEINFO;
typedef struct ICreateTypeInfo2 *LPCREATETYPEINFO2;
typedef struct ICreateTypeLib *LPCREATETYPELIB;
typedef struct ICreateTypeLib2 *LPCREATETYPELIB2;
typedef struct ITypeComp *LPTYPECOMP;
typedef struct ITypeInfo *LPTYPEINFO;
typedef struct IErrorInfo *LPERRORINFO;
typedef struct IDispatch *LPDISPATCH;
typedef struct IEnumVARIANT *LPENUMVARIANT;
typedef struct ICreateErrorInfo *LPCREATEERRORINFO;
typedef struct ISupportErrorInfo *LPSUPPORTERRORINFO;
typedef struct IRecordInfo *LPRECORDINFO;

extern const IID IID_ITypeLib;
extern const IID IID_ICreateTypeInfo;
extern const IID IID_ICreateTypeInfo2;
extern const IID IID_ICreateTypeLib;
extern const IID IID_ICreateTypeLib2;
extern const IID IID_ITypeInfo;
extern const IID IID_IErrorInfo;
extern const IID IID_IDispatch;
extern const IID IID_IEnumVARIANT;
extern const IID IID_ICreateErrorInfo;
extern const IID IID_ISupportErrorInfo;
extern const IID IID_IRecordInfo;

typedef enum tagSYSKIND {
        SYS_WIN16,SYS_WIN32,SYS_MAC
} SYSKIND;
typedef enum tagLIBFLAGS {
        LIBFLAG_FRESTRICTED=1,LIBFLAG_FCONTROL=2,LIBFLAG_FHIDDEN=4,
        LIBFLAG_FHASDISKIMAGE=8
} LIBFLAGS;
typedef struct tagTLIBATTR {
        GUID guid;
        LCID lcid;
        SYSKIND syskind;
        WORD wMajorVerNum;
        WORD wMinorVerNum;
        WORD wLibFlags;
} TLIBATTR,*LPTLIBATTR;
typedef CY CURRENCY;
typedef struct tagSAFEARRAYBOUND {
        ULONG cElements;
        LONG lLbound;
}SAFEARRAYBOUND,*LPSAFEARRAYBOUND;
typedef struct _wireSAFEARR_BSTR
{
        ULONG Size;
        wireBSTR *aBstr;
}SAFEARR_BSTR;
typedef struct _wireSAFEARR_UNKNOWN {
        ULONG Size;
        IUnknown **apUnknown;
}SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_DISPATCH {
        ULONG Size;
        LPDISPATCH *apDispatch;
}SAFEARR_DISPATCH;
typedef struct _wireSAFEARR_VARIANT {
        ULONG Size;
        struct _wireVARIANT *aVariant;
}SAFEARR_VARIANT;
typedef enum tagSF_TYPE {
        SF_ERROR=VT_ERROR,
        SF_I1=VT_I1,
        SF_I2=VT_I2,
        SF_I4=VT_I4,
        SF_I8=VT_I8,
        SF_BSTR=VT_BSTR,
        SF_UNKNOWN=VT_UNKNOWN,
        SF_DISPATCH=VT_DISPATCH,
        SF_VARIANT=VT_VARIANT
}SF_TYPE;
typedef struct _wireBRECORD {
        ULONG fFlags;
        ULONG clSize;
        LPRECORDINFO* pRecInfo;
        byte* pRecord;
} *wireBRECORD;
typedef struct _wireSAFEARR_BRECORD {
    ULONG Size;
    wireBRECORD* aRecord;
    } SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID {
        ULONG Size;
        IUnknown** apUnknown;
        IID iid;
        } SAFEARR_HAVEIID;
typedef struct _wireSAFEARRAY_UNION {
        ULONG sfType;
        union {
                SAFEARR_BSTR BstrStr;
                SAFEARR_UNKNOWN UnknownStr;
                SAFEARR_DISPATCH DispatchStr;
                SAFEARR_VARIANT VariantStr;
                SAFEARR_BRECORD RecordStr;
                SAFEARR_HAVEIID HaveIidStr;
                BYTE_SIZEDARR ByteStr;
                WORD_SIZEDARR WordStr;
                DWORD_SIZEDARR LongStr;
                HYPER_SIZEDARR HyperStr;
        }u;
}SAFEARRAYUNION;
typedef struct _wireSAFEARRAY {
        USHORT cDims;
        USHORT fFeatures;
        ULONG cbElements;
        ULONG cLocks;
        SAFEARRAYUNION uArrayStructs;
        SAFEARRAYBOUND rgsabound[1];
}*wireSAFEARRAY;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef struct tagSAFEARRAY {
        USHORT cDims;
        USHORT fFeatures;
        ULONG cbElements;
        ULONG cLocks;
        PVOID pvData;
        SAFEARRAYBOUND rgsabound[1];
}SAFEARRAY,*LPSAFEARRAY;

__extension__

typedef struct tagVARIANT {
  __extension__ union {
        struct {
        VARTYPE vt;
        WORD wReserved1;
        WORD wReserved2;
        WORD wReserved3;
        __extension__ union {
                long lVal;
                unsigned char bVal;
                short iVal;
                float fltVal;
                double dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                LPDISPATCH pdispVal;
                SAFEARRAY *parray;
                unsigned char *pbVal;
                short *piVal;
                long *plVal;
                float *pfltVal;
                double *pdblVal;
                VARIANT_BOOL *pboolVal;
                _VARIANT_BOOL *pbool;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                LPDISPATCH *ppdispVal;
                SAFEARRAY **pparray;
                struct tagVARIANT *pvarVal;
                void *byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                INT *pintVal;
                UINT *puintVal;
                __extension__ struct {
                        PVOID pvRecord;
                        struct IRecordInfo *pRecInfo;
                } ;
        } ;
    } ;
    DECIMAL decVal;
  } ;
} VARIANT,*LPVARIANT;
typedef VARIANT VARIANTARG;
typedef VARIANT *LPVARIANTARG;
typedef struct _wireVARIANT {
        DWORD clSize;
        DWORD rpcReserved;
        USHORT vt;
        USHORT wReserved1;
        USHORT wReserved2;
        USHORT wReserved3;
        __extension__ union {
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                CY cyVal;
                DATE date;
                wireBSTR bstrVal;
                IUnknown *punkVal;
                LPDISPATCH pdispVal;
                wirePSAFEARRAY parray;
                wireBRECORD brecVal;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                wireBSTR *pbstrVal;
                IUnknown **ppunkVal;
                LPDISPATCH *ppdispVal;
                wirePSAFEARRAY *pparray;
                struct _wireVARIANT *pvarVal;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                DECIMAL decVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                INT *pintVal;
                UINT *puintVal;
        } ;
} *wireVARIANT;
typedef LONG DISPID;
typedef DISPID MEMBERID;
typedef DWORD HREFTYPE;
typedef enum tagTYPEKIND {
        TKIND_ENUM,TKIND_RECORD,TKIND_MODULE,TKIND_INTERFACE,TKIND_DISPATCH,
        TKIND_COCLASS,TKIND_ALIAS,TKIND_UNION,TKIND_MAX
}TYPEKIND;
typedef struct tagTYPEDESC {
        __extension__ union {
                struct tagTYPEDESC *lptdesc;
                struct tagARRAYDESC *lpadesc;
                HREFTYPE hreftype;
        } ;
        VARTYPE vt;
}TYPEDESC;
typedef struct tagARRAYDESC {
        TYPEDESC tdescElem;
        USHORT cDims;
        SAFEARRAYBOUND rgbounds[1];
}ARRAYDESC;
typedef struct tagPARAMDESCEX {
        ULONG cBytes;
        VARIANTARG varDefaultValue;
}PARAMDESCEX,*LPPARAMDESCEX;
typedef struct tagPARAMDESC {
        LPPARAMDESCEX pparamdescex;
        USHORT wParamFlags;
}PARAMDESC,*LPPARAMDESC;
typedef struct tagIDLDESC {
        ULONG dwReserved;
        USHORT wIDLFlags;
}IDLDESC,*LPIDLDESC;
typedef struct tagELEMDESC {
        TYPEDESC tdesc;
        __extension__ union {
                IDLDESC idldesc;
                PARAMDESC paramdesc;
        } ;
} ELEMDESC,*LPELEMDESC;
typedef struct tagTYPEATTR {
        GUID guid;
        LCID lcid;
        DWORD dwReserved;
        MEMBERID memidConstructor;
        MEMBERID memidDestructor;
        LPOLESTR lpstrSchema;
        ULONG cbSizeInstance;
        TYPEKIND typekind;
        WORD cFuncs;
        WORD cVars;
        WORD cImplTypes;
        WORD cbSizeVft;
        WORD cbAlignment;
        WORD wTypeFlags;
        WORD wMajorVerNum;
        WORD wMinorVerNum;
        TYPEDESC tdescAlias;
        IDLDESC idldescType;
}TYPEATTR,*LPTYPEATTR;
typedef struct tagDISPPARAMS {
        VARIANTARG *rgvarg;
        DISPID *rgdispidNamedArgs;
        UINT cArgs;
        UINT cNamedArgs;
}DISPPARAMS;
typedef struct tagEXCEPINFO {
        WORD wCode;
        WORD wReserved;
        BSTR bstrSource;
        BSTR bstrDescription;
        BSTR bstrHelpFile;
        DWORD dwHelpContext;
        PVOID pvReserved;
        HRESULT(__attribute__((__stdcall__)) * pfnDeferredFillIn)(struct tagEXCEPINFO*);
        SCODE scode;
} EXCEPINFO,*LPEXCEPINFO;
typedef enum tagCALLCONV {
        CC_FASTCALL,CC_CDECL,CC_MSCPASCAL,CC_PASCAL=CC_MSCPASCAL,
        CC_MACPASCAL,CC_STDCALL,CC_FPFASTCALL,CC_SYSCALL,CC_MPWCDECL,
        CC_MPWPASCAL,CC_MAX=CC_MPWPASCAL
}CALLCONV;
typedef enum tagFUNCKIND {
        FUNC_VIRTUAL,FUNC_PUREVIRTUAL,FUNC_NONVIRTUAL,
        FUNC_STATIC,FUNC_DISPATCH
}FUNCKIND;
typedef enum tagINVOKEKIND {
        INVOKE_FUNC=1,INVOKE_PROPERTYGET,INVOKE_PROPERTYPUT=4,
        INVOKE_PROPERTYPUTREF=8
}INVOKEKIND;
typedef struct tagFUNCDESC {
        MEMBERID memid;
        SCODE *lprgscode;
        ELEMDESC *lprgelemdescParam;
        FUNCKIND funckind;
        INVOKEKIND invkind;
        CALLCONV callconv;
        SHORT cParams;
        SHORT cParamsOpt;
        SHORT oVft;
        SHORT cScodes;
        ELEMDESC elemdescFunc;
        WORD wFuncFlags;
}FUNCDESC,*LPFUNCDESC;
typedef enum tagVARKIND {
        VAR_PERINSTANCE,VAR_STATIC,VAR_CONST,VAR_DISPATCH
} VARKIND;
typedef struct tagVARDESC {
        MEMBERID memid;
        LPOLESTR lpstrSchema;
        __extension__ union {
                ULONG oInst;
                VARIANT *lpvarValue;
        } ;
        ELEMDESC elemdescVar;
        WORD wVarFlags;
        VARKIND varkind;
} VARDESC,*LPVARDESC;
typedef enum tagTYPEFLAGS {
        TYPEFLAG_FAPPOBJECT=1,TYPEFLAG_FCANCREATE=2,TYPEFLAG_FLICENSED=4,
        TYPEFLAG_FPREDECLID=8,TYPEFLAG_FHIDDEN=16,TYPEFLAG_FCONTROL=32,
        TYPEFLAG_FDUAL=64,TYPEFLAG_FNONEXTENSIBLE=128,
        TYPEFLAG_FOLEAUTOMATION=256,TYPEFLAG_FRESTRICTED=512,
        TYPEFLAG_FAGGREGATABLE=1024,TYPEFLAG_FREPLACEABLE=2048,
        TYPEFLAG_FDISPATCHABLE=4096,TYPEFLAG_FREVERSEBIND=8192
} TYPEFLAGS;
typedef enum tagFUNCFLAGS {
        FUNCFLAG_FRESTRICTED=1,FUNCFLAG_FSOURCE=2,FUNCFLAG_FBINDABLE=4,
        FUNCFLAG_FREQUESTEDIT=8,FUNCFLAG_FDISPLAYBIND=16,FUNCFLAG_FDEFAULTBIND=32,
        FUNCFLAG_FHIDDEN=64,FUNCFLAG_FUSESGETLASTERROR=128,FUNCFLAG_FDEFAULTCOLLELEM=256,
        FUNCFLAG_FUIDEFAULT=512,FUNCFLAG_FNONBROWSABLE=1024,FUNCFLAG_FREPLACEABLE=2048,
        FUNCFLAG_FIMMEDIATEBIND=4096
} FUNCFLAGS;
typedef enum tagVARFLAGS {
        VARFLAG_FREADONLY=1,VARFLAG_FSOURCE=2,VARFLAG_FBINDABLE=4,VARFLAG_FREQUESTEDIT=8,
        VARFLAG_FDISPLAYBIND=16,VARFLAG_FDEFAULTBIND=32,VARFLAG_FHIDDEN=64,VARFLAG_FRESTRICTED=128,
        VARFLAG_FDEFAULTCOLLELEM=256,VARFLAG_FUIDEFAULT=512,VARFLAG_FNONBROWSABLE=1024,
        VARFLAG_FREPLACEABLE=2048,VARFLAG_FIMMEDIATEBIND=4096
} VARFLAGS;
typedef struct tagCLEANLOCALSTORAGE {
        IUnknown *pInterface;
        PVOID pStorage;
        DWORD flags;
} CLEANLOCALSTORAGE;
typedef struct tagCUSTDATAITEM {
        GUID guid;
        VARIANTARG varValue;
} CUSTDATAITEM,*LPCUSTDATAITEM;
typedef struct tagCUSTDATA {
        DWORD cCustData;
        LPCUSTDATAITEM prgCustData;
} CUSTDATA,*LPCUSTDATA;

typedef enum tagDESCKIND {
        DESCKIND_NONE=0,DESCKIND_FUNCDESC=DESCKIND_NONE+1,
        DESCKIND_VARDESC=DESCKIND_FUNCDESC+1,DESCKIND_TYPECOMP=DESCKIND_VARDESC+1,
        DESCKIND_IMPLICITAPPOBJ=DESCKIND_TYPECOMP+1,
        DESCKIND_MAX=DESCKIND_IMPLICITAPPOBJ+1
} DESCKIND;

typedef union tagBINDPTR {
        LPFUNCDESC lpfuncdesc;
        LPVARDESC lpvardesc;
        LPTYPECOMP lptcomp;
} BINDPTR,*LPBINDPTR;



struct IDispatch : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeInfoCount( UINT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeInfo( UINT,LCID,LPTYPEINFO*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetIDsOfNames( const IID&,LPOLESTR*,UINT,LCID,DISPID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Invoke( DISPID,const IID&,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*) =0;
};



struct IEnumVARIANT : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,VARIANT*,ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0;
        virtual HRESULT __attribute__((__stdcall__)) Reset(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumVARIANT**) =0;
};



struct ITypeComp : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Bind( LPOLESTR,ULONG,WORD,LPTYPEINFO*,DESCKIND*,LPBINDPTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) BindType( LPOLESTR,ULONG,LPTYPEINFO*,LPTYPECOMP*) =0;
};



struct ITypeInfo : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeAttr( LPTYPEATTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeComp( LPTYPECOMP*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetFuncDesc( UINT,LPFUNCDESC*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetVarDesc( UINT,LPVARDESC*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetNames( MEMBERID,BSTR*,UINT,UINT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetRefTypeOfImplType( UINT,HREFTYPE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetImplTypeFlags( UINT,INT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetIDsOfNames( LPOLESTR*,UINT,MEMBERID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Invoke( PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDocumentation( MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDllEntry( MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetRefTypeInfo( HREFTYPE,LPTYPEINFO*) =0;
        virtual HRESULT __attribute__((__stdcall__)) AddressOfMember( MEMBERID,INVOKEKIND,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) CreateInstance( LPUNKNOWN,const IID&,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetMops( MEMBERID,BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetContainingTypeLib( LPTYPELIB*,UINT*) =0;
        virtual void __attribute__((__stdcall__)) ReleaseTypeAttr( LPTYPEATTR) =0;
        virtual void __attribute__((__stdcall__)) ReleaseFuncDesc( LPFUNCDESC) =0;
        virtual void __attribute__((__stdcall__)) ReleaseVarDesc( LPVARDESC) =0;
};



struct ITypeLib : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual UINT __attribute__((__stdcall__)) GetTypeInfoCount(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeInfo( UINT,ITypeInfo**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeInfoType( UINT,TYPEKIND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeInfoOfGuid( const GUID&,ITypeInfo**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetLibAttr( TLIBATTR**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeComp( ITypeComp*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDocumentation( INT,BSTR*,BSTR*,DWORD*,BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsName( LPOLESTR,ULONG,BOOL*) =0;
        virtual HRESULT __attribute__((__stdcall__)) FindName( LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*) =0;
        virtual void __attribute__((__stdcall__)) ReleaseTLibAttr( TLIBATTR*) =0;
};

extern "C" const IID IID_IErrorInfo;


struct IErrorInfo : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetGUID( GUID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetSource( BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetDescription( BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetHelpFile( BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetHelpContext( DWORD*) =0;
};

extern "C" const IID IID_ICreateErrorInfo;


struct ICreateErrorInfo : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*)=0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetGUID( const GUID&) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetSource( LPOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetDescription( LPOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetHelpFile( LPOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetHelpContext( DWORD) =0;
};

extern "C" const IID IID_ISupportErrorInfo;


struct ISupportErrorInfo : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) InterfaceSupportsErrorInfo( const IID&) =0;
};

extern "C" const IID IID_IRecordInfo;


struct IRecordInfo : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) RecordInit( PVOID) =0;
        virtual HRESULT __attribute__((__stdcall__)) RecordClear( PVOID) =0;
        virtual HRESULT __attribute__((__stdcall__)) RecordCopy( PVOID, PVOID) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetGuid( GUID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetName( BSTR*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetSize( ULONG*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetTypeInfo( ITypeInfo**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetField( PVOID,LPCOLESTR,VARIANT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetFieldNoCopy( PVOID,LPCOLESTR,VARIANT*,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) PutField( ULONG,PVOID,LPCOLESTR, VARIANT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) PutFieldNoCopy( ULONG,PVOID,LPCOLESTR,VARIANT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetFieldNames( ULONG*,BSTR*) =0;
        virtual BOOL __attribute__((__stdcall__)) IsMatchingType( void) =0;
        virtual PVOID __attribute__((__stdcall__)) RecordCreate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) RecordCreateCopy( PVOID,PVOID*) =0;
        virtual HRESULT __attribute__((__stdcall__)) RecordDestroy( PVOID) =0;
};


}
# 84 "C:/PROGRA~1/WIDEST~1/gcc/include/oleauto.h" 2 3

typedef enum tagREGKIND {
        REGKIND_DEFAULT,
        REGKIND_REGISTER,
        REGKIND_NONE
} REGKIND;
typedef struct tagPARAMDATA {
        OLECHAR *szName;
        VARTYPE vt;
} PARAMDATA,*LPPARAMDATA;
typedef struct tagMETHODDATA {
        OLECHAR *szName;
        PARAMDATA *ppdata;
        DISPID dispid;
        UINT iMeth;
        CALLCONV cc;
        UINT cArgs;
        WORD wFlags;
        VARTYPE vtReturn;
} METHODDATA,*LPMETHODDATA;
typedef struct tagINTERFACEDATA {
        METHODDATA *pmethdata;
        UINT cMembers;
} INTERFACEDATA,*LPINTERFACEDATA;

extern "C" BSTR __attribute__((__stdcall__)) SysAllocString(const OLECHAR*);
extern "C" int __attribute__((__stdcall__)) SysReAllocString(BSTR*,const OLECHAR*);
extern "C" BSTR __attribute__((__stdcall__)) SysAllocStringLen(const OLECHAR*,unsigned int);
extern "C" int __attribute__((__stdcall__)) SysReAllocStringLen(BSTR*,const OLECHAR*,unsigned int);
extern "C" void __attribute__((__stdcall__)) SysFreeString(BSTR);
extern "C" unsigned int __attribute__((__stdcall__)) SysStringLen(BSTR);
extern "C" unsigned int __attribute__((__stdcall__)) SysStringByteLen(BSTR);
extern "C" BSTR __attribute__((__stdcall__)) SysAllocStringByteLen(const char*,unsigned int);
extern "C" int __attribute__((__stdcall__)) DosDateTimeToVariantTime(unsigned short,unsigned short,double*);
extern "C" int __attribute__((__stdcall__)) VariantTimeToDosDateTime(double,unsigned short*,unsigned short*);
extern "C" int __attribute__((__stdcall__)) VariantTimeToSystemTime(double,LPSYSTEMTIME);
extern "C" int __attribute__((__stdcall__)) SystemTimeToVariantTime(LPSYSTEMTIME, double*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAllocDescriptor(unsigned int,SAFEARRAY**);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAllocData(SAFEARRAY*);
extern "C" SAFEARRAY* __attribute__((__stdcall__)) SafeArrayCreate(VARTYPE,unsigned int,SAFEARRAYBOUND*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayDestroyDescriptor(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayDestroyData(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayDestroy(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayRedim(SAFEARRAY*,SAFEARRAYBOUND*);
extern "C" unsigned int __attribute__((__stdcall__)) SafeArrayGetDim(SAFEARRAY*);
extern "C" unsigned int __attribute__((__stdcall__)) SafeArrayGetElemsize(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetUBound(SAFEARRAY*,unsigned int,long*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetLBound(SAFEARRAY*,unsigned int,long*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayLock(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayUnlock(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAccessData(SAFEARRAY*,void**);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayUnaccessData(SAFEARRAY*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetElement(SAFEARRAY*,long*,void*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayPutElement(SAFEARRAY*,long*,void*);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayCopy(SAFEARRAY*,SAFEARRAY**);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayPtrOfIndex(SAFEARRAY*,long*,void**);
extern "C" SAFEARRAY* __attribute__((__stdcall__)) SafeArrayCreateVector(VARTYPE,LONG,UINT);
extern "C" void __attribute__((__stdcall__)) VariantInit(VARIANTARG*);
extern "C" HRESULT __attribute__((__stdcall__)) VariantClear(VARIANTARG*);
extern "C" HRESULT __attribute__((__stdcall__)) VariantCopy(VARIANTARG*,VARIANTARG*);
extern "C" HRESULT __attribute__((__stdcall__)) VariantCopyInd(VARIANT*,VARIANTARG*);
extern "C" HRESULT __attribute__((__stdcall__)) VariantChangeType(VARIANTARG*,VARIANTARG*,unsigned short,VARTYPE);
extern "C" HRESULT __attribute__((__stdcall__)) VariantChangeTypeEx(VARIANTARG*,VARIANTARG*,LCID,unsigned short,VARTYPE);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromI2(short,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromI4(long,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromR4(float,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromR8(double,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromCy(CY,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromDate(DATE,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromStr(OLECHAR*,LCID,unsigned long,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromDisp(LPDISPATCH*,LCID,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromBool(VARIANT_BOOL,unsigned char*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromUI1(unsigned char,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromI4(long,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromR4(float,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromR8(double,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromCy(CY cyIn,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromDate(DATE,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromStr(OLECHAR*,LCID,unsigned long,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromDisp(LPDISPATCH*,LCID,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromBool(VARIANT_BOOL,short*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromUI1(unsigned char,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromI2(short,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromR4(float,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromR8(double,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromCy(CY,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromDate(DATE,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromStr(OLECHAR*,LCID,unsigned long,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromDisp(LPDISPATCH*,LCID,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromBool(VARIANT_BOOL,long*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromUI1(unsigned char,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromI2(short,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromI4(long,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromR8(double,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromCy(CY,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromDate(DATE,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromStr(OLECHAR*,LCID,unsigned long,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromDisp(LPDISPATCH*,LCID,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromBool(VARIANT_BOOL,float*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromUI1(unsigned char,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromI2(short,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromI4(long,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromR4(float,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromCy(CY,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromDate(DATE,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromStr(OLECHAR*,LCID,unsigned long,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromDisp(LPDISPATCH*,LCID,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromBool(VARIANT_BOOL,double*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUI1(unsigned char,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromI2(short,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromI4(long,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromR4(float,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromR8(double,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromCy(CY,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromStr(OLECHAR*,LCID,unsigned long,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromDisp(LPDISPATCH*,LCID,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromBool(VARIANT_BOOL,DATE*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromUI1(unsigned char,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromI2(short,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromI4(long,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromR4(float,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromR8(double,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromDate(DATE,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromStr(OLECHAR*,LCID,unsigned long,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromDisp(LPDISPATCH*,LCID,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromBool(VARIANT_BOOL,CY*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromUI1(unsigned char,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromI2(short,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromI4(long,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromR4(float,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromR8(double,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromCy(CY,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromDate(DATE,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromDisp(LPDISPATCH*,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromBool(VARIANT_BOOL,LCID,unsigned long,BSTR*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromUI1(unsigned char,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromI2(short,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromI4(long,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromR4(float,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromR8(double,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromDate(DATE,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromCy(CY,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromStr(OLECHAR*,LCID,unsigned long,VARIANT_BOOL*);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromDisp(LPDISPATCH*,LCID,VARIANT_BOOL*);
extern "C" ULONG __attribute__((__stdcall__)) LHashValOfNameSysA(SYSKIND,LCID,const char*);
extern "C" ULONG __attribute__((__stdcall__)) LHashValOfNameSys(SYSKIND,LCID,const OLECHAR*);
extern "C" HRESULT __attribute__((__stdcall__)) LoadTypeLib(const OLECHAR*,LPTYPELIB*);
extern "C" HRESULT __attribute__((__stdcall__)) LoadTypeLibEx(LPCOLESTR,REGKIND,LPTYPELIB*);
extern "C" HRESULT __attribute__((__stdcall__)) LoadRegTypeLib(const GUID&,WORD,WORD,LCID,LPTYPELIB*);
extern "C" HRESULT __attribute__((__stdcall__)) QueryPathOfRegTypeLib(const GUID&,unsigned short,unsigned short,LCID,LPBSTR);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterTypeLib(LPTYPELIB,OLECHAR*,OLECHAR*);
extern "C" HRESULT __attribute__((__stdcall__)) DeregisterTypeLib(const GUID&,WORD,WORD,LCID);
extern "C" HRESULT __attribute__((__stdcall__)) CreateTypeLib(SYSKIND,const OLECHAR*,LPCREATETYPELIB*);
extern "C" HRESULT __attribute__((__stdcall__)) DispGetParam(DISPPARAMS*,UINT,VARTYPE,VARIANT*,UINT*);
extern "C" HRESULT __attribute__((__stdcall__)) DispGetIDsOfNames(LPTYPEINFO,OLECHAR**,UINT,DISPID*);
extern "C" HRESULT __attribute__((__stdcall__)) DispInvoke(void*,LPTYPEINFO,DISPID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateDispTypeInfo(INTERFACEDATA*,LCID,LPTYPEINFO*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateStdDispatch(IUnknown*,void*,LPTYPEINFO,IUnknown**);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterActiveObject(IUnknown*,const CLSID&,DWORD,DWORD*);
extern "C" HRESULT __attribute__((__stdcall__)) RevokeActiveObject(DWORD,void*);
extern "C" HRESULT __attribute__((__stdcall__)) GetActiveObject(const CLSID&,void*,IUnknown**);
extern "C" HRESULT __attribute__((__stdcall__)) SetErrorInfo(unsigned long,LPERRORINFO);
extern "C" HRESULT __attribute__((__stdcall__)) GetErrorInfo(unsigned long,LPERRORINFO*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateErrorInfo(LPCREATEERRORINFO*);
extern "C" unsigned long __attribute__((__stdcall__)) OaBuildVersion(void);
extern "C" HRESULT __attribute__((__stdcall__)) VectorFromBstr (BSTR, SAFEARRAY **);
extern "C" HRESULT __attribute__((__stdcall__)) BstrFromVector (SAFEARRAY *, BSTR *);

extern "C" HRESULT __attribute__((__stdcall__)) VarAdd(LPVARIANT, LPVARIANT, LPVARIANT);
extern "C" HRESULT __attribute__((__stdcall__)) VarSub(LPVARIANT, LPVARIANT, LPVARIANT);
extern "C" HRESULT __attribute__((__stdcall__)) VarMul(LPVARIANT, LPVARIANT, LPVARIANT);
extern "C" HRESULT __attribute__((__stdcall__)) VarDiv(LPVARIANT, LPVARIANT, LPVARIANT);
#pragma pack(pop)
# 12 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 2 3


extern "C" {
# 29 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/oleidl.h" 1 3
# 5 "C:/PROGRA~1/WIDEST~1/gcc/include/oleidl.h" 3



extern "C" {






typedef struct IParseDisplayname *LPPARSEDISPLAYNAME;
typedef struct IOleContainer *LPOLECONTAINER;
typedef struct IOleClientSite *LPOLECLIENTSITE;
typedef struct IOleObject *LPOLEOBJECT;
typedef struct IDropTarget *LPDROPTARGET;
typedef struct IDropSource *LPDROPSOURCE;
typedef struct IEnumOleDocumentViews *LPENUMOLEDOCUMENTVIEWS;
typedef struct IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;
typedef struct IEnumOLEVERB *LPENUMOLEVERB;
typedef struct IOleWindow *LPOLEWINDOW;
typedef struct IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef struct IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
typedef struct IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef struct IViewObject *LPVIEWOBJECT;
typedef struct IViewObject2 *LPVIEWOBJECT2;

typedef enum tagOLEWHICHMK {
        OLEWHICHMK_CONTAINER=1,
        OLEWHICHMK_OBJREL,
        OLEWHICHMK_OBJFULL
} OLEWHICHMK;
typedef enum tagOLEGETMONIKER {
        OLEGETMONIKER_ONLYIFTHERE=1,
        OLEGETMONIKER_FORCEASSIGN,
        OLEGETMONIKER_UNASSIGN,
        OLEGETMONIKER_TEMPFORUSER
} OLEGETMONIKER;

__extension__

typedef enum tagDROPEFFECT {
        DROPEFFECT_NONE=0,
        DROPEFFECT_COPY=1,
        DROPEFFECT_MOVE=2,
        DROPEFFECT_LINK=4,
        DROPEFFECT_SCROLL=0x80000000
} DROPEFFECT;
typedef struct tagOleMenuGroupWidths {
        LONG width[6];
} OLEMENUGROUPWIDTHS,*LPOLEMENUGROUPWIDTHS;
typedef HGLOBAL HOLEMENU;
typedef enum tagOLECLOSE {
        OLECLOSE_SAVEIFDIRTY,
        OLECLOSE_NOSAVE,
        OLECLOSE_PROMPTSAVE
} OLECLOSE;
typedef struct tagOLEVERB {
        LONG lVerb;
        LPWSTR lpszVerbName;
        DWORD fuFlags;
        DWORD grfAttribs;
} OLEVERB,*LPOLEVERB;
typedef RECT BORDERWIDTHS;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCRECT LPCBORDERWIDTHS;
typedef struct tagOIFI {
        UINT cb;
        BOOL fMDIApp;
        HWND hwndFrame;
        HACCEL haccel;
        UINT cAccelEntries;
}OLEINPLACEFRAMEINFO,*LPOLEINPLACEFRAMEINFO;


struct IEnumOLEVERB : public IUnknown { virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0; virtual ULONG __attribute__((__stdcall__)) AddRef() =0; virtual ULONG __attribute__((__stdcall__)) Release() =0; virtual HRESULT __attribute__((__stdcall__)) Next( ULONG,OLEVERB*,ULONG*) =0; virtual HRESULT __attribute__((__stdcall__)) Skip( ULONG) =0; virtual HRESULT __attribute__((__stdcall__)) Reset() =0; virtual HRESULT __attribute__((__stdcall__)) Clone( IEnumOLEVERB**) =0; };
typedef IEnumOLEVERB IEnumOleVerb;

extern "C" const IID IID_IParseDisplayName;


struct IParseDisplayName : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) ParseDisplayName( IBindCtx*,LPOLESTR,ULONG*,IMoniker**) =0;
};

extern "C" const IID IID_IOleContainer;


struct IOleContainer : public IParseDisplayName
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) ParseDisplayName( IBindCtx*,LPOLESTR,ULONG*,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumObjects( DWORD,IEnumUnknown**) =0;
        virtual HRESULT __attribute__((__stdcall__)) LockContainer( BOOL) =0;
};

extern "C" const IID IID_IOleItemContainer;


struct IOleItemContainer : public IOleContainer
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) ParseDisplayName( IBindCtx*,LPOLESTR,ULONG*,IMoniker**) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumObjects( DWORD,IEnumUnknown**) =0;
        virtual HRESULT __attribute__((__stdcall__)) LockContainer( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetObjectA( LPOLESTR,DWORD,IBindCtx*,const IID&,void**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetObjectStorage( LPOLESTR,IBindCtx*,const IID&,void**) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsRunning( LPOLESTR) =0;
};

extern "C" const IID IID_IOleClientSite;


struct IOleClientSite : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SaveObject(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetMoniker( DWORD,DWORD,LPMONIKER*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetContainer( LPOLECONTAINER*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ShowObject(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnShowWindow( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) RequestNewObjectLayout(void) =0;
};

extern "C" const IID IID_IOleObject;


struct IOleObject : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetClientSite( LPOLECLIENTSITE) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClientSite( LPOLECLIENTSITE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetHostNames( LPCOLESTR,LPCOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) Close( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetMoniker( DWORD,LPMONIKER) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetMoniker( DWORD,DWORD,LPMONIKER*) =0;
        virtual HRESULT __attribute__((__stdcall__)) InitFromData( LPDATAOBJECT,BOOL,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetClipboardData( DWORD,LPDATAOBJECT*) =0;
        virtual HRESULT __attribute__((__stdcall__)) DoVerb( LONG,LPMSG,LPOLECLIENTSITE,LONG,HWND,LPCRECT) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumVerbs( LPENUMOLEVERB*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Update(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) IsUpToDate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetUserClassID( LPCLSID) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetUserType( DWORD,LPOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetExtent( DWORD,SIZEL*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetExtent( DWORD,SIZEL*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Advise( LPADVISESINK,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Unadvise( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumAdvise( LPENUMSTATDATA*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetMiscStatus( DWORD,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetColorScheme( LPLOGPALETTE) =0;
};

extern "C" const IID IID_IOleWindow;


struct IOleWindow : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindow( HWND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp( BOOL) =0;
};

extern "C" const IID IID_IOleInPlaceUIWindow;


struct IOleInPlaceUIWindow : public IOleWindow
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindow( HWND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetBorder( LPRECT) =0;
        virtual HRESULT __attribute__((__stdcall__)) RequestBorderSpace( LPCBORDERWIDTHS) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetBorderSpace( LPCBORDERWIDTHS) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetActiveObject( LPOLEINPLACEACTIVEOBJECT,LPCOLESTR) =0;
};

extern "C" const IID IID_IOleInPlaceObject;


struct IOleInPlaceObject : public IOleWindow
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindow( HWND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) InPlaceDeactivate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) UIDeactivate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetObjectRects( LPCRECT,LPCRECT) =0;
        virtual HRESULT __attribute__((__stdcall__)) ReactivateAndUndo(void) =0;
};

extern "C" const IID IID_IOleInPlaceActiveObject;


struct IOleInPlaceActiveObject : public IOleWindow
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindow( HWND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) TranslateAcceleratorA( LPMSG) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnFrameWindowActivate( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnDocWindowActivate( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) ResizeBorder( LPCRECT,LPOLEINPLACEUIWINDOW,BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnableModeless( BOOL) =0;
};

extern "C" const IID IID_IOleInPlaceFrame;


struct IOleInPlaceFrame : public IOleInPlaceUIWindow
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindow( HWND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetBorder( LPRECT) =0;
        virtual HRESULT __attribute__((__stdcall__)) RequestBorderSpace( LPCBORDERWIDTHS) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetBorderSpace( LPCBORDERWIDTHS) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetActiveObject( LPOLEINPLACEACTIVEOBJECT,LPCOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) InsertMenus( HMENU,LPOLEMENUGROUPWIDTHS) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetMenu( HMENU,HOLEMENU,HWND) =0;
        virtual HRESULT __attribute__((__stdcall__)) RemoveMenus( HMENU) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetStatusText( LPCOLESTR) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnableModeless( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) TranslateAcceleratorA( LPMSG,WORD) =0;
};

extern "C" const IID IID_IOleInPlaceSite;


struct IOleInPlaceSite : public IOleWindow
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindow( HWND*) =0;
        virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) CanInPlaceActivate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnInPlaceActivate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnUIActivate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetWindowContext( IOleInPlaceFrame**,IOleInPlaceUIWindow**,LPRECT,LPRECT,LPOLEINPLACEFRAMEINFO) =0;
        virtual HRESULT __attribute__((__stdcall__)) Scroll( SIZE) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnUIDeactivate( BOOL) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnInPlaceDeactivate(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) DiscardUndoState(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) DeactivateAndUndo(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) OnPosRectChange( LPCRECT) =0;
};

extern "C" const IID IID_IOleAdviseHolder;


struct IOleAdviseHolder : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Advise( LPADVISESINK,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Unadvise( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) EnumAdvise( LPENUMSTATDATA*) =0;
        virtual HRESULT __attribute__((__stdcall__)) SendOnRename( LPMONIKER) =0;
        virtual HRESULT __attribute__((__stdcall__)) SendOnSave(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) SendOnClose(void) =0;
};

extern "C" const IID IID_IDropSource;


struct IDropSource : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) QueryContinueDrag( BOOL,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) GiveFeedback( DWORD) =0;
};

extern "C" const IID IID_IDropTarget;


struct IDropTarget : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) DragEnter( LPDATAOBJECT,DWORD,POINTL,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) DragOver( DWORD,POINTL,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) DragLeave(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Drop( LPDATAOBJECT,DWORD,POINTL,PDWORD) =0;
};

typedef BOOL(__attribute__((__stdcall__)) *__IView_pfncont)(DWORD);
extern "C" const IID IID_IViewObject;


struct IViewObject : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Draw( DWORD,LONG,PVOID,DVTARGETDEVICE*,HDC,HDC,LPCRECTL,LPCRECTL,__IView_pfncont pfnContinue,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetColorSet( DWORD,LONG,PVOID,DVTARGETDEVICE*,HDC,LPLOGPALETTE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Freeze( DWORD,LONG,PVOID,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Unfreeze( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetAdvise( DWORD,DWORD,IAdviseSink*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetAdvise( PDWORD,PDWORD,IAdviseSink**) =0;
};

extern "C" const IID IID_IViewObject2;


struct IViewObject2 : public IUnknown
{
        virtual HRESULT __attribute__((__stdcall__)) QueryInterface( const IID&,PVOID*) =0;
        virtual ULONG __attribute__((__stdcall__)) AddRef(void) =0;
        virtual ULONG __attribute__((__stdcall__)) Release(void) =0;
        virtual HRESULT __attribute__((__stdcall__)) Draw( DWORD,LONG,PVOID,DVTARGETDEVICE*,HDC,HDC,LPCRECTL,LPCRECTL,__IView_pfncont pfnContinue,DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetColorSet( DWORD,LONG,PVOID,DVTARGETDEVICE*,HDC,LPLOGPALETTE*) =0;
        virtual HRESULT __attribute__((__stdcall__)) Freeze( DWORD,LONG,PVOID,PDWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) Unfreeze( DWORD) =0;
        virtual HRESULT __attribute__((__stdcall__)) SetAdvise( DWORD,DWORD,IAdviseSink*) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetAdvise( PDWORD,PDWORD,IAdviseSink**) =0;
        virtual HRESULT __attribute__((__stdcall__)) GetExtent( DWORD,DWORD,DVTARGETDEVICE*,LPSIZEL) =0;
};



}
# 30 "C:/PROGRA~1/WIDEST~1/gcc/include/ole2.h" 2 3

typedef struct _OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef struct _OLESTREAM {
        LPOLESTREAMVTBL lpstbl;
} OLESTREAM,*LPOLESTREAM;
typedef struct _OLESTREAMVTBL {
        DWORD (__attribute__((__stdcall__))* Get)(LPOLESTREAM,void*,DWORD);
        DWORD (__attribute__((__stdcall__))* Put)(LPOLESTREAM,const void*,DWORD);
} OLESTREAMVTBL;

extern "C" HRESULT __attribute__((__stdcall__)) CreateDataAdviseHolder(LPDATAADVISEHOLDER*);
extern "C" DWORD __attribute__((__stdcall__)) OleBuildVersion(void);
extern "C" HRESULT __attribute__((__stdcall__)) ReadClassStg(LPSTORAGE,CLSID*);
extern "C" HRESULT __attribute__((__stdcall__)) WriteClassStg(LPSTORAGE,const CLSID&);
extern "C" HRESULT __attribute__((__stdcall__)) ReadClassStm(LPSTREAM,CLSID*);
extern "C" HRESULT __attribute__((__stdcall__)) WriteClassStm(LPSTREAM,const CLSID&);
extern "C" HRESULT __attribute__((__stdcall__)) WriteFmtUserTypeStg(LPSTORAGE,CLIPFORMAT,LPOLESTR);
extern "C" HRESULT __attribute__((__stdcall__)) ReadFmtUserTypeStg(LPSTORAGE,CLIPFORMAT*,LPOLESTR*);
extern "C" HRESULT __attribute__((__stdcall__)) OleInitialize(PVOID);
extern "C" void __attribute__((__stdcall__)) OleUninitialize(void);
extern "C" HRESULT __attribute__((__stdcall__)) OleQueryLinkFromData(LPDATAOBJECT);
extern "C" HRESULT __attribute__((__stdcall__)) OleQueryCreateFromData(LPDATAOBJECT);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreate(const CLSID&,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateFromData(LPDATAOBJECT,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkFromData(LPDATAOBJECT,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateStaticFromData(LPDATAOBJECT,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLink(LPMONIKER,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkToFile(LPCOLESTR,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateFromFile(const CLSID&,LPCOLESTR,const IID&,DWORD,LPFORMATETC,LPOLECLIENTSITE,LPSTORAGE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleLoad(LPSTORAGE,const IID&,LPOLECLIENTSITE,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleSave(LPPERSISTSTORAGE,LPSTORAGE,BOOL);
extern "C" HRESULT __attribute__((__stdcall__)) OleLoadFromStream(LPSTREAM,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleSaveToStream(LPPERSISTSTREAM,LPSTREAM);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetContainedObject(LPUNKNOWN,BOOL);
extern "C" HRESULT __attribute__((__stdcall__)) OleNoteObjectVisible(LPUNKNOWN,BOOL);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterDragDrop(HWND,LPDROPTARGET);
extern "C" HRESULT __attribute__((__stdcall__)) RevokeDragDrop(HWND);
extern "C" HRESULT __attribute__((__stdcall__)) DoDragDrop(LPDATAOBJECT,LPDROPSOURCE,DWORD,PDWORD);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetClipboard(LPDATAOBJECT);
extern "C" HRESULT __attribute__((__stdcall__)) OleGetClipboard(LPDATAOBJECT*);
extern "C" HRESULT __attribute__((__stdcall__)) OleFlushClipboard(void);
extern "C" HRESULT __attribute__((__stdcall__)) OleIsCurrentClipboard(LPDATAOBJECT);
extern "C" HOLEMENU __attribute__((__stdcall__)) OleCreateMenuDescriptor(HMENU,LPOLEMENUGROUPWIDTHS);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetMenuDescriptor(HOLEMENU,HWND,HWND,LPOLEINPLACEFRAME,LPOLEINPLACEACTIVEOBJECT);
extern "C" HRESULT __attribute__((__stdcall__)) OleDestroyMenuDescriptor(HOLEMENU);
extern "C" HRESULT __attribute__((__stdcall__)) OleTranslateAccelerator(LPOLEINPLACEFRAME,LPOLEINPLACEFRAMEINFO,LPMSG);
extern "C" HANDLE __attribute__((__stdcall__)) OleDuplicateData(HANDLE,CLIPFORMAT,UINT);
extern "C" HRESULT __attribute__((__stdcall__)) OleDraw(LPUNKNOWN,DWORD,HDC,LPCRECT);
extern "C" HRESULT __attribute__((__stdcall__)) OleRun(LPUNKNOWN);
extern "C" BOOL __attribute__((__stdcall__)) OleIsRunning(LPOLEOBJECT);
extern "C" HRESULT __attribute__((__stdcall__)) OleLockRunning(LPUNKNOWN,BOOL,BOOL);
extern "C" void __attribute__((__stdcall__)) ReleaseStgMedium(LPSTGMEDIUM);
extern "C" HRESULT __attribute__((__stdcall__)) CreateOleAdviseHolder(LPOLEADVISEHOLDER*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateDefaultHandler(const CLSID&,LPUNKNOWN,const IID&,PVOID*);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateEmbeddingHelper(const CLSID&,LPUNKNOWN,DWORD,LPCLASSFACTORY,const IID&,PVOID*);
extern "C" BOOL __attribute__((__stdcall__)) IsAccelerator(HACCEL,int,LPMSG,WORD*);
extern "C" HGLOBAL __attribute__((__stdcall__)) OleGetIconOfFile(LPOLESTR,BOOL);
extern "C" HGLOBAL __attribute__((__stdcall__)) OleGetIconOfClass(const CLSID&,LPOLESTR,BOOL);
extern "C" HGLOBAL __attribute__((__stdcall__)) OleMetafilePictFromIconAndLabel(HICON,LPOLESTR,LPOLESTR,UINT);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegGetUserType(const CLSID&,DWORD,LPOLESTR*);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegGetMiscStatus(const CLSID&,DWORD,DWORD*);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegEnumFormatEtc (const CLSID&,DWORD,LPENUMFORMATETC*);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegEnumVerbs (const CLSID&,LPENUMOLEVERB*);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertOLESTREAMToIStorage(LPOLESTREAM,LPSTORAGE,const DVTARGETDEVICE*);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertIStorageToOLESTREAM(LPSTORAGE,LPOLESTREAM);
extern "C" HRESULT __attribute__((__stdcall__)) GetHGlobalFromILockBytes(LPLOCKBYTES,HGLOBAL*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateILockBytesOnHGlobal(HGLOBAL,BOOL,LPLOCKBYTES*);
extern "C" HRESULT __attribute__((__stdcall__)) GetHGlobalFromStream(LPSTREAM,HGLOBAL*);
extern "C" HRESULT __attribute__((__stdcall__)) CreateStreamOnHGlobal(HGLOBAL,BOOL,LPSTREAM*);
extern "C" HRESULT __attribute__((__stdcall__)) OleDoAutoConvert(LPSTORAGE,LPCLSID);
extern "C" HRESULT __attribute__((__stdcall__)) OleGetAutoConvert(const CLSID&,LPCLSID);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetAutoConvert(const CLSID&,const CLSID&);
extern "C" HRESULT __attribute__((__stdcall__)) GetConvertStg(LPSTORAGE);
extern "C" HRESULT __attribute__((__stdcall__)) SetConvertStg(LPSTORAGE,BOOL);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertIStorageToOLESTREAMEx(LPSTORAGE,CLIPFORMAT,LONG,LONG,DWORD,LPSTGMEDIUM,LPOLESTREAM);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertOLESTREAMToIStorageEx(LPOLESTREAM,LPSTORAGE,CLIPFORMAT*,LONG*,LONG*,DWORD*,LPSTGMEDIUM);

}

#pragma pack(pop)
# 110 "C:/PROGRA~1/WIDEST~1/gcc/include/windows.h" 2 3
# 457 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2
# 474 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 1 3
# 42 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 323 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 3
typedef short unsigned int wint_t;
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 43 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 2 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stdarg.h" 1 3
# 45 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 2 3
# 149 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
typedef struct _iobuf
{
        char* _ptr;
        int _cnt;
        char* _base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char* _tmpfname;
} FILE;
# 174 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
extern __attribute__((dllimport)) FILE _iob[];
# 183 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
extern "C" {





FILE* fopen (const char*, const char*);
FILE* freopen (const char*, const char*, FILE*);
int fflush (FILE*);
int fclose (FILE*);

int remove (const char*);
int rename (const char*, const char*);
FILE* tmpfile (void);
char* tmpnam (char*);
char* _tempnam (const char*, const char*);


char* tempnam (const char*, const char*);


int setvbuf (FILE*, char*, int, size_t);

void setbuf (FILE*, char*);





int fprintf (FILE*, const char*, ...);
int printf (const char*, ...);
int sprintf (char*, const char*, ...);
int _snprintf (char*, size_t, const char*, ...);
int vfprintf (FILE*, const char*, __gnuc_va_list);
int vprintf (const char*, __gnuc_va_list);
int vsprintf (char*, const char*, __gnuc_va_list);
int _vsnprintf (char*, size_t, const char*, __gnuc_va_list);


int snprintf(char* s, size_t n, const char* format, ...);
extern __inline__ int vsnprintf (char* s, size_t n, const char* format,
                           __gnuc_va_list arg)
  { return _vsnprintf ( s, n, format, arg); }






int fscanf (FILE*, const char*, ...);
int scanf (const char*, ...);
int sscanf (const char*, const char*, ...);




int fgetc (FILE*);
char* fgets (char*, int, FILE*);
int fputc (int, FILE*);
int fputs (const char*, FILE*);
int getc (FILE*);
int getchar (void);
char* gets (char*);
int putc (int, FILE*);
int putchar (int);
int puts (const char*);
int ungetc (int, FILE*);





size_t fread (void*, size_t, size_t, FILE*);
size_t fwrite (const void*, size_t, size_t, FILE*);





int fseek (FILE*, long, int);
long ftell (FILE*);
void rewind (FILE*);
# 288 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
typedef long long fpos_t;




int fgetpos (FILE*, fpos_t*);
int fsetpos (FILE*, const fpos_t*);





void clearerr (FILE*);
int feof (FILE*);
int ferror (FILE*);
void perror (const char*);






FILE* _popen (const char*, const char*);
int _pclose (FILE*);


FILE* popen (const char*, const char*);
int pclose (FILE*);





int _flushall (void);
int _fgetchar (void);
int _fputchar (int);
FILE* _fdopen (int, const char*);
int _fileno (FILE*);
int _fcloseall(void);


int fgetchar (void);
int fputchar (int);
FILE* fdopen (int, const char*);
int fileno (FILE*);
# 341 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
int fwprintf (FILE*, const wchar_t*, ...);
int wprintf (const wchar_t*, ...);
int swprintf (wchar_t*, const wchar_t*, ...);
int _snwprintf (wchar_t*, size_t, const wchar_t*, ...);
int vfwprintf (FILE*, const wchar_t*, __gnuc_va_list);
int vwprintf (const wchar_t*, __gnuc_va_list);
int vswprintf (wchar_t*, const wchar_t*, __gnuc_va_list);
int _vsnwprintf (wchar_t*, size_t, const wchar_t*, __gnuc_va_list);
int fwscanf (FILE*, const wchar_t*, ...);
int wscanf (const wchar_t*, ...);
int swscanf (const wchar_t*, const wchar_t*, ...);
wint_t fgetwc (FILE*);
wint_t fputwc (wchar_t, FILE*);
wint_t ungetwc (wchar_t, FILE*);

wchar_t* fgetws (wchar_t*, int, FILE*);
int fputws (const wchar_t*, FILE*);
wint_t getwc (FILE*);
wint_t getwchar (void);
wchar_t* _getws (wchar_t*);
wint_t putwc (wint_t, FILE*);
int _putws (const wchar_t*);
wint_t putwchar (wint_t);
FILE* _wfdopen(int, wchar_t *);
FILE* _wfopen (const wchar_t*, const wchar_t*);
FILE* _wfreopen (const wchar_t*, const wchar_t*, FILE*);
FILE* _wfsopen (const wchar_t*, const wchar_t*, int);
wchar_t* _wtmpnam (wchar_t*);
wchar_t* _wtempnam (const wchar_t*, const wchar_t*);
int _wrename (const wchar_t*, const wchar_t*);
int _wremove (const wchar_t*);
void _wperror (const wchar_t*);
FILE* _wpopen (const wchar_t*, const wchar_t*);



int snwprintf(wchar_t* s, size_t n, const wchar_t* format, ...);
extern __inline__ int
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __gnuc_va_list arg)
  { return _vsnwprintf ( s, n, format, arg);}
# 389 "C:/PROGRA~1/WIDEST~1/gcc/include/stdio.h" 3
FILE* wpopen (const wchar_t*, const wchar_t*);






wint_t _fgetwchar (void);
wint_t _fputwchar (wint_t);
int _getw (FILE*);
int _putw (int, FILE*);


wint_t fgetwchar (void);
wint_t fputwchar (wint_t);
int getw (FILE*);
int putw (int, FILE*);





}
# 475 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 1 3
# 84 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
extern "C" {
# 112 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
extern __attribute__((dllimport)) double _HUGE;
# 122 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
struct _exception
{
        int type;
        char *name;
        double arg1;
        double arg2;
        double retval;
};


double sin (double);
double cos (double);
double tan (double);
double sinh (double);
double cosh (double);
double tanh (double);
double asin (double);
double acos (double);
double atan (double);
double atan2 (double, double);
double exp (double);
double log (double);
double log10 (double);
double pow (double, double);
double sqrt (double);
extern __inline__ double sqrt (double x)
{
  double res;
  __asm__ ("fsqrt;" : "=t" (res) : "0" (x));
  return res;
}
double ceil (double);
double floor (double);
double fabs (double);
extern __inline__ double fabs (double x)
{
  double res;
  __asm__ ("fabs;" : "=t" (res) : "0" (x));
  return res;
}
double ldexp (double, int);
double frexp (double, int*);
double modf (double, double*);
double fmod (double, double);





struct _complex
{
        double x;
        double y;
};

double _cabs (struct _complex);

double _hypot (double, double);
double _j0 (double);
double _j1 (double);
double _jn (int, double);
double _y0 (double);
double _y1 (double);
double _yn (int, double);
int _matherr (struct _exception *);
# 195 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
double _chgsign (double);
double _copysign (double, double);
double _logb (double);
double _nextafter (double, double);
double _scalb (double, long);

int _finite (double);
int _fpclass (double);
int _isnan (double);
# 215 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
double cabs (struct _complex);
double j0 (double);
double j1 (double);
double jn (int, double);
double y0 (double);
double y1 (double);
double yn (int, double);

double chgsign (double);
double scalb (double, long);
int finite (double);
int fpclass (double);
# 265 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
extern int __fpclassifyf (float);
extern int __fpclassify (double);

extern __inline__ int __fpclassifyl (long double x){
  unsigned short sw;
  __asm__ ("fxam; fstsw %%ax;" : "=a" (sw): "t" (x));
  return sw & (0x0100 | 0x0400 | 0x4000 );
}
# 288 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
extern __inline__ int __isnan (double _x)
{
  unsigned short sw;
  __asm__ ("fxam;"
           "fstsw %%ax": "=a" (sw) : "t" (_x));
  return (sw & (0x0100 | 0x0400 | (0x0100 | 0x0400) | 0x4000 | (0x0400 | 0x4000)))
    == 0x0100;
}

extern __inline__ int __isnanf (float _x)
{
  unsigned short sw;
  __asm__ ("fxam;"
            "fstsw %%ax": "=a" (sw) : "t" (_x));
  return (sw & (0x0100 | 0x0400 | (0x0100 | 0x0400) | 0x4000 | (0x0400 | 0x4000)))
    == 0x0100;
}

extern __inline__ int __isnanl (long double _x)
{
  unsigned short sw;
  __asm__ ("fxam;"
            "fstsw %%ax": "=a" (sw) : "t" (_x));
  return (sw & (0x0100 | 0x0400 | (0x0100 | 0x0400) | 0x4000 | (0x0400 | 0x4000)))
    == 0x0100;
}
# 324 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
extern __inline__ int __signbit (double x) {
  unsigned short stw;
  __asm__ ( "fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
  return stw & 0x0200;
}

extern __inline__ int __signbitf (float x) {
  unsigned short stw;
  __asm__ ("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
  return stw & 0x0200;
}
extern __inline__ int __signbitl (long double x) {
  unsigned short stw;
  __asm__ ("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
  return stw & 0x0200;
}







extern float sinf (float);
extern long double sinl (long double);

extern float cosf (float);
extern long double cosl (long double);

extern float tanf (float);
extern long double tanl (long double);

extern float asinf (float);
extern long double asinl (long double);

extern float acosf (float);
extern long double acosl (long double);

extern float atanf (float);
extern long double atanl (long double);

extern float atan2f (float, float);
extern long double atan2l (long double, long double);


extern __inline__ float sinhf (float x)
  {return (float) sinh (x);}
extern long double sinhl (long double);

extern __inline__ float coshf (float x)
  {return (float) cosh (x);}
extern long double coshl (long double);

extern __inline__ float tanhf (float x)
  {return (float) tanh (x);}
extern long double tanhl (long double);






extern __inline__ float expf (float x)
  {return (float) exp (x);}
extern long double expl (long double);


extern double exp2(double);
extern float exp2f(float);
extern long double exp2l(long double);




extern __inline__ float frexpf (float x, int* expn)
  {return (float) frexp (x, expn);}
extern long double frexpl (long double, int*);




extern int ilogb (double);
extern int ilogbf (float);
extern int ilogbl (long double);


extern __inline__ float ldexpf (float x, int expn)
  {return (float) ldexp (x, expn);}
extern long double ldexpl (long double, int);


extern float logf (float);
extern long double logl (long double);


extern float log10f (float);
extern long double log10l (long double);


extern double log1p(double);
extern float log1pf(float);
extern long double log1pl(long double);


extern double log2 (double);
extern float log2f (float);
extern long double log2l (long double);


extern double logb (double);
extern float logbf (float);
extern long double logbl (long double);

extern __inline__ double logb (double x)
{
  double res;
  __asm__ ("fxtract\n\t"
       "fstp	%%st" : "=t" (res) : "0" (x));
  return res;
}

extern __inline__ float logbf (float x)
{
  float res;
  __asm__ ("fxtract\n\t"
       "fstp	%%st" : "=t" (res) : "0" (x));
  return res;
}

extern __inline__ long double logbl (long double x)
{
  long double res;
  __asm__ ("fxtract\n\t"
       "fstp	%%st" : "=t" (res) : "0" (x));
  return res;
}


extern float modff (float, float*);
extern long double modfl (long double, long double*);


extern double scalbn (double, int);
extern float scalbnf (float, int);
extern long double scalbnl (long double, int);

extern double scalbln (double, long);
extern float scalblnf (float, long);
extern long double scalblnl (long double, long);



extern double cbrt (double);
extern float cbrtf (float);
extern long double cbrtl (long double);


extern __inline__ float fabsf (float x)
{
  float res;
  __asm__ ("fabs;" : "=t" (res) : "0" (x));
  return res;
}

extern __inline__ long double fabsl (long double x)
{
  long double res;
  __asm__ ("fabs;" : "=t" (res) : "0" (x));
  return res;
}


extern double hypot (double, double);
extern __inline__ float hypotf (float x, float y)
  { return (float) hypot (x, y);}
extern long double hypotl (long double, long double);


extern __inline__ float powf (float x, float y)
  {return (float) pow (x, y);}
extern long double powl (long double, long double);


extern __inline__ float sqrtf (float x)
{
  float res;
  __asm__ ("fsqrt" : "=t" (res) : "0" (x));
  return res;
}

extern __inline__ long double sqrtl (long double x)
{
  long double res;
  __asm__ ("fsqrt" : "=t" (res) : "0" (x));
  return res;
}




extern float ceilf (float);
extern long double ceill (long double);


extern float floorf (float);
extern long double floorl (long double);


extern double nearbyint ( double);
extern float nearbyintf (float);
extern long double nearbyintl (long double);



extern __inline__ double rint (double x)
{
  double retval;
  __asm__ ("frndint;": "=t" (retval) : "0" (x));
  return retval;
}

extern __inline__ float rintf (float x)
{
  float retval;
  __asm__ ("frndint;" : "=t" (retval) : "0" (x) );
  return retval;
}

extern __inline__ long double rintl (long double x)
{
  long double retval;
  __asm__ ("frndint;" : "=t" (retval) : "0" (x) );
  return retval;
}


extern __inline__ long lrint (double x)
{
  long retval;
  __asm__ __volatile__ ("fistpl %0" : "=m" (retval) : "t" (x) : "st"); return retval;


}

extern __inline__ long lrintf (float x)
{
  long retval;
  __asm__ __volatile__ ("fistpl %0" : "=m" (retval) : "t" (x) : "st"); return retval;


}

extern __inline__ long lrintl (long double x)
{
  long retval;
  __asm__ __volatile__ ("fistpl %0" : "=m" (retval) : "t" (x) : "st"); return retval;


}

extern __inline__ long long llrint (double x)
{
  long long retval;
  __asm__ __volatile__ ("fistpll %0" : "=m" (retval) : "t" (x) : "st"); return retval;


}

extern __inline__ long long llrintf (float x)
{
  long long retval;
  __asm__ __volatile__ ("fistpll %0" : "=m" (retval) : "t" (x) : "st"); return retval;


}

extern __inline__ long long llrintl (long double x)
{
  long long retval;
  __asm__ __volatile__ ("fistpll %0" : "=m" (retval) : "t" (x) : "st"); return retval;


}



extern double round (double);
extern float roundf (float);
extern long double roundl (long double);


extern long lround (double);
extern long lroundf (float);
extern long lroundl (long double);

extern long long llround (double);
extern long long llroundf (float);
extern long long llroundl (long double);



extern double trunc (double);
extern float truncf (float);
extern long double truncl (long double);


extern float fmodf (float, float);
extern long double fmodl (long double, long double);


extern double remainder (double, double);
extern float remainderf (float, float);
extern long double remainderl (long double, long double);


extern double remquo(double, double, int *);
extern float remquof(float, float, int *);
extern long double remquol(long double, long double, int *);


extern double copysign (double, double);
extern float copysignf (float, float);
extern long double copysignl (long double, long double);


extern double nan(const char *tagp);
extern float nanf(const char *tagp);
extern long double nanl(const char *tagp);
# 660 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
extern double nextafter (double, double);
extern float nextafterf (float, float);







extern double fdim (double x, double y);
extern float fdimf (float x, float y);
extern long double fdiml (long double x, long double y);







extern double fmax (double, double);
extern float fmaxf (float, float);
extern long double fmaxl (long double, long double);


extern double fmin (double, double);
extern float fminf (float, float);
extern long double fminl (long double, long double);



extern double fma (double, double, double);
extern float fmaf (float, float, float);
extern long double fmal (long double, long double, long double);
# 744 "C:/PROGRA~1/WIDEST~1/gcc/include/math.h" 3
}
# 478 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stdarg.h" 1 3
# 479 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h" 2


extern "C" {
extern int _dbprintf_init();
extern int _dbprintf(const char*,...);
extern FILE* _ws_debug_fp;
};
# 513 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
typedef struct {
  long x, y;
  inline void setPoint(long vx,long vy){
    x = vx;
    y = vy;
  }
} WSCpoint;

struct WSCrect {
  long x, y;
  WSCulong width, height;
  inline void setRect(long vx,long vy,WSCulong vw,WSCulong vh){
    x = vx;
    y = vy;
    width = vw;
    height = vh;
  }
  inline void setRect(WSCrect* r){
    x = r->x;
    y = r->y;
    width = r->width;
    height = r->height;
  }
};
struct WSCrectList {
  WSCrect rect;
  WSCrectList* next;
};
class WSCstring;
extern __attribute__((dllexport)) void WSGFtrace(WSCstring);
extern __attribute__((dllexport)) char* WSGFstrdup(const char*);
extern __attribute__((dllexport)) char* WSGFstrdup(const char*,long len);
extern __attribute__((dllexport)) long WSGFstricmp(char*,char*);
extern __attribute__((dllexport)) long WSGFstrnccmp(char*,char*,long);
extern __attribute__((dllexport)) void WSGFtrimSpace(char*);
extern __attribute__((dllexport)) WSCulong WSGFeventToMaskBit(long);
extern __attribute__((dllexport)) long WSGFmaskBitToEvent(WSCulong);
extern __attribute__((dllexport)) short WSGFindexColor(char*);
extern __attribute__((dllexport)) short WSGFcolor(char*);
extern __attribute__((dllexport)) char* WSGFcolorName(short);
extern __attribute__((dllexport)) short WSGFimage(char*);
extern __attribute__((dllexport)) short WSGFimage(char*,short);
extern __attribute__((dllexport)) char* WSGFimageName(short);

extern __attribute__((dllexport)) WSCuchar WSGFblinkRate(long);
extern __attribute__((dllexport)) WSCbool WSGFareaInclude(short,short,WSCushort,WSCushort,
                                short,short,WSCushort,WSCushort);
extern __attribute__((dllexport)) long WSGForArea(long,long,WSCulong,WSCulong,
                           long,long,WSCulong,WSCulong,
                           long*,long*,WSCulong*,WSCulong*);
extern __attribute__((dllexport)) long WSGFandArea(long,long,WSCulong,WSCulong,
                            long,long,WSCulong,WSCulong,
                            long*,long*,WSCulong*,WSCulong*);
class WSDdev;
extern __attribute__((dllexport)) void WSGFdrawShadow(WSDdev* dev,char shadow_type,
                           WSCushort shadow_thick,
                           short fg_no,short ts_no,short bs_no,short bg_no,
                           short x,short y,WSCushort w,WSCushort h,WSCbool nodark=(WSCbool)0);
extern __attribute__((dllexport)) void WSGFdrawBtnShadow(WSDdev* dev,char shadow_type,
                           WSCushort shadow_thick,
                           short fg_no,short ts_no,short bs_no,short bg_no,
                           short x,short y,WSCushort w,WSCushort h,WSCbool nodark=(WSCbool)0);
extern __attribute__((dllexport)) void WSGFdrawArrow(WSDdev* dev,WSCbool fill,
                           WSCushort shadow_thick,
                           short bg_no, short ts_no,short bs_no,
                           char direction,
                           short x,short y,WSCushort w,WSCushort h);


extern __attribute__((dllexport)) char* WSGFcreateEucStringFromJisStr(char*);
extern __attribute__((dllexport)) char* WSGFcreateJisStringFromEucStr(char*);

class WSCstring;
class WSDfont;
extern __attribute__((dllexport)) long WSGFcalcOneLineStringAddr(WSCstring* str,WSCrect* area,
                               char alignment,WSDfont* font,
                               WSCpoint* out);
extern __attribute__((dllexport)) long WSGFcalcStringAddr(WSCstring* str,WSCrect* area,
                               char alignment,WSDfont* font,
                               WSCpoint** out,long* num);

extern __attribute__((dllexport)) long WSGFcalcStringPosAddr(WSCushort* istr,WSCrect* area,
                                  char alignment,WSDfont* font,
                                  long pos,
                                  long* ox,long *oy);

extern __attribute__((dllexport)) long WSGFcalcStringPosFromAddr(WSCushort* istr,WSCrect* area,
                                  char alignment,WSDfont* font,
                                  long x,long y,
                                  long* pos,WSCbool intercur);
extern __attribute__((dllexport)) long WSGFcalcStringXYPos(WSCushort* istr,long pos,
                                long* xpos,long* ypos);
extern __attribute__((dllexport)) long WSGFcalcStringXYPosToPos(WSCushort* istr,long xpos,
                                     long ypos,long* pos);
extern __attribute__((dllexport)) long WSGFgetLinesUCS2(WSCushort*);
extern __attribute__((dllexport)) long WSGFstrlenUCS2(WSCushort*);
extern __attribute__((dllexport)) void WSGFdelTailSpaceUCS2(WSCushort*);
extern __attribute__((dllexport)) void WSGFdelStringUCS2(WSCushort*,long pos,long chars);
extern __attribute__((dllexport)) WSCushort* WSGFinsertStringUCS2(WSCushort*,long pos,WSCushort* ins);
extern __attribute__((dllexport)) WSCushort* WSGFreplaceStringUCS2(WSCushort*,WSCushort* src,WSCushort* dest,long* num);
extern __attribute__((dllexport)) long WSGFdelLineFeedUCS2(WSCushort*);
extern __attribute__((dllexport)) WSCushort* WSGFstrdupUCS2(WSCushort*);
extern __attribute__((dllexport)) WSCushort* WSGFgetWordUCS2(WSCushort*,long pos,WSCushort*);
extern __attribute__((dllexport)) long WSGFgetWordCharPosUCS2(WSCushort*,long pos,WSCushort*);
extern __attribute__((dllexport)) WSCushort* WSGFgetUCS2(const char* text,long encode);
extern __attribute__((dllexport)) long WSGFgetUcs2len(const char* text,long encode,long len);
extern __attribute__((dllexport)) char* WSGFgetString(WSCushort* text,long encode);
extern __attribute__((dllexport)) WSCushort* WSGFaddStringUCS2(WSCushort* str1,WSCushort* str2);
extern __attribute__((dllexport)) WSCstring WSGFcreateLineFeedStringByWidth(WSCstring*,short fontno,WSCushort);
extern __attribute__((dllexport)) WSDmwindowDev* WSGFgetAquaImage(short col,WSCushort,WSCushort,long);
extern __attribute__((dllexport)) WSDmwindowDev* WSGFgetAquaMaskImage(WSCushort,WSCushort,long);
# 636 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
inline long WSGFgetHashValue(char* str){
  WSCulong val = str[0];
  register WSCulong len = 0;
  while(str[len] != 0){
    len++;
  }
  if (len != 0){

    val += str[len-1]*4;
  }
  return (val % 32);

}
# 665 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
extern __attribute__((dllexport)) WSCbase* WSGIappPropertyEditor();
extern __attribute__((dllexport)) long WSGFsetAppPropertyEditor(WSCbase*);



extern __attribute__((dllexport)) void WSGFsetPropertyEditorHandler(void(*)(WSCbase*,long));
extern __attribute__((dllexport)) void* WSGFgetPropertyEditorHandler();
extern __attribute__((dllexport)) WSCbase* WSGIappWindowList();
extern __attribute__((dllexport)) long WSGFsetAppWindowList(WSCbase*);

extern __attribute__((dllexport)) long WSGFclocktime();
extern __attribute__((dllexport)) void WSGFtimetrace();
extern __attribute__((dllexport)) void WSGFsetTimePoint();
extern __attribute__((dllexport)) long WSGFdiffTimePoint();

extern __attribute__((dllexport)) char* WSGFltoa(long val);
extern __attribute__((dllexport)) char* WSGFltoa(long val,char* buf);
extern __attribute__((dllexport)) char* WSGFultoa(WSCulong val);
extern __attribute__((dllexport)) char* WSGFultoa(WSCulong val,char* buf);
extern __attribute__((dllexport)) char* WSGFftoa(float);
extern __attribute__((dllexport)) char* WSGFlftoa(double);
extern __attribute__((dllexport)) long WSGFatol(char*);

extern __attribute__((dllexport)) void WSGFgettimeofday(long* );

extern __attribute__((dllexport)) WSCbase* WSGFgetNewGripHand(WSCbase* parent);

extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowHeader(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrc(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcRb(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcPy(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcPerl(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcJava(WSCbase*,char* pkgname);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcOcaml(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcMwtRb(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcMwtPy(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcMwtPerl(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcMwtJava(WSCbase*,char* pkgname);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowSrcMwtOcaml(WSCbase*);


extern __attribute__((dllexport)) void WSGFmarkChanged(WSCbase*);
extern __attribute__((dllexport)) void WSGFclearMarkChanged(WSCbase*);
extern __attribute__((dllexport)) WSCbool WSGFcheckMarkChanged(WSCbase*);
class WSCproperty;
extern __attribute__((dllexport)) char* WSGFconvertPropValueString(WSCproperty*,char*);
extern __attribute__((dllexport)) void WSGFsetEditMode(WSCbase*,WSCbool edit);
class WSClistData;
extern __attribute__((dllexport)) void WSGFgetProcedureList(WSCbase*,WSClistData*);
extern __attribute__((dllexport)) long WSGFadjustNumber(long,long);
extern __attribute__((dllexport)) WSCbool WSGFreadInitString(WSCstring*,char*,WSCstring*,WSCstring*);
extern __attribute__((dllexport)) void WSGFopCreate(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateRb(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreatePy(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreatePerl(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateJava(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateOcaml(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateMwtRb(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateMwtPy(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateMwtPerl(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateMwtJava(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFopCreateMwtOcaml(WSCstring*,char*,char*);
extern __attribute__((dllexport)) void WSGFsetJavaPackageNameHandler(void*);
extern __attribute__((dllexport)) void WSGFclassProcedureCreate(WSCstring*,char*,char*,char*);
extern __attribute__((dllexport)) WSCbool WSGFcheckNameString(char*);
extern __attribute__((dllexport)) WSCbool WSGFcheckPureNameString(char*);
extern __attribute__((dllexport)) WSCbool WSGFcheckDirNameString(char*);
extern __attribute__((dllexport)) WSCbool WSGFcheckExistFile(char*);
extern __attribute__((dllexport)) long WSGFcheckDiffFile(char*,void*,long len);
extern __attribute__((dllexport)) long WSGFcheckDiffTextFile(char*,char*);
extern __attribute__((dllexport)) long WSGFreplaceFile(char*,void*,long len,WSCbool same_save);
extern __attribute__((dllexport)) long WSGFreplaceTextFile(char*,char*,WSCbool same_save);
extern __attribute__((dllexport)) void WSGFsortCharList(WSClistData* list);
extern __attribute__((dllexport)) void WSGFsetMargin(WSCbase*,WSCushort);
extern __attribute__((dllexport)) void WSGFdestroyPixmap(char*);
extern __attribute__((dllexport)) void WSGFdestroyPixmap(short);
extern __attribute__((dllexport)) void WSGFdestroyAllPixmap();

extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowClassHeader(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowClassHeaderP(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowClassSrc(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFcreateWindowClassSrcP(WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFupdateWindowClassHeader(WSCstring*,WSCbase*);
extern __attribute__((dllexport)) WSCstring* WSGFreadTextFile(char*,long encoding=-2);
extern __attribute__((dllexport)) WSCbool WSGFcheckArrayName(char*,long*,char*);
extern __attribute__((dllexport)) WSCbool WSGFisArrayName(char*);
extern __attribute__((dllexport)) long WSGFgetArrayNo(char*);
extern __attribute__((dllexport)) WSCstring WSGFgetArrayName(char*);
extern __attribute__((dllexport)) long WSGFexistName(char*,WSCbase*);
extern __attribute__((dllexport)) void WSGFsetExistNameHandler(long (*)(char*,WSCbase*));
extern __attribute__((dllexport)) void* WSGFgetExistNameHandler();
extern __attribute__((dllexport)) long WSGFsendMessage(char* message_key,char* data);
extern __attribute__((dllexport)) char* WSGFeventToName(long ev);
extern __attribute__((dllexport)) long WSGFnameToEvent(char* ev);

extern __attribute__((dllexport)) WSCstring* WSGFgetFontSaveData();

extern __attribute__((dllexport)) long WSGFloadMouseCursorData(char**);
extern __attribute__((dllexport)) void WSGFsetFontData(WSCstring* data);

extern __attribute__((dllexport)) void WSGFloadFontData(char**);
extern __attribute__((dllexport)) WSCbase* WSGFgetFontEditor();
extern __attribute__((dllexport)) void WSGFsetFontEditor(WSCbase*);
extern __attribute__((dllexport)) void WSGFsetDeleteHandler(void (*)(WSCbase*));
extern __attribute__((dllexport)) void(* WSGFgetDeleteHandler() )(WSCbase*) ;
extern __attribute__((dllexport)) void WSGFsetCreateHandler(void (*)(WSCbase*));
extern __attribute__((dllexport)) void WSGFexecCreateHandler(WSCbase*);


class WSCindexVariantData;
extern __attribute__((dllexport)) void WSGFsetCreateInstanceHandler(WSCbase*(*)(WSCbase*,WSCindexVariantData*));
extern __attribute__((dllexport)) WSCbase* WSGFexecCreateInstanceHandler(WSCbase*,WSCindexVariantData*);


extern __attribute__((dllexport)) char* WSGFtriggerToName(long ev);
extern __attribute__((dllexport)) WSCstring WSGFgetFileName(char*);
extern __attribute__((dllexport)) WSCstring WSGFgetDirName(char*);
extern __attribute__((dllexport)) void WSGFgetAllPropertyList(WSCbase*,WSClistData*);
extern __attribute__((dllexport)) long WSGFloadWindow(char* field,char* fname,WSCbase** pic,WSCbase*,long encoding=-2);
extern __attribute__((dllexport)) long WSGFsaveWindow(char* field,char* fname,WSCbase* pic,long encoding=-2);
extern __attribute__((dllexport)) long WSGFdestroyWindow(WSCbase* pic);
extern __attribute__((dllexport)) void WSGFcreateVerticalString(WSCstring* str);
extern __attribute__((dllexport)) void WSGFdeviceInitialize();
extern __attribute__((dllexport)) void WSGFstretchPopup(WSCbase* obj);
extern __attribute__((dllexport)) void WSGFstretchPopdown(WSCbase* obj);
extern __attribute__((dllexport)) void WSGFcleanupStretchAction(WSCbase* obj);
extern __attribute__((dllexport)) void WSGFsetGeometry(WSCbase* obj,short,short,WSCushort,WSCushort);
extern __attribute__((dllexport)) long WSGFgetLines(char*);

extern __attribute__((dllexport)) char* WSGFgettext(char*);
extern __attribute__((dllexport)) void WSGFgetShadowColor(short,short*,short*,short*);
extern __attribute__((dllexport)) void WSGFdrawStripes(WSDdev*,WSCushort,WSCushort,short,short,short);

extern __attribute__((dllexport)) long WSGFgetLanguage();
extern __attribute__((dllexport)) void WSGFsetGetLanguageHandler(long(*)());
extern __attribute__((dllexport)) long WSGFgetMapping();
extern __attribute__((dllexport)) void WSGFsetGetMappingHandler(long(*)());

extern __attribute__((dllexport)) void WSGFwsNsPluginInitialize();
extern __attribute__((dllexport)) void WSGFwsIePluginInitialize();

extern __attribute__((dllexport)) char* WSGFvalueToType(long val);
extern __attribute__((dllexport)) long WSGFtypeToValue(char* typen);
extern __attribute__((dllexport)) void _get_2_words(char* src,char* word1,char* word2);
extern __attribute__((dllexport)) void _add_default_changed_property(WSCbase* btarget,char* pn,char tp,char* pdata,WSClistData* plist);

extern __attribute__((dllexport)) void WSGFdrawModern1Shadow(WSDdev* dev,long shadow_type,WSCushort stick,
   short fg_no, short ts_no, short bs_no, short bg_no,short pno,
   short x, short y, WSCushort w,WSCushort h,WSCbool nodark);

extern __attribute__((dllexport)) void WSGFexit(int);
extern __attribute__((dllexport)) void WSGFbeep();
extern __attribute__((dllexport)) WSCbool WSGFgetWindowEnableClose(WSCbase*);
extern __attribute__((dllexport)) void WSGFenablePropertyBuilderTitle();
# 930 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
extern __attribute__((dllexport)) char* WSGFgetEncodingName(long);
extern __attribute__((dllexport)) long WSGFgetEncodingValue(char* encode_name);
extern __attribute__((dllexport)) long WSGFgetEncoding(char* locale_name);
# 1203 "C:/PROGRA~1/WIDEST~1/ws/include/WScom.h"
extern __attribute__((dllexport)) long WSGFloadProject(char* dname,char* fname,long encoding);
extern __attribute__((dllexport)) long WSGFloadProject(char* path,long encoding);
extern __attribute__((dllexport)) long WSGFreloadProject(WSCulong project,char* dname,char* fname,long encoding);
extern __attribute__((dllexport)) long WSGFreloadProject(WSCulong project,char* path,long encoding);
extern __attribute__((dllexport)) long WSGFdestroyProject(WSCulong project);
extern __attribute__((dllexport)) long WSGFdumpProject(WSCulong project);
extern __attribute__((dllexport)) long WSGFsaveProject(WSCulong project,char* dname,char* fname,long encoding);
extern __attribute__((dllexport)) long WSGFsetProjectData(WSCulong prj,char* index,char* val,long encoding);
extern __attribute__((dllexport)) WSCstring WSGFgetProjectData(WSCulong prj,char* index);
extern __attribute__((dllexport)) WSCstring WSGFgetProjectEnvironmentData(char* index);
extern __attribute__((dllexport)) long WSGFloadWinFiles(char* dname,char* fname,WSCulong prj);
extern __attribute__((dllexport)) long WSGFloadProjectAndWinFiles(char* dname,char* fname,long encoding);
extern __attribute__((dllexport)) long WSGFsaveWinFile(char* dname,WSCbase* win,long encoding);
extern __attribute__((dllexport)) long WSGFsaveProjectEnvironment();
extern __attribute__((dllexport)) long WSGFloadLinkOptions(WSCulong prj);

extern __attribute__((dllexport)) long WSGFloadTargets(char* path,long encoding);
extern __attribute__((dllexport)) long WSGFgetMgrData(long kind,WSCulong val);
extern __attribute__((dllexport)) WSCstring WSGFgetMgrStrStrData(long kind,char* val);
extern __attribute__((dllexport)) WSCstring WSGFgetMgrStrData(long kind,WSCulong val);
extern __attribute__((dllexport)) long WSGFsetMgrStrData(long kind,char* val,long encoding);
extern __attribute__((dllexport)) WSCprocedure* WSGFidToProcedure(WSCulong id);
extern __attribute__((dllexport)) WSCulong WSGFprocedureToId(WSCprocedure*);

extern "C" {
extern __attribute__((dllexport)) void libwspostgres_func();
extern __attribute__((dllexport)) void libwsmysql_func();
extern __attribute__((dllexport)) void libwsodbc_func();
};
# 2 "ActivationSndBtnDownFunc.cpp" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCfunctionList.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCfunctionList.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSClistData.h" 1
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSClistData.h"
class WSClistData{

  public:
    void** _data;

    unsigned long _num;
    unsigned char _seg_size;






    WSClistData();
    WSClistData(long);
    WSClistData(WSClistData&);
    WSClistData(const WSClistData&);
    virtual ~WSClistData();

    long add(void* data,long i =-1);

    void setData(long i,void*);

    void* getData(long i);
    long getNum();
    void* getTopData();
    void* getBottomData();
    void** getBuf();

    long del(void* data);
    long delPos(long i);
    void clear();
    WSClistData& operator = (WSClistData&);
    void* &operator[](long index);

};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCfunctionList.h" 2

class WSCfunction;

class WSCfunctionRegister{
  protected:
    WSCfunction* _function;
  public:
    WSCfunctionRegister(char*,void*);
    virtual ~WSCfunctionRegister();
};

class WSCfunctionList{
  protected:
    WSClistData _function_list;
  public:
    void addFunction(WSCfunction*);
    WSCfunction* addFunction(char* name,void* proc);

    WSCfunction* getFunction(char*);
    void* getFunctionAddr(char*);

    void delFunction(WSCfunction*);
    void delAll();
};
extern __attribute__((dllexport)) WSCfunctionList* WSGIappFunctionList();
# 3 "ActivationSndBtnDownFunc.cpp" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 1
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCroot.h" 1
# 53 "C:/PROGRA~1/WIDEST~1/ws/include/WSCroot.h"
class WSCroot{

public :
        WSCroot();
        virtual ~WSCroot();
        virtual char* getClassName();
        virtual void* cast(char* cname = __null);
        virtual void* cast2(char* cname = __null);
} ;
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCproperty.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCproperty.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCstring.h" 1
# 25 "C:/PROGRA~1/WIDEST~1/ws/include/WSCstring.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvariant.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvariant.h"
class WSCvariant{

  protected:
    void* _data;
    char* _data2;
    char* _type_name;
    signed char _type;
    unsigned _no_allocated:1;
    unsigned _inited:1;

  public:
    WSCvariant();
    WSCvariant(char);
    WSCvariant(WSCuchar);
    WSCvariant(short);
    WSCvariant(WSCushort);
    WSCvariant(int);
    WSCvariant(WSCuint);
    WSCvariant(long);
    WSCvariant(WSCulong);
    WSCvariant(float);
    WSCvariant(double);
    WSCvariant(void*);
    WSCvariant(void*,char* tname=__null);
    WSCvariant(const WSCvariant&);
    WSCvariant(char*);
    WSCvariant(const char*);
    WSCvariant(WSCbase*);


    virtual ~WSCvariant();

    char getChar() const;
    WSCuchar getUnsignedChar() const;
    short getShort() const;
    WSCushort getUnsignedShort() const;
    long getLong() const;
    WSCulong getUnsignedLong() const;
    int getInt() const;
    WSCuint getUnsignedInt() const;
    float getFloat() const;
    double getDouble() const;
    void* getVoidPtr() const;
    char* getCharPtr();
    char* getCharPtrConst() const;
    WSCbase* getInstancePtr() const;
    WSCbool getNoAllocated() const;
    void setNoAllocated(WSCbool);

    void setValue(char);
    void setValue(WSCuchar);
    void setValue(short);
    void setValue(WSCushort);
    void setValue(long);
    void setValue(WSCulong);
    void setValue(int);
    void setValue(WSCuint);
    void setValue(char*);
    void setValue(const char*);
    void setValue(void*,char* cname=__null);
    void setValue(float);
    void setValue(double);
    void setValue(WSCbase*);

    long getType() const;
    char* getTypeName() const;
    void clear();

    WSCvariant& operator= (const WSCvariant&);
    WSCvariant& operator= (char);
    WSCvariant& operator= (WSCuchar);
    WSCvariant& operator= (short);
    WSCvariant& operator= (WSCushort);
    WSCvariant& operator= (long);
    WSCvariant& operator= (WSCulong);
    WSCvariant& operator= (int);
    WSCvariant& operator= (WSCuint);
    WSCvariant& operator= (void*);
    WSCvariant& operator= (char*);
    WSCvariant& operator= (const char*);
    WSCvariant& operator= (float);
    WSCvariant& operator= (double);
    WSCvariant& operator= (WSCbase*);


    operator char() const;
    operator WSCuchar() const;
    operator short() const;
    operator WSCushort() const;
    operator long() const;
    operator WSCulong() const;
    operator int() const;
    operator WSCuint() const;
    operator void*() const;
    operator char*();
    operator float() const;
    operator double() const;
    operator WSCbase*() const;

};
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCstring.h" 2







class WSCstring {

  protected:
    char* _str;
    short _encoding;
    WSCbool _static;
    WSClistData _tmp_list;

    long _chars;
    long _seek_pt;
    WSCulong _add_str_work_len;
    WSCulong _add_str_work;
    WSCushort* _ucs2;
    void _clear_list();
    void _clear_list_ex();
    void _add_string_to_list(char*,long);
    char* _get_string_from_list(long);
    char* _get_utf8_string(char*,long encode);
    char* _get_mb_string(char*,long encode);
    char* _convert_string(const char*,long from_encode,long to_encode);
    long _get_encoding() const;

  public:
    WSCstring();
    WSCstring(const char*,long encode = -2);
    WSCstring(WSCstring&);
    WSCstring(const WSCstring&);
    WSCstring(WSCvariant&,long encode = -2);
    WSCstring(const WSCvariant&,long encode = -2);
    virtual ~WSCstring();

    void setString(const char*,long encode = -2);
    void setStringEx(const char*,long len,long encode = -2);
    void setStaticString(const char*,long encode = -2);
    char* getString(long encode = -2);

    long getChars();
    long getEncoding();
    long setEncoding(long encode);
    long isExist(const char*,long encode = -2 );

    void addString(const WSCstring&);
    void addString(const WSCvariant&,long encode = -2);
    void addString(const char*,long encode = -2);
    void cutString(WSCulong char_pos);
    void insertString(WSCulong char_pos,WSCstring&);
    void deleteChar(WSCulong char_pos);
    void deleteChars(WSCulong char_pos,WSCulong len);
    void clear();
    void delLineFeed();
    void delString(const char*,long num);
    void delString(const char*,long num,long encode);
    void delHeadSpace();
    void delTailSpace();

    void to_upper();
    void to_lower();

    long replaceString(const char* srcchar,const char* destchar,long num,long encode = -2);


    long getWords();
    long getWords(const char*,long encode = -2);
    long getWordCharPos(long wd);
    long getWordCharPos(long wd,const char*,long encode = -2);
    WSCstring getWord(long wd);
    WSCstring getWord(long num,const char*,long encode = -2);
    long replaceWord(long num,const char* sep,const char* newword,long encode = -2);

    long _seek_next_line();

    long tell();
    long seek(long );
    long seekEnd();
    long eof();
    long getLines();
    WSCstring gets();
    WSCstring& operator = (const WSCstring&);
    WSCstring& operator = (const char*);
    WSCstring& operator = (const WSCvariant&);
    operator char*();
    operator WSCvariant();
    WSCstring operator + (const WSCstring&);
    WSCstring operator + (const WSCvariant&);
    WSCstring operator + (const char*);
    WSCstring& operator += (const WSCstring&);
    WSCstring& operator += (const WSCvariant&);
    WSCstring& operator += (const char*);
    WSCstring& operator << (const WSCstring&);
    WSCstring& operator << (const WSCvariant&);
    WSCstring& operator << (const char*);
    WSCstring& operator << (WSCulong);
    WSCstring& operator << (long);
    WSCstring& operator << (int);
    WSCstring& operator << (WSCuint);
    WSCstring& operator << (double);
    WSCstring& operator << (float);
    long operator == (const WSCstring&);
    void setAddStringWorkLen(long);
    WSCushort* getInternalUcs2();

};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCproperty.h" 2
class WSCbase;

class WSCproperty{

  public:
    char* property_name;
    char* owner_class_name;
    void (*_get_proc_addr)(void*,void*);
    void (*_set_proc_addr)(void*,void*);
    void (*_def_proc_addr)(void*);

    char** _data_labels;
    char** _data;

    char* _builder_title;

    unsigned _prop_type:4;

    unsigned _builder_visible:1;

    unsigned _not_use:1;
    unsigned _is_pixmap:1;
    unsigned _is_color:1;
    unsigned _default_value_change:1;
    unsigned _ignore:1;
        unsigned _init_execute:1;
        unsigned _file_select:1;
        unsigned _can_burst_cast:1;

    WSCproperty(char* prop_name,char* owner_class_name);

    long execSetHandler(void*);

    void setType(char* type, void(*)(void*,void*), void(*)(void*,void*),
                              void(*)(void*));

    long setValue(WSCbase* ,void* ptr);
    void setDefaultValue(WSCbase* obj);
    void setBuilderSelectValues(char* labels[],char* data[]);
    void setGetDefaultValueHandler(void (*)(void*));

    long getValue(WSCbase* ,void* ptr);
    long getDefaultValue(void*);
    WSCbool getDefaultValueChange();
    WSCbool getNotUse();

    WSCbool getBuilderVisible();

    WSCbool getFileSelect();

    void getBuilderSelectValues(char*** labels,char*** data);
    char* getBuilderTitle();

    char getPropObjType();
    char* getPropObjName();

    char* getPropObjTypeName();

    void* getGetDefaultValueHandler();

    WSCbool isPixmapPropObj();
    WSCbool isColorPropObj();
    WSCbool isDefaultValue(WSCbase* obj);
};
# 29 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2

# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexData.h" 1
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexData.h"
class WSCindexData{
  protected:
    WSClistData _data;

    WSCbool _no_alloc_index;
  public:
    WSCindexData();
    WSCindexData(WSCindexData&);
    WSCindexData(const WSCindexData&);
    virtual ~WSCindexData();

    long setData(char*,void*);
    void setNoAllocIndex(WSCbool);

    char* getIndex(long pos);
    void* getData(char*);
    void* getData(long pos);
    long getNum();

    long del(char* index);
    long delPos(long i);
    void clear();
    WSCindexData& operator = (WSCindexData&);
    void* &operator[](char* index);
    WSClistData* getList();
};
# 31 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexVariantData.h" 1
# 30 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexVariantData.h"
class WSCindexVariantData{
  protected:
    WSClistData _data;
    WSClistData _index;
    WSCvariant _tmp;
  public:
    WSCindexVariantData();
    WSCindexVariantData(WSCindexVariantData&);
    WSCindexVariantData(const WSCindexVariantData&);
    virtual ~WSCindexVariantData();

    long setData(char*,WSCvariant);

    char* getIndex(long pos);
    WSCvariant& getData(char*);
    WSCvariant& getData(long pos);
    long getNum();

    long del(char* data);
    long delPos(long i);
    void clear();
    WSCindexVariantData& operator = (WSCindexVariantData&);
    WSCbool isExist(char* index);
    WSCvariant& operator[](char* index);
};
# 32 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCprocedure.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCprocedure.h"
class WSCbase;

class WSCprocedure{

  private:
    void* _function;
    char* _func_name;
    char* _prc_name;
    long _effective_trg_mask;
    char _trg;
    unsigned _internal_prc:1;
    unsigned _src_file:1;

  public:
    WSCprocedure(char*,long);
    virtual ~WSCprocedure();
    long setProcName(char*);
    long setProc(void*);
    long setEffectiveTriggerMask(long);
    long setTrigger(long);
    long setFunction(void(*)(WSCbase*),char*);
    void setInternal(WSCbool);
    void setUseFile(WSCbool fl);

    char* getProcName();
    char* getFunctionName();
    void* getProc();
    long getEffectiveTriggerMask();
    long getTrigger();
    WSCbool getInternal();
    WSCbool getUseFile();
};
extern __attribute__((dllexport)) void WSGFsetProcedureHandler(void* hd);
extern void* WSGFgetProcedureHandler();
# 33 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCconductor.h" 1
# 24 "C:/PROGRA~1/WIDEST~1/ws/include/WSCconductor.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSdrDef.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSdrDef.h"
class WSDserialize;
typedef void (*WSdr_handler)(WSDserialize*,void*);
typedef void* (*WSdr_chandler)(void*);
typedef void (*WSdr_dhandler)(void*);
# 25 "C:/PROGRA~1/WIDEST~1/ws/include/WSCconductor.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCtypeServer.h" 1
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCtypeServer.h"
class WSDserialize;

class WSCtypeServer{

 protected:
  WSClistData _parent_name_list;
  WSClistData _parent_type_server_list;
  void* (*_create_handler)(void *);
  void (*_delete_handler)(void *);
  void (*_save_handler)(WSDserialize*,void *);
  void (*_load_handler)(WSDserialize*,void *);


 public:
  char* _type_name;
  WSCtypeServer();
  virtual ~WSCtypeServer();

  void setType(char* type);
  void setSaveHandler(void (*)(WSDserialize*,void*) );
  void setLoadHandler(void (*)(WSDserialize*,void*) );
  void setCreateHandler(void*(*)(void*));
  void setDeleteHandler(void(*)(void*));

  void* getSaveHandler();
  void* getLoadHandler();
  long getParentClassNum();
  char* getParentClassName(long i);
  WSCtypeServer* getParentClassServer(long,char** cname);
  virtual void* getParentClassPtr(char*,void*) = 0;

  void* createInstance(void*);
  void deleteInstance(void*);
  WSCbool isParentClass(char*);
  WSCbool isHit(char*);
};
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCconductor.h" 2



class WSDserialize;
class WSDsocket;

struct WSCremoteCall{
  WSCushort _port;
  WSCstring _addr;
  char* _class;
  char* _instance;
  char* _op;
  WSCstring _dest_addr;
  void setOperationName(char* opname);
  void setClassName(char* cname);
  void setInstanceName(char* cname);
  WSCremoteCall();
  ~WSCremoteCall();
};


class WSCconductor{

 protected:
  WSClistData _serialize_list;
  WSClistData _type_server_list;
  WSCstring _serialize_path;
  WSCstring _addr;
  WSCushort _port;
  WSDsocket* _sock;
  WSDsocket* _csock;
  WSCulong _timeout;
  WSCbool _accepted;
  WSCbool _need_update;
  WSCindexData _net_server_handler_list;
  long _timer_id;
  long _timer_cnt;

  static void _timer_work(WSCuchar,void*);
  static void _accepted_work(WSDsocket* sock,void* socket,WSCulong addr);

 public:
  WSCconductor();
  virtual ~WSCconductor();

  WSCtypeServer* searchTypeServer(char*);
  char* getSerializePath();
  void setSerializePath(char*);

  long add(WSCtypeServer*);
  long addSerialize(WSDserialize* );
  long del(WSCtypeServer*);
  WSDserialize* getSerialize(char* serialize_type);
  WSDserialize* getNewSerialize(char* serialize_type);

  long save(WSDserialize*, char* type, char* nm, void* ptr);
  long load(WSDserialize*, char* type, char* nm, void* ptr);
  long loadAlloc(WSDserialize*,char* type,char* nm,void** ptr,void* cdata);

  WSDserialize* beginTransaction(char* stype,char* sname,WSDserialize*,int fl = 2);
  WSDserialize* beginTransaction(char* stype,char* sname,int fl = 2);
  long endTransaction(WSDserialize*);

  long saveGUI(WSDserialize*,char* name,WSCbase*);
  long loadGUI(WSDserialize*,WSCbase**,WSCbase*);

  void setPort(WSCushort port);
  WSCushort getPort();

  void setAddr(char* addr);
  WSCstring getAddr();

  void setTimeout(WSCulong t);
  long startDispatch();
  long stopDispatch();

  WSDserialize* beginRemoteCall(WSCremoteCall*);
  long endRemoteCall(WSDserialize*);

  void addNetServerHandler(char* cname,void* handler);

  void clearUpdateCounter();
};
extern __attribute__((dllexport)) WSCconductor* WSGIconductor();

class WSCbinType{

protected:
  WSCbool _need_swap;
public:
  WSCbinType();
  void memcpy2b(char* dest,short src);
  void memcpy4b(char* dest,long src);
  void memcpy8b(char* dest,void* src);
  void memcpy16b(char* dest,void* src);
  void memcpy32b(char* dest,void* src);
  void memscan2b(short* src,char* dest);
  void memscan4b(long* src, char* dest);
  void memscan8b(void* src, char* dest);
  void memscan16b(void* src,char* dest);
  void memscan32b(void* src,char* dest);
};

extern __attribute__((dllexport)) WSCbinType* WSGIbinType();
# 34 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSDserialize.h" 1
# 30 "C:/PROGRA~1/WIDEST~1/ws/include/WSDserialize.h"
class WSCserializeData;

class WSDserialize :public WSCroot{

protected:
  WSCstring _field;
  WSCstring _path;
  WSClistData _data_list;
  WSCserializeData* _current_data;
  long _encoding;
  unsigned _need_save:1;
  unsigned _transact:1;
  unsigned _use_socket:1;

  long _write_data(WSCserializeData* dt, char* type, void* data, long items);
  long _write_sub_class(WSCserializeData*,char* type,void* data, long items);

  long _read_data(WSCserializeData* dt, char* type, void* data, long items);
  long _read_sub_class( WSCserializeData*,char* type,void* data, long items);

  long _save(WSClistData*, char* type, char* name, void* ptr);
  long _load(WSCserializeData*,WSClistData*,char* type,char* name,void* ptr);
  long _load_alloc(WSCserializeData*,WSClistData*,char* type,char* name,
          void** ptr, void* cdata);
  long _search_instance(WSClistData*,char* type,char mode,char*** otype,
          char*** onames,long* num);
public:
  virtual long _open(char* name,long mode) = 0;
  virtual long _close() = 0;
  virtual long _read(void*,long len) = 0;
  virtual long _write(void*,long len) = 0;
  virtual long _eof() = 0;
  virtual long _seek(long addr) = 0;
  virtual long _seek_set() = 0;
  virtual long _seek_end() = 0;
  virtual long _size() = 0;
  virtual long _tell() = 0;

  WSDserialize();
  virtual ~WSDserialize();
  long size(char* type, char* name);
  long search(char* type, long mode, char*** data,long* num);

  long save(char* type, char* name, void* data);
  long load(char* type, char* name, void* ptr);
  long loadAlloc(char* type, char* name, void** ptr,void* cdata);

  long searchInstance(char* type,char mode,char*** otype,char*** onames,long* num);

  long saveData(char* type, char* name, void* data);
  long loadData(char* type, char* name, void* ptr);
  long loadAllocData(char* type, char* name, void** ptr,void* cdata);


  long searchInstanceData(char* type,char mode,char*** otype,char*** onames,long* num);

  virtual WSCbool type(char* ) = 0;
  virtual WSDserialize* createSerialize() = 0;

  virtual long beginTransaction(char* field,int fl = 2);
  virtual long endTransaction();
  WSCbool underTransaction();
  void setUnderTransaction(WSCbool);
  char* getPath();
  void setPath(char*);
  void setEncoding(long encoding);
  long getEncoding();

  public: char* getThisClassName(); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null);
};
# 35 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbase.h" 2


class WSDdev;
class WSCbase;
class WSCdevice;
class WSCfontSet;
class WSCclassInformation;



class WSCbase :public WSCroot{

 private:
  static WSCclassInformation* WSCbase_info_ptr;
  WSCclassInformation* _own_class_info;
 protected:
  static WSClistData* _create_proc_list;
  static WSClistData* _cname_list;
  static WSCbase* _focus_instance;
  static WSCbase* _special_focus_instance;
  static WSCushort _grid_x;
  static WSCushort _grid_y;



  WSClistData* _proc_list;
  WSCprocedure** _proc_list_bk;
  char* _instance_name;
  WSDdev* _dev;
  WSCbase* _dev_public;
  WSCbase* _parent;
  WSCbase* _data_source_server;
  WSClistData* _data_source_clients;
  char** _user_data_st_list;
  char** _user_data_list;

  WSCindexVariantData* _variant_list;

  void** _scale_ptrs;
  long _event_mask;

  char _num_of_st_user_data;
  char _num_of_user_data;
  WSCushort _proc_list_len;
  unsigned _name_hash_value:6;
  unsigned _absolute_draw:1;

  unsigned _show_grip_hand:1;

  unsigned _init_registered:1;
  unsigned _update_registered:1;
  unsigned _vis:1;
  unsigned _vis_bk:1;
  unsigned _parent_vis:1;
  unsigned _parent_vis_init:1;
  unsigned _sensitive:1;
  unsigned _sensitive_work:1;
  unsigned _parent_sensitive:1;
  unsigned _parent_sensitive_init:1;

  unsigned _property_edit_mode:1;

  unsigned _internal_object:1;
  unsigned _geometry_changed:1;
  unsigned _expose_op:1;
  unsigned _initialized:1;
  unsigned _use_parent_base_dev:1;
  unsigned _dev_is_public_dev:1;
  unsigned _proc_is_changed:1;
  unsigned _no_clear:1;

  unsigned _export_:1;
  unsigned _export_bk:1;

  unsigned _keep_pixmap_cache:1;


  static long _edit_mouse_move_handler(void*);


  void _set_prop_error(char*);
  void _set_prop_error2(char*,char*,WSCproperty*);
  void _get_prop_error(char*);
  void _get_prop_error2(char*,char*,WSCproperty*);

 public:
  unsigned _flag_for_anchor:1;
  virtual void onMouseIn(WSCpoint*);
  virtual void onMouseOut();
  virtual void onMouseMove(WSCpoint*);
  virtual void onMousePress(WSCpoint*);
  virtual void onMouseDoubleClick(WSCpoint*);
  virtual void onMouseRelease(WSCpoint*);
  virtual void onExpose(WSCrect*);
  virtual void onResize(WSCrect*);
  virtual void onVisibleChange(WSCbool);
  virtual void onSensitiveChange(WSCbool);
  virtual void onParentVisibleChange(WSCbool);
  virtual void onParentSensitiveChange(WSCbool);

  virtual void onEditModeChange(WSCbool);

  virtual void onFocusChange(WSCbool);
  virtual void onWindowFocusChange(WSCbool);
  virtual void onSpecialFocusChange(WSCbool);
  virtual void onChildAdded(WSCbase*);
  virtual void onSelectionChange(WSCbool);
  virtual void onGuiPolicyChange(long policy);
  virtual void onDefaultColorChange();

 protected:
  virtual long _device_initialize();

  WSCbool _get_parent_visible();
  WSCbool _get_parent_sensitive();
  WSCbool _get_prop(void* value,char type,WSCproperty*);

  WSCvariant _get_property_str_value(WSCproperty*);

  void _draw_grip_hand(short x,short y,WSCushort w,WSCushort h);



  void _exec_procedure(char*,WSCbool internal);
  void _exec_procedure(long,WSCbool del_ev,WSCbool internal);
  void _exec_procedure(WSCprocedure*);
  void _exec_del_procedure();
  void _add_prcs(WSCprocedure*);
  void _register_focus_move();

  WSCbase* _get_focus_move_instance(long direction,WSCbool retry = (WSCbool)0,WSCbase* orig = __null);
  void _error_output(char*,char*,char*,WSCbool);
  long _property_init();
  static WSCbase* (*_create_instance_handler)(char*,WSCbase*,char*);


  void _start_new_instance_positioning();
  void _stop_new_instance_positioning();
  static void _new_instance_pos_work_proc(void*);

 public:
  static void setCreateInstanceHandler(WSCbase*(*)(char*,WSCbase*,char*));
  static void setGripHandGrid(WSCushort,WSCushort);
  static void getGripHandGrid(WSCushort*,WSCushort*);
  virtual void _adjust_for_anchors(WSCushort w,WSCushort h);

  WSCbase(WSCbase *,char *);
  virtual ~WSCbase();

  virtual long initialize();
  WSCbool getInitialized();
  void setInstanceName(char *);
  void setInstanceNameNC(char *);

  char* getInstanceName();
  long getInstanceNameHashValue();

  virtual long getObjectType();
  WSClistData* getProcedureList();
  WSClistData getProcedures();

  void setParent(WSCbase*);
  WSCbase* getParent();
  WSCbase* getParentWindow();

  long setChild(WSCbase*);
  long delChild(WSCbase*);

  void setInternalObject(WSCbool );
  WSCbool getInternalObject();

  virtual void setScaleOffsetPtr(double*);
  virtual void setXOffsetPtr(short*);
  virtual void setYOffsetPtr(short*);
  double* getScaleOffsetPtr();
  short* getXOffsetPtr();
  short* getYOffsetPtr();

  WSCproperty* getPropObj(char* prop_name);
  long getPropObjArray(WSClistData*);
  long isDefaultValue(char*,WSCbool*);
  WSCbool setDefaultValue(char*);
  WSCbool existProperty(char*);



  WSCbool setProperty(char *name,const WSCvariant&);
  WSCvariant getProperty(char *name);
  long getPropertyArray(WSClistData*,WSCbool include_default);

  virtual char* getDefaultProperty();

  WSCbool setPropertyV(char *name,long v);
  WSCbool getPropertyV(char *name,long* v);
  WSCbool setPropertyV(char *name,int v);
  WSCbool getPropertyV(char *name,int* v);
  WSCbool setPropertyV(char *name,WSCuint v);
  WSCbool getPropertyV(char *name,WSCuint* v);
  WSCbool setPropertyV(char *name,WSCuchar v);
  WSCbool getPropertyV(char *name,WSCuchar* v);
  WSCbool setPropertyV(char *name,WSCushort v);
  WSCbool getPropertyV(char *name,WSCushort* v);
  WSCbool setPropertyV(char *name,WSCulong v);
  WSCbool getPropertyV(char *name,WSCulong* v);
  WSCbool setPropertyV(char *name,short v);
  WSCbool getPropertyV(char *name,short* v);
  WSCbool setPropertyV(char *name,char* v);
  WSCbool getPropertyV(char *name,char** v);
  WSCbool setPropertyV(char *name,char v);
  WSCbool getPropertyV(char *name,char* v);
  WSCbool setPropertyV(char *name,float v);
  WSCbool getPropertyV(char *name,float* v);
  WSCbool setPropertyV(char *name,double v);
  WSCbool getPropertyV(char *name,double* v);
  WSCbool setPropertyV(char *name,void* v);
  WSCbool getPropertyV(char *name,void** v);
  WSCbool setPropertyV(char *name,WSCvariant v);


  virtual WSCclassInformation* getClassInformation();
  WSClistData* getPropertyList();


  virtual long setPropertyEditMode(WSCbool );

  long setFocus(WSCbool fl = (WSCbool)1);
  long setSpecialFocus(WSCbool fl = (WSCbool)1);


  long setPropertyEditExecute(WSCbool );

  virtual void setVisible(WSCbool);
  void setNoClearFlag(WSCbool);

  void setParentVisible(WSCbool);
  void setSensitive(WSCbool);
  void setParentSensitive(WSCbool);


  WSCbool getPropertyEditMode();

  WSCbool getVisible();
  WSCbool getParentVisible();
  WSCbool getSensitive();
  WSCbool _get_sensitive_work();
  WSCbool getParentSensitive();
  WSCbool getFocus();
  WSCbool getSpecialFocus();
  WSCbool getDotMode();
  virtual WSCbool canFocus();

  long setAbsoluteDraw(WSCbool fl);
  WSCbool getAbsoluteDraw();

  void setUserData(const char*,void *);
  void setUserData(char*,void *);
  void* getUserData(char*);
  void setUserLongData(char*,WSCulong);
  WSCulong getUserLongData(char*);
  void setUserStringData(char*,char*);
  char* getUserStringData(char*);

  void setVariantData(char*,WSCvariant);
  WSCvariant& getVariantData(char*);


  WSCbase* getChildInstance(char*);
  WSCbase* getFocusMoveInstance(long);
  virtual WSCbase* getFocusMoveInternalInstance(long);

  WSClistData* getDataSourceClients();
  void addDataSourceClient(WSCbase*);
  void delDataSourceClient(WSCbase*);
  WSCbase* getDataSourceServer();
  void setDataSourceServer(WSCbase*);
  void setDataToDataSourceClients(WSCvariant*);
  virtual void setData(WSCvariant*,long code = -2);
  virtual long getDataSourceType();
  virtual char* getDataSourcePropertyName();

  virtual WSClistData& getChildren();
  virtual WSClistData* getChildrenPtr();

  virtual long restackChild(WSCbase*,int order);

  virtual void setChildren(WSClistData&);
  long getAllChildren(WSClistData&);
  virtual void update();
  void needUpdate();
  virtual void internalUpdate();

  WSCbool isNeedUpdate();
  WSCbool isParent(WSCbase*);
  WSCbool existTrigger(long);
  WSCbool getMouseAddr(short*,short*);
  WSCindexData* getExtTriggerList();

  virtual long addProcedure(WSCprocedure*);

  long addProcedure(char* pname,char* fname,long);
  long delProcedure(long);

  long addProcedureV(char* pname,char* fname,void(*hd)(WSCbase*),long);

  long delProcedure(WSCprocedure*);
  WSCbase* getNextChild(WSCbase*);

  long delAllProcedure();
  void execProcedure(char*);
  void execProcedure(long);

  virtual long draw();
  virtual long clear();
  virtual long redraw();
  virtual long cdraw();

  WSDdev* getdev();
  WSDdev* getowndev();
  WSDdev* getParentDev();
  WSDdev* attachdev();
  WSCbase* getPublicDevChild();

  void setUseParentBaseDev(WSCbool);
  WSCbool getUseParentBaseDev();
  long setdev(WSDdev*);
  long setpablicdev(WSDdev*);
  long setMoveMode(WSCbool);
  long setOrder(char);


  long setShowGriphand(WSCbool);
  long drawGriphand();
  long clearGriphand();


  static void setCreateHandler(char*,WSCbase* (*hd)(WSCbase*,char*));
  static WSCbase* getNewInstance(char* class_name,WSCbase* parent,char* name);
  static WSCbase* getFocusInstance();
  static WSCbase* getSpecialFocusInstance();
  static WSClistData* getSupportedClassList();

  virtual void onDataSave(WSDserialize*);
  virtual void onDataLoad(WSDserialize*);

  virtual char* getUseDevName();
  virtual long execEventProc(long ev,void*);
  virtual WSCbase* getPropertyInheritChild();

  static void setCreateCallback(void(*)(void*),void*);

  long getVer(long v = 1000);
  long checkVersion(long v);

  void setGeometryChanged(WSCbool);

  void setExportName(char*);
  char* getExportName();
  void setExported(WSCbool);
  WSCbool getExported();

  virtual WSCbool adjustAnchor();
  WSCbool canBurstCast(void*);
  public: char* getThisClassName(); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null);
};
# 4 "ActivationSndBtnDownFunc.cpp" 2
# 1 "General.h" 1



# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 1 3
# 44 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++config.h" 1 3
# 34 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++config.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/os_defines.h" 1 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++config.h" 2 3
# 46 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stringfwd.h" 1 3
# 43 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stringfwd.h" 3



namespace std
{
  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;




  template<typename _Alloc>
    class allocator;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  typedef basic_string<char> string;
  typedef basic_string<wchar_t> wstring;
}
# 47 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/char_traits.h" 1 3
# 44 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/char_traits.h" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstring" 1 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstring" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstddef" 1 3
# 47 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstddef" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 149 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 3
typedef int ptrdiff_t;
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 49 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstddef" 2 3

namespace std
{
  using ::ptrdiff_t;
  using ::size_t;
}
# 50 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstring" 2 3
# 77 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstring" 3
namespace std
{
  using ::memcpy;
  using ::memmove;
  using ::strcpy;
  using ::strncpy;
  using ::strcat;
  using ::strncat;
  using ::memcmp;
  using ::strcmp;
  using ::strcoll;
  using ::strncmp;
  using ::strxfrm;
  using ::strcspn;
  using ::strspn;
  using ::strtok;
  using ::memset;
  using ::strerror;
  using ::strlen;

  using ::memchr;

  inline void*
  memchr(void* __p, int __c, size_t __n)
  { return memchr(const_cast<const void*>(__p), __c, __n); }

  using ::strchr;

  inline char*
  strchr(char* __s1, int __n)
  { return __builtin_strchr(const_cast<const char*>(__s1), __n); }

  using ::strpbrk;

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(const_cast<const char*>(__s1), __s2); }

  using ::strrchr;

  inline char*
  strrchr(char* __s1, int __n)
  { return __builtin_strrchr(const_cast<const char*>(__s1), __n); }

  using ::strstr;

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(const_cast<const char*>(__s1), __s2); }
}
# 46 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/char_traits.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/fpos.h" 1 3
# 43 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/fpos.h" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++io.h" 1 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++io.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstdio" 1 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstdio" 3
# 97 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 36 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++io.h" 2 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr.h" 1 3
# 98 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr-default.h" 1 3
# 67 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr-default.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/errno.h" 1 3
# 96 "C:/PROGRA~1/WIDEST~1/gcc/include/errno.h" 3
extern "C" {
# 107 "C:/PROGRA~1/WIDEST~1/gcc/include/errno.h" 3
int* _errno(void);




}
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr-default.h" 2 3
# 332 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef void* __gthread_mutex_t;
# 354 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));


static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}
# 465 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr-default.h" 3
static inline int
__gthread_once (__gthread_once_t *once, void (*func) (void))
{
  if (! __gthread_active_p ())
    return -1;
  else if (once == __null || func == __null)
    return 22;

  if (! once->done)
    {
      if (InterlockedIncrement (&(once->started)) == 0)
        {
          (*func) ();
          once->done = 1;
        }
      else
        {





          while (! once->done)
            Sleep (0);
        }
    }

  return 0;
}




static inline int
__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))
{
  int status = 0;
  DWORD tls_index = TlsAlloc ();
  if (tls_index != 0xFFFFFFFF)
    {
      *key = tls_index;



      status = __mingwthr_key_dtor (*key, dtor);

    }
  else
    status = (int) GetLastError ();
  return status;
}

static inline int
__gthread_setspecific (__gthread_key_t key, const void *ptr)
{
  return (TlsSetValue (key, (void*) ptr) != 0) ? 0 : (int) GetLastError ();
}



static inline int
__gthread_key_dtor (__gthread_key_t key, void *ptr)
{

 if (ptr)
     return __gthread_setspecific(key, 0);
  else
    return 0;
  return 0;
}

static inline int
__gthread_key_delete (__gthread_key_t key)
{
  return (TlsFree (key) != 0) ? 0 : (int) GetLastError ();
}

static inline void *
__gthread_getspecific (__gthread_key_t key)
{
  DWORD lasterror;
  void *ptr;

  lasterror = GetLastError();

  ptr = TlsGetValue(key);

  SetLastError( lasterror );

  return ptr;
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *mutex)
{

  *mutex = CreateMutexA (__null, 0, __null);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *mutex)
{
  int status = 0;

  if (__gthread_active_p ())
    {
      if (WaitForSingleObject (*mutex, 0xFFFFFFFF) == 0)
        status = 0;
      else
        status = 1;
    }
  return status;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *mutex)
{
  int status = 0;

  if (__gthread_active_p ())
    {
      if (WaitForSingleObject (*mutex, 0) == 0)
        status = 0;
      else
        status = 1;
    }
  return status;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *mutex)
{
  if (__gthread_active_p ())
    return (ReleaseMutex (*mutex) != 0) ? 0 : 1;
  else
    return 0;
}




}
# 99 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/gthr.h" 2 3
# 38 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/c++io.h" 2 3

namespace std
{

  typedef long streamoff;
  typedef ptrdiff_t streamsize;



  typedef fpos_t __c_streampos;

  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


  struct __ios_flags
  {
    typedef short __int_type;

    static const __int_type _S_boolalpha = 0x0001;
    static const __int_type _S_dec = 0x0002;
    static const __int_type _S_fixed = 0x0004;
    static const __int_type _S_hex = 0x0008;
    static const __int_type _S_internal = 0x0010;
    static const __int_type _S_left = 0x0020;
    static const __int_type _S_oct = 0x0040;
    static const __int_type _S_right = 0x0080;
    static const __int_type _S_scientific = 0x0100;
    static const __int_type _S_showbase = 0x0200;
    static const __int_type _S_showpoint = 0x0400;
    static const __int_type _S_showpos = 0x0800;
    static const __int_type _S_skipws = 0x1000;
    static const __int_type _S_unitbuf = 0x2000;
    static const __int_type _S_uppercase = 0x4000;
    static const __int_type _S_adjustfield = 0x0020 | 0x0080 | 0x0010;
    static const __int_type _S_basefield = 0x0002 | 0x0040 | 0x0008;
    static const __int_type _S_floatfield = 0x0100 | 0x0004;


    static const __int_type _S_badbit = 0x01;
    static const __int_type _S_eofbit = 0x02;
    static const __int_type _S_failbit = 0x04;


    static const __int_type _S_app = 0x01;
    static const __int_type _S_ate = 0x02;
    static const __int_type _S_bin = 0x04;
    static const __int_type _S_in = 0x08;
    static const __int_type _S_out = 0x10;
    static const __int_type _S_trunc = 0x20;
  };
}
# 45 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/fpos.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cwchar" 1 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cwchar" 3



# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/ctime" 1 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/ctime" 3



# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 1 3
# 36 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 37 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 2 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/sys/types.h" 1 3
# 38 "C:/PROGRA~1/WIDEST~1/gcc/include/sys/types.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 39 "C:/PROGRA~1/WIDEST~1/gcc/include/sys/types.h" 2 3





typedef long time_t;
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/sys/types.h" 3
typedef long _off_t;


typedef _off_t off_t;







typedef unsigned int _dev_t;





typedef _dev_t dev_t;






typedef short _ino_t;


typedef _ino_t ino_t;






typedef int _pid_t;


typedef _pid_t pid_t;






typedef unsigned short _mode_t;


typedef _mode_t mode_t;






typedef int _sigset_t;


typedef _sigset_t sigset_t;
# 43 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 2 3
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
typedef long clock_t;
# 77 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
struct tm
{
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;

};


extern "C" {


clock_t clock (void);
time_t time (time_t*);
double difftime (time_t, time_t);
time_t mktime (struct tm*);
# 110 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
char* asctime (const struct tm*);
char* ctime (const time_t*);
struct tm* gmtime (const time_t*);
struct tm* localtime (const time_t*);


size_t strftime (char*, size_t, const char*, const struct tm*);

size_t wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);


extern void _tzset (void);


extern void tzset (void);


size_t strftime(char*, size_t, const char*, const struct tm*);
char* _strdate(char*);
char* _strtime(char*);
# 142 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
extern int* __p__daylight (void);
extern long* __p__timezone (void);
extern char** __p__tzname (void);

extern __attribute__((dllimport)) int _daylight;
extern __attribute__((dllimport)) long _timezone;
extern __attribute__((dllimport)) char *_tzname[2];
# 180 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
extern __attribute__((dllimport)) int daylight;
extern __attribute__((dllimport)) long timezone;
extern __attribute__((dllimport)) char *tzname[2];





wchar_t * _wasctime(const struct tm*);
wchar_t * _wctime(const time_t*);
wchar_t* _wstrdate(wchar_t*);
wchar_t* _wstrtime(wchar_t*);
# 213 "C:/PROGRA~1/WIDEST~1/gcc/include/time.h" 3
}
# 52 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/ctime" 2 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 52 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cwchar" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 1 3
# 33 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 1 3
# 36 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 37 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 2 3
# 59 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 3
extern "C" {


int isalnum(int);
int isalpha(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);


int _isctype (int, int);



int tolower(int);
int toupper(int);
# 92 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 3
int _tolower(int);
int _toupper(int);
# 120 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 3
extern __attribute__((dllimport)) unsigned short _ctype[];

  extern __attribute__((dllimport)) unsigned short* _pctype;
# 158 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 3
extern __inline__ int isalnum(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & (0x0103|0x0004)) : _isctype(c, (0x0103|0x0004)));}
extern __inline__ int isalpha(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0103) : _isctype(c, 0x0103));}
extern __inline__ int iscntrl(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0020) : _isctype(c, 0x0020));}
extern __inline__ int isdigit(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0004) : _isctype(c, 0x0004));}
extern __inline__ int isgraph(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & (0x0010|0x0103|0x0004)) : _isctype(c, (0x0010|0x0103|0x0004)));}
extern __inline__ int islower(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0002) : _isctype(c, 0x0002));}
extern __inline__ int isprint(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & (0x0040|0x0010|0x0103|0x0004)) : _isctype(c, (0x0040|0x0010|0x0103|0x0004)));}
extern __inline__ int ispunct(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0010) : _isctype(c, 0x0010));}
extern __inline__ int isspace(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0008) : _isctype(c, 0x0008));}
extern __inline__ int isupper(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0001) : _isctype(c, 0x0001));}
extern __inline__ int isxdigit(int c) {return (__mb_cur_max == 1 ? (_pctype[c] & 0x0080) : _isctype(c, 0x0080));}


extern __inline__ int _tolower(int c) {return ( c -'A'+'a');}
extern __inline__ int _toupper(int c) {return ( c -'a'+'A');}
# 186 "C:/PROGRA~1/WIDEST~1/gcc/include/ctype.h" 3
typedef wchar_t wctype_t;



int iswalnum(wint_t);
int iswalpha(wint_t);
int iswascii(wint_t);
int iswcntrl(wint_t);
int iswctype(wint_t, wctype_t);
int is_wctype(wint_t, wctype_t);
int iswdigit(wint_t);
int iswgraph(wint_t);
int iswlower(wint_t);
int iswprint(wint_t);
int iswpunct(wint_t);
int iswspace(wint_t);
int iswupper(wint_t);
int iswxdigit(wint_t);

wchar_t towlower(wchar_t);
wchar_t towupper(wchar_t);

int isleadbyte (int);




extern __inline__ int iswalnum(wint_t wc) {return (iswctype(wc,0x0103|0x0004));}
extern __inline__ int iswalpha(wint_t wc) {return (iswctype(wc,0x0103));}
extern __inline__ int iswascii(wint_t wc) {return (((unsigned)wc & 0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t wc) {return (iswctype(wc,0x0020));}
extern __inline__ int iswdigit(wint_t wc) {return (iswctype(wc,0x0004));}
extern __inline__ int iswgraph(wint_t wc) {return (iswctype(wc,0x0010|0x0103|0x0004));}
extern __inline__ int iswlower(wint_t wc) {return (iswctype(wc,0x0002));}
extern __inline__ int iswprint(wint_t wc) {return (iswctype(wc,0x0040|0x0010|0x0103|0x0004));}
extern __inline__ int iswpunct(wint_t wc) {return (iswctype(wc,0x0010));}
extern __inline__ int iswspace(wint_t wc) {return (iswctype(wc,0x0008));}
extern __inline__ int iswupper(wint_t wc) {return (iswctype(wc,0x0001));}
extern __inline__ int iswxdigit(wint_t wc) {return (iswctype(wc,0x0080));}
extern __inline__ int isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & 0x8000);}



int __isascii (int);
int __toascii (int);
int __iscsymf (int);
int __iscsym (int);


extern __inline__ int __isascii(int c) {return (((unsigned)c & ~0x7F) == 0);}
extern __inline__ int __toascii(int c) {return (c & 0x7F);}
extern __inline__ int __iscsymf(int c) {return (isalpha(c) || (c == '_'));}
extern __inline__ int __iscsym(int c) {return (isalnum(c) || (c == '_'));}



int isascii (int);
int toascii (int);
int iscsymf (int);
int iscsym (int);





}
# 34 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 2 3
# 44 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 1 3





# 1 "C:/PROGRA~1/WIDEST~1/gcc/lib/gcc-lib/mingw32/3.2/include/stddef.h" 1 3
# 7 "C:/PROGRA~1/WIDEST~1/gcc/include/stddef.h" 2 3
# 45 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 2 3
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
extern "C" {





typedef unsigned long _fsize_t;




struct _wfinddata_t {
        unsigned attrib;
        time_t time_create;
        time_t time_access;
        time_t time_write;
        _fsize_t size;
        wchar_t name[(260)];
};
struct _wfinddatai64_t {
    unsigned attrib;
    time_t time_create;
    time_t time_access;
    time_t time_write;
    long long size;
    wchar_t name[(260)];
};
# 88 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
int _waccess (const wchar_t*, int);
int _wchmod (const wchar_t*, int);
int _wcreat (const wchar_t*, int);
long _wfindfirst (const wchar_t*, struct _wfinddata_t *);
int _wfindnext (long, struct _wfinddata_t *);
int _wunlink (const wchar_t*);
int _wopen (const wchar_t*, int, ...);
int _wsopen (const wchar_t*, int, int, ...);
wchar_t* _wmktemp (wchar_t*);
long _wfindfirsti64 (const wchar_t*, struct _wfinddatai64_t*);
int _wfindnexti64 (long, struct _wfinddatai64_t*);
# 154 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
int _wchdir (const wchar_t*);
wchar_t* _wgetcwd (wchar_t*, int);
wchar_t* _wgetdcwd (int, wchar_t*, int);
int _wmkdir (const wchar_t*);
int _wrmdir (const wchar_t*);
# 171 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
struct _stat
{
        _dev_t st_dev;
        _ino_t st_ino;
        _mode_t st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;

        time_t st_mtime;
        time_t st_ctime;
};

struct stat
{
        _dev_t st_dev;
        _ino_t st_ino;
        _mode_t st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;

        time_t st_mtime;
        time_t st_ctime;
};

struct _stati64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    long long st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
    };







int _wstat (const wchar_t*, struct _stat*);
int _wstati64 (const wchar_t*, struct _stati64*);
# 242 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
wchar_t* _wsetlocale (int, const wchar_t*);
# 282 "C:/PROGRA~1/WIDEST~1/gcc/include/wchar.h" 3
typedef int mbstate_t;
typedef wchar_t _Wint_t;

wint_t btowc(int);
size_t mbrlen(const char *, size_t, mbstate_t *);
size_t mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

size_t wcrtomb(char *, wchar_t, mbstate_t *);
size_t wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
int wctob(wint_t);


extern __inline__ int fwide(FILE* stream, int mode) {return -1;}
extern __inline__ int mbsinit(const mbstate_t* ps) {return 1;}
wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);
int wmemcmp(const wchar_t* s1, const wchar_t * s2, size_t n);
wchar_t* wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
                 size_t n);
wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long wcstoll(const wchar_t* __restrict__ nptr,
                  wchar_t** __restrict__ endptr, int base);
unsigned long long wcstoull(const wchar_t* __restrict__ nptr,
                            wchar_t ** __restrict__ endptr, int base);





}
# 55 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cwchar" 2 3
# 69 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 46 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/fpos.h" 2 3

namespace std
{



  template<typename _StateT>
    class fpos
    {
    public:

      typedef _StateT __state_type;

    private:
      streamoff _M_off;
      __state_type _M_st;

    public:
      __state_type
      state() const { return _M_st; }

      void
      state(__state_type __st) { _M_st = __st; }



      fpos(): _M_off(streamoff()), _M_st(__state_type()) { }

      fpos(streamoff __off, __state_type __st = __state_type())
      : _M_off(__off), _M_st(__st) { }

      operator streamoff() const { return _M_off; }

      fpos&
      operator+=(streamoff __off) { _M_off += __off; return *this; }

      fpos&
      operator-=(streamoff __off) { _M_off -= __off; return *this; }

      fpos
      operator+(streamoff __off)
      {
        fpos __t(*this);
        __t += __off;
        return __t;
      }

      fpos
      operator-(streamoff __off)
      {
        fpos __t(*this);
        __t -= __off;
        return __t;
      }

      bool
      operator==(const fpos& __pos) const
      { return _M_off == __pos._M_off; }

      bool
      operator!=(const fpos& __pos) const
      { return _M_off != __pos._M_off; }

      streamoff
      _M_position() const { return _M_off; }

      void
      _M_position(streamoff __off) { _M_off = __off; }
    };


  typedef fpos<mbstate_t> streampos;



}
# 47 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/char_traits.h" 2 3

namespace std
{



  template<class _CharT>
    struct char_traits
    {
      typedef _CharT char_type;

      typedef unsigned long int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2);

      static bool
      eq(const char_type& __c1, const char_type& __c2);

      static bool
      lt(const char_type& __c1, const char_type& __c2);

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n);

      static size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n);

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c);

      static int_type
      to_int_type(const char_type& __c);

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2);

      static int_type
      eof();

      static int_type
      not_eof(const int_type& __c);
    };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof() { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };
# 241 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/char_traits.h" 3
  template<typename _CharT, typename _Traits>
    struct _Char_traits_match
    {
      _CharT _M_c;
      _Char_traits_match(_CharT const& __c) : _M_c(__c) { }

      bool
      operator()(_CharT const& __a) { return _Traits::eq(_M_c, __a); }
    };
}
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 1 3
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 1 3
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/climits" 1 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/climits" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/limits.h" 1 3
# 50 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/climits" 2 3
# 67 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstdlib" 1 3
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstdlib" 3
# 84 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cstdlib" 3
namespace std
{
  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;
  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;
  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;
  using ::wcstombs;
  using ::wctomb;

  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }
}
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/new" 1 3
# 42 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/new" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception" 1 3
# 40 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception" 3
extern "C++" {

namespace std
{






  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();


    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }


    virtual ~bad_exception() throw();
  };


  typedef void (*terminate_handler) ();

  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();


  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();


  void unexpected() __attribute__ ((__noreturn__));
# 98 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception" 3
  bool uncaught_exception() throw();
}

namespace __gnu_cxx
{
# 111 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception" 3
  void __verbose_terminate_handler ();
}

}
# 43 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/new" 2 3

extern "C++" {

namespace std
{


  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    virtual ~bad_alloc() throw();
  };

  struct nothrow_t { };
  extern const nothrow_t nothrow;


  typedef void (*new_handler)();

  new_handler set_new_handler(new_handler) throw();
}
# 79 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { };
inline void operator delete[](void*, void*) throw() { };

}
# 70 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/iosfwd" 1 3
# 43 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/iosfwd" 3




# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 1 3
# 34 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception_defines.h" 1 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 2 3

namespace std
{

  void
  __throw_bad_exception(void);


  void
  __throw_bad_alloc(void);


  void
  __throw_bad_cast(void);

  void
  __throw_bad_typeid(void);


  void
  __throw_logic_error(const char* __s);

  void
  __throw_domain_error(const char* __s);

  void
  __throw_invalid_argument(const char* __s);

  void
  __throw_length_error(const char* __s);

  void
  __throw_out_of_range(const char* __s);

  void
  __throw_runtime_error(const char* __s);

  void
  __throw_range_error(const char* __s);

  void
  __throw_overflow_error(const char* __s);

  void
  __throw_underflow_error(const char* __s);


  void
  __throw_ios_failure(const char* __s);
}
# 48 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/iosfwd" 2 3

namespace std
{
  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
            typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  class ios_base;


  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;

  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;
}
# 71 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_pair.h" 1 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_pair.h" 3
namespace std
{


template <class _T1, class _T2>
struct pair {
  typedef _T1 first_type;
  typedef _T2 second_type;

  _T1 first;
  _T2 second;




  pair() : first(), second() {}




  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}


  template <class _U1, class _U2>
  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}
};


template <class _T1, class _T2>
inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{
  return __x.first == __y.first && __x.second == __y.second;
}


template <class _T1, class _T2>
inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{
  return __x.first < __y.first ||
         (!(__y.first < __x.first) && __x.second < __y.second);
}


template <class _T1, class _T2>
inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return !(__x == __y);
}


template <class _T1, class _T2>
inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return __y < __x;
}


template <class _T1, class _T2>
inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return !(__y < __x);
}


template <class _T1, class _T2>
inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return !(__x < __y);
}
# 140 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_pair.h" 3
template <class _T1, class _T2>


inline pair<_T1, _T2> make_pair(_T1 __x, _T2 __y)



{
  return pair<_T1, _T2>(__x, __y);
}

}
# 72 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/type_traits.h" 1 3
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/type_traits.h" 3
# 90 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/type_traits.h" 3
struct __true_type {};
struct __false_type {};

template <class _Tp>
struct __type_traits {
   typedef __true_type this_dummy_member_must_be_first;
# 113 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/type_traits.h" 3
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;
};




template<> struct __type_traits<bool> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<char> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<signed char> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<unsigned char> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<wchar_t> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<short> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<unsigned short> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<int> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<unsigned int> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<long> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<unsigned long> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<long long> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<unsigned long long> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<float> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<double> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template<> struct __type_traits<long double> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};

template <class _Tp>
struct __type_traits<_Tp*> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};





template <class _Tp> struct _Is_integer {
  typedef __false_type _Integral;
};

template<> struct _Is_integer<bool> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<char> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<signed char> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned char> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<wchar_t> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<short> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned short> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<int> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned int> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<long> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned long> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<long long> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned long long> {
  typedef __true_type _Integral;
};

template<typename _Tp> struct _Is_normal_iterator {
   typedef __false_type _Normal;
};


namespace __gnu_cxx
{
  template<typename _Iterator, typename _Container> class __normal_iterator;
}

template<typename _Iterator, typename _Container>
struct _Is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator, _Container> > {
   typedef __true_type _Normal;
};
# 73 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_types.h" 1 3
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_types.h" 3

namespace std
{
# 80 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag {};

  struct output_iterator_tag {};

  struct forward_iterator_tag : public input_iterator_tag {};

  struct bidirectional_iterator_tag : public forward_iterator_tag {};

  struct random_access_iterator_tag : public bidirectional_iterator_tag {};
# 100 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };







  template<typename _Iterator>
    struct iterator_traits {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Tp>
    struct iterator_traits<_Tp*> {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };

  template<typename _Tp>
    struct iterator_traits<const _Tp*> {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };







  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }

}
# 74 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_funcs.h" 1 3
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_funcs.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/concept_check.h" 1 3
# 39 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/concept_check.h" 3
# 69 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_funcs.h" 2 3




namespace std
{
template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  __distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)
  {

   

    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }

template<typename _RandomAccessIterator>
  inline typename iterator_traits<_RandomAccessIterator>::difference_type
  __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
             random_access_iterator_tag)
  {

   
    return __last - __first;
  }
# 111 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_funcs.h" 3
template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {

    return __distance(__first, __last, __iterator_category(__first));
  }

template<typename _InputIter, typename _Distance>
  inline void
  __advance(_InputIter& __i, _Distance __n, input_iterator_tag)
  {

   
    while (__n--) ++__i;
  }

template<typename _BidirectionalIterator, typename _Distance>
  inline void
  __advance(_BidirectionalIterator& __i, _Distance __n,
            bidirectional_iterator_tag)
  {

   

    if (__n > 0)
      while (__n--) ++__i;
    else
      while (__n++) --__i;
  }

template<typename _RandomAccessIterator, typename _Distance>
  inline void
  __advance(_RandomAccessIterator& __i, _Distance __n,
            random_access_iterator_tag)
  {

   
    __i += __n;
  }
# 164 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator_base_funcs.h" 3
template<typename _InputIterator, typename _Distance>
  inline void
  advance(_InputIterator& __i, _Distance __n)
  {

    __advance(__i, __n, __iterator_category(__i));
  }

}
# 75 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 1 3
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
namespace std
{
# 89 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
                      typename iterator_traits<_Iterator>::value_type,
                      typename iterator_traits<_Iterator>::difference_type,
                      typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

    public:
      typedef _Iterator iterator_type;
      typedef typename iterator_traits<_Iterator>::difference_type
                                                               difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

    public:



      reverse_iterator() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
        : current(__x.base()) { }




      iterator_type
      base() const { return current; }






      reference
      operator*() const
      {
        _Iterator __tmp = current;
        return *--__tmp;
      }






      pointer
      operator->() const { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
        --current;
        return *this;
      }






      reverse_iterator
      operator++(int)
      {
        reverse_iterator __tmp = *this;
        --current;
        return __tmp;
      }






      reverse_iterator&
      operator--()
      {
        ++current;
        return *this;
      }






      reverse_iterator operator--(int)
      {
        reverse_iterator __tmp = *this;
        ++current;
        return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
        current -= __n;
        return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
        current += __n;
        return *this;
      }






      reference
      operator[](difference_type __n) const { return *(*this + __n); }
    };
# 269 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
               const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
              const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
               const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
              const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
                const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
               const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
              const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
              const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }
# 327 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 353 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
        container->push_back(__value);
        return *this;
      }


      back_insert_iterator&
      operator*() { return *this; }


      back_insert_iterator&
      operator++() { return *this; }


      back_insert_iterator
      operator++(int) { return *this; }
    };
# 384 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 397 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 422 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
        container->push_front(__value);
        return *this;
      }


      front_insert_iterator&
      operator*() { return *this; }


      front_insert_iterator&
      operator++() { return *this; }


      front_insert_iterator
      operator++(int) { return *this; }
    };
# 453 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 470 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 512 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::const_reference __value)
      {
        iter = container->insert(iter, __value);
        ++iter;
        return *this;
      }


      insert_iterator&
      operator*() { return *this; }


      insert_iterator&
      operator++() { return *this; }


      insert_iterator&
      operator++(int) { return *this; }
    };
# 544 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
                                         typename _Container::iterator(__i));
    }
}

namespace __gnu_cxx
{







  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
      : public iterator<typename iterator_traits<_Iterator>::iterator_category,
                        typename iterator_traits<_Iterator>::value_type,
                        typename iterator_traits<_Iterator>::difference_type,
                        typename iterator_traits<_Iterator>::pointer,
                        typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator _M_current;

    public:
      typedef typename iterator_traits<_Iterator>::difference_type
                                                               difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
      inline __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const { return *_M_current; }

      pointer
      operator->() const { return _M_current; }

      __normal_iterator&
      operator++() { ++_M_current; return *this; }

      __normal_iterator
      operator++(int) { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() { --_M_current; return *this; }

      __normal_iterator
      operator--(int) { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const { return _M_current; }
    };
# 645 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool
  operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
             const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline bool
  operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
             const __normal_iterator<_Iterator, _Container>& __rhs)
  { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool
  operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
             const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline bool
  operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
             const __normal_iterator<_Iterator, _Container>& __rhs)
  { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool
  operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
            const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline bool
  operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
             const __normal_iterator<_Iterator, _Container>& __rhs)
  { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool
  operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
            const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline bool
  operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
            const __normal_iterator<_Iterator, _Container>& __rhs)
  { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool
  operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
             const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline bool
  operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
             const __normal_iterator<_Iterator, _Container>& __rhs)
  { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool
  operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
             const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline bool
  operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
             const __normal_iterator<_Iterator, _Container>& __rhs)
  { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>
  inline typename __normal_iterator<_IteratorL, _Container>::difference_type
  operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
             const __normal_iterator<_IteratorR, _Container>& __rhs)
  { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
  inline __normal_iterator<_Iterator, _Container>
  operator+(typename __normal_iterator<_Iterator, _Container>::difference_type __n,
            const __normal_iterator<_Iterator, _Container>& __i)
  { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
}
# 76 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 2 3


namespace std
{
# 91 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _ForwardIter1, typename _ForwardIter2>
    inline void
    iter_swap(_ForwardIter1 __a, _ForwardIter2 __b)
    {
      typedef typename iterator_traits<_ForwardIter1>::value_type _ValueType1;
      typedef typename iterator_traits<_ForwardIter2>::value_type _ValueType2;


     
     
     
     

      _ValueType1 __tmp = *__a;
      *__a = *__b;
      *__b = __tmp;
    }
# 118 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {

     

      _Tp __tmp = __a;
      __a = __b;
      __b = __tmp;
    }
# 146 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a) return __b; return __a;
    }
# 166 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b) return __b; return __a;
    }
# 186 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a)) return __b; return __a;
    }
# 204 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b)) return __b; return __a;
    }
# 221 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy(_InputIter __first, _InputIter __last,
           _OutputIter __result,
           input_iterator_tag)
    {
      for ( ; __first != __last; ++__result, ++__first)
        *__result = *__first;
      return __result;
    }

  template<typename _RandomAccessIter, typename _OutputIter>
    inline _OutputIter
    __copy(_RandomAccessIter __first, _RandomAccessIter __last,
           _OutputIter __result,
           random_access_iterator_tag)
    {
      typedef typename iterator_traits<_RandomAccessIter>::difference_type
          _Distance;
      for (_Distance __n = __last - __first; __n > 0; --__n) {
        *__result = *__first;
        ++__first;
        ++__result;
      }
      return __result;
    }

  template<typename _Tp>
    inline _Tp*
    __copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result)
    {
      memmove(__result, __first, sizeof(_Tp) * (__last - __first));
      return __result + (__last - __first);
    }

  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy_aux2(_InputIter __first, _InputIter __last,
                _OutputIter __result, __false_type)
    { return __copy(__first, __last, __result, __iterator_category(__first)); }

  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy_aux2(_InputIter __first, _InputIter __last,
                _OutputIter __result, __true_type)
    { return __copy(__first, __last, __result, __iterator_category(__first)); }

  template<typename _Tp>
    inline _Tp*
    __copy_aux2(_Tp* __first, _Tp* __last,
                _Tp* __result, __true_type)
    { return __copy_trivial(__first, __last, __result); }

  template<typename _Tp>
    inline _Tp*
    __copy_aux2(const _Tp* __first, const _Tp* __last,
                _Tp* __result, __true_type)
    { return __copy_trivial(__first, __last, __result); }

  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy_ni2(_InputIter __first, _InputIter __last,
               _OutputIter __result, __true_type)
    {
      typedef typename iterator_traits<_InputIter>::value_type
          _ValueType;
      typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator
          _Trivial;
      return _OutputIter(__copy_aux2(__first, __last,
                                     __result.base(),
                                     _Trivial()));
    }

  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy_ni2(_InputIter __first, _InputIter __last,
               _OutputIter __result, __false_type)
    {
      typedef typename iterator_traits<_InputIter>::value_type
          _ValueType;
      typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator
          _Trivial;
      return __copy_aux2(__first, __last,
                         __result,
                         _Trivial());
    }

  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy_ni1(_InputIter __first, _InputIter __last,
               _OutputIter __result, __true_type)
    {
      typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;
      return __copy_ni2(__first.base(), __last.base(), __result, __Normal());
    }

  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    __copy_ni1(_InputIter __first, _InputIter __last,
               _OutputIter __result, __false_type)
    {
      typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;
      return __copy_ni2(__first, __last, __result, __Normal());
    }
# 339 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    copy(_InputIter __first, _InputIter __last, _OutputIter __result)
    {

     
     


       typedef typename _Is_normal_iterator<_InputIter>::_Normal __Normal;
       return __copy_ni1(__first, __last, __result, __Normal());
    }




  template<typename _BidirectionalIter1, typename _BidirectionalIter2>
    inline _BidirectionalIter2
    __copy_backward(_BidirectionalIter1 __first, _BidirectionalIter1 __last,
                    _BidirectionalIter2 __result,
                    bidirectional_iterator_tag)
    {
      while (__first != __last)
        *--__result = *--__last;
      return __result;
    }

  template<typename _RandomAccessIter, typename _BidirectionalIter>
    inline _BidirectionalIter
    __copy_backward(_RandomAccessIter __first, _RandomAccessIter __last,
                    _BidirectionalIter __result,
                    random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIter>::difference_type __n;
      for (__n = __last - __first; __n > 0; --__n)
        *--__result = *--__last;
      return __result;
    }







  template<typename _BidirectionalIter1, typename _BidirectionalIter2,
           typename _BoolType>
    struct __copy_backward_dispatch
    {
      static _BidirectionalIter2
      copy(_BidirectionalIter1 __first, _BidirectionalIter1 __last,
           _BidirectionalIter2 __result)
      {
        return __copy_backward(__first, __last,
                               __result,
                               __iterator_category(__first));
      }
    };

  template<typename _Tp>
    struct __copy_backward_dispatch<_Tp*, _Tp*, __true_type>
    {
      static _Tp*
      copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
      {
        const ptrdiff_t _Num = __last - __first;
        memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
        return __result - _Num;
      }
    };

  template<typename _Tp>
    struct __copy_backward_dispatch<const _Tp*, _Tp*, __true_type>
    {
      static _Tp*
      copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
      {
        return __copy_backward_dispatch<_Tp*, _Tp*, __true_type>
          ::copy(__first, __last, __result);
      }
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename __type_traits<typename iterator_traits<_BI2>::value_type>
                            ::has_trivial_assignment_operator _Trivial;
      return __copy_backward_dispatch<_BI1, _BI2, _Trivial>
                  ::copy(__first, __last, __result);
    }

  template <typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,
                                           _BI2 __result, __true_type)
    { return _BI2(__copy_backward_aux(__first, __last, __result.base())); }

  template <typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,
                                           _BI2 __result, __false_type)
    { return __copy_backward_aux(__first, __last, __result); }

  template <typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,
                                          _BI2 __result, __true_type)
    {
      typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;
      return __copy_backward_output_normal_iterator(__first.base(), __last.base(),
                                                    __result, __Normal());
    }

  template <typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,
                                          _BI2 __result, __false_type)
    {
      typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;
      return __copy_backward_output_normal_iterator(__first, __last, __result,
                                                    __Normal());
    }
# 477 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     



      typedef typename _Is_normal_iterator<_BI1>::_Normal __Normal;
      return __copy_backward_input_normal_iterator(__first, __last, __result,
                                                   __Normal());
    }
# 509 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _ForwardIter, typename _Tp>
    void
    fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
    {

     

      for ( ; __first != __last; ++__first)
        *__first = __value;
    }
# 531 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _OutputIter, typename _Size, typename _Tp>
    _OutputIter
    fill_n(_OutputIter __first, _Size __n, const _Tp& __value)
    {

     

      for ( ; __n > 0; --__n, ++__first)
        *__first = __value;
      return __first;
    }



  inline void
  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
  {
    unsigned char __tmp = __c;
    memset(__first, __tmp, __last - __first);
  }

  inline void
  fill(signed char* __first, signed char* __last, const signed char& __c)
  {
    signed char __tmp = __c;
    memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
  }

  inline void
  fill(char* __first, char* __last, const char& __c)
  {
    char __tmp = __c;
    memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
  }

  template<typename _Size>
    inline unsigned char*
    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)
    {
      fill(__first, __first + __n, __c);
      return __first + __n;
    }

  template<typename _Size>
    inline signed char*
    fill_n(char* __first, _Size __n, const signed char& __c)
    {
      fill(__first, __first + __n, __c);
      return __first + __n;
    }

  template<typename _Size>
    inline char*
    fill_n(char* __first, _Size __n, const char& __c)
    {
      fill(__first, __first + __n, __c);
      return __first + __n;
    }
# 606 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter1, typename _InputIter2>
    pair<_InputIter1, _InputIter2>
    mismatch(_InputIter1 __first1, _InputIter1 __last1,
             _InputIter2 __first2)
    {

     
     
     

     


      while (__first1 != __last1 && *__first1 == *__first2) {
        ++__first1;
        ++__first2;
      }
      return pair<_InputIter1, _InputIter2>(__first1, __first2);
    }
# 640 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>
    pair<_InputIter1, _InputIter2>
    mismatch(_InputIter1 __first1, _InputIter1 __last1,
             _InputIter2 __first2,
             _BinaryPredicate __binary_pred)
    {

     
     

      while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) {
        ++__first1;
        ++__first2;
      }
      return pair<_InputIter1, _InputIter2>(__first1, __first2);
    }
# 668 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter1, typename _InputIter2>
    inline bool
    equal(_InputIter1 __first1, _InputIter1 __last1,
          _InputIter2 __first2)
    {

     
     
     



      for ( ; __first1 != __last1; ++__first1, ++__first2)
        if (!(*__first1 == *__first2))
          return false;
      return true;
    }
# 699 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>
    inline bool
    equal(_InputIter1 __first1, _InputIter1 __last1,
          _InputIter2 __first2,
          _BinaryPredicate __binary_pred)
    {

     
     

      for ( ; __first1 != __last1; ++__first1, ++__first2)
        if (!__binary_pred(*__first1, *__first2))
          return false;
      return true;
    }
# 732 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter1, typename _InputIter2>
    bool
    lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                            _InputIter2 __first2, _InputIter2 __last2)
    {

     
     
     

     


      for ( ; __first1 != __last1 && __first2 != __last2
            ; ++__first1, ++__first2) {
        if (*__first1 < *__first2)
          return true;
        if (*__first2 < *__first1)
          return false;
      }
      return __first1 == __last1 && __first2 != __last2;
    }
# 767 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algobase.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _Compare>
    bool
    lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                            _InputIter2 __first2, _InputIter2 __last2,
                            _Compare __comp)
    {

     
     

      for ( ; __first1 != __last1 && __first2 != __last2
            ; ++__first1, ++__first2) {
        if (__comp(*__first1, *__first2))
          return true;
        if (__comp(*__first2, *__first1))
          return false;
      }
      return __first1 == __last1 && __first2 != __last2;
    }

  inline bool
  lexicographical_compare(const unsigned char* __first1, const unsigned char* __last1,
                          const unsigned char* __first2, const unsigned char* __last2)
  {
    const size_t __len1 = __last1 - __first1;
    const size_t __len2 = __last2 - __first2;
    const int __result = memcmp(__first1, __first2, min(__len1, __len2));
    return __result != 0 ? __result < 0 : __len1 < __len2;
  }

  inline bool
  lexicographical_compare(const char* __first1, const char* __last1,
                          const char* __first2, const char* __last2)
  {

    return lexicographical_compare((const signed char*) __first1,
                                   (const signed char*) __last1,
                                   (const signed char*) __first2,
                                   (const signed char*) __last2);






  }

}
# 55 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 1 3
# 84 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cassert" 1 3
# 47 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/cassert" 3
# 85 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 1 3
# 34 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception_defines.h" 1 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 2 3

namespace std
{

  void
  __throw_bad_exception(void);


  void
  __throw_bad_alloc(void);


  void
  __throw_bad_cast(void);

  void
  __throw_bad_typeid(void);


  void
  __throw_logic_error(const char* __s);

  void
  __throw_domain_error(const char* __s);

  void
  __throw_invalid_argument(const char* __s);

  void
  __throw_length_error(const char* __s);

  void
  __throw_out_of_range(const char* __s);

  void
  __throw_runtime_error(const char* __s);

  void
  __throw_range_error(const char* __s);

  void
  __throw_overflow_error(const char* __s);

  void
  __throw_underflow_error(const char* __s);


  void
  __throw_ios_failure(const char* __s);
}
# 86 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_threads.h" 1 3
# 54 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_threads.h" 3
namespace std
{




  struct _Refcount_Base
  {

    typedef size_t _RC_t;


    volatile _RC_t _M_ref_count;


    __gthread_mutex_t _M_ref_count_lock;

    _Refcount_Base(_RC_t __n) : _M_ref_count(__n)
    {




      __gthread_mutex_init_function (&_M_ref_count_lock);



    }

    void
    _M_incr()
    {
      __gthread_mutex_lock(&_M_ref_count_lock);
      ++_M_ref_count;
      __gthread_mutex_unlock(&_M_ref_count_lock);
    }

    _RC_t
    _M_decr()
    {
      __gthread_mutex_lock(&_M_ref_count_lock);
      volatile _RC_t __tmp = --_M_ref_count;
      __gthread_mutex_unlock(&_M_ref_count_lock);
      return __tmp;
    }
  };
# 144 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_threads.h" 3
  extern __gthread_mutex_t _GLIBCPP_mutex;
  extern __gthread_mutex_t *_GLIBCPP_mutex_address;
  extern __gthread_once_t _GLIBCPP_once;
  extern void _GLIBCPP_mutex_init (void);
  extern void _GLIBCPP_mutex_address_init (void);


  struct _STL_mutex_lock
  {


    volatile int _M_init_flag;
    __gthread_once_t _M_once;

    __gthread_mutex_t _M_lock;

    void
    _M_initialize()
    {



      if (_M_init_flag) return;
      if (__gthread_once (&_GLIBCPP_once, _GLIBCPP_mutex_init) != 0
          && __gthread_active_p ())
        abort ();
      __gthread_mutex_lock (&_GLIBCPP_mutex);
      if (!_M_init_flag)
        {



          _GLIBCPP_mutex_address = &_M_lock;
          if (__gthread_once (&_M_once, _GLIBCPP_mutex_address_init) != 0
            && __gthread_active_p ())
            abort ();
          _M_init_flag = 1;
        }
      __gthread_mutex_unlock (&_GLIBCPP_mutex);

    }

    void
    _M_acquire_lock()
    {

      if (!_M_init_flag) _M_initialize();

      __gthread_mutex_lock(&_M_lock);
    }

    void
    _M_release_lock()
    {

      if (!_M_init_flag) _M_initialize();

      __gthread_mutex_unlock(&_M_lock);
    }
  };
# 220 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_threads.h" 3
  struct _STL_auto_lock
  {
    _STL_mutex_lock& _M_lock;

    _STL_auto_lock(_STL_mutex_lock& __lock) : _M_lock(__lock)
    { _M_lock._M_acquire_lock(); }

    ~_STL_auto_lock() { _M_lock._M_release_lock(); }

  private:
    void operator=(const _STL_auto_lock&);
    _STL_auto_lock(const _STL_auto_lock&);
  };

}
# 87 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 2 3

namespace std
{
# 98 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
  class __new_alloc
  {
  public:
    static void*
    allocate(size_t __n)
    { return ::operator new(__n); }

    static void
    deallocate(void* __p, size_t)
    { ::operator delete(__p); }
  };
# 121 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
  template <int __inst>
    class __malloc_alloc_template
    {
    private:
      static void* _S_oom_malloc(size_t);
      static void* _S_oom_realloc(void*, size_t);
      static void (* __malloc_alloc_oom_handler)();

    public:
      static void*
      allocate(size_t __n)
      {
        void* __result = malloc(__n);
        if (0 == __result) __result = _S_oom_malloc(__n);
        return __result;
      }

      static void
      deallocate(void* __p, size_t )
      { free(__p); }

      static void*
      reallocate(void* __p, size_t , size_t __new_sz)
      {
        void* __result = realloc(__p, __new_sz);
        if (0 == __result) __result = _S_oom_realloc(__p, __new_sz);
        return __result;
      }

      static void (* __set_malloc_handler(void (*__f)()))()
      {
        void (* __old)() = __malloc_alloc_oom_handler;
        __malloc_alloc_oom_handler = __f;
        return(__old);
      }
    };


  template <int __inst>
    void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;

  template <int __inst>
    void*
    __malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)
    {
      void (* __my_malloc_handler)();
      void* __result;

      for (;;)
        {
          __my_malloc_handler = __malloc_alloc_oom_handler;
          if (0 == __my_malloc_handler)
            std::__throw_bad_alloc();
          (*__my_malloc_handler)();
          __result = malloc(__n);
          if (__result)
            return(__result);
        }
    }

  template <int __inst>
    void*
    __malloc_alloc_template<__inst>::_S_oom_realloc(void* __p, size_t __n)
    {
      void (* __my_malloc_handler)();
      void* __result;

      for (;;)
        {
          __my_malloc_handler = __malloc_alloc_oom_handler;
          if (0 == __my_malloc_handler)
            std::__throw_bad_alloc();
          (*__my_malloc_handler)();
          __result = realloc(__p, __n);
          if (__result)
            return(__result);
        }
    }






  typedef __new_alloc __mem_interface;
# 219 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
  template<class _Tp, class _Alloc>
  class __simple_alloc
  {
  public:
    static _Tp* allocate(size_t __n)
    { return 0 == __n ? 0 : (_Tp*) _Alloc::allocate(__n * sizeof (_Tp)); }

    static _Tp* allocate()
    { return (_Tp*) _Alloc::allocate(sizeof (_Tp)); }

    static void deallocate(_Tp* __p, size_t __n)
    { if (0 != __n) _Alloc::deallocate(__p, __n * sizeof (_Tp)); }

    static void deallocate(_Tp* __p)
    { _Alloc::deallocate(__p, sizeof (_Tp)); }
  };
# 251 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
  template <class _Alloc>
  class __debug_alloc
  {
  private:
    enum {_S_extra = 8};


  public:

    static void* allocate(size_t __n)
    {
      char* __result = (char*)_Alloc::allocate(__n + (int) _S_extra);
      *(size_t*)__result = __n;
      return __result + (int) _S_extra;
    }

    static void deallocate(void* __p, size_t __n)
    {
      char* __real_p = (char*)__p - (int) _S_extra;
      ((*(size_t*)__real_p == __n) ? (void)0 : _assert("*(size_t*)__real_p == __n", "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h", 270));
      _Alloc::deallocate(__real_p, __n + (int) _S_extra);
    }

    static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz)
    {
      char* __real_p = (char*)__p - (int) _S_extra;
      ((*(size_t*)__real_p == __old_sz) ? (void)0 : _assert("*(size_t*)__real_p == __old_sz", "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h", 277));
      char* __result = (char*)
        _Alloc::reallocate(__real_p, __old_sz + (int) _S_extra,
                                     __new_sz + (int) _S_extra);
      *(size_t*)__result = __new_sz;
      return __result + (int) _S_extra;
    }
  };
# 324 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
template<bool __threads, int __inst>
  class __default_alloc_template
  {
  private:
    enum {_ALIGN = 8};
    enum {_MAX_BYTES = 128};
    enum {_NFREELISTS = _MAX_BYTES / _ALIGN};

    union _Obj
    {
      union _Obj* _M_free_list_link;
      char _M_client_data[1];
    };

    static _Obj* volatile _S_free_list[_NFREELISTS];


    static char* _S_start_free;
    static char* _S_end_free;
    static size_t _S_heap_size;

    static _STL_mutex_lock _S_node_allocator_lock;

    static size_t
    _S_round_up(size_t __bytes)
    { return (((__bytes) + (size_t) _ALIGN-1) & ~((size_t) _ALIGN - 1)); }

    static size_t
    _S_freelist_index(size_t __bytes)
    { return (((__bytes) + (size_t)_ALIGN-1)/(size_t)_ALIGN - 1); }



    static void*
    _S_refill(size_t __n);



    static char*
    _S_chunk_alloc(size_t __size, int& __nobjs);



    class _Lock
    {
    public:
      _Lock() { if (__threads) _S_node_allocator_lock._M_acquire_lock(); }
      ~_Lock() { if (__threads) _S_node_allocator_lock._M_release_lock(); }
    } __attribute__ ((__unused__));
    friend class _Lock;

  public:

    static void*
    allocate(size_t __n)
    {
      void* __ret = 0;

      if (__n > (size_t) _MAX_BYTES)
        __ret = __mem_interface::allocate(__n);
      else
        {
          _Obj* volatile* __my_free_list = _S_free_list
            + _S_freelist_index(__n);



          _Lock __lock_instance;
          _Obj* __restrict__ __result = *__my_free_list;
          if (__result == 0)
            __ret = _S_refill(_S_round_up(__n));
          else
            {
              *__my_free_list = __result -> _M_free_list_link;
              __ret = __result;
            }
        }
      return __ret;
    };


    static void
    deallocate(void* __p, size_t __n)
    {
      if (__n > (size_t) _MAX_BYTES)
        __mem_interface::deallocate(__p, __n);
      else
        {
          _Obj* volatile* __my_free_list
            = _S_free_list + _S_freelist_index(__n);
          _Obj* __q = (_Obj*)__p;



          _Lock __lock_instance;
          __q -> _M_free_list_link = *__my_free_list;
          *__my_free_list = __q;
        }
    }

    static void*
    reallocate(void* __p, size_t __old_sz, size_t __new_sz);
  };


  template<bool __threads, int __inst>
    inline bool
    operator==(const __default_alloc_template<__threads, __inst>&,
               const __default_alloc_template<__threads, __inst>&)
    { return true; }

  template<bool __threads, int __inst>
    inline bool
    operator!=(const __default_alloc_template<__threads, __inst>&,
               const __default_alloc_template<__threads, __inst>&)
    { return false; }





  template<bool __threads, int __inst>
    char*
    __default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size,
                                                                int& __nobjs)
    {
      char* __result;
      size_t __total_bytes = __size * __nobjs;
      size_t __bytes_left = _S_end_free - _S_start_free;

      if (__bytes_left >= __total_bytes)
      {
        __result = _S_start_free;
        _S_start_free += __total_bytes;
        return(__result);
      }
      else if (__bytes_left >= __size)
        {
          __nobjs = (int)(__bytes_left/__size);
          __total_bytes = __size * __nobjs;
          __result = _S_start_free;
          _S_start_free += __total_bytes;
          return(__result);
        }
      else
        {
          size_t __bytes_to_get =
            2 * __total_bytes + _S_round_up(_S_heap_size >> 4);

          if (__bytes_left > 0)
            {
              _Obj* volatile* __my_free_list =
                _S_free_list + _S_freelist_index(__bytes_left);

              ((_Obj*)_S_start_free) -> _M_free_list_link = *__my_free_list;
              *__my_free_list = (_Obj*)_S_start_free;
            }
          _S_start_free = (char*) __mem_interface::allocate(__bytes_to_get);
          if (0 == _S_start_free)
            {
              size_t __i;
              _Obj* volatile* __my_free_list;
              _Obj* __p;



              __i = __size;
              for (; __i <= (size_t) _MAX_BYTES; __i += (size_t) _ALIGN)
                {
                  __my_free_list = _S_free_list + _S_freelist_index(__i);
                  __p = *__my_free_list;
                  if (0 != __p)
                    {
                      *__my_free_list = __p -> _M_free_list_link;
                      _S_start_free = (char*)__p;
                      _S_end_free = _S_start_free + __i;
                      return(_S_chunk_alloc(__size, __nobjs));


                    }
                }
              _S_end_free = 0;
              _S_start_free = (char*)__mem_interface::allocate(__bytes_to_get);


            }
          _S_heap_size += __bytes_to_get;
          _S_end_free = _S_start_free + __bytes_to_get;
          return(_S_chunk_alloc(__size, __nobjs));
        }
    }





  template<bool __threads, int __inst>
    void*
    __default_alloc_template<__threads, __inst>::_S_refill(size_t __n)
    {
      int __nobjs = 20;
      char* __chunk = _S_chunk_alloc(__n, __nobjs);
      _Obj* volatile* __my_free_list;
      _Obj* __result;
      _Obj* __current_obj;
      _Obj* __next_obj;
      int __i;

      if (1 == __nobjs) return(__chunk);
      __my_free_list = _S_free_list + _S_freelist_index(__n);


      __result = (_Obj*)__chunk;
      *__my_free_list = __next_obj = (_Obj*)(__chunk + __n);
      for (__i = 1; ; __i++) {
        __current_obj = __next_obj;
        __next_obj = (_Obj*)((char*)__next_obj + __n);
        if (__nobjs - 1 == __i) {
          __current_obj -> _M_free_list_link = 0;
          break;
        } else {
          __current_obj -> _M_free_list_link = __next_obj;
        }
      }
      return(__result);
    }


  template<bool threads, int inst>
    void*
    __default_alloc_template<threads, inst>::reallocate(void* __p,
                                                        size_t __old_sz,
                                                        size_t __new_sz)
    {
      void* __result;
      size_t __copy_sz;

      if (__old_sz > (size_t) _MAX_BYTES && __new_sz > (size_t) _MAX_BYTES) {
        return(realloc(__p, __new_sz));
      }
      if (_S_round_up(__old_sz) == _S_round_up(__new_sz)) return(__p);
      __result = allocate(__new_sz);
      __copy_sz = __new_sz > __old_sz? __old_sz : __new_sz;
      memcpy(__result, __p, __copy_sz);
      deallocate(__p, __old_sz);
      return(__result);
    }

  template<bool __threads, int __inst>
  _STL_mutex_lock
  __default_alloc_template<__threads, __inst>::_S_node_allocator_lock
  = { 0, {0, -1}, 0 };

  template<bool __threads, int __inst>
  char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;

  template<bool __threads, int __inst>
  char* __default_alloc_template<__threads, __inst>::_S_end_free = 0;

  template<bool __threads, int __inst>
  size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;

  template<bool __threads, int __inst>
  typename __default_alloc_template<__threads, __inst>::_Obj* volatile
  __default_alloc_template<__threads, __inst>::_S_free_list[_NFREELISTS];

  typedef __default_alloc_template<true, 0> __alloc;
  typedef __default_alloc_template<false, 0> __single_client_alloc;
# 613 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
template <class _Tp>
class allocator
{
  typedef __alloc _Alloc;
public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef _Tp* pointer;
  typedef const _Tp* const_pointer;
  typedef _Tp& reference;
  typedef const _Tp& const_reference;
  typedef _Tp value_type;

  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };

  allocator() throw() {}
  allocator(const allocator&) throw() {}
  template <class _Tp1> allocator(const allocator<_Tp1>&) throw() {}
  ~allocator() throw() {}

  pointer address(reference __x) const { return &__x; }
  const_pointer address(const_reference __x) const { return &__x; }



  _Tp* allocate(size_type __n, const void* = 0) {
    return __n != 0 ? static_cast<_Tp*>(_Alloc::allocate(__n * sizeof(_Tp)))
                    : 0;
  }


  void deallocate(pointer __p, size_type __n)
    { _Alloc::deallocate(__p, __n * sizeof(_Tp)); }

  size_type max_size() const throw()
    { return size_t(-1) / sizeof(_Tp); }

  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }
  void destroy(pointer __p) { __p->~_Tp(); }
};

template<>
class allocator<void> {
public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef void* pointer;
  typedef const void* const_pointer;
  typedef void value_type;

  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };
};


template <class _T1, class _T2>
inline bool operator==(const allocator<_T1>&, const allocator<_T2>&)
{
  return true;
}

template <class _T1, class _T2>
inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)
{
  return false;
}
# 695 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
template <class _Tp, class _Alloc>
struct __allocator
{
  _Alloc __underlying_alloc;

  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef _Tp* pointer;
  typedef const _Tp* const_pointer;
  typedef _Tp& reference;
  typedef const _Tp& const_reference;
  typedef _Tp value_type;

  template <class _Tp1> struct rebind {
    typedef __allocator<_Tp1, _Alloc> other;
  };

  __allocator() throw() {}
  __allocator(const __allocator& __a) throw()
    : __underlying_alloc(__a.__underlying_alloc) {}
  template <class _Tp1>
  __allocator(const __allocator<_Tp1, _Alloc>& __a) throw()
    : __underlying_alloc(__a.__underlying_alloc) {}
  ~__allocator() throw() {}

  pointer address(reference __x) const { return &__x; }
  const_pointer address(const_reference __x) const { return &__x; }


  _Tp* allocate(size_type __n, const void* = 0) {
    return __n != 0
        ? static_cast<_Tp*>(__underlying_alloc.allocate(__n * sizeof(_Tp)))
        : 0;
  }


  void deallocate(pointer __p, size_type __n)
    { __underlying_alloc.deallocate(__p, __n * sizeof(_Tp)); }

  size_type max_size() const throw()
    { return size_t(-1) / sizeof(_Tp); }

  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }
  void destroy(pointer __p) { __p->~_Tp(); }
};

template <class _Alloc>
class __allocator<void, _Alloc> {
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef void* pointer;
  typedef const void* const_pointer;
  typedef void value_type;

  template <class _Tp1> struct rebind {
    typedef __allocator<_Tp1, _Alloc> other;
  };
};

template <class _Tp, class _Alloc>
inline bool operator==(const __allocator<_Tp, _Alloc>& __a1,
                       const __allocator<_Tp, _Alloc>& __a2)
{
  return __a1.__underlying_alloc == __a2.__underlying_alloc;
}

template <class _Tp, class _Alloc>
inline bool operator!=(const __allocator<_Tp, _Alloc>& __a1,
                       const __allocator<_Tp, _Alloc>& __a2)
{
  return __a1.__underlying_alloc != __a2.__underlying_alloc;
}







template <int inst>
inline bool operator==(const __malloc_alloc_template<inst>&,
                       const __malloc_alloc_template<inst>&)
{
  return true;
}

template <int __inst>
inline bool operator!=(const __malloc_alloc_template<__inst>&,
                       const __malloc_alloc_template<__inst>&)
{
  return false;
}

template <class _Alloc>
inline bool operator==(const __debug_alloc<_Alloc>&,
                       const __debug_alloc<_Alloc>&) {
  return true;
}

template <class _Alloc>
inline bool operator!=(const __debug_alloc<_Alloc>&,
                       const __debug_alloc<_Alloc>&) {
  return false;
}
# 840 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_alloc.h" 3
template <class _Tp, class _Allocator>
struct _Alloc_traits
{
  static const bool _S_instanceless = false;
  typedef typename _Allocator::template rebind<_Tp>::other allocator_type;
};

template <class _Tp, class _Allocator>
const bool _Alloc_traits<_Tp, _Allocator>::_S_instanceless;


template <class _Tp, class _Tp1>
struct _Alloc_traits<_Tp, allocator<_Tp1> >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __alloc> _Alloc_type;
  typedef allocator<_Tp> allocator_type;
};




template <class _Tp, int __inst>
struct _Alloc_traits<_Tp, __malloc_alloc_template<__inst> >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __malloc_alloc_template<__inst> > _Alloc_type;
  typedef __allocator<_Tp, __malloc_alloc_template<__inst> > allocator_type;
};


template <class _Tp, bool __threads, int __inst>
struct _Alloc_traits<_Tp, __default_alloc_template<__threads, __inst> >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __default_alloc_template<__threads, __inst> >
          _Alloc_type;
  typedef __allocator<_Tp, __default_alloc_template<__threads, __inst> >
          allocator_type;
};


template <class _Tp, class _Alloc>
struct _Alloc_traits<_Tp, __debug_alloc<_Alloc> >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __debug_alloc<_Alloc> > _Alloc_type;
  typedef __allocator<_Tp, __debug_alloc<_Alloc> > allocator_type;
};




template <class _Tp, class _Tp1, int __inst>
struct _Alloc_traits<_Tp,
                     __allocator<_Tp1, __malloc_alloc_template<__inst> > >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __malloc_alloc_template<__inst> > _Alloc_type;
  typedef __allocator<_Tp, __malloc_alloc_template<__inst> > allocator_type;
};


template <class _Tp, class _Tp1, bool __thr, int __inst>
struct _Alloc_traits<_Tp,
                      __allocator<_Tp1,
                                  __default_alloc_template<__thr, __inst> > >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __default_alloc_template<__thr,__inst> >
          _Alloc_type;
  typedef __allocator<_Tp, __default_alloc_template<__thr,__inst> >
          allocator_type;
};


template <class _Tp, class _Tp1, class _Alloc>
struct _Alloc_traits<_Tp, __allocator<_Tp1, __debug_alloc<_Alloc> > >
{
  static const bool _S_instanceless = true;
  typedef __simple_alloc<_Tp, __debug_alloc<_Alloc> > _Alloc_type;
  typedef __allocator<_Tp, __debug_alloc<_Alloc> > allocator_type;
};





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;



  extern template class __default_alloc_template<true, 0>;

}
# 56 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_construct.h" 1 3
# 67 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_construct.h" 3
namespace std
{






  template <class _T1, class _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    { new (static_cast<void*>(__p)) _T1(__value); }







  template <class _T1>
    inline void
    _Construct(_T1* __p)
    { new (static_cast<void*>(__p)) _T1(); }
# 98 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_construct.h" 3
  template <class _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)
    { for ( ; __first != __last; ++__first) _Destroy(&*__first); }
# 112 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_construct.h" 3
  template <class _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
    { }






  template <class _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }
# 134 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_construct.h" 3
  template <class _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename __type_traits<_Value_type>::has_trivial_destructor
                       _Has_trivial_destructor;

      __destroy_aux(__first, __last, _Has_trivial_destructor());
    }
}
# 57 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 2 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_uninitialized.h" 1 3
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_uninitialized.h" 3
namespace std
{



  template<typename _InputIter, typename _ForwardIter>
    inline _ForwardIter
    __uninitialized_copy_aux(_InputIter __first, _InputIter __last,
                             _ForwardIter __result,
                             __true_type)
    { return copy(__first, __last, __result); }

  template<typename _InputIter, typename _ForwardIter>
    _ForwardIter
    __uninitialized_copy_aux(_InputIter __first, _InputIter __last,
                             _ForwardIter __result,
                             __false_type)
    {
      _ForwardIter __cur = __result;
      try {
        for ( ; __first != __last; ++__first, ++__cur)
          _Construct(&*__cur, *__first);
        return __cur;
      }
      catch(...)
        {
          _Destroy(__result, __cur);
          throw;
        }
    }
# 106 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_uninitialized.h" 3
  template<typename _InputIter, typename _ForwardIter>
    inline _ForwardIter
    uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;
      return __uninitialized_copy_aux(__first, __last, __result, _Is_POD());
    }

  inline char*
  uninitialized_copy(const char* __first, const char* __last, char* __result)
  {
    memmove(__result, __first, __last - __first);
    return __result + (__last - __first);
  }

  inline wchar_t*
  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,
                     wchar_t* __result)
  {
    memmove(__result, __first, sizeof(wchar_t) * (__last - __first));
    return __result + (__last - __first);
  }



  template<typename _ForwardIter, typename _Tp>
    inline void
    __uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last,
                             const _Tp& __x, __true_type)
    { fill(__first, __last, __x); }

  template<typename _ForwardIter, typename _Tp>
    void
    __uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last,
                             const _Tp& __x, __false_type)
    {
      _ForwardIter __cur = __first;
      try {
        for ( ; __cur != __last; ++__cur)
          _Construct(&*__cur, __x);
      }
      catch(...)
        {
          _Destroy(__first, __cur);
          throw;
        }
    }
# 164 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_uninitialized.h" 3
  template<typename _ForwardIter, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;
      __uninitialized_fill_aux(__first, __last, __x, _Is_POD());
    }



  template<typename _ForwardIter, typename _Size, typename _Tp>
    inline _ForwardIter
    __uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,
                               const _Tp& __x, __true_type)
    {
      return fill_n(__first, __n, __x);
    }

  template<typename _ForwardIter, typename _Size, typename _Tp>
    _ForwardIter
    __uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,
                               const _Tp& __x, __false_type)
    {
      _ForwardIter __cur = __first;
      try {
        for ( ; __n > 0; --__n, ++__cur)
          _Construct(&*__cur, __x);
        return __cur;
      }
      catch(...)
        {
          _Destroy(__first, __cur);
          throw;
        }
    }
# 210 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_uninitialized.h" 3
  template<typename _ForwardIter, typename _Size, typename _Tp>
    inline _ForwardIter
    uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;
      return __uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    }
# 227 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_uninitialized.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _ForwardIter>
    inline _ForwardIter
    __uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,
                              _InputIter2 __first2, _InputIter2 __last2,
                              _ForwardIter __result)
    {
      _ForwardIter __mid = uninitialized_copy(__first1, __last1, __result);
      try {
        return uninitialized_copy(__first2, __last2, __mid);
      }
      catch(...)
        {
          _Destroy(__result, __mid);
          throw;
        }
    }




  template<typename _ForwardIter, typename _Tp, typename _InputIter>
    inline _ForwardIter
    __uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid,
                              const _Tp& __x,
                              _InputIter __first, _InputIter __last)
    {
      uninitialized_fill(__result, __mid, __x);
      try {
        return uninitialized_copy(__first, __last, __mid);
      }
      catch(...)
        {
          _Destroy(__result, __mid);
          throw;
        }
    }




  template<typename _InputIter, typename _ForwardIter, typename _Tp>
    inline void
    __uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,
                              _ForwardIter __first2, _ForwardIter __last2,
                              const _Tp& __x)
    {
      _ForwardIter __mid2 = uninitialized_copy(__first1, __last1, __first2);
      try {
        uninitialized_fill(__mid2, __last2, __x);
      }
      catch(...)
        {
          _Destroy(__first2, __mid2);
          throw;
        }
    }

}
# 59 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_raw_storage_iter.h" 1 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_raw_storage_iter.h" 3
namespace std
{




  template <class _ForwardIterator, class _Tp>
  class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _ForwardIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
        _Construct(&*_M_iter, __element);
        return *this;
      }

      raw_storage_iterator<_ForwardIterator, _Tp>&
      operator++()
      {
        ++_M_iter;
        return *this;
      }

      raw_storage_iterator<_ForwardIterator, _Tp>
      operator++(int)
      {
        raw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;
        ++_M_iter;
        return __tmp;
      }
    };
}
# 60 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 2 3




namespace std
{
# 74 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
template <typename _Tp>
pair<_Tp*, ptrdiff_t>
__get_temporary_buffer(ptrdiff_t __len, _Tp*)
{
  if (__len > ptrdiff_t(2147483647 / sizeof(_Tp)))
    __len = 2147483647 / sizeof(_Tp);

  while (__len > 0) {
    _Tp* __tmp = (_Tp*) std::malloc((std::size_t)__len * sizeof(_Tp));
    if (__tmp != 0)
      return pair<_Tp*, ptrdiff_t>(__tmp, __len);
    __len /= 2;
  }

  return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);
}
# 106 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
template<typename _Tp>
  inline pair<_Tp*,ptrdiff_t>
  get_temporary_buffer(ptrdiff_t __len)
  {
    return __get_temporary_buffer(__len, (_Tp*) 0);
  }
# 120 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
template<typename _Tp>
  void
  return_temporary_buffer(_Tp* __p)
  {
    std::free(__p);
  }
# 135 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
template<typename _Tp1>
  struct auto_ptr_ref
{
   _Tp1* _M_ptr;

   explicit
   auto_ptr_ref(_Tp1* __p)
   : _M_ptr(__p) {}
};
# 175 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
template<typename _Tp>
  class auto_ptr
{
private:
  _Tp* _M_ptr;

public:

  typedef _Tp element_type;







  explicit
  auto_ptr(element_type* __p = 0) throw()
  : _M_ptr(__p) { }
# 202 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  auto_ptr(auto_ptr& __a) throw()
  : _M_ptr(__a.release()) { }
# 214 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  template<typename _Tp1>
    auto_ptr(auto_ptr<_Tp1>& __a) throw()
    : _M_ptr(__a.release()) { }
# 226 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  auto_ptr&
  operator=(auto_ptr& __a) throw()
    {
      reset(__a.release());
      return *this;
    }
# 243 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  template <typename _Tp1>
    auto_ptr&
    operator=(auto_ptr<_Tp1>& __a) throw()
    {
      reset(__a.release());
      return *this;
    }
# 263 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  ~auto_ptr() { delete _M_ptr; }
# 273 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  element_type&
  operator*() const throw() { return *_M_ptr; }







  element_type*
  operator->() const throw() { return _M_ptr; }
# 295 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  element_type*
  get() const throw() { return _M_ptr; }
# 309 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  element_type*
  release() throw()
    {
      element_type* __tmp = _M_ptr;
      _M_ptr = 0;
      return __tmp;
    }
# 324 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  void
  reset(element_type* __p = 0) throw()
    {
      if (__p != _M_ptr)
        {
          delete _M_ptr;
          _M_ptr = __p;
        }
    }
# 345 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/memory" 3
  auto_ptr(auto_ptr_ref<element_type> __ref) throw()
    : _M_ptr(__ref._M_ptr) {}

  auto_ptr&
  operator=(auto_ptr_ref<element_type> __ref) throw()
    {
      if (__ref._M_ptr != this->get())
        {
          delete _M_ptr;
          _M_ptr = __ref._M_ptr;
        }
      return *this;
    }

  template<typename _Tp1>
    operator auto_ptr_ref<_Tp1>() throw()
      { return auto_ptr_ref<_Tp1>(this->release()); }

  template<typename _Tp1>
    operator auto_ptr<_Tp1>() throw()
      { return auto_ptr<_Tp1>(this->release()); }

};

}
# 49 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3



# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 1 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
namespace std
{
# 101 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Arg, class _Result>
struct unary_function {
  typedef _Arg argument_type;
  typedef _Result result_type;
};




template <class _Arg1, class _Arg2, class _Result>
struct binary_function {
  typedef _Arg1 first_argument_type;
  typedef _Arg2 second_argument_type;
  typedef _Result result_type;
};
# 127 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Tp>
struct plus : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }
};


template <class _Tp>
struct minus : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }
};


template <class _Tp>
struct multiplies : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }
};


template <class _Tp>
struct divides : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x / __y; }
};


template <class _Tp>
struct modulus : public binary_function<_Tp,_Tp,_Tp>
{
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }
};


template <class _Tp>
struct negate : public unary_function<_Tp,_Tp>
{
  _Tp operator()(const _Tp& __x) const { return -__x; }
};
# 173 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Tp>
struct equal_to : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }
};


template <class _Tp>
struct not_equal_to : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }
};


template <class _Tp>
struct greater : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }
};


template <class _Tp>
struct less : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }
};


template <class _Tp>
struct greater_equal : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }
};


template <class _Tp>
struct less_equal : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }
};
# 222 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Tp>
struct logical_and : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }
};


template <class _Tp>
struct logical_or : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }
};


template <class _Tp>
struct logical_not : public unary_function<_Tp,bool>
{
  bool operator()(const _Tp& __x) const { return !__x; }
};
# 271 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Predicate>
class unary_negate
  : public unary_function<typename _Predicate::argument_type, bool> {
protected:
  _Predicate _M_pred;
public:
  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}
  bool operator()(const typename _Predicate::argument_type& __x) const {
    return !_M_pred(__x);
  }
};


template <class _Predicate>
inline unary_negate<_Predicate>
not1(const _Predicate& __pred)
{
  return unary_negate<_Predicate>(__pred);
}


template <class _Predicate>
class binary_negate
  : public binary_function<typename _Predicate::first_argument_type,
                           typename _Predicate::second_argument_type,
                           bool> {
protected:
  _Predicate _M_pred;
public:
  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}
  bool operator()(const typename _Predicate::first_argument_type& __x,
                  const typename _Predicate::second_argument_type& __y) const
  {
    return !_M_pred(__x, __y);
  }
};


template <class _Predicate>
inline binary_negate<_Predicate>
not2(const _Predicate& __pred)
{
  return binary_negate<_Predicate>(__pred);
}
# 349 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Operation>
class binder1st
  : public unary_function<typename _Operation::second_argument_type,
                          typename _Operation::result_type> {
protected:
  _Operation op;
  typename _Operation::first_argument_type value;
public:
  binder1st(const _Operation& __x,
            const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) {}
  typename _Operation::result_type
  operator()(const typename _Operation::second_argument_type& __x) const {
    return op(value, __x);
  }


  typename _Operation::result_type
  operator()(typename _Operation::second_argument_type& __x) const {
    return op(value, __x);
  }

};


template <class _Operation, class _Tp>
inline binder1st<_Operation>
bind1st(const _Operation& __fn, const _Tp& __x)
{
  typedef typename _Operation::first_argument_type _Arg1_type;
  return binder1st<_Operation>(__fn, _Arg1_type(__x));
}


template <class _Operation>
class binder2nd
  : public unary_function<typename _Operation::first_argument_type,
                          typename _Operation::result_type> {
protected:
  _Operation op;
  typename _Operation::second_argument_type value;
public:
  binder2nd(const _Operation& __x,
            const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) {}
  typename _Operation::result_type
  operator()(const typename _Operation::first_argument_type& __x) const {
    return op(__x, value);
  }


  typename _Operation::result_type
  operator()(typename _Operation::first_argument_type& __x) const {
    return op(__x, value);
  }

};


template <class _Operation, class _Tp>
inline binder2nd<_Operation>
bind2nd(const _Operation& __fn, const _Tp& __x)
{
  typedef typename _Operation::second_argument_type _Arg2_type;
  return binder2nd<_Operation>(__fn, _Arg2_type(__x));
}
# 438 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Arg, class _Result>
class pointer_to_unary_function : public unary_function<_Arg, _Result> {
protected:
  _Result (*_M_ptr)(_Arg);
public:
  pointer_to_unary_function() {}
  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}
  _Result operator()(_Arg __x) const { return _M_ptr(__x); }
};


template <class _Arg, class _Result>
inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))
{
  return pointer_to_unary_function<_Arg, _Result>(__x);
}


template <class _Arg1, class _Arg2, class _Result>
class pointer_to_binary_function :
  public binary_function<_Arg1,_Arg2,_Result> {
protected:
    _Result (*_M_ptr)(_Arg1, _Arg2);
public:
    pointer_to_binary_function() {}
    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) {}
    _Result operator()(_Arg1 __x, _Arg2 __y) const {
      return _M_ptr(__x, __y);
    }
};


template <class _Arg1, class _Arg2, class _Result>
inline pointer_to_binary_function<_Arg1,_Arg2,_Result>
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {
  return pointer_to_binary_function<_Arg1,_Arg2,_Result>(__x);
}


template <class _Tp>
struct _Identity : public unary_function<_Tp,_Tp> {
  _Tp& operator()(_Tp& __x) const { return __x; }
  const _Tp& operator()(const _Tp& __x) const { return __x; }
};

template <class _Pair>
struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {
  typename _Pair::first_type& operator()(_Pair& __x) const {
    return __x.first;
  }
  const typename _Pair::first_type& operator()(const _Pair& __x) const {
    return __x.first;
  }
};

template <class _Pair>
struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>
{
  typename _Pair::second_type& operator()(_Pair& __x) const {
    return __x.second;
  }
  const typename _Pair::second_type& operator()(const _Pair& __x) const {
    return __x.second;
  }
};
# 528 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_function.h" 3
template <class _Ret, class _Tp>
class mem_fun_t : public unary_function<_Tp*,_Ret> {
public:
  explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}
  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }
private:
  _Ret (_Tp::*_M_f)();
};


template <class _Ret, class _Tp>
class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {
public:
  explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}
  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }
private:
  _Ret (_Tp::*_M_f)() const;
};


template <class _Ret, class _Tp>
class mem_fun_ref_t : public unary_function<_Tp,_Ret> {
public:
  explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}
  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }
private:
  _Ret (_Tp::*_M_f)();
};


template <class _Ret, class _Tp>
class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {
public:
  explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}
  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }
private:
  _Ret (_Tp::*_M_f)() const;
};


template <class _Ret, class _Tp, class _Arg>
class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {
public:
  explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}
  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }
private:
  _Ret (_Tp::*_M_f)(_Arg);
};


template <class _Ret, class _Tp, class _Arg>
class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {
public:
  explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}
  _Ret operator()(const _Tp* __p, _Arg __x) const
    { return (__p->*_M_f)(__x); }
private:
  _Ret (_Tp::*_M_f)(_Arg) const;
};


template <class _Ret, class _Tp, class _Arg>
class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {
public:
  explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}
  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }
private:
  _Ret (_Tp::*_M_f)(_Arg);
};


template <class _Ret, class _Tp, class _Arg>
class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {
public:
  explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}
  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }
private:
  _Ret (_Tp::*_M_f)(_Arg) const;
};


template <class _Tp>
class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {
public:
  explicit mem_fun_t(void (_Tp::*__pf)()) : _M_f(__pf) {}
  void operator()(_Tp* __p) const { (__p->*_M_f)(); }
private:
  void (_Tp::*_M_f)();
};


template <class _Tp>
class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {
public:
  explicit const_mem_fun_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}
  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }
private:
  void (_Tp::*_M_f)() const;
};


template <class _Tp>
class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {
public:
  explicit mem_fun_ref_t(void (_Tp::*__pf)()) : _M_f(__pf) {}
  void operator()(_Tp& __r) const { (__r.*_M_f)(); }
private:
  void (_Tp::*_M_f)();
};


template <class _Tp>
class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {
public:
  explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}
  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }
private:
  void (_Tp::*_M_f)() const;
};


template <class _Tp, class _Arg>
class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {
public:
  explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}
  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }
private:
  void (_Tp::*_M_f)(_Arg);
};


template <class _Tp, class _Arg>
class const_mem_fun1_t<void, _Tp, _Arg>
  : public binary_function<const _Tp*,_Arg,void> {
public:
  explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}
  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }
private:
  void (_Tp::*_M_f)(_Arg) const;
};


template <class _Tp, class _Arg>
class mem_fun1_ref_t<void, _Tp, _Arg>
  : public binary_function<_Tp,_Arg,void> {
public:
  explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}
  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }
private:
  void (_Tp::*_M_f)(_Arg);
};


template <class _Tp, class _Arg>
class const_mem_fun1_ref_t<void, _Tp, _Arg>
  : public binary_function<_Tp,_Arg,void> {
public:
  explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}
  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }
private:
  void (_Tp::*_M_f)(_Arg) const;
};





template <class _Ret, class _Tp>
inline mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)())
  { return mem_fun_t<_Ret,_Tp>(__f); }

template <class _Ret, class _Tp>
inline const_mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)() const)
  { return const_mem_fun_t<_Ret,_Tp>(__f); }

template <class _Ret, class _Tp>
inline mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)())
  { return mem_fun_ref_t<_Ret,_Tp>(__f); }

template <class _Ret, class _Tp>
inline const_mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)() const)
  { return const_mem_fun_ref_t<_Ret,_Tp>(__f); }

template <class _Ret, class _Tp, class _Arg>
inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg))
  { return mem_fun1_t<_Ret,_Tp,_Arg>(__f); }

template <class _Ret, class _Tp, class _Arg>
inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg) const)
  { return const_mem_fun1_t<_Ret,_Tp,_Arg>(__f); }

template <class _Ret, class _Tp, class _Arg>
inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
  { return mem_fun1_ref_t<_Ret,_Tp,_Arg>(__f); }

template <class _Ret, class _Tp, class _Arg>
inline const_mem_fun1_ref_t<_Ret,_Tp,_Arg>
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
  { return const_mem_fun1_ref_t<_Ret,_Tp,_Arg>(__f); }



}
# 53 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.h" 1 3
# 44 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.h" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/atomicity.h" 1 3
# 33 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/mingw32/bits/atomicity.h" 3
typedef int _Atomic_word;

static inline _Atomic_word
__attribute__ ((__unused__))
__exchange_and_add (volatile _Atomic_word *__mem, int __val)
{
  register _Atomic_word __result;
  __asm__ __volatile__ ("lock; xaddl %0,%2"
                        : "=r" (__result)
                        : "0" (__val), "m" (*__mem)
                        : "memory");
  return __result;
}

static inline void
__attribute__ ((__unused__))
__atomic_add (volatile _Atomic_word* __mem, int __val)
{
  __asm__ __volatile__ ("lock; addl %0,%1"
                        : : "ir" (__val), "m" (*__mem) : "memory");
}
# 46 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.h" 2 3

namespace std
{
# 88 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {

    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _Alloc::size_type size_type;
      typedef typename _Alloc::difference_type difference_type;
      typedef typename _Alloc::reference reference;
      typedef typename _Alloc::const_reference const_reference;
      typedef typename _Alloc::pointer pointer;
      typedef typename _Alloc::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef reverse_iterator<const_iterator> const_reverse_iterator;
      typedef reverse_iterator<iterator> reverse_iterator;

    private:
# 123 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.h" 3
      struct _Rep
      {

        typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 141 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.h" 3
        static const size_type _S_max_size;
        static const _CharT _S_terminal;

        size_type _M_length;
        size_type _M_capacity;
        _Atomic_word _M_references;

        bool
        _M_is_leaked() const
        { return _M_references < 0; }

        bool
        _M_is_shared() const
        { return _M_references > 0; }

        void
        _M_set_leaked()
        { _M_references = -1; }

        void
        _M_set_sharable()
        { _M_references = 0; }

        _CharT*
        _M_refdata() throw()
        { return reinterpret_cast<_CharT*>(this + 1); }

        _CharT&
        operator[](size_t __s) throw()
        { return _M_refdata() [__s]; }

        _CharT*
        _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
        {
          return (!_M_is_leaked() && __alloc1 == __alloc2)
                  ? _M_refcopy() : _M_clone(__alloc1);
        }


        static _Rep*
        _S_create(size_t, const _Alloc&);

        void
        _M_dispose(const _Alloc& __a)
        {
          if (__exchange_and_add(&_M_references, -1) <= 0)
            _M_destroy(__a);
        }

        void
        _M_destroy(const _Alloc&) throw();

        _CharT*
        _M_refcopy() throw()
        {
          __atomic_add(&_M_references, 1);
          return _M_refdata();
        }

        _CharT*
        _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
        _Alloc_hider(_CharT* __dat, const _Alloc& __a)
        : _Alloc(__a), _M_p(__dat) { }

        _CharT* _M_p;
      };

    public:



      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;



      static size_type _S_empty_rep_storage[(sizeof(_Rep) + sizeof(_CharT) + sizeof(size_type) - 1)/sizeof(size_type)];

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const { return iterator(_M_data()); }

      iterator
      _M_iend() const { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
        if (!_M_rep()->_M_is_leaked())
          _M_leak_hard();
      }

      iterator
      _M_check(size_type __pos) const
      {
        if (__pos > this->size())
          __throw_out_of_range("basic_string::_M_check");
        return _M_ibegin() + __pos;
      }


      iterator
      _M_fold(size_type __pos, size_type __off) const
      {
        bool __testoff = __off < this->size() - __pos;
        size_type __newoff = __testoff ? __off : this->size() - __pos;
        return (_M_ibegin() + __pos + __newoff);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
          for (; __k1 != __k2; ++__k1, ++__p)
            traits_type::assign(*__p, *__k1);
        }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { traits_type::copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { traits_type::copy(__p, __k1, __k2 - __k1); }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return *reinterpret_cast<_Rep*>(&_S_empty_rep_storage); }

    public:




      inline
      basic_string();

      explicit
      basic_string(const _Alloc& __a);


      basic_string(const basic_string& __str);
      basic_string(const basic_string& __str, size_type __pos,
                   size_type __n = npos);
      basic_string(const basic_string& __str, size_type __pos,
                   size_type __n, const _Alloc& __a);

      basic_string(const _CharT* __s, size_type __n,
                   const _Alloc& __a = _Alloc());
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());

      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
                     const _Alloc& __a = _Alloc());

      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }

      basic_string&
      operator=(const basic_string& __str) { return this->assign(__str); }

      basic_string&
      operator=(const _CharT* __s) { return this->assign(__s); }

      basic_string&
      operator=(_CharT __c) { return this->assign(1, __c); }


      iterator
      begin()
      {
        _M_leak();
        return iterator(_M_data());
      }

      const_iterator
      begin() const
      { return const_iterator(_M_data()); }

      iterator
      end()
      {
         _M_leak();
         return iterator(_M_data() + this->size());
      }

      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }

      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }

    public:

      size_type
      size() const { return _M_rep()->_M_length; }

      size_type
      length() const { return _M_rep()->_M_length; }

      size_type
      max_size() const { return _Rep::_S_max_size; }

      void
      resize(size_type __n, _CharT __c);

      void
      resize(size_type __n) { this->resize(__n, _CharT()); }

      size_type
      capacity() const { return _M_rep()->_M_capacity; }

      void
      reserve(size_type __res_arg = 0);

      void
      clear() { _M_mutate(0, this->size(), 0); }

      bool
      empty() const { return this->size() == 0; }


      const_reference
      operator[] (size_type __pos) const
      { return _M_data()[__pos]; }

      reference
      operator[](size_type __pos)
      {
        _M_leak();
        return _M_data()[__pos];
      }

      const_reference
      at(size_type __n) const
      {
        if (__n >= this->size())
          __throw_out_of_range("basic_string::at");
        return _M_data()[__n];
      }

      reference
      at(size_type __n)
      {
        if (__n >= size())
          __throw_out_of_range("basic_string::at");
        _M_leak();
        return _M_data()[__n];
      }


      basic_string&
      operator+=(const basic_string& __str) { return this->append(__str); }

      basic_string&
      operator+=(const _CharT* __s) { return this->append(__s); }

      basic_string&
      operator+=(_CharT __c) { return this->append(size_type(1), __c); }

      basic_string&
      append(const basic_string& __str);

      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);

      basic_string&
      append(const _CharT* __s, size_type __n);

      basic_string&
      append(const _CharT* __s)
      { return this->append(__s, traits_type::length(__s)); }

      basic_string&
      append(size_type __n, _CharT __c);

      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }

      void
      push_back(_CharT __c)
      { this->replace(_M_iend(), _M_iend(), 1, __c); }

      basic_string&
      assign(const basic_string& __str);

      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      {
        const size_type __strsize = __str.size();
        if (__pos > __strsize)
          __throw_out_of_range("basic_string::assign");
        const bool __testn = __n < __strsize - __pos;
        const size_type __newsize = __testn ? __n : __strsize - __pos;
        return this->assign(__str._M_data() + __pos, __newsize);
      }

      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
        if (__n > this->max_size())
          __throw_length_error("basic_string::assign");
        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())
            || less<const _CharT*>()(_M_data() + this->size(), __s))
          return _M_replace_safe(_M_ibegin(), _M_iend(), __s, __s + __n);
        else
          {

            const size_type __pos = __s - _M_data();
            if (__pos >= __n)
              traits_type::copy(_M_data(), __s, __n);
            else if (__pos)
              traits_type::move(_M_data(), __s, __n);
            _M_rep()->_M_length = __n;
            _M_data()[__n] = _Rep::_S_terminal;
            return *this;
          }
      }

      basic_string&
      assign(const _CharT* __s)
      { return this->assign(__s, traits_type::length(__s)); }

      basic_string&
      assign(size_type __n, _CharT __c)
      { return this->replace(_M_ibegin(), _M_iend(), __n, __c); }

      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }

      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }

      template<class _InputIterator>
        void insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }

      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, 0, __str.size()); }

      basic_string&
      insert(size_type __pos1, const basic_string& __str,
             size_type __pos2, size_type __n)
      {
        const size_type __strsize = __str.size();
        if (__pos2 > __strsize)
          __throw_out_of_range("basic_string::insert");
        const bool __testn = __n < __strsize - __pos2;
        const size_type __newsize = __testn ? __n : __strsize - __pos2;
        return this->insert(__pos1, __str._M_data() + __pos2, __newsize);
      }

      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      {
        const size_type __size = this->size();
        if (__pos > __size)
          __throw_out_of_range("basic_string::insert");
        if (__size > this->max_size() - __n)
          __throw_length_error("basic_string::insert");
        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())
            || less<const _CharT*>()(_M_data() + __size, __s))
          return _M_replace_safe(_M_ibegin() + __pos, _M_ibegin() + __pos,
                                 __s, __s + __n);
        else
          {



            const size_type __off = __s - _M_data();
            _M_mutate(__pos, 0, __n);
            __s = _M_data() + __off;
            _CharT* __p = _M_data() + __pos;
            if (__s + __n <= __p)
              traits_type::copy(__p, __s, __n);
            else if (__s >= __p)
              traits_type::copy(__p, __s + __n, __n);
            else
              {
                traits_type::copy(__p, __s, __p - __s);
                traits_type::copy(__p + (__p - __s), __p + __n, __n - (__p - __s));
              }
            return *this;
          }
       }

      basic_string&
      insert(size_type __pos, const _CharT* __s)
      { return this->insert(__pos, __s, traits_type::length(__s)); }

      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      {
        this->insert(_M_check(__pos), __n, __c);
        return *this;
      }

      iterator
      insert(iterator __p, _CharT __c = _CharT())
      {
        size_type __pos = __p - _M_ibegin();
        this->insert(_M_check(__pos), size_type(1), __c);
        _M_rep()->_M_set_leaked();
        return this->_M_ibegin() + __pos;
      }

      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
        return this->replace(_M_check(__pos), _M_fold(__pos, __n),
                             _M_data(), _M_data());
      }

      iterator
      erase(iterator __position)
      {
        size_type __i = __position - _M_ibegin();
        this->replace(__position, __position + 1, _M_data(), _M_data());
        _M_rep()->_M_set_leaked();
        return _M_ibegin() + __i;
      }

      iterator
      erase(iterator __first, iterator __last)
      {
        size_type __i = __first - _M_ibegin();
        this->replace(__first, __last, _M_data(), _M_data());
        _M_rep()->_M_set_leaked();
       return _M_ibegin() + __i;
      }

      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }

      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
              size_type __pos2, size_type __n2);

      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
              size_type __n2)
      {
        const size_type __size = this->size();
        if (__pos > __size)
          __throw_out_of_range("basic_string::replace");
        const bool __testn1 = __n1 < __size - __pos;
        const size_type __foldn1 = __testn1 ? __n1 : __size - __pos;
        if (__size - __foldn1 > this->max_size() - __n2)
          __throw_length_error("basic_string::replace");
        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())
            || less<const _CharT*>()(_M_data() + __size, __s))
          return _M_replace_safe(_M_ibegin() + __pos,
                                 _M_ibegin() + __pos + __foldn1, __s, __s + __n2);

        else return
               _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __foldn1,
                          __s, __s + __n2,
                          typename iterator_traits<const _CharT*>::iterator_category());
      }

      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      { return this->replace(__pos, __n1, __s, traits_type::length(__s)); }

      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return this->replace(_M_check(__pos), _M_fold(__pos, __n1), __n2, __c); }

      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }

      basic_string&
      replace(iterator __i1, iterator __i2,
                           const _CharT* __s, size_type __n)
      { return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n); }

      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      { return this->replace(__i1, __i2, __s, traits_type::length(__s)); }

      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c);

      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
                _InputIterator __k1, _InputIterator __k2)
        { return _M_replace(__i1, __i2, __k1, __k2,
             typename iterator_traits<_InputIterator>::iterator_category()); }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
                               __k1, __k2 - __k1); }

      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __k1, const _CharT* __k2)
        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
                               __k1, __k2 - __k1); }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
                               __k1.base(), __k2 - __k1);
        }

      basic_string&
      replace(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)
        { return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
                               __k1.base(), __k2 - __k1);
        }

    private:
      template<class _InputIterator>
        basic_string&
        _M_replace(iterator __i1, iterator __i2, _InputIterator __k1,
                   _InputIterator __k2, input_iterator_tag);

      template<class _ForwardIterator>
        basic_string&
        _M_replace_safe(iterator __i1, iterator __i2, _ForwardIterator __k1,
                   _ForwardIterator __k2);



      template<class _InIter>
        static _CharT*
        _S_construct_aux(_InIter __beg, _InIter __end, const _Alloc& __a,
                         __false_type)
        {
          typedef typename iterator_traits<_InIter>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
        }

      template<class _InIter>
        static _CharT*
        _S_construct_aux(_InIter __beg, _InIter __end, const _Alloc& __a,
                         __true_type)
        {
          return _S_construct(static_cast<size_type>(__beg),
                              static_cast<value_type>(__end), __a);
        }

      template<class _InIter>
        static _CharT*
        _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a)
        {
          typedef typename _Is_integer<_InIter>::_Integral _Integral;
          return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIter>
        static _CharT*
         _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a,
                      input_iterator_tag);



      template<class _FwdIter>
        static _CharT*
        _S_construct(_FwdIter __beg, _FwdIter __end, const _Alloc& __a,
                     forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:

      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;

      void
      swap(basic_string<_CharT, _Traits, _Alloc>& __s);


      const _CharT*
      c_str() const
      {

        size_type __n = this->size();
        traits_type::assign(_M_data()[__n], _Rep::_S_terminal);
        return _M_data();
      }

      const _CharT*
      data() const { return _M_data(); }

      allocator_type
      get_allocator() const { return _M_dataplus; }

      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;

      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }

      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      { return this->find(__s, __pos, traits_type::length(__s)); }

      size_type
      find(_CharT __c, size_type __pos = 0) const;

      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }

      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;

      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      { return this->rfind(__s, __pos, traits_type::length(__s)); }

      size_type
      rfind(_CharT __c, size_type __pos = npos) const;

      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }

      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;

      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      { return this->find_first_of(__s, __pos, traits_type::length(__s)); }

      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }

      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }

      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;

      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      { return this->find_last_of(__s, __pos, traits_type::length(__s)); }

      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }

      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }

      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
                        size_type __n) const;

      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      { return this->find_first_not_of(__s, __pos, traits_type::length(__s)); }

      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;

      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }

      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
                       size_type __n) const;
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      { return this->find_last_not_of(__s, __pos, traits_type::length(__s)); }

      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;

      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      {
        if (__pos > this->size())
          __throw_out_of_range("basic_string::substr");
        return basic_string(*this, __pos, __n);
      }

      int
      compare(const basic_string& __str) const
      {
        size_type __size = this->size();
        size_type __osize = __str.size();
        size_type __len = min(__size, __osize);

        int __r = traits_type::compare(_M_data(), __str.data(), __len);
        if (!__r)
          __r = __size - __osize;
        return __r;
      }

      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;

      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
              size_type __pos2, size_type __n2) const;

      int
      compare(const _CharT* __s) const;



      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;

      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
              size_type __n2) const;
  };


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>::
    basic_string()
    : _M_dataplus(_S_empty_rep()._M_refcopy(), _Alloc()) { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
              const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
              const basic_string<_CharT,_Traits,_Alloc>& __rhs);

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
             const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) != 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) != 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const _CharT* __rhs)
    { return __lhs.compare(__rhs) != 0; }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
              const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
              const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
              const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
              const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
              const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
              const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  { return __rhs.compare(__lhs) >= 0; }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
               const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
             const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
         basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
               basic_string<_CharT, _Traits, _Alloc>& __str);

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
               const basic_string<_CharT, _Traits, _Alloc>& __str);

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT,_Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
            basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT,_Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
            basic_string<_CharT, _Traits, _Alloc>& __str);
}
# 54 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3


# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/algorithm" 1 3
# 65 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/algorithm" 3




# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 1 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_heap.h" 1 3
# 63 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_heap.h" 3
namespace std
{



  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
                _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value) {
        *(__first + __holeIndex) = *(__first + __parent);
        __holeIndex = __parent;
        __parent = (__holeIndex - 1) / 2;
      }
      *(__first + __holeIndex) = __value;
    }

  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
          _DistanceType;


     

     

      __push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0),
                  _ValueType(*(__last - 1)));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
            typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
                _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(*(__first + __parent), __value)) {
        *(__first + __holeIndex) = *(__first + __parent);
        __holeIndex = __parent;
        __parent = (__holeIndex - 1) / 2;
      }
      *(__first + __holeIndex) = __value;
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
              _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
          _DistanceType;


     


      __push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0),
                  _ValueType(*(__last - 1)), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
                  _Distance __len, _Tp __value)
    {
      _Distance __topIndex = __holeIndex;
      _Distance __secondChild = 2 * __holeIndex + 2;
      while (__secondChild < __len) {
        if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
          __secondChild--;
        *(__first + __holeIndex) = *(__first + __secondChild);
        __holeIndex = __secondChild;
        __secondChild = 2 * (__secondChild + 1);
      }
      if (__secondChild == __len) {
        *(__first + __holeIndex) = *(__first + (__secondChild - 1));
        __holeIndex = __secondChild - 1;
      }
      __push_heap(__first, __holeIndex, __topIndex, __value);
    }

  template<typename _RandomAccessIterator, typename _Tp>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
               _RandomAccessIterator __result, _Tp __value)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type _Distance;
      *__result = *__first;
      __adjust_heap(__first, _Distance(0), _Distance(__last - __first), __value);
    }

  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;


     

     

      __pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)));
    }

  template<typename _RandomAccessIterator, typename _Distance,
           typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
                  _Distance __len, _Tp __value, _Compare __comp)
    {
      _Distance __topIndex = __holeIndex;
      _Distance __secondChild = 2 * __holeIndex + 2;
      while (__secondChild < __len) {
        if (__comp(*(__first + __secondChild), *(__first + (__secondChild - 1))))
          __secondChild--;
        *(__first + __holeIndex) = *(__first + __secondChild);
        __holeIndex = __secondChild;
        __secondChild = 2 * (__secondChild + 1);
      }
      if (__secondChild == __len) {
        *(__first + __holeIndex) = *(__first + (__secondChild - 1));
        __holeIndex = __secondChild - 1;
      }
      __push_heap(__first, __holeIndex, __topIndex, __value, __comp);
    }

  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
               _RandomAccessIterator __result, _Tp __value, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type _Distance;
      *__result = *__first;
      __adjust_heap(__first, _Distance(0), _Distance(__last - __first),
                    __value, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
             _RandomAccessIterator __last, _Compare __comp)
    {

     


      typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
      __pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)), __comp);
    }

  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
          _DistanceType;


     

     

      if (__last - __first < 2) return;
      _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2)/2;

      while (true) {
        __adjust_heap(__first, __parent, __len, _ValueType(*(__first + __parent)));
        if (__parent == 0) return;
        __parent--;
      }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
              _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
          _DistanceType;


     


      if (__last - __first < 2) return;
      _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2)/2;

      while (true) {
        __adjust_heap(__first, __parent, __len,
                      _ValueType(*(__first + __parent)), __comp);
        if (__parent == 0) return;
        __parent--;
      }
    }

  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     


      while (__last - __first > 1)
        pop_heap(__first, __last--);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
              _Compare __comp)
    {

     


      while (__last - __first > 1)
        pop_heap(__first, __last--, __comp);
    }

}
# 65 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_tempbuf.h" 1 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_tempbuf.h" 3
namespace std
{
# 74 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_tempbuf.h" 3
template <class _ForwardIterator, class _Tp>
  class _Temporary_buffer
{

 

  ptrdiff_t _M_original_len;
  ptrdiff_t _M_len;
  _Tp* _M_buffer;


  void _M_allocate_buffer() {
    _M_original_len = _M_len;
    _M_buffer = 0;

    if (_M_len > (ptrdiff_t)(2147483647 / sizeof(_Tp)))
      _M_len = 2147483647 / sizeof(_Tp);

    while (_M_len > 0) {
      _M_buffer = (_Tp*) malloc(_M_len * sizeof(_Tp));
      if (_M_buffer)
        break;
      _M_len /= 2;
    }
  }

  void _M_initialize_buffer(const _Tp&, __true_type) {}
  void _M_initialize_buffer(const _Tp& val, __false_type) {
    uninitialized_fill_n(_M_buffer, _M_len, val);
  }

public:

  ptrdiff_t size() const { return _M_len; }

  ptrdiff_t requested_size() const { return _M_original_len; }

  _Tp* begin() { return _M_buffer; }

  _Tp* end() { return _M_buffer + _M_len; }

  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {

    typedef typename __type_traits<_Tp>::has_trivial_default_constructor
            _Trivial;

    try {
      _M_len = distance(__first, __last);
      _M_allocate_buffer();
      if (_M_len > 0)
        _M_initialize_buffer(*__first, _Trivial());
    }
    catch(...)
      {
        free(_M_buffer);
        _M_buffer = 0;
        _M_len = 0;
        throw;
      }
  }

  ~_Temporary_buffer() {
    _Destroy(_M_buffer, _M_buffer + _M_len);
    free(_M_buffer);
  }

private:

  _Temporary_buffer(const _Temporary_buffer&) {}
  void operator=(const _Temporary_buffer&) {}
};

}
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 2 3



namespace std
{
# 84 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _Tp>
  inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)
    {

     
      if (__a < __b)
        if (__b < __c)
          return __b;
        else if (__a < __c)
          return __c;
        else
          return __a;
      else if (__a < __c)
        return __a;
      else if (__b < __c)
        return __c;
      else
        return __b;
    }
# 118 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
    {

     
      if (__comp(__a, __b))
        if (__comp(__b, __c))
          return __b;
        else if (__comp(__a, __c))
          return __c;
        else
          return __a;
      else if (__comp(__a, __c))
        return __a;
      else if (__comp(__b, __c))
        return __c;
      else
        return __b;
    }
# 150 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _Function>
    _Function
    for_each(_InputIter __first, _InputIter __last, _Function __f)
    {

     
      for ( ; __first != __last; ++__first)
        __f(*__first);
      return __f;
    }






  template<typename _InputIter, typename _Tp>
    inline _InputIter
    find(_InputIter __first, _InputIter __last,
         const _Tp& __val,
         input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
        ++__first;
      return __first;
    }






  template<typename _InputIter, typename _Predicate>
    inline _InputIter
    find_if(_InputIter __first, _InputIter __last,
            _Predicate __pred,
            input_iterator_tag)
    {
      while (__first != __last && !__pred(*__first))
        ++__first;
      return __first;
    }






  template<typename _RandomAccessIter, typename _Tp>
    _RandomAccessIter
    find(_RandomAccessIter __first, _RandomAccessIter __last,
         const _Tp& __val,
         random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIter>::difference_type __trip_count
        = (__last - __first) >> 2;

      for ( ; __trip_count > 0 ; --__trip_count) {
        if (*__first == __val) return __first;
        ++__first;

        if (*__first == __val) return __first;
        ++__first;

        if (*__first == __val) return __first;
        ++__first;

        if (*__first == __val) return __first;
        ++__first;
      }

      switch(__last - __first) {
      case 3:
        if (*__first == __val) return __first;
        ++__first;
      case 2:
        if (*__first == __val) return __first;
        ++__first;
      case 1:
        if (*__first == __val) return __first;
        ++__first;
      case 0:
      default:
        return __last;
      }
    }






  template<typename _RandomAccessIter, typename _Predicate>
    _RandomAccessIter
    find_if(_RandomAccessIter __first, _RandomAccessIter __last,
            _Predicate __pred,
            random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIter>::difference_type __trip_count
        = (__last - __first) >> 2;

      for ( ; __trip_count > 0 ; --__trip_count) {
        if (__pred(*__first)) return __first;
        ++__first;

        if (__pred(*__first)) return __first;
        ++__first;

        if (__pred(*__first)) return __first;
        ++__first;

        if (__pred(*__first)) return __first;
        ++__first;
      }

      switch(__last - __first) {
      case 3:
        if (__pred(*__first)) return __first;
        ++__first;
      case 2:
        if (__pred(*__first)) return __first;
        ++__first;
      case 1:
        if (__pred(*__first)) return __first;
        ++__first;
      case 0:
      default:
        return __last;
      }
    }
# 289 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _Tp>
    inline _InputIter
    find(_InputIter __first, _InputIter __last,
         const _Tp& __val)
    {

     
     

      return find(__first, __last, __val, __iterator_category(__first));
    }
# 309 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _Predicate>
    inline _InputIter
    find_if(_InputIter __first, _InputIter __last,
            _Predicate __pred)
    {

     
     

      return find_if(__first, __last, __pred, __iterator_category(__first));
    }
# 329 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter>
    _ForwardIter
    adjacent_find(_ForwardIter __first, _ForwardIter __last)
    {

     
     

      if (__first == __last)
        return __last;
      _ForwardIter __next = __first;
      while(++__next != __last) {
        if (*__first == *__next)
          return __first;
        __first = __next;
      }
      return __last;
    }
# 358 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _BinaryPredicate>
    _ForwardIter
    adjacent_find(_ForwardIter __first, _ForwardIter __last,
                  _BinaryPredicate __binary_pred)
    {

     
     


      if (__first == __last)
        return __last;
      _ForwardIter __next = __first;
      while(++__next != __last) {
        if (__binary_pred(*__first, *__next))
          return __first;
        __first = __next;
      }
      return __last;
    }
# 387 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _Tp>
    typename iterator_traits<_InputIter>::difference_type
    count(_InputIter __first, _InputIter __last, const _Tp& __value)
    {

     
     

     
      typename iterator_traits<_InputIter>::difference_type __n = 0;
      for ( ; __first != __last; ++__first)
        if (*__first == __value)
          ++__n;
      return __n;
    }
# 411 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _Predicate>
    typename iterator_traits<_InputIter>::difference_type
    count_if(_InputIter __first, _InputIter __last, _Predicate __pred)
    {

     
     

      typename iterator_traits<_InputIter>::difference_type __n = 0;
      for ( ; __first != __last; ++__first)
        if (__pred(*__first))
          ++__n;
      return __n;
    }
# 450 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter1, typename _ForwardIter2>
    _ForwardIter1
    search(_ForwardIter1 __first1, _ForwardIter1 __last1,
           _ForwardIter2 __first2, _ForwardIter2 __last2)
    {

     
     
     




      if (__first1 == __last1 || __first2 == __last2)
        return __first1;


      _ForwardIter2 __tmp(__first2);
      ++__tmp;
      if (__tmp == __last2)
        return find(__first1, __last1, *__first2);



      _ForwardIter2 __p1, __p;

      __p1 = __first2; ++__p1;

      _ForwardIter1 __current = __first1;

      while (__first1 != __last1) {
        __first1 = find(__first1, __last1, *__first2);
        if (__first1 == __last1)
          return __last1;

        __p = __p1;
        __current = __first1;
        if (++__current == __last1)
          return __last1;

        while (*__current == *__p) {
          if (++__p == __last2)
            return __first1;
          if (++__current == __last1)
            return __last1;
        }

        ++__first1;
      }
      return __first1;
    }
# 522 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter1, typename _ForwardIter2, typename _BinaryPred>
    _ForwardIter1
    search(_ForwardIter1 __first1, _ForwardIter1 __last1,
           _ForwardIter2 __first2, _ForwardIter2 __last2,
           _BinaryPred __predicate)
    {

     
     
     




      if (__first1 == __last1 || __first2 == __last2)
        return __first1;


      _ForwardIter2 __tmp(__first2);
      ++__tmp;
      if (__tmp == __last2) {
        while (__first1 != __last1 && !__predicate(*__first1, *__first2))
          ++__first1;
        return __first1;
      }



      _ForwardIter2 __p1, __p;

      __p1 = __first2; ++__p1;

      _ForwardIter1 __current = __first1;

      while (__first1 != __last1) {
        while (__first1 != __last1) {
          if (__predicate(*__first1, *__first2))
            break;
          ++__first1;
        }
        while (__first1 != __last1 && !__predicate(*__first1, *__first2))
          ++__first1;
        if (__first1 == __last1)
          return __last1;

        __p = __p1;
        __current = __first1;
        if (++__current == __last1) return __last1;

        while (__predicate(*__current, *__p)) {
          if (++__p == __last2)
            return __first1;
          if (++__current == __last1)
            return __last1;
        }

        ++__first1;
      }
      return __first1;
    }
# 596 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Integer, typename _Tp>
    _ForwardIter
    search_n(_ForwardIter __first, _ForwardIter __last,
             _Integer __count, const _Tp& __val)
    {

     
     

     

      if (__count <= 0)
        return __first;
      else {
        __first = find(__first, __last, __val);
        while (__first != __last) {
          _Integer __n = __count - 1;
          _ForwardIter __i = __first;
          ++__i;
          while (__i != __last && __n != 0 && *__i == __val) {
            ++__i;
            --__n;
          }
          if (__n == 0)
            return __first;
          else
            __first = find(__i, __last, __val);
        }
        return __last;
      }
    }
# 643 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Integer, typename _Tp,
           typename _BinaryPred>
    _ForwardIter
    search_n(_ForwardIter __first, _ForwardIter __last,
             _Integer __count, const _Tp& __val,
             _BinaryPred __binary_pred)
    {

     
     


      if (__count <= 0)
        return __first;
      else {
        while (__first != __last) {
          if (__binary_pred(*__first, __val))
            break;
          ++__first;
        }
        while (__first != __last) {
          _Integer __n = __count - 1;
          _ForwardIter __i = __first;
          ++__i;
          while (__i != __last && __n != 0 && __binary_pred(*__i, __val)) {
            ++__i;
            --__n;
          }
          if (__n == 0)
            return __first;
          else {
            while (__i != __last) {
              if (__binary_pred(*__i, __val))
                break;
              ++__i;
            }
            __first = __i;
          }
        }
        return __last;
      }
    }
# 697 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter1, typename _ForwardIter2>
    _ForwardIter2
    swap_ranges(_ForwardIter1 __first1, _ForwardIter1 __last1,
                _ForwardIter2 __first2)
    {

     
     
     


     



      for ( ; __first1 != __last1; ++__first1, ++__first2)
        iter_swap(__first1, __first2);
      return __first2;
    }
# 732 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _UnaryOperation>
    _OutputIter
    transform(_InputIter __first, _InputIter __last,
              _OutputIter __result, _UnaryOperation __unary_op)
    {

     
     



      for ( ; __first != __last; ++__first, ++__result)
        *__result = __unary_op(*__first);
      return __result;
    }
# 765 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _OutputIter,
           typename _BinaryOperation>
    _OutputIter
    transform(_InputIter1 __first1, _InputIter1 __last1,
              _InputIter2 __first2, _OutputIter __result,
              _BinaryOperation __binary_op)
    {

     
     
     



      for ( ; __first1 != __last1; ++__first1, ++__first2, ++__result)
        *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 796 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp>
    void
    replace(_ForwardIter __first, _ForwardIter __last,
            const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     


      for ( ; __first != __last; ++__first)
        if (*__first == __old_value)
          *__first = __new_value;
    }
# 825 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIter __first, _ForwardIter __last,
               _Predicate __pred, const _Tp& __new_value)
    {

     
     

     


      for ( ; __first != __last; ++__first)
        if (__pred(*__first))
          *__first = __new_value;
    }
# 856 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _Tp>
    _OutputIter
    replace_copy(_InputIter __first, _InputIter __last,
                 _OutputIter __result,
                 const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     


      for ( ; __first != __last; ++__first, ++__result)
        *__result = *__first == __old_value ? __new_value : *__first;
      return __result;
    }
# 888 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _Predicate,
           typename _Tp>
    _OutputIter
    replace_copy_if(_InputIter __first, _InputIter __last,
                    _OutputIter __result,
                    _Predicate __pred, const _Tp& __new_value)
    {

     
     

     


      for ( ; __first != __last; ++__first, ++__result)
        *__result = __pred(*__first) ? __new_value : *__first;
      return __result;
    }
# 918 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Generator>
    void
    generate(_ForwardIter __first, _ForwardIter __last, _Generator __gen)
    {

     
     


      for ( ; __first != __last; ++__first)
        *__first = __gen();
    }
# 942 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _OutputIter, typename _Size, typename _Generator>
    _OutputIter
    generate_n(_OutputIter __first, _Size __n, _Generator __gen)
    {

     



      for ( ; __n > 0; --__n, ++__first)
        *__first = __gen();
      return __first;
    }
# 969 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _Tp>
    _OutputIter
    remove_copy(_InputIter __first, _InputIter __last,
                _OutputIter __result, const _Tp& __value)
    {

     
     

     


      for ( ; __first != __last; ++__first)
        if (!(*__first == __value)) {
          *__result = *__first;
          ++__result;
        }
      return __result;
    }
# 1003 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _Predicate>
    _OutputIter
    remove_copy_if(_InputIter __first, _InputIter __last,
                   _OutputIter __result, _Predicate __pred)
    {

     
     

     


      for ( ; __first != __last; ++__first)
        if (!__pred(*__first)) {
          *__result = *__first;
          ++__result;
        }
      return __result;
    }
# 1039 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp>
    _ForwardIter
    remove(_ForwardIter __first, _ForwardIter __last,
           const _Tp& __value)
    {

     
     

     


      __first = find(__first, __last, __value);
      _ForwardIter __i = __first;
      return __first == __last ? __first
                               : remove_copy(++__i, __last, __first, __value);
    }
# 1073 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Predicate>
    _ForwardIter
    remove_if(_ForwardIter __first, _ForwardIter __last,
              _Predicate __pred)
    {

     
     


      __first = find_if(__first, __last, __pred);
      _ForwardIter __i = __first;
      return __first == __last ? __first
                               : remove_copy_if(++__i, __last, __first, __pred);
    }







  template<typename _InputIter, typename _OutputIter>
    _OutputIter
    __unique_copy(_InputIter __first, _InputIter __last,
                  _OutputIter __result,
                  output_iterator_tag)
    {

      typename iterator_traits<_InputIter>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
        if (!(__value == *__first)) {
          __value = *__first;
          *++__result = __value;
        }
      return ++__result;
    }







  template<typename _InputIter, typename _ForwardIter>
    _ForwardIter
    __unique_copy(_InputIter __first, _InputIter __last,
                  _ForwardIter __result,
                  forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
        if (!(*__result == *__first))
          *++__result = *__first;
      return ++__result;
    }
# 1145 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter>
    inline _OutputIter
    unique_copy(_InputIter __first, _InputIter __last,
                _OutputIter __result)
    {

     
     

     


      typedef typename iterator_traits<_OutputIter>::iterator_category _IterType;

      if (__first == __last) return __result;
      return __unique_copy(__first, __last, __result, _IterType());
    }
# 1170 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _BinaryPredicate>
    _OutputIter
    __unique_copy(_InputIter __first, _InputIter __last,
                  _OutputIter __result,
                  _BinaryPredicate __binary_pred,
                  output_iterator_tag)
    {

     



      typename iterator_traits<_InputIter>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
        if (!__binary_pred(__value, *__first)) {
          __value = *__first;
          *++__result = __value;
        }
      return ++__result;
    }
# 1199 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _ForwardIter, typename _BinaryPredicate>
    _ForwardIter
    __unique_copy(_InputIter __first, _InputIter __last,
                  _ForwardIter __result,
                  _BinaryPredicate __binary_pred,
                  forward_iterator_tag)
    {

     



      *__result = *__first;
      while (++__first != __last)
        if (!__binary_pred(*__result, *__first)) *++__result = *__first;
      return ++__result;
    }
# 1232 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _OutputIter, typename _BinaryPredicate>
    inline _OutputIter
    unique_copy(_InputIter __first, _InputIter __last,
                _OutputIter __result,
                _BinaryPredicate __binary_pred)
    {

     
     


      typedef typename iterator_traits<_OutputIter>::iterator_category _IterType;

      if (__first == __last) return __result;
      return __unique_copy(__first, __last,
__result, __binary_pred, _IterType());
    }
# 1263 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter>
    _ForwardIter
    unique(_ForwardIter __first, _ForwardIter __last)
    {

         
         


          __first = adjacent_find(__first, __last);
          return unique_copy(__first, __last, __first);
    }
# 1290 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _BinaryPredicate>
    _ForwardIter
    unique(_ForwardIter __first, _ForwardIter __last,
           _BinaryPredicate __binary_pred)
    {

     
     



      __first = adjacent_find(__first, __last, __binary_pred);
      return unique_copy(__first, __last, __first, __binary_pred);
    }







  template<typename _BidirectionalIter>
    void
    __reverse(_BidirectionalIter __first, _BidirectionalIter __last,
                          bidirectional_iterator_tag)
    {
          while (true)
            if (__first == __last || __first == --__last)
                  return;
            else
                  iter_swap(__first++, __last);
    }







  template<typename _RandomAccessIter>
    void
    __reverse(_RandomAccessIter __first, _RandomAccessIter __last,
                          random_access_iterator_tag)
    {
          while (__first < __last)
            iter_swap(__first++, --__last);
    }
# 1349 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIter>
    inline void
    reverse(_BidirectionalIter __first, _BidirectionalIter __last)
    {

         

          __reverse(__first, __last, __iterator_category(__first));
    }
# 1374 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIter, typename _OutputIter>
    _OutputIter
    reverse_copy(_BidirectionalIter __first, _BidirectionalIter __last,
                             _OutputIter __result)
    {

     
     


      while (__first != __last) {
        --__last;
        *__result = *__last;
        ++__result;
      }
      return __result;
    }
# 1399 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0) {
        _EuclideanRingElement __t = __m % __n;
        __m = __n;
        __n = __t;
      }
      return __m;
    }






  template<typename _ForwardIter>
    void
    __rotate(_ForwardIter __first,
             _ForwardIter __middle,
             _ForwardIter __last,
              forward_iterator_tag)
    {
      if ((__first == __middle) || (__last == __middle))
        return;

      _ForwardIter __first2 = __middle;
      do {
        swap(*__first++, *__first2++);
        if (__first == __middle)
          __middle = __first2;
      } while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last) {
        swap(*__first++, *__first2++);
        if (__first == __middle)
          __middle = __first2;
        else if (__first2 == __last)
          __first2 = __middle;
      }
    }






  template<typename _BidirectionalIter>
    void
    __rotate(_BidirectionalIter __first,
             _BidirectionalIter __middle,
             _BidirectionalIter __last,
              bidirectional_iterator_tag)
    {

     


      if ((__first == __middle) || (__last == __middle))
        return;

      __reverse(__first, __middle, bidirectional_iterator_tag());
      __reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
        swap (*__first++, *--__last);

      if (__first == __middle) {
        __reverse(__middle, __last, bidirectional_iterator_tag());
      }
      else {
        __reverse(__first, __middle, bidirectional_iterator_tag());
      }
    }






  template<typename _RandomAccessIter>
    void
    __rotate(_RandomAccessIter __first,
             _RandomAccessIter __middle,
             _RandomAccessIter __last,
             random_access_iterator_tag)
    {

     


      if ((__first == __middle) || (__last == __middle))
        return;

      typedef typename iterator_traits<_RandomAccessIter>::difference_type _Distance;
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;
      _Distance __l = __n - __k;

      if (__k == __l) {
        swap_ranges(__first, __middle, __middle);
        return;
      }

      _Distance __d = __gcd(__n, __k);

      for (_Distance __i = 0; __i < __d; __i++) {
        _ValueType __tmp = *__first;
        _RandomAccessIter __p = __first;

        if (__k < __l) {
          for (_Distance __j = 0; __j < __l/__d; __j++) {
            if (__p > __first + __l) {
              *__p = *(__p - __l);
              __p -= __l;
            }

            *__p = *(__p + __k);
            __p += __k;
          }
        }

        else {
          for (_Distance __j = 0; __j < __k/__d - 1; __j ++) {
            if (__p < __last - __k) {
              *__p = *(__p + __k);
              __p += __k;
            }

            *__p = * (__p - __l);
            __p -= __l;
          }
        }

        *__p = __tmp;
        ++__first;
      }
    }
# 1561 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter>
    inline void
    rotate(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last)
    {

     

      typedef typename iterator_traits<_ForwardIter>::iterator_category _IterType;
      __rotate(__first, __middle, __last, _IterType());
    }
# 1589 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _OutputIter>
    _OutputIter
    rotate_copy(_ForwardIter __first, _ForwardIter __middle,
                _ForwardIter __last, _OutputIter __result)
    {

     
     


      return copy(__first, __middle, copy(__middle, __last, __result));
    }
# 1612 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _Distance>
    inline _Distance
    __random_number(_Distance __n)
    {



      return rand() % __n;

    }
# 1634 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter>
    inline void
    random_shuffle(_RandomAccessIter __first, _RandomAccessIter __last)
    {

     


      if (__first == __last) return;
      for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)
        iter_swap(__i, __first + __random_number((__i - __first) + 1));
    }
# 1660 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIter __first, _RandomAccessIter __last,
                   _RandomNumberGenerator& __rand)
    {

     


      if (__first == __last) return;
      for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)
        iter_swap(__i, __first + __rand((__i - __first) + 1));
    }







  template<typename _ForwardIter, typename _Predicate>
    _ForwardIter
    __partition(_ForwardIter __first, _ForwardIter __last,
                _Predicate __pred,
                forward_iterator_tag)
    {
      if (__first == __last) return __first;

      while (__pred(*__first))
        if (++__first == __last) return __first;

      _ForwardIter __next = __first;

      while (++__next != __last)
        if (__pred(*__next)) {
          swap(*__first, *__next);
          ++__first;
        }

      return __first;
    }






  template<typename _BidirectionalIter, typename _Predicate>
    _BidirectionalIter
    __partition(_BidirectionalIter __first, _BidirectionalIter __last,
                _Predicate __pred,
                bidirectional_iterator_tag)
    {
      while (true) {
        while (true)
          if (__first == __last)
            return __first;
          else if (__pred(*__first))
            ++__first;
          else
            break;
        --__last;
        while (true)
          if (__first == __last)
            return __first;
          else if (!__pred(*__last))
            --__last;
          else
            break;
        iter_swap(__first, __last);
        ++__first;
      }
    }
# 1748 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Predicate>
    inline _ForwardIter
    partition(_ForwardIter __first, _ForwardIter __last,
              _Predicate __pred)
    {

     
     


      return __partition(__first, __last, __pred, __iterator_category(__first));
    }







  template<typename _ForwardIter, typename _Predicate, typename _Distance>
    _ForwardIter
    __inplace_stable_partition(_ForwardIter __first, _ForwardIter __last,
                               _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
        return __pred(*__first) ? __last : __first;
      _ForwardIter __middle = __first;
      advance(__middle, __len / 2);
      _ForwardIter __begin = __inplace_stable_partition(__first, __middle,
                                                        __pred,
                                                        __len / 2);
      _ForwardIter __end = __inplace_stable_partition(__middle, __last,
                                                      __pred,
                                                      __len - __len / 2);
      rotate(__begin, __middle, __end);
      advance(__begin, distance(__middle, __end));
      return __begin;
    }






  template<typename _ForwardIter, typename _Pointer, typename _Predicate,
           typename _Distance>
    _ForwardIter
    __stable_partition_adaptive(_ForwardIter __first, _ForwardIter __last,
                                _Predicate __pred, _Distance __len,
                                _Pointer __buffer,
                                _Distance __buffer_size)
    {
      if (__len <= __buffer_size) {
        _ForwardIter __result1 = __first;
        _Pointer __result2 = __buffer;
        for ( ; __first != __last ; ++__first)
          if (__pred(*__first)) {
            *__result1 = *__first;
            ++__result1;
          }
          else {
            *__result2 = *__first;
            ++__result2;
          }
        copy(__buffer, __result2, __result1);
        return __result1;
      }
      else {
        _ForwardIter __middle = __first;
        advance(__middle, __len / 2);
        _ForwardIter __begin = __stable_partition_adaptive(__first, __middle,
                                                           __pred,
                                                           __len / 2,
                                                           __buffer, __buffer_size);
        _ForwardIter __end = __stable_partition_adaptive( __middle, __last,
                                                          __pred,
                                                          __len - __len / 2,
                                                          __buffer, __buffer_size);
        rotate(__begin, __middle, __end);
        advance(__begin, distance(__middle, __end));
        return __begin;
      }
    }
# 1848 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Predicate>
    _ForwardIter
    stable_partition(_ForwardIter __first, _ForwardIter __last,
                     _Predicate __pred)
    {

     
     


      if (__first == __last)
        return __first;
      else
      {
        typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
        typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;

        _Temporary_buffer<_ForwardIter, _ValueType> __buf(__first, __last);
        if (__buf.size() > 0)
          return __stable_partition_adaptive(__first, __last, __pred,
                                             _DistanceType(__buf.requested_size()),
                                             __buf.begin(), __buf.size());
        else
          return __inplace_stable_partition(__first, __last, __pred,
                                            _DistanceType(__buf.requested_size()));
      }
    }






  template<typename _RandomAccessIter, typename _Tp>
    _RandomAccessIter
    __unguarded_partition(_RandomAccessIter __first, _RandomAccessIter __last,
                          _Tp __pivot)
    {
      while (true) {
        while (*__first < __pivot)
          ++__first;
        --__last;
        while (__pivot < *__last)
          --__last;
        if (!(__first < __last))
          return __first;
        iter_swap(__first, __last);
        ++__first;
      }
    }






  template<typename _RandomAccessIter, typename _Tp, typename _Compare>
    _RandomAccessIter
    __unguarded_partition(_RandomAccessIter __first, _RandomAccessIter __last,
                          _Tp __pivot, _Compare __comp)
    {
      while (true) {
        while (__comp(*__first, __pivot))
          ++__first;
        --__last;
        while (__comp(__pivot, *__last))
          --__last;
        if (!(__first < __last))
          return __first;
        iter_swap(__first, __last);
        ++__first;
      }
    }
# 1929 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  enum { _M_threshold = 16 };






  template<typename _RandomAccessIter, typename _Tp>
    void
    __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val)
    {
      _RandomAccessIter __next = __last;
      --__next;
      while (__val < *__next) {
        *__last = *__next;
        __last = __next;
        --__next;
      }
      *__last = __val;
    }






  template<typename _RandomAccessIter, typename _Tp, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val, _Compare __comp)
    {
      _RandomAccessIter __next = __last;
      --__next;
      while (__comp(__val, *__next)) {
        *__last = *__next;
        __last = __next;
        --__next;
      }
      *__last = __val;
    }






  template<typename _RandomAccessIter>
    void
    __insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last)
    {
      if (__first == __last) return;

      for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)
      {
        typename iterator_traits<_RandomAccessIter>::value_type __val = *__i;
        if (__val < *__first) {
          copy_backward(__first, __i, __i + 1);
          *__first = __val;
        }
        else
          __unguarded_linear_insert(__i, __val);
      }
    }






  template<typename _RandomAccessIter, typename _Compare>
    void
    __insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last,
                     _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)
      {
        typename iterator_traits<_RandomAccessIter>::value_type __val = *__i;
        if (__comp(__val, *__first)) {
          copy_backward(__first, __i, __i + 1);
          *__first = __val;
        }
        else
          __unguarded_linear_insert(__i, __val, __comp);
      }
    }






  template<typename _RandomAccessIter>
    inline void
    __unguarded_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;

      for (_RandomAccessIter __i = __first; __i != __last; ++__i)
        __unguarded_linear_insert(__i, _ValueType(*__i));
    }






  template<typename _RandomAccessIter, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last,
                               _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;

      for (_RandomAccessIter __i = __first; __i != __last; ++__i)
        __unguarded_linear_insert(__i, _ValueType(*__i), __comp);
    }






  template<typename _RandomAccessIter>
    void
    __final_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last)
    {
      if (__last - __first > _M_threshold) {
        __insertion_sort(__first, __first + _M_threshold);
        __unguarded_insertion_sort(__first + _M_threshold, __last);
      }
      else
        __insertion_sort(__first, __last);
    }






  template<typename _RandomAccessIter, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last,
                           _Compare __comp)
    {
      if (__last - __first > _M_threshold) {
        __insertion_sort(__first, __first + _M_threshold, __comp);
        __unguarded_insertion_sort(__first + _M_threshold, __last, __comp);
      }
      else
        __insertion_sort(__first, __last, __comp);
    }






  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 1; __n >>= 1) ++__k;
      return __k;
    }






  template<typename _RandomAccessIter, typename _Size>
    void
    __introsort_loop(_RandomAccessIter __first, _RandomAccessIter __last,
                     _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;

      while (__last - __first > _M_threshold) {
        if (__depth_limit == 0) {
          partial_sort(__first, __last, __last);
          return;
        }
        --__depth_limit;
        _RandomAccessIter __cut =
          __unguarded_partition(__first, __last,
                                _ValueType(__median(*__first,
                                                    *(__first + (__last - __first)/2),
                                                    *(__last - 1))));
        __introsort_loop(__cut, __last, __depth_limit);
        __last = __cut;
      }
    }






  template<typename _RandomAccessIter, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIter __first, _RandomAccessIter __last,
                     _Size __depth_limit, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;

      while (__last - __first > _M_threshold) {
        if (__depth_limit == 0) {
          partial_sort(__first, __last, __last, __comp);
          return;
        }
        --__depth_limit;
        _RandomAccessIter __cut =
          __unguarded_partition(__first, __last,
                                _ValueType(__median(*__first,
                                                    *(__first + (__last - __first)/2),
                                                    *(__last - 1), __comp)),
           __comp);
        __introsort_loop(__cut, __last, __depth_limit, __comp);
        __last = __cut;
      }
    }
# 2166 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter>
    inline void
    sort(_RandomAccessIter __first, _RandomAccessIter __last)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;


     

     

      if (__first != __last) {
        __introsort_loop(__first, __last, __lg(__last - __first) * 2);
        __final_insertion_sort(__first, __last);
      }
    }
# 2197 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _Compare>
    inline void
    sort(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;


     

     

      if (__first != __last) {
        __introsort_loop(__first, __last, __lg(__last - __first) * 2, __comp);
        __final_insertion_sort(__first, __last, __comp);
      }
    }







  template<typename _RandomAccessIter>
    void
    __inplace_stable_sort(_RandomAccessIter __first, _RandomAccessIter __last)
    {
      if (__last - __first < 15) {
        __insertion_sort(__first, __last);
        return;
      }
      _RandomAccessIter __middle = __first + (__last - __first) / 2;
      __inplace_stable_sort(__first, __middle);
      __inplace_stable_sort(__middle, __last);
      __merge_without_buffer(__first, __middle, __last,
                             __middle - __first,
                             __last - __middle);
    }






  template<typename _RandomAccessIter, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIter __first, _RandomAccessIter __last,
                          _Compare __comp)
    {
      if (__last - __first < 15) {
        __insertion_sort(__first, __last, __comp);
        return;
      }
      _RandomAccessIter __middle = __first + (__last - __first) / 2;
      __inplace_stable_sort(__first, __middle, __comp);
      __inplace_stable_sort(__middle, __last, __comp);
      __merge_without_buffer(__first, __middle, __last,
                             __middle - __first,
                             __last - __middle,
                             __comp);
    }

  template<typename _RandomAccessIter1, typename _RandomAccessIter2,
           typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIter1 __first, _RandomAccessIter1 __last,
                      _RandomAccessIter2 __result, _Distance __step_size)
    {
      _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step) {
        __result = merge(__first, __first + __step_size,
                         __first + __step_size, __first + __two_step,
                         __result);
        __first += __two_step;
      }

      __step_size = min(_Distance(__last - __first), __step_size);
      merge(__first, __first + __step_size, __first + __step_size, __last,
            __result);
    }

  template<typename _RandomAccessIter1, typename _RandomAccessIter2,
           typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIter1 __first, _RandomAccessIter1 __last,
                      _RandomAccessIter2 __result, _Distance __step_size,
                      _Compare __comp)
    {
      _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step) {
        __result = merge(__first, __first + __step_size,
                         __first + __step_size, __first + __two_step,
                         __result,
                         __comp);
        __first += __two_step;
      }
      __step_size = min(_Distance(__last - __first), __step_size);

      merge(__first, __first + __step_size,
            __first + __step_size, __last,
            __result,
            __comp);
    }

  enum { _M_chunk_size = 7 };

  template<typename _RandomAccessIter, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last,
                           _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size) {
        __insertion_sort(__first, __first + __chunk_size);
        __first += __chunk_size;
      }
      __insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIter, typename _Distance, typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last,
                           _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size) {
        __insertion_sort(__first, __first + __chunk_size, __comp);
        __first += __chunk_size;
      }
      __insertion_sort(__first, __last, __comp);
    }

  template<typename _RandomAccessIter, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIter __first, _RandomAccessIter __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIter>::difference_type _Distance;

      _Distance __len = __last - __first;
      _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _M_chunk_size;
      __chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len) {
        __merge_sort_loop(__first, __last, __buffer, __step_size);
        __step_size *= 2;
        __merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
        __step_size *= 2;
      }
    }

  template<typename _RandomAccessIter, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIter __first, _RandomAccessIter __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::difference_type _Distance;

      _Distance __len = __last - __first;
      _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _M_chunk_size;
      __chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len) {
        __merge_sort_loop(__first, __last, __buffer, __step_size, __comp);
        __step_size *= 2;
        __merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp);
        __step_size *= 2;
      }
    }

  template<typename _RandomAccessIter, typename _Pointer, typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIter __first, _RandomAccessIter __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      _Distance __len = (__last - __first + 1) / 2;
      _RandomAccessIter __middle = __first + __len;
      if (__len > __buffer_size) {
        __stable_sort_adaptive(__first, __middle, __buffer, __buffer_size);
        __stable_sort_adaptive(__middle, __last, __buffer, __buffer_size);
      }
      else {
        __merge_sort_with_buffer(__first, __middle, __buffer);
        __merge_sort_with_buffer(__middle, __last, __buffer);
      }
      __merge_adaptive(__first, __middle, __last, _Distance(__middle - __first),
                       _Distance(__last - __middle), __buffer, __buffer_size);
    }

  template<typename _RandomAccessIter, typename _Pointer, typename _Distance,
           typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIter __first, _RandomAccessIter __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      _Distance __len = (__last - __first + 1) / 2;
      _RandomAccessIter __middle = __first + __len;
      if (__len > __buffer_size) {
        __stable_sort_adaptive(__first, __middle, __buffer, __buffer_size,
                               __comp);
        __stable_sort_adaptive(__middle, __last, __buffer, __buffer_size,
                               __comp);
      }
      else {
        __merge_sort_with_buffer(__first, __middle, __buffer, __comp);
        __merge_sort_with_buffer(__middle, __last, __buffer, __comp);
      }
      __merge_adaptive(__first, __middle, __last, _Distance(__middle - __first),
                       _Distance(__last - __middle), __buffer, __buffer_size,
                       __comp);
    }
# 2430 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter>
    inline void
    stable_sort(_RandomAccessIter __first, _RandomAccessIter __last)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;
      typedef typename iterator_traits<_RandomAccessIter>::difference_type _DistanceType;


     

     

      _Temporary_buffer<_RandomAccessIter, _ValueType> buf(__first, __last);
      if (buf.begin() == 0)
        __inplace_stable_sort(__first, __last);
      else
        __stable_sort_adaptive(__first, __last, buf.begin(), _DistanceType(buf.size()));
    }
# 2466 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _Compare>
    inline void
    stable_sort(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;
      typedef typename iterator_traits<_RandomAccessIter>::difference_type _DistanceType;


     

     


      _Temporary_buffer<_RandomAccessIter, _ValueType> buf(__first, __last);
      if (buf.begin() == 0)
        __inplace_stable_sort(__first, __last, __comp);
      else
        __stable_sort_adaptive(__first, __last, buf.begin(), _DistanceType(buf.size()),
                               __comp);
    }
# 2502 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter>
    void
    partial_sort(_RandomAccessIter __first,
                 _RandomAccessIter __middle,
                 _RandomAccessIter __last)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;


     

     

      make_heap(__first, __middle);
      for (_RandomAccessIter __i = __middle; __i < __last; ++__i)
        if (*__i < *__first)
          __pop_heap(__first, __middle, __i, _ValueType(*__i));
      sort_heap(__first, __middle);
    }
# 2540 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _Compare>
    void
    partial_sort(_RandomAccessIter __first,
                 _RandomAccessIter __middle,
                 _RandomAccessIter __last,
                 _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;


     

     


      make_heap(__first, __middle, __comp);
      for (_RandomAccessIter __i = __middle; __i < __last; ++__i)
        if (__comp(*__i, *__first))
          __pop_heap(__first, __middle, __i, _ValueType(*__i), __comp);
      sort_heap(__first, __middle, __comp);
    }
# 2579 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _RandomAccessIter>
    _RandomAccessIter
    partial_sort_copy(_InputIter __first, _InputIter __last,
                      _RandomAccessIter __result_first,
                      _RandomAccessIter __result_last)
    {
      typedef typename iterator_traits<_InputIter>::value_type _InputValueType;
      typedef typename iterator_traits<_RandomAccessIter>::value_type _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIter>::difference_type _DistanceType;


     
     
     
     

      if (__result_first == __result_last) return __result_last;
      _RandomAccessIter __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last) {
        *__result_real_last = *__first;
        ++__result_real_last;
        ++__first;
      }
      make_heap(__result_first, __result_real_last);
      while (__first != __last) {
        if (*__first < *__result_first)
          __adjust_heap(__result_first, _DistanceType(0),
                        _DistanceType(__result_real_last - __result_first),
                        _InputValueType(*__first));
        ++__first;
      }
      sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2633 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter, typename _RandomAccessIter, typename _Compare>
    _RandomAccessIter
    partial_sort_copy(_InputIter __first, _InputIter __last,
                      _RandomAccessIter __result_first,
                      _RandomAccessIter __result_last,
                      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIter>::value_type _InputValueType;
      typedef typename iterator_traits<_RandomAccessIter>::value_type _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIter>::difference_type _DistanceType;


     
     
     
     


      if (__result_first == __result_last) return __result_last;
      _RandomAccessIter __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last) {
        *__result_real_last = *__first;
        ++__result_real_last;
        ++__first;
      }
      make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last) {
        if (__comp(*__first, *__result_first))
          __adjust_heap(__result_first, _DistanceType(0),
                        _DistanceType(__result_real_last - __result_first),
                        _InputValueType(*__first),
                        __comp);
        ++__first;
      }
      sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 2686 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter>
    void
    nth_element(_RandomAccessIter __first,
                _RandomAccessIter __nth,
                _RandomAccessIter __last)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;


     
     

      while (__last - __first > 3) {
        _RandomAccessIter __cut =
          __unguarded_partition(__first, __last,
                                _ValueType(__median(*__first,
                                                    *(__first + (__last - __first)/2),
                                                    *(__last - 1))));
        if (__cut <= __nth)
          __first = __cut;
        else
          __last = __cut;
      }
      __insertion_sort(__first, __last);
    }
# 2728 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _RandomAccessIter, typename _Compare>
    void
    nth_element(_RandomAccessIter __first,
                _RandomAccessIter __nth,
                _RandomAccessIter __last,
                            _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;


     
     


      while (__last - __first > 3) {
        _RandomAccessIter __cut =
          __unguarded_partition(__first, __last,
                                _ValueType(__median(*__first,
                                                    *(__first + (__last - __first)/2),
                                                    *(__last - 1),
                                                    __comp)),
                                __comp);
        if (__cut <= __nth)
          __first = __cut;
        else
          __last = __cut;
      }
      __insertion_sort(__first, __last, __comp);
    }
# 2768 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp>
    _ForwardIter
    lower_bound(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;






     
     
     

      _DistanceType __len = distance(__first, __last);
      _DistanceType __half;
      _ForwardIter __middle;

      while (__len > 0) {
        __half = __len >> 1;
        __middle = __first;
        advance(__middle, __half);
        if (*__middle < __val) {
          __first = __middle;
          ++__first;
          __len = __len - __half - 1;
        }
        else
          __len = __half;
      }
      return __first;
    }
# 2816 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp, typename _Compare>
    _ForwardIter
    lower_bound(_ForwardIter __first, _ForwardIter __last,
                const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;


     
     

      _DistanceType __len = distance(__first, __last);
      _DistanceType __half;
      _ForwardIter __middle;

      while (__len > 0) {
        __half = __len >> 1;
        __middle = __first;
        advance(__middle, __half);
        if (__comp(*__middle, __val)) {
          __first = __middle;
          ++__first;
          __len = __len - __half - 1;
        }
        else
          __len = __half;
      }
      return __first;
    }
# 2856 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp>
    _ForwardIter
    upper_bound(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;



     
     
     

      _DistanceType __len = distance(__first, __last);
      _DistanceType __half;
      _ForwardIter __middle;

      while (__len > 0) {
        __half = __len >> 1;
        __middle = __first;
        advance(__middle, __half);
        if (__val < *__middle)
          __len = __half;
        else {
          __first = __middle;
          ++__first;
          __len = __len - __half - 1;
        }
      }
      return __first;
    }
# 2901 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp, typename _Compare>
    _ForwardIter
    upper_bound(_ForwardIter __first, _ForwardIter __last,
                const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;


     
     

      _DistanceType __len = distance(__first, __last);
      _DistanceType __half;
      _ForwardIter __middle;

      while (__len > 0) {
        __half = __len >> 1;
        __middle = __first;
        advance(__middle, __half);
        if (__comp(__val, *__middle))
          __len = __half;
        else {
          __first = __middle;
          ++__first;
          __len = __len - __half - 1;
        }
      }
      return __first;
    }
# 2948 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp>
    pair<_ForwardIter, _ForwardIter>
    equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;



     
     
     

      _DistanceType __len = distance(__first, __last);
      _DistanceType __half;
      _ForwardIter __middle, __left, __right;

      while (__len > 0) {
        __half = __len >> 1;
        __middle = __first;
        advance(__middle, __half);
        if (*__middle < __val) {
          __first = __middle;
          ++__first;
          __len = __len - __half - 1;
        }
        else if (__val < *__middle)
          __len = __half;
        else {
          __left = lower_bound(__first, __middle, __val);
          advance(__first, __len);
          __right = upper_bound(++__middle, __first, __val);
          return pair<_ForwardIter, _ForwardIter>(__left, __right);
        }
      }
      return pair<_ForwardIter, _ForwardIter>(__first, __first);
    }
# 3003 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp, typename _Compare>
    pair<_ForwardIter, _ForwardIter>
    equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,
                _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIter>::value_type _ValueType;
      typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;


     
     
     

      _DistanceType __len = distance(__first, __last);
      _DistanceType __half;
      _ForwardIter __middle, __left, __right;

      while (__len > 0) {
        __half = __len >> 1;
        __middle = __first;
        advance(__middle, __half);
        if (__comp(*__middle, __val)) {
          __first = __middle;
          ++__first;
          __len = __len - __half - 1;
        }
        else if (__comp(__val, *__middle))
          __len = __half;
        else {
          __left = lower_bound(__first, __middle, __val, __comp);
          advance(__first, __len);
          __right = upper_bound(++__middle, __first, __val, __comp);
          return pair<_ForwardIter, _ForwardIter>(__left, __right);
        }
      }
      return pair<_ForwardIter, _ForwardIter>(__first, __first);
    }
# 3052 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp>
    bool
    binary_search(_ForwardIter __first, _ForwardIter __last,
                  const _Tp& __val)
    {


     
     

     

      _ForwardIter __i = lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 3083 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIter __first, _ForwardIter __last,
                  const _Tp& __val, _Compare __comp)
    {

     
     

     


      _ForwardIter __i = lower_bound(__first, __last, __val, __comp);
      return __i != __last && !__comp(__val, *__i);
    }
# 3115 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _OutputIter>
    _OutputIter
    merge(_InputIter1 __first1, _InputIter1 __last1,
          _InputIter2 __first2, _InputIter2 __last2,
          _OutputIter __result)
    {

     
     
     

     


     


      while (__first1 != __last1 && __first2 != __last2) {
        if (*__first2 < *__first1) {
          *__result = *__first2;
          ++__first2;
        }
        else {
          *__result = *__first1;
          ++__first1;
        }
        ++__result;
      }
      return copy(__first2, __last2, copy(__first1, __last1, __result));
    }
# 3166 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _InputIter1, typename _InputIter2, typename _OutputIter,
           typename _Compare>
    _OutputIter
    merge(_InputIter1 __first1, _InputIter1 __last1,
          _InputIter2 __first2, _InputIter2 __last2,
          _OutputIter __result, _Compare __comp)
    {

     
     
     


     

     



      while (__first1 != __last1 && __first2 != __last2) {
        if (__comp(*__first2, *__first1)) {
          *__result = *__first2;
          ++__first2;
        }
        else {
          *__result = *__first1;
          ++__first1;
        }
        ++__result;
      }
      return copy(__first2, __last2, copy(__first1, __last1, __result));
    }






  template<typename _BidirectionalIter, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIter __first,
                           _BidirectionalIter __middle,
                           _BidirectionalIter __last,
                           _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
        return;
      if (__len1 + __len2 == 2) {
        if (*__middle < *__first)
              iter_swap(__first, __middle);
        return;
      }
      _BidirectionalIter __first_cut = __first;
      _BidirectionalIter __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2) {
        __len11 = __len1 / 2;
        advance(__first_cut, __len11);
        __second_cut = lower_bound(__middle, __last, *__first_cut);
        __len22 = distance(__middle, __second_cut);
      }
      else {
        __len22 = __len2 / 2;
        advance(__second_cut, __len22);
        __first_cut = upper_bound(__first, __middle, *__second_cut);
        __len11 = distance(__first, __first_cut);
      }
      rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIter __new_middle = __first_cut;
      advance(__new_middle, distance(__middle, __second_cut));
      __merge_without_buffer(__first, __first_cut, __new_middle,
                             __len11, __len22);
      __merge_without_buffer(__new_middle, __second_cut, __last,
                             __len1 - __len11, __len2 - __len22);
    }






  template<typename _BidirectionalIter, typename _Distance, typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIter __first,
                           _BidirectionalIter __middle,
                           _BidirectionalIter __last,
                           _Distance __len1, _Distance __len2,
                           _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
        return;
      if (__len1 + __len2 == 2) {
        if (__comp(*__middle, *__first))
              iter_swap(__first, __middle);
        return;
      }
      _BidirectionalIter __first_cut = __first;
      _BidirectionalIter __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2) {
        __len11 = __len1 / 2;
        advance(__first_cut, __len11);
        __second_cut = lower_bound(__middle, __last, *__first_cut, __comp);
        __len22 = distance(__middle, __second_cut);
      }
      else {
        __len22 = __len2 / 2;
        advance(__second_cut, __len22);
        __first_cut = upper_bound(__first, __middle, *__second_cut, __comp);
        __len11 = distance(__first, __first_cut);
      }
      rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIter __new_middle = __first_cut;
      advance(__new_middle, distance(__middle, __second_cut));
      __merge_without_buffer(__first, __first_cut, __new_middle,
                             __len11, __len22, __comp);
      __merge_without_buffer(__new_middle, __second_cut, __last,
                             __len1 - __len11, __len2 - __len22, __comp);
    }






  template<typename _BidirectionalIter1, typename _BidirectionalIter2,
           typename _Distance>
    _BidirectionalIter1
    __rotate_adaptive(_BidirectionalIter1 __first,
                      _BidirectionalIter1 __middle,
                      _BidirectionalIter1 __last,
                      _Distance __len1, _Distance __len2,
                      _BidirectionalIter2 __buffer,
                      _Distance __buffer_size)
    {
      _BidirectionalIter2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size) {
        __buffer_end = copy(__middle, __last, __buffer);
        copy_backward(__first, __middle, __last);
        return copy(__buffer, __buffer_end, __first);
      }
      else if (__len1 <= __buffer_size) {
        __buffer_end = copy(__first, __middle, __buffer);
        copy(__middle, __last, __first);
        return copy_backward(__buffer, __buffer_end, __last);
      }
      else {
        rotate(__first, __middle, __last);
        advance(__first, distance(__middle, __last));
        return __first;
      }
    }






  template<typename _BidirectionalIter1, typename _BidirectionalIter2,
           typename _BidirectionalIter3>
    _BidirectionalIter3
    __merge_backward(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,
                     _BidirectionalIter2 __first2, _BidirectionalIter2 __last2,
                     _BidirectionalIter3 __result)
    {
      if (__first1 == __last1)
        return copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
        return copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true) {
        if (*__last2 < *__last1) {
          *--__result = *__last1;
          if (__first1 == __last1)
            return copy_backward(__first2, ++__last2, __result);
          --__last1;
        }
        else {
          *--__result = *__last2;
          if (__first2 == __last2)
            return copy_backward(__first1, ++__last1, __result);
          --__last2;
        }
      }
    }






  template<typename _BidirectionalIter1, typename _BidirectionalIter2,
           typename _BidirectionalIter3, typename _Compare>
    _BidirectionalIter3
    __merge_backward(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,
                     _BidirectionalIter2 __first2, _BidirectionalIter2 __last2,
                     _BidirectionalIter3 __result,
                     _Compare __comp)
    {
      if (__first1 == __last1)
        return copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
        return copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true) {
        if (__comp(*__last2, *__last1)) {
          *--__result = *__last1;
          if (__first1 == __last1)
            return copy_backward(__first2, ++__last2, __result);
          --__last1;
        }
        else {
          *--__result = *__last2;
          if (__first2 == __last2)
            return copy_backward(__first1, ++__last1, __result);
          --__last2;
        }
      }
    }






  template<typename _BidirectionalIter, typename _Distance, typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIter __first,
                     _BidirectionalIter __middle,
                     _BidirectionalIter __last,
                     _Distance __len1, _Distance __len2,
                     _Pointer __buffer, _Distance __buffer_size)
    {
          if (__len1 <= __len2 && __len1 <= __buffer_size) {
            _Pointer __buffer_end = copy(__first, __middle, __buffer);
            merge(__buffer, __buffer_end, __middle, __last, __first);
          }
          else if (__len2 <= __buffer_size) {
            _Pointer __buffer_end = copy(__middle, __last, __buffer);
            __merge_backward(__first, __middle, __buffer, __buffer_end, __last);
          }
          else {
            _BidirectionalIter __first_cut = __first;
            _BidirectionalIter __second_cut = __middle;
            _Distance __len11 = 0;
            _Distance __len22 = 0;
            if (__len1 > __len2) {
                  __len11 = __len1 / 2;
                  advance(__first_cut, __len11);
                  __second_cut = lower_bound(__middle, __last, *__first_cut);
                  __len22 = distance(__middle, __second_cut);
            }
            else {
                  __len22 = __len2 / 2;
                  advance(__second_cut, __len22);
                  __first_cut = upper_bound(__first, __middle, *__second_cut);
                  __len11 = distance(__first, __first_cut);
            }
            _BidirectionalIter __new_middle =
                  __rotate_adaptive(__first_cut, __middle, __second_cut,
                                    __len1 - __len11, __len22, __buffer,
                                    __buffer_size);
            __merge_adaptive(__first, __first_cut, __new_middle, __len11,
                             __len22, __buffer, __buffer_size);
            __merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11,
                             __len2 - __len22, __buffer, __buffer_size);
          }
    }






  template<typename _BidirectionalIter, typename _Distance, typename _Pointer,
           typename _Compare>
    void
    __merge_adaptive(_BidirectionalIter __first,
                     _BidirectionalIter __middle,
                     _BidirectionalIter __last,
                     _Distance __len1, _Distance __len2,
                     _Pointer __buffer, _Distance __buffer_size,
                     _Compare __comp)
    {
          if (__len1 <= __len2 && __len1 <= __buffer_size) {
            _Pointer __buffer_end = copy(__first, __middle, __buffer);
            merge(__buffer, __buffer_end, __middle, __last, __first, __comp);
          }
          else if (__len2 <= __buffer_size) {
            _Pointer __buffer_end = copy(__middle, __last, __buffer);
            __merge_backward(__first, __middle, __buffer, __buffer_end, __last,
                                             __comp);
          }
          else {
            _BidirectionalIter __first_cut = __first;
            _BidirectionalIter __second_cut = __middle;
            _Distance __len11 = 0;
            _Distance __len22 = 0;
            if (__len1 > __len2) {
                  __len11 = __len1 / 2;
                  advance(__first_cut, __len11);
                  __second_cut = lower_bound(__middle, __last, *__first_cut, __comp);
                  __len22 = distance(__middle, __second_cut);
            }
            else {
                  __len22 = __len2 / 2;
                  advance(__second_cut, __len22);
                  __first_cut = upper_bound(__first, __middle, *__second_cut, __comp);
                  __len11 = distance(__first, __first_cut);
            }
            _BidirectionalIter __new_middle =
                  __rotate_adaptive(__first_cut, __middle, __second_cut,
                                    __len1 - __len11, __len22, __buffer,
                                    __buffer_size);
            __merge_adaptive(__first, __first_cut, __new_middle, __len11,
                             __len22, __buffer, __buffer_size, __comp);
            __merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11,
                             __len2 - __len22, __buffer, __buffer_size, __comp);
          }
    }
# 3508 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIter>
    void
    inplace_merge(_BidirectionalIter __first,
                  _BidirectionalIter __middle,
                  _BidirectionalIter __last)
    {
      typedef typename iterator_traits<_BidirectionalIter>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIter>::difference_type
          _DistanceType;


     

     

      if (__first == __middle || __middle == __last)
        return;

      _DistanceType __len1 = distance(__first, __middle);
      _DistanceType __len2 = distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIter, _ValueType> __buf(__first, __last);
      if (__buf.begin() == 0)
        __merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
        __merge_adaptive(__first, __middle, __last, __len1, __len2,
                         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3559 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _BidirectionalIter, typename _Compare>
    void
    inplace_merge(_BidirectionalIter __first,
                  _BidirectionalIter __middle,
                  _BidirectionalIter __last,
                  _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIter>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIter>::difference_type
          _DistanceType;


     

     


      if (__first == __middle || __middle == __last)
        return;

      _DistanceType __len1 = distance(__first, __middle);
      _DistanceType __len2 = distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIter, _ValueType> __buf(__first, __last);
      if (__buf.begin() == 0)
        __merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp);
      else
        __merge_adaptive(__first, __middle, __last, __len1, __len2,
                         __buf.begin(), _DistanceType(__buf.size()),
                         __comp);
    }






  template<typename _InputIter1, typename _InputIter2>
    bool
    includes(_InputIter1 __first1, _InputIter1 __last1,
             _InputIter2 __first2, _InputIter2 __last2)
    {

     
     
     


     


      while (__first1 != __last1 && __first2 != __last2)
        if (*__first2 < *__first1)
          return false;
        else if(*__first1 < *__first2)
          ++__first1;
        else
          ++__first1, ++__first2;

      return __first2 == __last2;
    }

  template<typename _InputIter1, typename _InputIter2, typename _Compare>
    bool
    includes(_InputIter1 __first1, _InputIter1 __last1,
             _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
    {

     
     
     


     



      while (__first1 != __last1 && __first2 != __last2)
        if (__comp(*__first2, *__first1))
          return false;
        else if(__comp(*__first1, *__first2))
          ++__first1;
        else
          ++__first1, ++__first2;

      return __first2 == __last2;
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter>
    _OutputIter
    set_union(_InputIter1 __first1, _InputIter1 __last1,
              _InputIter2 __first2, _InputIter2 __last2,
              _OutputIter __result)
    {

     
     
     

     


     


      while (__first1 != __last1 && __first2 != __last2) {
        if (*__first1 < *__first2) {
          *__result = *__first1;
          ++__first1;
        }
        else if (*__first2 < *__first1) {
          *__result = *__first2;
          ++__first2;
        }
        else {
          *__result = *__first1;
          ++__first1;
          ++__first2;
        }
        ++__result;
      }
      return copy(__first2, __last2, copy(__first1, __last1, __result));
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter,
           typename _Compare>
    _OutputIter
    set_union(_InputIter1 __first1, _InputIter1 __last1,
              _InputIter2 __first2, _InputIter2 __last2,
              _OutputIter __result, _Compare __comp)
    {

     
     
     


     

     



      while (__first1 != __last1 && __first2 != __last2) {
        if (__comp(*__first1, *__first2)) {
          *__result = *__first1;
          ++__first1;
        }
        else if (__comp(*__first2, *__first1)) {
          *__result = *__first2;
          ++__first2;
        }
        else {
          *__result = *__first1;
          ++__first1;
          ++__first2;
        }
        ++__result;
      }
      return copy(__first2, __last2, copy(__first1, __last1, __result));
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter>
    _OutputIter
    set_intersection(_InputIter1 __first1, _InputIter1 __last1,
                     _InputIter2 __first2, _InputIter2 __last2,
                     _OutputIter __result)
    {

     
     
     

     


     


      while (__first1 != __last1 && __first2 != __last2)
        if (*__first1 < *__first2)
          ++__first1;
        else if (*__first2 < *__first1)
          ++__first2;
        else {
          *__result = *__first1;
          ++__first1;
          ++__first2;
          ++__result;
        }
      return __result;
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter,
           typename _Compare>
    _OutputIter
    set_intersection(_InputIter1 __first1, _InputIter1 __last1,
                     _InputIter2 __first2, _InputIter2 __last2,
                     _OutputIter __result, _Compare __comp)
    {

     
     
     


     

     



      while (__first1 != __last1 && __first2 != __last2)
        if (__comp(*__first1, *__first2))
          ++__first1;
        else if (__comp(*__first2, *__first1))
          ++__first2;
        else {
          *__result = *__first1;
          ++__first1;
          ++__first2;
          ++__result;
        }
      return __result;
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter>
    _OutputIter
    set_difference(_InputIter1 __first1, _InputIter1 __last1,
                   _InputIter2 __first2, _InputIter2 __last2,
                   _OutputIter __result)
    {

     
     
     

     


     


      while (__first1 != __last1 && __first2 != __last2)
        if (*__first1 < *__first2) {
          *__result = *__first1;
          ++__first1;
          ++__result;
        }
        else if (*__first2 < *__first1)
          ++__first2;
        else {
          ++__first1;
          ++__first2;
        }
      return copy(__first1, __last1, __result);
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter,
           typename _Compare>
    _OutputIter
    set_difference(_InputIter1 __first1, _InputIter1 __last1,
                   _InputIter2 __first2, _InputIter2 __last2,
                   _OutputIter __result, _Compare __comp)
    {

     
     
     


     

     



      while (__first1 != __last1 && __first2 != __last2)
        if (__comp(*__first1, *__first2)) {
          *__result = *__first1;
          ++__first1;
          ++__result;
        }
        else if (__comp(*__first2, *__first1))
          ++__first2;
        else {
          ++__first1;
          ++__first2;
        }
      return copy(__first1, __last1, __result);
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter>
    _OutputIter
    set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2,
                             _OutputIter __result)
    {

     
     
     

     


     


      while (__first1 != __last1 && __first2 != __last2)
        if (*__first1 < *__first2) {
          *__result = *__first1;
          ++__first1;
          ++__result;
        }
        else if (*__first2 < *__first1) {
          *__result = *__first2;
          ++__first2;
          ++__result;
        }
        else {
          ++__first1;
          ++__first2;
        }
      return copy(__first2, __last2, copy(__first1, __last1, __result));
    }

  template<typename _InputIter1, typename _InputIter2, typename _OutputIter,
           typename _Compare>
    _OutputIter
    set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2,
                             _OutputIter __result,
                             _Compare __comp)
    {

     
     
     


     

     



      while (__first1 != __last1 && __first2 != __last2)
        if (__comp(*__first1, *__first2)) {
          *__result = *__first1;
          ++__first1;
          ++__result;
        }
        else if (__comp(*__first2, *__first1)) {
          *__result = *__first2;
          ++__first2;
          ++__result;
        }
        else {
          ++__first1;
          ++__first2;
        }
      return copy(__first2, __last2, copy(__first1, __last1, __result));
    }




  template<typename _ForwardIter>
    _ForwardIter
    max_element(_ForwardIter __first, _ForwardIter __last)
    {

     
     


      if (__first == __last) return __first;
      _ForwardIter __result = __first;
      while (++__first != __last)
        if (*__result < *__first)
          __result = __first;
      return __result;
    }

  template<typename _ForwardIter, typename _Compare>
    _ForwardIter
    max_element(_ForwardIter __first, _ForwardIter __last,
                _Compare __comp)
    {

     
     



      if (__first == __last) return __first;
      _ForwardIter __result = __first;
      while (++__first != __last)
        if (__comp(*__result, *__first)) __result = __first;
      return __result;
    }

  template<typename _ForwardIter>
    _ForwardIter
    min_element(_ForwardIter __first, _ForwardIter __last)
    {

     
     


      if (__first == __last) return __first;
      _ForwardIter __result = __first;
      while (++__first != __last)
        if (*__first < *__result)
          __result = __first;
      return __result;
    }

  template<typename _ForwardIter, typename _Compare>
    _ForwardIter
    min_element(_ForwardIter __first, _ForwardIter __last,
                _Compare __comp)
    {

     
     



      if (__first == __last) return __first;
      _ForwardIter __result = __first;
      while (++__first != __last)
        if (__comp(*__first, *__result))
          __result = __first;
      return __result;
    }




  template<typename _BidirectionalIter>
    bool
    next_permutation(_BidirectionalIter __first, _BidirectionalIter __last)
    {

     
     


      if (__first == __last)
        return false;
      _BidirectionalIter __i = __first;
      ++__i;
      if (__i == __last)
        return false;
      __i = __last;
      --__i;

      for(;;) {
        _BidirectionalIter __ii = __i;
        --__i;
        if (*__i < *__ii) {
          _BidirectionalIter __j = __last;
          while (!(*__i < *--__j))
            {}
          iter_swap(__i, __j);
          reverse(__ii, __last);
          return true;
        }
        if (__i == __first) {
          reverse(__first, __last);
          return false;
        }
      }
    }

  template<typename _BidirectionalIter, typename _Compare>
    bool
    next_permutation(_BidirectionalIter __first, _BidirectionalIter __last,
                     _Compare __comp)
    {

     
     



      if (__first == __last)
        return false;
      _BidirectionalIter __i = __first;
      ++__i;
      if (__i == __last)
        return false;
      __i = __last;
      --__i;

      for(;;) {
        _BidirectionalIter __ii = __i;
        --__i;
        if (__comp(*__i, *__ii)) {
          _BidirectionalIter __j = __last;
          while (!__comp(*__i, *--__j))
            {}
          iter_swap(__i, __j);
          reverse(__ii, __last);
          return true;
        }
        if (__i == __first) {
          reverse(__first, __last);
          return false;
        }
      }
    }

  template<typename _BidirectionalIter>
    bool
    prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last)
    {

     
     


      if (__first == __last)
        return false;
      _BidirectionalIter __i = __first;
      ++__i;
      if (__i == __last)
        return false;
      __i = __last;
      --__i;

      for(;;) {
        _BidirectionalIter __ii = __i;
        --__i;
        if (*__ii < *__i) {
          _BidirectionalIter __j = __last;
          while (!(*--__j < *__i))
            {}
          iter_swap(__i, __j);
          reverse(__ii, __last);
          return true;
        }
        if (__i == __first) {
          reverse(__first, __last);
          return false;
        }
      }
    }

  template<typename _BidirectionalIter, typename _Compare>
    bool
    prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last,
                     _Compare __comp)
    {

     
     



      if (__first == __last)
        return false;
      _BidirectionalIter __i = __first;
      ++__i;
      if (__i == __last)
        return false;
      __i = __last;
      --__i;

      for(;;) {
        _BidirectionalIter __ii = __i;
        --__i;
        if (__comp(*__ii, *__i)) {
          _BidirectionalIter __j = __last;
          while (!__comp(*--__j, *__i))
            {}
          iter_swap(__i, __j);
          reverse(__ii, __last);
          return true;
        }
        if (__i == __first) {
          reverse(__first, __last);
          return false;
        }
      }
    }



  template<typename _InputIter, typename _ForwardIter>
    _InputIter
    find_first_of(_InputIter __first1, _InputIter __last1,
                  _ForwardIter __first2, _ForwardIter __last2)
    {

     
     
     



      for ( ; __first1 != __last1; ++__first1)
        for (_ForwardIter __iter = __first2; __iter != __last2; ++__iter)
          if (*__first1 == *__iter)
            return __first1;
      return __last1;
    }

  template<typename _InputIter, typename _ForwardIter, typename _BinaryPredicate>
    _InputIter
    find_first_of(_InputIter __first1, _InputIter __last1,
                  _ForwardIter __first2, _ForwardIter __last2,
                  _BinaryPredicate __comp)
    {

     
     
     


     



      for ( ; __first1 != __last1; ++__first1)
        for (_ForwardIter __iter = __first2; __iter != __last2; ++__iter)
          if (__comp(*__first1, *__iter))
            return __first1;
      return __last1;
    }
# 4201 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_algo.h" 3
  template<typename _ForwardIter1, typename _ForwardIter2>
    _ForwardIter1
    __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
               _ForwardIter2 __first2, _ForwardIter2 __last2,
               forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
        return __last1;
      else {
        _ForwardIter1 __result = __last1;
        while (1) {
          _ForwardIter1 __new_result
            = search(__first1, __last1, __first2, __last2);
          if (__new_result == __last1)
            return __result;
          else {
            __result = __new_result;
            __first1 = __new_result;
            ++__first1;
          }
        }
      }
    }

  template<typename _ForwardIter1, typename _ForwardIter2,
           typename _BinaryPredicate>
    _ForwardIter1
    __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
               _ForwardIter2 __first2, _ForwardIter2 __last2,
               forward_iterator_tag, forward_iterator_tag,
               _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
        return __last1;
      else {
        _ForwardIter1 __result = __last1;
        while (1) {
          _ForwardIter1 __new_result
            = search(__first1, __last1, __first2, __last2, __comp);
          if (__new_result == __last1)
            return __result;
          else {
            __result = __new_result;
            __first1 = __new_result;
            ++__first1;
          }
        }
      }
    }


  template<typename _BidirectionalIter1, typename _BidirectionalIter2>
    _BidirectionalIter1
    __find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,
               _BidirectionalIter2 __first2, _BidirectionalIter2 __last2,
               bidirectional_iterator_tag, bidirectional_iterator_tag)
    {

     
     

      typedef reverse_iterator<_BidirectionalIter1> _RevIter1;
      typedef reverse_iterator<_BidirectionalIter2> _RevIter2;

      _RevIter1 __rlast1(__first1);
      _RevIter2 __rlast2(__first2);
      _RevIter1 __rresult = search(_RevIter1(__last1), __rlast1,
                                   _RevIter2(__last2), __rlast2);

      if (__rresult == __rlast1)
        return __last1;
      else {
        _BidirectionalIter1 __result = __rresult.base();
        advance(__result, -distance(__first2, __last2));
        return __result;
      }
    }

  template<typename _BidirectionalIter1, typename _BidirectionalIter2,
           typename _BinaryPredicate>
    _BidirectionalIter1
    __find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,
               _BidirectionalIter2 __first2, _BidirectionalIter2 __last2,
               bidirectional_iterator_tag, bidirectional_iterator_tag,
               _BinaryPredicate __comp)
    {

     
     

      typedef reverse_iterator<_BidirectionalIter1> _RevIter1;
      typedef reverse_iterator<_BidirectionalIter2> _RevIter2;

      _RevIter1 __rlast1(__first1);
      _RevIter2 __rlast2(__first2);
      _RevIter1 __rresult = search(_RevIter1(__last1), __rlast1,
                                   _RevIter2(__last2), __rlast2,
                                   __comp);

      if (__rresult == __rlast1)
        return __last1;
      else {
        _BidirectionalIter1 __result = __rresult.base();
        advance(__result, -distance(__first2, __last2));
        return __result;
      }
    }



  template<typename _ForwardIter1, typename _ForwardIter2>
    inline _ForwardIter1
    find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
             _ForwardIter2 __first2, _ForwardIter2 __last2)
    {

     
     
     



      return __find_end(__first1, __last1, __first2, __last2,
                        __iterator_category(__first1),
                        __iterator_category(__first2));
    }

  template<typename _ForwardIter1, typename _ForwardIter2,
           typename _BinaryPredicate>
    inline _ForwardIter1
    find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
             _ForwardIter2 __first2, _ForwardIter2 __last2,
             _BinaryPredicate __comp)
    {

     
     
     



      return __find_end(__first1, __last1, __first2, __last2,
                        __iterator_category(__first1),
                        __iterator_category(__first2),
                        __comp);
    }

}
# 70 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/algorithm" 2 3
# 57 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.tcc" 1 3
# 45 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.tcc" 3

namespace std
{
  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_S_empty_rep_storage[
    (sizeof(_Rep) + sizeof(_CharT) + sizeof(size_type) - 1)/sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIter>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a,
                   input_iterator_tag)
      {
        if (__beg == __end && __a == _Alloc())
          return _S_empty_rep()._M_refcopy();

        _CharT __buf[100];
        size_type __i = 0;
        while (__beg != __end && __i < sizeof(__buf) / sizeof(_CharT))
          {
            __buf[__i++] = *__beg;
            ++__beg;
          }
        _Rep* __r = _Rep::_S_create(__i, __a);
        traits_type::copy(__r->_M_refdata(), __buf, __i);
        __r->_M_length = __i;
        try
          {



            for (;;)
              {
                _CharT* __p = __r->_M_refdata() + __r->_M_length;
                _CharT* __last = __r->_M_refdata() + __r->_M_capacity;
                for (;;)
                  {
                    if (__beg == __end)
                      {
                        __r->_M_length = __p - __r->_M_refdata();
                        *__p = _Rep::_S_terminal;
                        return __r->_M_refdata();
                      }
                    if (__p == __last)
                      break;
                    *__p++ = *__beg;
                    ++__beg;
                  }

                size_type __len = __p - __r->_M_refdata();
                _Rep* __another = _Rep::_S_create(__len + 1, __a);
                traits_type::copy(__another->_M_refdata(),
                                  __r->_M_refdata(), __len);
                __r->_M_destroy(__a);
                __r = __another;
                __r->_M_length = __len;
              }
          }
        catch(...)
          {
            __r->_M_destroy(__a);
            throw;
          }
        return 0;
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <class _InIter>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIter __beg, _InIter __end, const _Alloc& __a,
                   forward_iterator_tag)
      {
        size_type __dnew = static_cast<size_type>(distance(__beg, __end));


        if (__builtin_expect(__beg == _InIter(), 0))
          __throw_logic_error("attempt to create string with null pointer");

        if (__beg == __end && __a == _Alloc())
          return _S_empty_rep()._M_refcopy();


        _Rep* __r = _Rep::_S_create(__dnew, __a);
        try
          { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
        catch(...)
          {
            __r->_M_destroy(__a);
            throw;
          }
        __r->_M_length = __dnew;

        __r->_M_refdata()[__dnew] = _Rep::_S_terminal;
        return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {
      if (__n == 0 && __a == _Alloc())
        return _S_empty_rep()._M_refcopy();


      _Rep* __r = _Rep::_S_create(__n, __a);
      try
        {
          if (__n)
            traits_type::assign(__r->_M_refdata(), __n, __c);
        }
      catch(...)
        {
          __r->_M_destroy(__a);
          throw;
        }
      __r->_M_length = __n;
      __r->_M_refdata()[__n] = _Rep::_S_terminal;
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(), __str.get_allocator()),
                 __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_check(__pos),
                               __str._M_fold(__pos, __n), _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
                 size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_check(__pos),
                               __str._M_fold(__pos, __n), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) : 0,
                               __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIter>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIter __beg, _InputIter __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
        {

          allocator_type __a = this->get_allocator();
          _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
          _M_rep()->_M_dispose(__a);
          _M_data(__tmp);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      size_type __size = sizeof(_Rep) + (_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_M_leak_hard()
    {
      if (_M_rep()->_M_is_shared())
        _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const _CharT* __src = _M_data() + __pos + __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (_M_rep()->_M_is_shared() || __new_size > capacity())
        {

          allocator_type __a = get_allocator();


          const size_type __pagesize = 4096;
          const size_type __malloc_header_size = 4 * sizeof (void*);

          const size_type __page_capacity = (__pagesize - __malloc_header_size
                                             - sizeof(_Rep) - sizeof(_CharT))
                                             / sizeof(_CharT);
          _Rep* __r;
          if (__new_size > capacity() && __new_size > __page_capacity)

            __r = _Rep::_S_create(__new_size > 2*capacity() ?
                                  __new_size : 2*capacity(), __a);
          else
            __r = _Rep::_S_create(__new_size, __a);
          try
            {
              if (__pos)
                traits_type::copy(__r->_M_refdata(), _M_data(), __pos);
              if (__how_much)
                traits_type::copy(__r->_M_refdata() + __pos + __len2,
                                  __src, __how_much);
            }
          catch(...)
            {
              __r->_M_dispose(get_allocator());
              throw;
            }
          _M_rep()->_M_dispose(__a);
          _M_data(__r->_M_refdata());
      }
      else if (__how_much && __len1 != __len2)
        {

          traits_type::move(_M_data() + __pos + __len2, __src, __how_much);
        }
      _M_rep()->_M_set_sharable();
      _M_rep()->_M_length = __new_size;
      _M_data()[__new_size] = _Rep::_S_terminal;

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::reserve(size_type __res)
    {
      if (__res > this->capacity() || _M_rep()->_M_is_shared())
        {
          if (__res > this->max_size())
            __throw_length_error("basic_string::reserve");

          if (__res < this->size())
            __res = this->size();
          allocator_type __a = get_allocator();
          _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
          _M_rep()->_M_dispose(__a);
          _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void basic_string<_CharT, _Traits, _Alloc>::swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
        _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
        __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
        {
          _CharT* __tmp = _M_data();
          _M_data(__s._M_data());
          __s._M_data(__tmp);
        }

      else
        {
          basic_string __tmp1(_M_ibegin(), _M_iend(), __s.get_allocator());
          basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
                              this->get_allocator());
          *this = __tmp2;
          __s = __tmp1;
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_t __capacity, const _Alloc& __alloc)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;


      if (__capacity > _S_max_size)



        __throw_length_error("basic_string::_S_create");




      size_t __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
# 421 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/basic_string.tcc" 3
      const size_t __pagesize = 4096;
      const size_t __subpagesize = 128;
      const size_t __malloc_header_size = 4 * sizeof (void*);
      if ((__size + __malloc_header_size) > __pagesize)
        {
          size_t __extra =
            (__pagesize - ((__size + __malloc_header_size) % __pagesize))
            % __pagesize;
          __capacity += __extra / sizeof(_CharT);
          __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
        }
      else if (__size > __subpagesize)
        {
          size_t __extra =
            (__subpagesize - ((__size + __malloc_header_size) % __subpagesize))
            % __subpagesize;
          __capacity += __extra / sizeof(_CharT);
          __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
        }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;
      __p->_M_set_sharable();
      __p->_M_length = 0;
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = _M_length + __res;

      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof (void*);

      const size_type __page_capacity =
        (__pagesize - __malloc_header_size - sizeof(_Rep) - sizeof(_CharT))
        / sizeof(_CharT);
      _Rep* __r;
      if (__requested_cap > _M_capacity && __requested_cap > __page_capacity)

        __r = _Rep::_S_create(__requested_cap > 2*_M_capacity ?
                              __requested_cap : 2*_M_capacity, __alloc);
      else
        __r = _Rep::_S_create(__requested_cap, __alloc);

      if (_M_length)
        {
          try
            { traits_type::copy(__r->_M_refdata(), _M_refdata(), _M_length); }
          catch(...)
            {
              __r->_M_destroy(__alloc);
              throw;
            }
        }
      __r->_M_length = _M_length;
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::resize(size_type __n, _CharT __c)
    {
      if (__n > max_size())
        __throw_length_error("basic_string::resize");
      size_type __size = this->size();
      if (__size < __n)
        this->append(__n - __size, __c);
      else if (__n < __size)
        this->erase(__n);

    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIter>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace(iterator __i1, iterator __i2, _InputIter __k1,
                 _InputIter __k2, input_iterator_tag)
      {

        basic_string __s(__k1, __k2);
        return _M_replace_safe(__i1, __i2, __s._M_ibegin(), __s._M_iend());
      }




  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _ForwardIter>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_safe(iterator __i1, iterator __i2, _ForwardIter __k1,
                      _ForwardIter __k2)
      {
        size_type __dnew = static_cast<size_type>(distance(__k1, __k2));
        size_type __dold = __i2 - __i1;
        size_type __dmax = this->max_size();

        if (__dmax <= __dnew)
          __throw_length_error("basic_string::_M_replace");
        size_type __off = __i1 - _M_ibegin();
        _M_mutate(__off, __dold, __dnew);


        if (__dnew)
          _S_copy_chars(_M_data() + __off, __k1, __k2);

        return *this;
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    replace(size_type __pos1, size_type __n1, const basic_string& __str,
            size_type __pos2, size_type __n2)
    {
      const size_type __strsize = __str.size();
      if (__pos2 > __strsize)
        __throw_out_of_range("basic_string::replace");
      const bool __testn2 = __n2 < __strsize - __pos2;
      const size_type __foldn2 = __testn2 ? __n2 : __strsize - __pos2;
      return this->replace(__pos1, __n1,
                           __str._M_data() + __pos2, __foldn2);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {



      size_type __size = __str.size();
      size_type __len = __size + this->size();
      if (__len > this->capacity())
        this->reserve(__len);
      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin(),
                             __str._M_iend());
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {



      size_type __len = min(__str.size() - __pos, __n) + this->size();
      if (__len > this->capacity())
        this->reserve(__len);
      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_check(__pos),
                             __str._M_fold(__pos, __n));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      size_type __len = __n + this->size();
      if (__len > this->capacity())
        this->reserve(__len);
      return _M_replace_safe(_M_iend(), _M_iend(), __s, __s + __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      size_type __len = __n + this->size();
      if (__len > this->capacity())
        this->reserve(__len);
       return this->replace(_M_iend(), _M_iend(), __n, __c);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
              const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __lhs + __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    replace(iterator __i1, iterator __i2, size_type __n2, _CharT __c)
    {
      size_type __n1 = __i2 - __i1;
      size_type __off1 = __i1 - _M_ibegin();
      if (max_size() - (this->size() - __n1) <= __n2)
        __throw_length_error("basic_string::replace");
      _M_mutate (__off1, __n1, __n2);

      if (__n2)
        traits_type::assign(_M_data() + __off1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      if (__pos > this->size())
        __throw_out_of_range("basic_string::copy");

      if (__n > this->size() - __pos)
        __n = this->size() - __pos;

      traits_type::copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      size_type __size = this->size();
      size_t __xpos = __pos;
      const _CharT* __data = _M_data();
      for (; __xpos + __n <= __size; ++__xpos)
        if (traits_type::compare(__data + __xpos, __s, __n) == 0)
          return __xpos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      size_type __ret = npos;
      if (__pos < __size)
        {
          const _CharT* __data = _M_data();
          size_type __n = __size - __pos;
          const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
          if (__p)
            __ret = __p - __data;
        }
      return __ret;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      size_type __size = this->size();
      if (__n <= __size)
        {
          __pos = std::min(__size - __n, __pos);
          const _CharT* __data = _M_data();
          do
            {
              if (traits_type::compare(__data + __pos, __s, __n) == 0)
                return __pos;
            }
          while (__pos-- > 0);
        }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
        {
          size_t __xpos = __size - 1;
          if (__xpos > __pos)
            __xpos = __pos;

          for (++__xpos; __xpos-- > 0; )
            if (traits_type::eq(_M_data()[__xpos], __c))
              return __xpos;
        }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      for (; __n && __pos < this->size(); ++__pos)
        {
          const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
          if (__p)
            return __pos;
        }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      size_type __size = this->size();
      if (__size && __n)
        {
          if (--__size > __pos)
            __size = __pos;
          do
            {
              if (traits_type::find(__s, __n, _M_data()[__size]))
                return __size;
            }
          while (__size-- != 0);
        }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      size_t __xpos = __pos;
      for (; __xpos < this->size(); ++__xpos)
        if (!traits_type::find(__s, __n, _M_data()[__xpos]))
          return __xpos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      size_t __xpos = __pos;
      for (; __xpos < this->size(); ++__xpos)
        if (!traits_type::eq(_M_data()[__xpos], __c))
          return __xpos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      size_type __size = this->size();
      if (__size)
        {
          if (--__size > __pos)
            __size = __pos;
          do
            {
              if (!traits_type::find(__s, __n, _M_data()[__size]))
                return __size;
            }
          while (__size--);
        }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
        {
          if (--__size > __pos)
            __size = __pos;
          do
            {
              if (!traits_type::eq(_M_data()[__size], __c))
                return __size;
            }
          while (__size--);
        }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      size_type __size = this->size();
      size_type __osize = __str.size();
      if (__pos > __size)
        __throw_out_of_range("basic_string::compare");

      size_type __rsize= min(__size - __pos, __n);
      size_type __len = min(__rsize, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
        __r = __rsize - __osize;
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
            size_type __pos2, size_type __n2) const
    {
      size_type __size = this->size();
      size_type __osize = __str.size();
      if (__pos1 > __size || __pos2 > __osize)
        __throw_out_of_range("basic_string::compare");

      size_type __rsize = min(__size - __pos1, __n1);
      size_type __rosize = min(__osize - __pos2, __n2);
      size_type __len = min(__rsize, __rosize);
      int __r = traits_type::compare(_M_data() + __pos1,
                                     __str.data() + __pos2, __len);
      if (!__r)
        __r = __rsize - __rosize;
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      size_type __size = this->size();
      int __r = traits_type::compare(_M_data(), __s, __size);
      if (!__r)
        __r = __size - traits_type::length(__s);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      size_type __size = this->size();
      if (__pos > __size)
        __throw_out_of_range("basic_string::compare");

      size_type __osize = traits_type::length(__s);
      size_type __rsize = min(__size - __pos, __n1);
      size_type __len = min(__rsize, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
        __r = __rsize - __osize;
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
            size_type __n2) const
    {
      size_type __size = this->size();
      if (__pos > __size)
        __throw_out_of_range("basic_string::compare");

      size_type __osize = min(traits_type::length(__s), __n2);
      size_type __rsize = min(__size - __pos, __n1);
      size_type __len = min(__rsize, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
        __r = __rsize - __osize;
      return __r;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    _S_string_copy(const basic_string<_CharT, _Traits, _Alloc>& __str,
                   _CharT* __buf, typename _Alloc::size_type __bufsiz)
    {
      typedef typename _Alloc::size_type size_type;
      size_type __strsize = __str.size();
      size_type __bytes = min(__strsize, __bufsiz - 1);
      _Traits::copy(__buf, __str.data(), __bytes);
      __buf[__bytes] = _CharT();
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);

  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);
}
# 58 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/string" 2 3
# 5 "General.h" 2

# 1 "../../AlephOneSrc/monsters.h" 1
# 49 "../../AlephOneSrc/monsters.h"
# 1 "../../AlephOneSrc/map.h" 1
# 56 "../../AlephOneSrc/map.h"
# 1 "../../AlephOneSrc/csmacros.h" 1
# 48 "../../AlephOneSrc/csmacros.h"
template <typename T> void
SWAP(T& a, T& b)
{
        T t = a;
        a = b;
        b = t;
}
# 71 "../../AlephOneSrc/csmacros.h"
static inline int NextPowerOfTwo(int n)
{
        int p = 1;
        while(p < n) {p <<= 1;}
        return p;
}
# 87 "../../AlephOneSrc/csmacros.h"
template<class T> T* GetMemberWithBounds(T* Array, const size_t Index, const size_t Number)
{

        if (!(Index>=0 && Index<Number)) return __null;


        return (Array + Index);
}
# 105 "../../AlephOneSrc/csmacros.h"
template<class T> void obj_copy(T& destination, const T& source)
        {memcpy(&destination, &source, sizeof(T));}

template<class T> void objlist_copy(T* destination, const T* source, size_t num_objects)
        {memcpy(destination, source, num_objects*sizeof(T));}

template<class T> void obj_set(T& object, int value)
        {memset(&object, value, sizeof(T));}

template<class T> void objlist_set(T* object_list, int value, size_t num_objects)
        {memset(object_list, value, num_objects*sizeof(T));}

template<class T> void obj_clear(T& object)
        {obj_set(object, 0);}

template<class T> void objlist_clear(T* object_list, size_t num_objects)
        {objlist_set(object_list, 0, num_objects);}
# 57 "../../AlephOneSrc/map.h" 2
# 1 "../../AlephOneSrc/world.h" 1
# 44 "../../AlephOneSrc/world.h"
# 1 "../../AlephOneSrc/cstypes.h" 1
# 33 "../../AlephOneSrc/cstypes.h"
enum {
        NONE = -1,
        UNONE = 65535
};
# 59 "../../AlephOneSrc/cstypes.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 37 "../../AlephOneSrc/SDL_types.h"
typedef enum {
        SDL_FALSE = 0,
        SDL_TRUE = 1
} SDL_bool;







typedef unsigned char Uint8;
typedef signed char Sint8;
typedef unsigned short Uint16;
typedef signed short Sint16;
typedef unsigned int Uint32;
typedef signed int Sint32;
# 75 "../../AlephOneSrc/SDL_types.h"
typedef unsigned long long Uint64;

typedef long long Sint64;
# 90 "../../AlephOneSrc/SDL_types.h"
typedef int SDL_dummy_uint8[(sizeof(Uint8) == 1) * 2 - 1];
typedef int SDL_dummy_sint8[(sizeof(Sint8) == 1) * 2 - 1];
typedef int SDL_dummy_uint16[(sizeof(Uint16) == 2) * 2 - 1];
typedef int SDL_dummy_sint16[(sizeof(Sint16) == 2) * 2 - 1];
typedef int SDL_dummy_uint32[(sizeof(Uint32) == 4) * 2 - 1];
typedef int SDL_dummy_sint32[(sizeof(Sint32) == 4) * 2 - 1];
typedef int SDL_dummy_uint64[(sizeof(Uint64) == 8) * 2 - 1];
typedef int SDL_dummy_sint64[(sizeof(Sint64) == 8) * 2 - 1];
# 109 "../../AlephOneSrc/SDL_types.h"
typedef enum {
        DUMMY_ENUM_VALUE
} SDL_DUMMY_ENUM;

typedef int SDL_dummy_enum[(sizeof(SDL_DUMMY_ENUM) == sizeof(int)) * 2 - 1];




enum { SDL_PRESSED = 0x01, SDL_RELEASED = 0x00 };
# 60 "../../AlephOneSrc/cstypes.h" 2

typedef Uint8 uint8;
typedef Sint8 int8;
typedef Uint16 uint16;
typedef Sint16 int16;
typedef Uint32 uint32;
typedef Sint32 int32;
typedef time_t TimeType;
# 87 "../../AlephOneSrc/cstypes.h"
typedef int32 _fixed;
# 97 "../../AlephOneSrc/cstypes.h"
const int MEG = 0x100000;
const int KILO = 0x400L;





typedef uint8 byte;
# 45 "../../AlephOneSrc/world.h" 2
# 70 "../../AlephOneSrc/world.h"
typedef int16 angle;
typedef int16 world_distance;
# 95 "../../AlephOneSrc/world.h"
struct world_point2d
{
        world_distance x, y;
};
typedef struct world_point2d world_point2d;

struct world_point3d
{
        world_distance x, y, z;
};
typedef struct world_point3d world_point3d;

struct fixed_point3d
{
        _fixed x, y, z;
};
typedef struct fixed_point3d fixed_point3d;



struct world_vector2d
{
        world_distance i, j;
};
typedef struct world_vector2d world_vector2d;

struct world_vector3d
{
        world_distance i, j, k;
};
typedef struct world_vector3d world_vector3d;

struct fixed_vector3d
{
        _fixed i, j, k;
};
typedef struct fixed_vector3d fixed_vector3d;



struct long_point2d
{
        int32 x, y;
};
typedef struct long_point2d long_point2d;

struct long_point3d
{
        int32 x, y, z;
};
typedef struct long_point3d long_point3d;

struct long_vector2d
{
        int32 i, j;
};
typedef struct long_vector2d long_vector2d;

struct long_vector3d
{
        int32 i, j, k;
};
typedef struct long_vector3d long_vector3d;



struct world_location3d
{
        world_point3d point;
        short polygon_index;

        angle yaw, pitch;

        world_vector3d velocity;
};
typedef struct world_location3d world_location3d;



extern short *cosine_table, *sine_table;




void build_trig_tables(void);



static inline angle normalize_angle(angle theta)
{
        return ((theta)&(angle)(((short)(1<<9))-1));
}

world_point2d *rotate_point2d(world_point2d *point, world_point2d *origin, angle theta);
world_point3d *rotate_point3d(world_point3d *point, world_point3d *origin, angle theta, angle phi);

world_point2d *translate_point2d(world_point2d *point, world_distance distance, angle theta);
world_point3d *translate_point3d(world_point3d *point, world_distance distance, angle theta, angle phi);

world_point2d *transform_point2d(world_point2d *point, world_point2d *origin, angle theta);
world_point3d *transform_point3d(world_point3d *point, world_point3d *origin, angle theta, angle phi);



angle arctangent(int32 x, int32 y);

void set_random_seed(uint16 seed);
uint16 get_random_seed(void);
uint16 global_random(void);

uint16 local_random(void);

world_distance guess_distance2d(world_point2d *p0, world_point2d *p1);
world_distance distance3d(world_point3d *p0, world_point3d *p1);
world_distance distance2d(world_point2d *p0, world_point2d *p1);

int32 isqrt(register uint32 x);





void long_to_overflow_short_2d(long_vector2d& LVec, world_point2d& WVec, uint16& flags);
void overflow_short_to_long_2d(world_point2d& WVec, uint16& flags, long_vector2d& LVec);


world_point2d *transform_overflow_point2d(world_point2d *point, world_point2d *origin, angle theta, uint16 *flags);


static inline void long_to_short_2d(long_vector2d& LVec, world_vector2d&WVec)
{
        WVec.i = static_cast<short>(LVec.i);
        WVec.j = static_cast<short>(LVec.j);
}
static inline void short_to_long_2d(world_vector2d&WVec, long_vector2d& LVec)
{
        LVec.i = WVec.i;
        LVec.j = WVec.j;
}
# 58 "../../AlephOneSrc/map.h" 2
# 1 "../../AlephOneSrc/dynamic_limits.h" 1
# 34 "../../AlephOneSrc/dynamic_limits.h"
# 1 "../../AlephOneSrc/header.h" 1



#pragma warning(disable:4996)

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/vector" 1 3
# 65 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/vector" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 1 3
# 34 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception_defines.h" 1 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 2 3

namespace std
{

  void
  __throw_bad_exception(void);


  void
  __throw_bad_alloc(void);


  void
  __throw_bad_cast(void);

  void
  __throw_bad_typeid(void);


  void
  __throw_logic_error(const char* __s);

  void
  __throw_domain_error(const char* __s);

  void
  __throw_invalid_argument(const char* __s);

  void
  __throw_length_error(const char* __s);

  void
  __throw_out_of_range(const char* __s);

  void
  __throw_runtime_error(const char* __s);

  void
  __throw_range_error(const char* __s);

  void
  __throw_overflow_error(const char* __s);

  void
  __throw_underflow_error(const char* __s);


  void
  __throw_ios_failure(const char* __s);
}
# 67 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/vector" 2 3




# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 1 3
# 65 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 1 3
# 34 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/exception_defines.h" 1 3
# 35 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/functexcept.h" 2 3

namespace std
{

  void
  __throw_bad_exception(void);


  void
  __throw_bad_alloc(void);


  void
  __throw_bad_cast(void);

  void
  __throw_bad_typeid(void);


  void
  __throw_logic_error(const char* __s);

  void
  __throw_domain_error(const char* __s);

  void
  __throw_invalid_argument(const char* __s);

  void
  __throw_length_error(const char* __s);

  void
  __throw_out_of_range(const char* __s);

  void
  __throw_runtime_error(const char* __s);

  void
  __throw_range_error(const char* __s);

  void
  __throw_overflow_error(const char* __s);

  void
  __throw_underflow_error(const char* __s);


  void
  __throw_ios_failure(const char* __s);
}
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 2 3


namespace std
{
# 78 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
template <class _Tp, class _Allocator, bool _IsStatic>
class _Vector_alloc_base {
public:
  typedef typename _Alloc_traits<_Tp, _Allocator>::allocator_type
          allocator_type;
  allocator_type get_allocator() const { return _M_data_allocator; }

  _Vector_alloc_base(const allocator_type& __a)
    : _M_data_allocator(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  {}

protected:
  allocator_type _M_data_allocator;
  _Tp* _M_start;
  _Tp* _M_finish;
  _Tp* _M_end_of_storage;

  _Tp* _M_allocate(size_t __n)
    { return _M_data_allocator.allocate(__n); }
  void _M_deallocate(_Tp* __p, size_t __n)
    { if (__p) _M_data_allocator.deallocate(__p, __n); }
};



template <class _Tp, class _Allocator>
class _Vector_alloc_base<_Tp, _Allocator, true> {
public:
  typedef typename _Alloc_traits<_Tp, _Allocator>::allocator_type
          allocator_type;
  allocator_type get_allocator() const { return allocator_type(); }

  _Vector_alloc_base(const allocator_type&)
    : _M_start(0), _M_finish(0), _M_end_of_storage(0)
  {}

protected:
  _Tp* _M_start;
  _Tp* _M_finish;
  _Tp* _M_end_of_storage;

  typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;
  _Tp* _M_allocate(size_t __n)
    { return _Alloc_type::allocate(__n); }
  void _M_deallocate(_Tp* __p, size_t __n)
    { _Alloc_type::deallocate(__p, __n);}
};

template <class _Tp, class _Alloc>
struct _Vector_base
  : public _Vector_alloc_base<_Tp, _Alloc,
                              _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
{
  typedef _Vector_alloc_base<_Tp, _Alloc,
                             _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
          _Base;
  typedef typename _Base::allocator_type allocator_type;

  _Vector_base(const allocator_type& __a) : _Base(__a) {}
  _Vector_base(size_t __n, const allocator_type& __a) : _Base(__a) {
    _M_start = _M_allocate(__n);
    _M_finish = _M_start;
    _M_end_of_storage = _M_start + __n;
  }

  ~_Vector_base() { _M_deallocate(_M_start, _M_end_of_storage - _M_start); }
};
# 165 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
template <class _Tp, class _Alloc = allocator<_Tp> >
class vector : protected _Vector_base<_Tp, _Alloc>
{

 

private:
  typedef _Vector_base<_Tp, _Alloc> _Base;
  typedef vector<_Tp, _Alloc> vector_type;
public:
  typedef _Tp value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;
  typedef __gnu_cxx::__normal_iterator<const_pointer, vector_type>
                                                        const_iterator;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;

  typedef typename _Base::allocator_type allocator_type;
  allocator_type get_allocator() const { return _Base::get_allocator(); }

  typedef reverse_iterator<const_iterator> const_reverse_iterator;
  typedef reverse_iterator<iterator> reverse_iterator;

protected:
  using _Base::_M_allocate;
  using _Base::_M_deallocate;
  using _Base::_M_start;
  using _Base::_M_finish;
  using _Base::_M_end_of_storage;

protected:
  void _M_insert_aux(iterator __position, const _Tp& __x);
  void _M_insert_aux(iterator __position);

public:




  iterator begin() { return iterator (_M_start); }





  const_iterator begin() const
    { return const_iterator (_M_start); }





  iterator end() { return iterator (_M_finish); }





  const_iterator end() const { return const_iterator (_M_finish); }





  reverse_iterator rbegin()
    { return reverse_iterator(end()); }





  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(end()); }






  reverse_iterator rend()
    { return reverse_iterator(begin()); }






  const_reverse_iterator rend() const
    { return const_reverse_iterator(begin()); }


  size_type size() const
    { return size_type(end() - begin()); }


  size_type max_size() const
    { return size_type(-1) / sizeof(_Tp); }





  size_type capacity() const
    { return size_type(const_iterator(_M_end_of_storage) - begin()); }




  bool empty() const
    { return begin() == end(); }
# 289 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  reference operator[](size_type __n) { return *(begin() + __n); }
# 300 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  const_reference operator[](size_type __n) const { return *(begin() + __n); }

  void _M_range_check(size_type __n) const {
    if (__n >= this->size())
      __throw_out_of_range("vector");
  }
# 316 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  reference at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }
# 328 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  const_reference at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }


  explicit vector(const allocator_type& __a = allocator_type())
    : _Base(__a) {}

  vector(size_type __n, const _Tp& __value,
         const allocator_type& __a = allocator_type())
    : _Base(__n, __a)
    { _M_finish = uninitialized_fill_n(_M_start, __n, __value); }

  explicit vector(size_type __n)
    : _Base(__n, allocator_type())
    { _M_finish = uninitialized_fill_n(_M_start, __n, _Tp()); }

  vector(const vector<_Tp, _Alloc>& __x)
    : _Base(__x.size(), __x.get_allocator())
    { _M_finish = uninitialized_copy(__x.begin(), __x.end(), _M_start); }


  template <class _InputIterator>
    vector(_InputIterator __first, _InputIterator __last,
           const allocator_type& __a = allocator_type())
        : _Base(__a)
        {
      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
      _M_initialize_aux(__first, __last, _Integral());
    }

  template <class _Integer>
    void _M_initialize_aux(_Integer __n, _Integer __value, __true_type)
        {
      _M_start = _M_allocate(__n);
      _M_end_of_storage = _M_start + __n;
      _M_finish = uninitialized_fill_n(_M_start, __n, __value);
    }

  template<class _InputIterator>
    void
        _M_initialize_aux(_InputIterator __first, _InputIterator __last, __false_type)
        {
          typedef typename iterator_traits<_InputIterator>::iterator_category _IterCategory;
          _M_range_initialize(__first, __last, _IterCategory());
        }

  ~vector()
  { _Destroy(_M_start, _M_finish); }

  vector<_Tp, _Alloc>& operator=(const vector<_Tp, _Alloc>& __x);
# 393 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void reserve(size_type __n) {
    if (capacity() < __n) {
      const size_type __old_size = size();
      pointer __tmp = _M_allocate_and_copy(__n, _M_start, _M_finish);
      _Destroy(_M_start, _M_finish);
      _M_deallocate(_M_start, _M_end_of_storage - _M_start);
      _M_start = __tmp;
      _M_finish = __tmp + __old_size;
      _M_end_of_storage = _M_start + __n;
    }
  }
# 421 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }
  void _M_fill_assign(size_type __n, const _Tp& __val);

  template<class _InputIterator>
    void
    assign(_InputIterator __first, _InputIterator __last)
    {
      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
      _M_assign_dispatch(__first, __last, _Integral());
    }

  template<class _Integer>
    void
     _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
     { _M_fill_assign((size_type) __n, (_Tp) __val); }

  template<class _InputIter>
    void
    _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)
    {
      typedef typename iterator_traits<_InputIter>::iterator_category _IterCategory;
      _M_assign_aux(__first, __last, _IterCategory());
    }

  template <class _InputIterator>
    void
    _M_assign_aux(_InputIterator __first, _InputIterator __last,
                  input_iterator_tag);

  template <class _ForwardIterator>
    void
    _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
                  forward_iterator_tag);





  reference front() { return *begin(); }





  const_reference front() const { return *begin(); }





  reference back() { return *(end() - 1); }





  const_reference back() const { return *(end() - 1); }
# 488 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void
  push_back(const _Tp& __x)
  {
    if (_M_finish != _M_end_of_storage) {
      _Construct(_M_finish, __x);
      ++_M_finish;
    }
    else
      _M_insert_aux(end(), __x);
  }
# 519 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void
  swap(vector<_Tp, _Alloc>& __x)
  {
    std::swap(_M_start, __x._M_start);
    std::swap(_M_finish, __x._M_finish);
    std::swap(_M_end_of_storage, __x._M_end_of_storage);
  }
# 538 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  iterator
  insert(iterator __position, const _Tp& __x)
  {
    size_type __n = __position - begin();
    if (_M_finish != _M_end_of_storage && __position == end()) {
      _Construct(_M_finish, __x);
      ++_M_finish;
    }
    else
      _M_insert_aux(iterator(__position), __x);
    return begin() + __n;
  }
# 562 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  iterator
  insert(iterator __position)
  {
    size_type __n = __position - begin();
    if (_M_finish != _M_end_of_storage && __position == end()) {
      _Construct(_M_finish);
      ++_M_finish;
    }
    else
      _M_insert_aux(iterator(__position));
    return begin() + __n;
  }


  template<class _InputIterator>
    void
        insert(iterator __pos, _InputIterator __first, _InputIterator __last)
        {
      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
      _M_insert_dispatch(__pos, __first, __last, _Integral());
    }

  template <class _Integer>
    void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, __true_type)
    { _M_fill_insert(__pos, static_cast<size_type>(__n), static_cast<_Tp>(__val)); }

  template<class _InputIterator>
    void
        _M_insert_dispatch(iterator __pos,
                       _InputIterator __first, _InputIterator __last,
                       __false_type)
        {
          typedef typename iterator_traits<_InputIterator>::iterator_category _IterCategory;
      _M_range_insert(__pos, __first, __last, _IterCategory());
    }
# 612 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void insert (iterator __pos, size_type __n, const _Tp& __x)
    { _M_fill_insert(__pos, __n, __x); }

  void _M_fill_insert (iterator __pos, size_type __n, const _Tp& __x);
# 626 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void pop_back() {
    --_M_finish;
    _Destroy(_M_finish);
  }
# 645 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  iterator erase(iterator __position) {
    if (__position + 1 != end())
      copy(__position + 1, end(), __position);
    --_M_finish;
    _Destroy(_M_finish);
    return __position;
  }
# 668 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  iterator erase(iterator __first, iterator __last) {
    iterator __i(copy(__last, end(), __first));
    _Destroy(__i, end());
    _M_finish = _M_finish - (__last - __first);
    return __first;
  }
# 685 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void resize(size_type __new_size, const _Tp& __x) {
    if (__new_size < size())
      erase(begin() + __new_size, end());
    else
      insert(end(), __new_size - size(), __x);
  }
# 701 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_vector.h" 3
  void resize(size_type __new_size) { resize(__new_size, _Tp()); }







  void clear() { erase(begin(), end()); }

protected:

  template <class _ForwardIterator>
  pointer _M_allocate_and_copy(size_type __n, _ForwardIterator __first,
                                               _ForwardIterator __last)
  {
    pointer __result = _M_allocate(__n);
    try {
      uninitialized_copy(__first, __last, __result);
      return __result;
    }
    catch(...)
      {
        _M_deallocate(__result, __n);
        throw;
      }
  }

  template <class _InputIterator>
  void _M_range_initialize(_InputIterator __first,
                           _InputIterator __last, input_iterator_tag)
  {
    for ( ; __first != __last; ++__first)
      push_back(*__first);
  }


  template <class _ForwardIterator>
  void _M_range_initialize(_ForwardIterator __first,
                           _ForwardIterator __last, forward_iterator_tag)
  {
    size_type __n = distance(__first, __last);
    _M_start = _M_allocate(__n);
    _M_end_of_storage = _M_start + __n;
    _M_finish = uninitialized_copy(__first, __last, _M_start);
  }

  template <class _InputIterator>
  void _M_range_insert(iterator __pos,
                       _InputIterator __first, _InputIterator __last,
                       input_iterator_tag);

  template <class _ForwardIterator>
  void _M_range_insert(iterator __pos,
                       _ForwardIterator __first, _ForwardIterator __last,
                       forward_iterator_tag);
};

template <class _Tp, class _Alloc>
inline bool
operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
{
  return __x.size() == __y.size() &&
         equal(__x.begin(), __x.end(), __y.begin());
}

template <class _Tp, class _Alloc>
inline bool
operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
{
  return lexicographical_compare(__x.begin(), __x.end(),
                                 __y.begin(), __y.end());
}

template <class _Tp, class _Alloc>
inline void swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
{
  __x.swap(__y);
}

template <class _Tp, class _Alloc>
inline bool
operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {
  return !(__x == __y);
}

template <class _Tp, class _Alloc>
inline bool
operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {
  return __y < __x;
}

template <class _Tp, class _Alloc>
inline bool
operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {
  return !(__y < __x);
}

template <class _Tp, class _Alloc>
inline bool
operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {
  return !(__x < __y);
}

template <class _Tp, class _Alloc>
vector<_Tp,_Alloc>&
vector<_Tp,_Alloc>::operator=(const vector<_Tp, _Alloc>& __x)
{
  if (&__x != this) {
    const size_type __xlen = __x.size();
    if (__xlen > capacity()) {
      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());
      _Destroy(_M_start, _M_finish);
      _M_deallocate(_M_start, _M_end_of_storage - _M_start);
      _M_start = __tmp;
      _M_end_of_storage = _M_start + __xlen;
    }
    else if (size() >= __xlen) {
      iterator __i(copy(__x.begin(), __x.end(), begin()));
      _Destroy(__i, end());
    }
    else {
      copy(__x.begin(), __x.begin() + size(), _M_start);
      uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);
    }
    _M_finish = _M_start + __xlen;
  }
  return *this;
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val)
{
  if (__n > capacity()) {
    vector<_Tp, _Alloc> __tmp(__n, __val, get_allocator());
    __tmp.swap(*this);
  }
  else if (__n > size()) {
    fill(begin(), end(), __val);
    _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);
  }
  else
    erase(fill_n(begin(), __n, __val), end());
}

template <class _Tp, class _Alloc> template <class _InputIter>
void vector<_Tp, _Alloc>::_M_assign_aux(_InputIter __first, _InputIter __last,
                                        input_iterator_tag) {
  iterator __cur(begin());
  for ( ; __first != __last && __cur != end(); ++__cur, ++__first)
    *__cur = *__first;
  if (__first == __last)
    erase(__cur, end());
  else
    insert(end(), __first, __last);
}

template <class _Tp, class _Alloc> template <class _ForwardIter>
void
vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,
                                   forward_iterator_tag) {
  size_type __len = distance(__first, __last);

  if (__len > capacity()) {
    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
    _Destroy(_M_start, _M_finish);
    _M_deallocate(_M_start, _M_end_of_storage - _M_start);
    _M_start = __tmp;
    _M_end_of_storage = _M_finish = _M_start + __len;
  }
  else if (size() >= __len) {
    iterator __new_finish(copy(__first, __last, _M_start));
    _Destroy(__new_finish, end());
    _M_finish = __new_finish.base();
  }
  else {
    _ForwardIter __mid = __first;
    advance(__mid, size());
    copy(__first, __mid, _M_start);
    _M_finish = uninitialized_copy(__mid, __last, _M_finish);
  }
}

template <class _Tp, class _Alloc>
void
vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, const _Tp& __x)
{
  if (_M_finish != _M_end_of_storage) {
    _Construct(_M_finish, *(_M_finish - 1));
    ++_M_finish;
    _Tp __x_copy = __x;
    copy_backward(__position, iterator(_M_finish - 2), iterator(_M_finish- 1));
    *__position = __x_copy;
  }
  else {
    const size_type __old_size = size();
    const size_type __len = __old_size != 0 ? 2 * __old_size : 1;
    iterator __new_start(_M_allocate(__len));
    iterator __new_finish(__new_start);
    try {
      __new_finish = uninitialized_copy(iterator(_M_start), __position,
                                        __new_start);
      _Construct(__new_finish.base(), __x);
      ++__new_finish;
      __new_finish = uninitialized_copy(__position, iterator(_M_finish),
                                        __new_finish);
    }
    catch(...)
      {
        _Destroy(__new_start,__new_finish);
        _M_deallocate(__new_start.base(),__len);
        throw;
      }
    _Destroy(begin(), end());
    _M_deallocate(_M_start, _M_end_of_storage - _M_start);
    _M_start = __new_start.base();
    _M_finish = __new_finish.base();
    _M_end_of_storage = __new_start.base() + __len;
  }
}

template <class _Tp, class _Alloc>
void
vector<_Tp, _Alloc>::_M_insert_aux(iterator __position)
{
  if (_M_finish != _M_end_of_storage) {
    _Construct(_M_finish, *(_M_finish - 1));
    ++_M_finish;
    copy_backward(__position, iterator(_M_finish - 2),
                  iterator(_M_finish - 1));
    *__position = _Tp();
  }
  else {
    const size_type __old_size = size();
    const size_type __len = __old_size != 0 ? 2 * __old_size : 1;
    pointer __new_start = _M_allocate(__len);
    pointer __new_finish = __new_start;
    try {
      __new_finish = uninitialized_copy(iterator(_M_start), __position,
                                        __new_start);
      _Construct(__new_finish);
      ++__new_finish;
      __new_finish = uninitialized_copy(__position, iterator(_M_finish),
                                        __new_finish);
    }
    catch(...)
      {
        _Destroy(__new_start,__new_finish);
        _M_deallocate(__new_start,__len);
        throw;
      }
    _Destroy(begin(), end());
    _M_deallocate(_M_start, _M_end_of_storage - _M_start);
    _M_start = __new_start;
    _M_finish = __new_finish;
    _M_end_of_storage = __new_start + __len;
  }
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n,
                                         const _Tp& __x)
{
  if (__n != 0) {
    if (size_type(_M_end_of_storage - _M_finish) >= __n) {
      _Tp __x_copy = __x;
      const size_type __elems_after = end() - __position;
      iterator __old_finish(_M_finish);
      if (__elems_after > __n) {
        uninitialized_copy(_M_finish - __n, _M_finish, _M_finish);
        _M_finish += __n;
        copy_backward(__position, __old_finish - __n, __old_finish);
        fill(__position, __position + __n, __x_copy);
      }
      else {
        uninitialized_fill_n(_M_finish, __n - __elems_after, __x_copy);
        _M_finish += __n - __elems_after;
        uninitialized_copy(__position, __old_finish, _M_finish);
        _M_finish += __elems_after;
        fill(__position, __old_finish, __x_copy);
      }
    }
    else {
      const size_type __old_size = size();
      const size_type __len = __old_size + max(__old_size, __n);
      iterator __new_start(_M_allocate(__len));
      iterator __new_finish(__new_start);
      try {
        __new_finish = uninitialized_copy(begin(), __position, __new_start);
        __new_finish = uninitialized_fill_n(__new_finish, __n, __x);
        __new_finish
          = uninitialized_copy(__position, end(), __new_finish);
      }
      catch(...)
        {
          _Destroy(__new_start,__new_finish);
          _M_deallocate(__new_start.base(),__len);
          throw;
        }
      _Destroy(_M_start, _M_finish);
      _M_deallocate(_M_start, _M_end_of_storage - _M_start);
      _M_start = __new_start.base();
      _M_finish = __new_finish.base();
      _M_end_of_storage = __new_start.base() + __len;
    }
  }
}

template <class _Tp, class _Alloc> template <class _InputIterator>
void
vector<_Tp, _Alloc>::_M_range_insert(iterator __pos,
                                     _InputIterator __first,
                                     _InputIterator __last,
                                     input_iterator_tag)
{
  for ( ; __first != __last; ++__first) {
    __pos = insert(__pos, *__first);
    ++__pos;
  }
}

template <class _Tp, class _Alloc> template <class _ForwardIterator>
void
vector<_Tp, _Alloc>::_M_range_insert(iterator __position,
                                     _ForwardIterator __first,
                                     _ForwardIterator __last,
                                     forward_iterator_tag)
{
  if (__first != __last) {
    size_type __n = distance(__first, __last);
    if (size_type(_M_end_of_storage - _M_finish) >= __n) {
      const size_type __elems_after = end() - __position;
      iterator __old_finish(_M_finish);
      if (__elems_after > __n) {
        uninitialized_copy(_M_finish - __n, _M_finish, _M_finish);
        _M_finish += __n;
        copy_backward(__position, __old_finish - __n, __old_finish);
        copy(__first, __last, __position);
      }
      else {
        _ForwardIterator __mid = __first;
        advance(__mid, __elems_after);
        uninitialized_copy(__mid, __last, _M_finish);
        _M_finish += __n - __elems_after;
        uninitialized_copy(__position, __old_finish, _M_finish);
        _M_finish += __elems_after;
        copy(__first, __mid, __position);
      }
    }
    else {
      const size_type __old_size = size();
      const size_type __len = __old_size + max(__old_size, __n);
      iterator __new_start(_M_allocate(__len));
      iterator __new_finish(__new_start);
      try {
        __new_finish = uninitialized_copy(iterator(_M_start),
                                          __position, __new_start);
        __new_finish = uninitialized_copy(__first, __last, __new_finish);
        __new_finish
          = uninitialized_copy(__position, iterator(_M_finish), __new_finish);
      }
      catch(...)
        {
          _Destroy(__new_start,__new_finish);
          _M_deallocate(__new_start.base(), __len);
          throw;
        }
      _Destroy(_M_start, _M_finish);
      _M_deallocate(_M_start, _M_end_of_storage - _M_start);
      _M_start = __new_start.base();
      _M_finish = __new_finish.base();
      _M_end_of_storage = __new_start.base() + __len;
    }
  }
}

}
# 72 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/vector" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_bvector.h" 1 3
# 64 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_bvector.h" 3
namespace std
{
  typedef unsigned long _Bit_type;
  enum { _M_word_bit = int(8 * sizeof(_Bit_type)) };

struct _Bit_reference {

  _Bit_type * _M_p;
  _Bit_type _M_mask;
  _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) {}

public:
  _Bit_reference() : _M_p(0), _M_mask(0) {}
  operator bool() const { return !!(*_M_p & _M_mask); }
  _Bit_reference& operator=(bool __x)
  {
    if (__x) *_M_p |= _M_mask;
    else *_M_p &= ~_M_mask;
    return *this;
  }
  _Bit_reference& operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }
  bool operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }
  bool operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }
  void flip() { *_M_p ^= _M_mask; }
};

inline void swap(_Bit_reference __x, _Bit_reference __y)
{
  bool __tmp = __x;
  __x = __y;
  __y = __tmp;
}

struct _Bit_iterator_base : public iterator<random_access_iterator_tag, bool>
{
  _Bit_type * _M_p;
  unsigned int _M_offset;

  _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) {}

  void _M_bump_up() {
    if (_M_offset++ == _M_word_bit - 1) {
      _M_offset = 0;
      ++_M_p;
    }
  }
  void _M_bump_down() {
    if (_M_offset-- == 0) {
      _M_offset = _M_word_bit - 1;
      --_M_p;
    }
  }

  void _M_incr(ptrdiff_t __i) {
    difference_type __n = __i + _M_offset;
    _M_p += __n / _M_word_bit;
    __n = __n % _M_word_bit;
    if (__n < 0) {
      _M_offset = (unsigned int) __n + _M_word_bit;
      --_M_p;
    } else
      _M_offset = (unsigned int) __n;
  }

  bool operator==(const _Bit_iterator_base& __i) const {
    return _M_p == __i._M_p && _M_offset == __i._M_offset;
  }
  bool operator<(const _Bit_iterator_base& __i) const {
    return _M_p < __i._M_p || (_M_p == __i._M_p && _M_offset < __i._M_offset);
  }
  bool operator!=(const _Bit_iterator_base& __i) const {
    return !(*this == __i);
  }
  bool operator>(const _Bit_iterator_base& __i) const {
    return __i < *this;
  }
  bool operator<=(const _Bit_iterator_base& __i) const {
    return !(__i < *this);
  }
  bool operator>=(const _Bit_iterator_base& __i) const {
    return !(*this < __i);
  }
};

inline ptrdiff_t
operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return _M_word_bit * (__x._M_p - __y._M_p) + __x._M_offset - __y._M_offset;
}


struct _Bit_iterator : public _Bit_iterator_base
{
  typedef _Bit_reference reference;
  typedef _Bit_reference* pointer;
  typedef _Bit_iterator iterator;

  _Bit_iterator() : _Bit_iterator_base(0, 0) {}
  _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) {}

  reference operator*() const { return reference(_M_p, 1UL << _M_offset); }
  iterator& operator++() {
    _M_bump_up();
    return *this;
  }
  iterator operator++(int) {
    iterator __tmp = *this;
    _M_bump_up();
    return __tmp;
  }
  iterator& operator--() {
    _M_bump_down();
    return *this;
  }
  iterator operator--(int) {
    iterator __tmp = *this;
    _M_bump_down();
    return __tmp;
  }
  iterator& operator+=(difference_type __i) {
    _M_incr(__i);
    return *this;
  }
  iterator& operator-=(difference_type __i) {
    *this += -__i;
    return *this;
  }
  iterator operator+(difference_type __i) const {
    iterator __tmp = *this;
    return __tmp += __i;
  }
  iterator operator-(difference_type __i) const {
    iterator __tmp = *this;
    return __tmp -= __i;
  }

  reference operator[](difference_type __i) { return *(*this + __i); }
};

inline _Bit_iterator
operator+(ptrdiff_t __n, const _Bit_iterator& __x) { return __x + __n; }


struct _Bit_const_iterator : public _Bit_iterator_base
{
  typedef bool reference;
  typedef bool const_reference;
  typedef const bool* pointer;
  typedef _Bit_const_iterator const_iterator;

  _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}
  _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) {}
  _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) {}

  const_reference operator*() const {
    return _Bit_reference(_M_p, 1UL << _M_offset);
  }
  const_iterator& operator++() {
    _M_bump_up();
    return *this;
  }
  const_iterator operator++(int) {
    const_iterator __tmp = *this;
    _M_bump_up();
    return __tmp;
  }
  const_iterator& operator--() {
    _M_bump_down();
    return *this;
  }
  const_iterator operator--(int) {
    const_iterator __tmp = *this;
    _M_bump_down();
    return __tmp;
  }
  const_iterator& operator+=(difference_type __i) {
    _M_incr(__i);
    return *this;
  }
  const_iterator& operator-=(difference_type __i) {
    *this += -__i;
    return *this;
  }
  const_iterator operator+(difference_type __i) const {
    const_iterator __tmp = *this;
    return __tmp += __i;
  }
  const_iterator operator-(difference_type __i) const {
    const_iterator __tmp = *this;
    return __tmp -= __i;
  }
  const_reference operator[](difference_type __i) {
    return *(*this + __i);
  }
};

inline _Bit_const_iterator
operator+(ptrdiff_t __n, const _Bit_const_iterator& __x) { return __x + __n; }






template <class _Allocator, bool __is_static>
class _Bvector_alloc_base {
public:
  typedef typename _Alloc_traits<bool, _Allocator>::allocator_type
          allocator_type;
  allocator_type get_allocator() const { return _M_data_allocator; }

  _Bvector_alloc_base(const allocator_type& __a)
    : _M_data_allocator(__a), _M_start(), _M_finish(), _M_end_of_storage(0) {}

protected:
  _Bit_type * _M_bit_alloc(size_t __n)
    { return _M_data_allocator.allocate((__n + _M_word_bit - 1)/_M_word_bit); }
  void _M_deallocate() {
    if (_M_start._M_p)
      _M_data_allocator.deallocate(_M_start._M_p,
                                   _M_end_of_storage - _M_start._M_p);
  }

  typename _Alloc_traits<_Bit_type, _Allocator>::allocator_type
          _M_data_allocator;
  _Bit_iterator _M_start;
  _Bit_iterator _M_finish;
  _Bit_type * _M_end_of_storage;
};


template <class _Allocator>
class _Bvector_alloc_base<_Allocator, true> {
public:
  typedef typename _Alloc_traits<bool, _Allocator>::allocator_type
          allocator_type;
  allocator_type get_allocator() const { return allocator_type(); }

  _Bvector_alloc_base(const allocator_type&)
    : _M_start(), _M_finish(), _M_end_of_storage(0) {}

protected:
  typedef typename _Alloc_traits<_Bit_type, _Allocator>::_Alloc_type
          _Alloc_type;

  _Bit_type * _M_bit_alloc(size_t __n)
    { return _Alloc_type::allocate((__n + _M_word_bit - 1)/_M_word_bit); }
  void _M_deallocate() {
    if (_M_start._M_p)
      _Alloc_type::deallocate(_M_start._M_p,
                              _M_end_of_storage - _M_start._M_p);
  }

  _Bit_iterator _M_start;
  _Bit_iterator _M_finish;
  _Bit_type * _M_end_of_storage;
};

template <class _Alloc>
class _Bvector_base
  : public _Bvector_alloc_base<_Alloc,
                               _Alloc_traits<bool, _Alloc>::_S_instanceless>
{
  typedef _Bvector_alloc_base<_Alloc,
                              _Alloc_traits<bool, _Alloc>::_S_instanceless>
          _Base;
public:
  typedef typename _Base::allocator_type allocator_type;

  _Bvector_base(const allocator_type& __a) : _Base(__a) {}
  ~_Bvector_base() { _Base::_M_deallocate(); }
};

}



namespace std
{

template <typename _Alloc>
  class vector<bool, _Alloc> : public _Bvector_base<_Alloc>
  {
  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;

    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;

    typedef reverse_iterator<const_iterator> const_reverse_iterator;
    typedef reverse_iterator<iterator> reverse_iterator;

    typedef typename _Bvector_base<_Alloc>::allocator_type allocator_type;
    allocator_type get_allocator() const {
      return _Bvector_base<_Alloc>::get_allocator();
    }

  protected:
    using _Bvector_base<_Alloc>::_M_bit_alloc;
    using _Bvector_base<_Alloc>::_M_deallocate;
    using _Bvector_base<_Alloc>::_M_start;
    using _Bvector_base<_Alloc>::_M_finish;
    using _Bvector_base<_Alloc>::_M_end_of_storage;

  protected:
    void _M_initialize(size_type __n) {
      _Bit_type * __q = _M_bit_alloc(__n);
      _M_end_of_storage = __q + (__n + _M_word_bit - 1)/_M_word_bit;
      _M_start = iterator(__q, 0);
      _M_finish = _M_start + difference_type(__n);
    }
    void _M_insert_aux(iterator __position, bool __x) {
      if (_M_finish._M_p != _M_end_of_storage) {
        copy_backward(__position, _M_finish, _M_finish + 1);
        *__position = __x;
        ++_M_finish;
      }
      else {
        size_type __len = size()
                          ? 2 * size() : static_cast<size_type>(_M_word_bit);
        _Bit_type * __q = _M_bit_alloc(__len);
        iterator __i = copy(begin(), __position, iterator(__q, 0));
        *__i++ = __x;
        _M_finish = copy(__position, end(), __i);
        _M_deallocate();
        _M_end_of_storage = __q + (__len + _M_word_bit - 1)/_M_word_bit;
        _M_start = iterator(__q, 0);
      }
    }

    template <class _InputIterator>
    void _M_initialize_range(_InputIterator __first, _InputIterator __last,
                             input_iterator_tag) {
      _M_start = iterator();
      _M_finish = iterator();
      _M_end_of_storage = 0;
      for ( ; __first != __last; ++__first)
        push_back(*__first);
    }

    template <class _ForwardIterator>
    void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
                             forward_iterator_tag) {
      size_type __n = distance(__first, __last);
      _M_initialize(__n);
      copy(__first, __last, _M_start);
    }

    template <class _InputIterator>
    void _M_insert_range(iterator __pos,
                         _InputIterator __first, _InputIterator __last,
                         input_iterator_tag) {
      for ( ; __first != __last; ++__first) {
        __pos = insert(__pos, *__first);
        ++__pos;
      }
    }

    template <class _ForwardIterator>
    void _M_insert_range(iterator __position,
                         _ForwardIterator __first, _ForwardIterator __last,
                         forward_iterator_tag) {
      if (__first != __last) {
        size_type __n = distance(__first, __last);
        if (capacity() - size() >= __n) {
          copy_backward(__position, end(), _M_finish + difference_type(__n));
          copy(__first, __last, __position);
          _M_finish += difference_type(__n);
        }
        else {
          size_type __len = size() + max(size(), __n);
          _Bit_type * __q = _M_bit_alloc(__len);
          iterator __i = copy(begin(), __position, iterator(__q, 0));
          __i = copy(__first, __last, __i);
          _M_finish = copy(__position, end(), __i);
          _M_deallocate();
          _M_end_of_storage = __q + (__len + _M_word_bit - 1)/_M_word_bit;
          _M_start = iterator(__q, 0);
        }
      }
    }

  public:
    iterator begin() { return _M_start; }
    const_iterator begin() const { return _M_start; }
    iterator end() { return _M_finish; }
    const_iterator end() const { return _M_finish; }

    reverse_iterator rbegin() { return reverse_iterator(end()); }
    const_reverse_iterator rbegin() const {
      return const_reverse_iterator(end());
    }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rend() const {
      return const_reverse_iterator(begin());
    }

    size_type size() const { return size_type(end() - begin()); }
    size_type max_size() const { return size_type(-1); }
    size_type capacity() const {
      return size_type(const_iterator(_M_end_of_storage, 0) - begin());
    }
    bool empty() const { return begin() == end(); }

    reference operator[](size_type __n)
      { return *(begin() + difference_type(__n)); }
    const_reference operator[](size_type __n) const
      { return *(begin() + difference_type(__n)); }

    void _M_range_check(size_type __n) const {
      if (__n >= this->size())
        __throw_out_of_range("vector<bool>");
    }

    reference at(size_type __n)
      { _M_range_check(__n); return (*this)[__n]; }
    const_reference at(size_type __n) const
      { _M_range_check(__n); return (*this)[__n]; }

    explicit vector(const allocator_type& __a = allocator_type())
      : _Bvector_base<_Alloc>(__a) {}

    vector(size_type __n, bool __value,
              const allocator_type& __a = allocator_type())
      : _Bvector_base<_Alloc>(__a)
    {
      _M_initialize(__n);
      fill(_M_start._M_p, _M_end_of_storage, __value ? ~0 : 0);
    }

    explicit vector(size_type __n)
      : _Bvector_base<_Alloc>(allocator_type())
    {
      _M_initialize(__n);
      fill(_M_start._M_p, _M_end_of_storage, 0);
    }

    vector(const vector& __x) : _Bvector_base<_Alloc>(__x.get_allocator()) {
      _M_initialize(__x.size());
      copy(__x.begin(), __x.end(), _M_start);
    }



    template <class _Integer>
    void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {
      _M_initialize(__n);
      fill(_M_start._M_p, _M_end_of_storage, __x ? ~0 : 0);
    }

    template <class _InputIterator>
    void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
                                __false_type) {
      _M_initialize_range(__first, __last, __iterator_category(__first));
    }

    template <class _InputIterator>
    vector(_InputIterator __first, _InputIterator __last,
             const allocator_type& __a = allocator_type())
      : _Bvector_base<_Alloc>(__a)
    {
      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
      _M_initialize_dispatch(__first, __last, _Integral());
    }

    ~vector() { }

    vector& operator=(const vector& __x) {
      if (&__x == this) return *this;
      if (__x.size() > capacity()) {
        _M_deallocate();
        _M_initialize(__x.size());
      }
      copy(__x.begin(), __x.end(), begin());
      _M_finish = begin() + difference_type(__x.size());
      return *this;
    }






    void _M_fill_assign(size_t __n, bool __x) {
      if (__n > size()) {
        fill(_M_start._M_p, _M_end_of_storage, __x ? ~0 : 0);
        insert(end(), __n - size(), __x);
      }
      else {
        erase(begin() + __n, end());
        fill(_M_start._M_p, _M_end_of_storage, __x ? ~0 : 0);
      }
    }

    void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }

    template <class _InputIterator>
    void assign(_InputIterator __first, _InputIterator __last) {
      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
      _M_assign_dispatch(__first, __last, _Integral());
    }

    template <class _Integer>
    void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign((size_t) __n, (bool) __val); }

    template <class _InputIter>
    void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)
      { _M_assign_aux(__first, __last, __iterator_category(__first)); }

    template <class _InputIterator>
    void _M_assign_aux(_InputIterator __first, _InputIterator __last,
                       input_iterator_tag) {
      iterator __cur = begin();
      for ( ; __first != __last && __cur != end(); ++__cur, ++__first)
        *__cur = *__first;
      if (__first == __last)
        erase(__cur, end());
      else
        insert(end(), __first, __last);
    }

    template <class _ForwardIterator>
    void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
                       forward_iterator_tag) {
      size_type __len = distance(__first, __last);
      if (__len < size())
        erase(copy(__first, __last, begin()), end());
      else {
        _ForwardIterator __mid = __first;
        advance(__mid, size());
        copy(__first, __mid, begin());
        insert(end(), __mid, __last);
      }
    }

    void reserve(size_type __n) {
      if (capacity() < __n) {
        _Bit_type * __q = _M_bit_alloc(__n);
        _M_finish = copy(begin(), end(), iterator(__q, 0));
        _M_deallocate();
        _M_start = iterator(__q, 0);
        _M_end_of_storage = __q + (__n + _M_word_bit - 1)/_M_word_bit;
      }
    }

    reference front() { return *begin(); }
    const_reference front() const { return *begin(); }
    reference back() { return *(end() - 1); }
    const_reference back() const { return *(end() - 1); }
    void push_back(bool __x) {
      if (_M_finish._M_p != _M_end_of_storage)
        *_M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }
    void swap(vector<bool, _Alloc>& __x) {
      std::swap(_M_start, __x._M_start);
      std::swap(_M_finish, __x._M_finish);
      std::swap(_M_end_of_storage, __x._M_end_of_storage);
    }
    iterator insert(iterator __position, bool __x = bool()) {
      difference_type __n = __position - begin();
      if (_M_finish._M_p != _M_end_of_storage && __position == end())
        *_M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }



    template <class _Integer>
    void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
                            __true_type) {
      _M_fill_insert(__pos, __n, __x);
    }

    template <class _InputIterator>
    void _M_insert_dispatch(iterator __pos,
                            _InputIterator __first, _InputIterator __last,
                            __false_type) {
      _M_insert_range(__pos, __first, __last, __iterator_category(__first));
    }

    template <class _InputIterator>
    void insert(iterator __position,
                _InputIterator __first, _InputIterator __last) {
      typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
      _M_insert_dispatch(__position, __first, __last, _Integral());
    }

    void _M_fill_insert(iterator __position, size_type __n, bool __x) {
      if (__n == 0) return;
      if (capacity() - size() >= __n) {
        copy_backward(__position, end(), _M_finish + difference_type(__n));
        fill(__position, __position + difference_type(__n), __x);
        _M_finish += difference_type(__n);
      }
      else {
        size_type __len = size() + max(size(), __n);
        _Bit_type * __q = _M_bit_alloc(__len);
        iterator __i = copy(begin(), __position, iterator(__q, 0));
        fill_n(__i, __n, __x);
        _M_finish = copy(__position, end(), __i + difference_type(__n));
        _M_deallocate();
        _M_end_of_storage = __q + (__len + _M_word_bit - 1)/_M_word_bit;
        _M_start = iterator(__q, 0);
      }
    }

    void insert(iterator __position, size_type __n, bool __x) {
      _M_fill_insert(__position, __n, __x);
    }

    void pop_back() { --_M_finish; }
    iterator erase(iterator __position) {
      if (__position + 1 != end())
        copy(__position + 1, end(), __position);
        --_M_finish;
      return __position;
    }
    iterator erase(iterator __first, iterator __last) {
      _M_finish = copy(__last, end(), __first);
      return __first;
    }
    void resize(size_type __new_size, bool __x = bool()) {
      if (__new_size < size())
        erase(begin() + difference_type(__new_size), end());
      else
        insert(end(), __new_size - size(), __x);
    }
    void flip() {
      for (_Bit_type * __p = _M_start._M_p; __p != _M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void clear() { erase(begin(), end()); }
  };


typedef vector<bool, __alloc> bit_vector;

}
# 73 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/vector" 2 3
# 7 "../../AlephOneSrc/header.h" 2



# 1 "../../AlephOneSrc/csstrings.h" 1
# 35 "../../AlephOneSrc/csstrings.h"
#pragma warning(disable:4996)




extern char temporary[256];


extern size_t countstr(
        short resid);

extern unsigned char *getpstr(
        unsigned char *string,
        short resid,
        size_t item);

extern char *getcstr(
        char *string,
        short resid,
        size_t item);


extern const std::vector<std::string> build_stringvector_from_stringset (int resid);


extern unsigned char *pstrcpy(
        unsigned char *dst,
        const unsigned char *src);


extern unsigned char* pstrncpy(
        unsigned char* dest,
        const unsigned char* source,
        size_t total_byte_count);

extern unsigned char* pstrdup(
        const unsigned char* source);

extern unsigned char* a1_c2pstr(
        char* inoutStringBuffer);

extern char* a1_p2cstr(
        unsigned char* inoutStringBuffer);


extern char *csprintf(
        char *buffer,
        const char *format,
        ...) __attribute__((format(printf,2,3)));

extern unsigned char *psprintf(
        unsigned char *buffer,
        const char *format,
        ...) __attribute__((format(printf,2,3)));

extern void dprintf(
        const char *format,
        ...) __attribute__((format(printf,1,2)));

extern void fdprintf(
        const char *format,
        ...) __attribute__((format(printf,1,2)));


extern void copy_string_to_pstring (const std::string &s, unsigned char* dst, int maxlen = 255);
extern void copy_string_to_cstring (const std::string &s, char* dst, int maxlen = 255);

extern const std::string pstring_to_string (const unsigned char* ps);
# 11 "../../AlephOneSrc/header.h" 2
# 1 "../../AlephOneSrc/csalerts.h" 1
# 32 "../../AlephOneSrc/csalerts.h"
typedef int OSErr;
enum {
        infoError,
        fatalError
};
# 54 "../../AlephOneSrc/csalerts.h"
extern void _alephone_assert(
        char *file,
        long line,
        char *what) __attribute__((noreturn));
extern void _alephone_warn(
        char *file,
        long line,
        char *what);
# 12 "../../AlephOneSrc/header.h" 2
# 1 "../../AlephOneSrc/interface.h" 1


# 1 "../../AlephOneSrc/header.h" 1
# 4 "../../AlephOneSrc/interface.h" 2
# 1 "../../AlephOneSrc/shape_descriptors.h" 1
# 39 "../../AlephOneSrc/shape_descriptors.h"
typedef uint16 shape_descriptor;
# 51 "../../AlephOneSrc/shape_descriptors.h"
enum
{
        _collection_interface,
        _collection_weapons_in_hand,
        _collection_juggernaut,
        _collection_tick,
        _collection_rocket,
        _collection_hunter,
        _collection_player,
        _collection_items,
        _collection_trooper,
        _collection_fighter,
        _collection_defender,
        _collection_yeti,
        _collection_civilian,
        _collection_civilian_fusion,
        _collection_enforcer,
        _collection_hummer,
        _collection_compiler,
        _collection_walls1,
        _collection_walls2,
        _collection_walls3,
        _collection_walls4,
        _collection_walls5,
        _collection_scenery1,
        _collection_scenery2,
        _collection_scenery3,
        _collection_scenery4,
        _collection_scenery5,
        _collection_landscape1,
        _collection_landscape2,
        _collection_landscape3,
        _collection_landscape4,
        _collection_cyborg,

        NUMBER_OF_COLLECTIONS
};
# 5 "../../AlephOneSrc/interface.h" 2
# 58 "../../AlephOneSrc/interface.h"
# 1 "../../AlephOneSrc/textures.h" 1
# 27 "../../AlephOneSrc/textures.h"
# 1 "../../AlephOneSrc/cseries.h" 1
# 28 "../../AlephOneSrc/textures.h" 2
# 1 "../../AlephOneSrc/cspixels.h" 1
# 28 "../../AlephOneSrc/cspixels.h"
typedef uint8 pixel8;
typedef uint16 pixel16;
typedef uint32 pixel32;
# 29 "../../AlephOneSrc/textures.h" 2



enum
{
        _COLUMN_ORDER_BIT= 0x8000,
        _TRANSPARENT_BIT= 0x4000
};

struct bitmap_definition
{
        int16 width, height;
        int16 bytes_per_row;

        int16 flags;
        int16 bit_depth;

        int16 unused[8];

        pixel8 *row_addresses[1];
};
const int SIZEOF_bitmap_definition = 30;




pixel8 *calculate_bitmap_origin(struct bitmap_definition *bitmap);


void precalculate_bitmap_row_addresses(struct bitmap_definition *texture);

void map_bytes(byte *buffer, byte *table, long size);
void remap_bitmap(struct bitmap_definition *bitmap, pixel8 *table);
# 59 "../../AlephOneSrc/interface.h" 2

class FileSpecifier;




enum
{
        filenameSHAPES8,
        filenameSHAPES16,
        filenameSOUNDS8,
        filenameSOUNDS16,
        filenamePREFERENCES,
        filenameDEFAULT_MAP,
        filenameDEFAULT_SAVE_GAME,
        filenameMARATHON_NAME,
        filenameMARATHON_RECORDING,
        filenamePHYSICS_MODEL,
        filenameMUSIC,
        filenameIMAGES,
        filenameMOVIE,
        filenameDEFAULT_THEME
};




enum
{
        badProcessor= 0,
        badQuickDraw,
        badSystem,
        badMemory,
        badMonitor,
        badExtraFileLocations,
        badSoundChannels,
        fileError,
        copyHasBeenModified,
        copyHasExpired,
        keyIsUsedForSound,
        keyIsUsedForMapZooming,
        keyIsUsedForScrolling,
        keyIsUsedAlready,
        outOfMemory,
        warningExternalPhysicsModel,
        warningExternalMapsFile,
        badReadMapGameError,
        badReadMapSystemError,
        badWriteMap,
        badSerialNumber,
        duplicateSerialNumbers,
        networkOnlySerialNumber,
        corruptedMap,
        checkpointNotFound,
        pictureNotFound,
        networkNotSupportedForDemo,
        serverQuitInCooperativeNetGame,
        unableToGracefullyChangeLevelsNet,
        cantFindMap,
        cantFindReplayMap,
        notEnoughNetworkMemory,
        luascriptconflict,
        replayVersionTooNew,
        keyScrollWheelDoesntWork
};

enum
{
        _animated1= 1,
        _animated2to8= 2,
        _animated3to4= 3,
        _animated4= 4,
        _animated5to8= 5,
        _animated8= 8,
        _animated3to5= 9,
        _unanimated= 10,
        _animated5= 11
};

enum
{
        _darkening_table
};

enum
{
        _wall_shape,
        _floor_or_ceiling_shape,
        _object_shape,
        _other_shape
};



enum
{
        _standard_keyboard_setup,
        _left_handed_keyboard_setup,
        _powerbook_keyboard_setup,
        NUMBER_OF_KEY_SETUPS,

        _custom_keyboard_setup = NONE
};
# 175 "../../AlephOneSrc/interface.h"
struct shape_information_data
{
        uint16 flags;

        _fixed minimum_light_intensity;

        short unused[5];

        short world_left, world_right, world_top, world_bottom;
        short world_x0, world_y0;
};

struct shape_animation_data
{
        int16 number_of_views;

        int16 frames_per_view, ticks_per_frame;
        int16 key_frame;

        int16 transfer_mode;
        int16 transfer_mode_period;

        int16 first_frame_sound, key_frame_sound, last_frame_sound;

        int16 pixels_to_world;

        int16 loop_frame;

        int16 unused[14];






        int16 low_level_shape_indexes[1];
};



enum {
        _single_player,
        _network_player,
        _demo,
        _replay,
        _replay_from_file,
        NUMBER_OF_PSEUDO_PLAYERS
};

enum {
        _display_intro_screens,
        _display_main_menu,
        _display_chapter_heading,
        _display_prologue,
        _display_epilogue,
        _display_credits,
        _display_intro_screens_for_demo,
        _display_quit_screens,
        NUMBER_OF_SCREENS,
        _game_in_progress= NUMBER_OF_SCREENS,
        _quit_game,
        _close_game,
        _switch_demo,
        _revert_game,
        _change_level,
        _begin_display_of_epilogue,
        _displaying_network_game_dialogs,
        NUMBER_OF_GAME_STATES
};

bool game_window_is_full_screen(void);
void set_change_level_destination(short level_number);
bool networking_available(void);
void free_and_unlock_memory(void);



void initialize_game_state(void);
void force_game_state_change(void);
bool player_controlling_game(void);

void toggle_suppression_of_background_tasks(void);
bool suppress_background_events(void);

void set_game_state(short new_state);
short get_game_state(void);
short get_game_controller(void);
void set_change_level_destination(short level_number);
bool check_level_change(void);
void pause_game(void);
void resume_game(void);
void portable_process_screen_click(short x, short y, bool cheatkeys_down);
void draw_menu_button_for_command(short index);

void idle_game_state(void);
void display_main_menu(void);
void do_menu_item_command(short menu_id, short menu_item, bool cheat);
bool interface_fade_finished(void);
void stop_interface_fade(void);
bool enabled_item(short item);
void paint_window_black(void);


void do_preferences(void);
short get_level_number_from_user(void);
void toggle_menus(bool game_started);
void install_network_microphone(void);
void remove_network_microphone(void);




size_t should_restore_game_networked();

void show_movie(short index);

void exit_networking(void);

void load_main_menu_buffers(short base_id);
bool main_menu_buffers_loaded(void);
void main_menu_bit_depth_changed(short base_id);
void free_main_menu_buffers(void);
void draw_main_menu(void);
void draw_menu_button(short index, bool pressed);
# 308 "../../AlephOneSrc/interface.h"
void *get_global_shading_table(void);

short get_shape_descriptors(short shape_type, shape_descriptor *buffer);



void extended_get_shape_bitmap_and_shading_table(short collection_code, short low_level_shape_index,
        struct bitmap_definition **bitmap, void **shading_tables, short shading_mode);


struct shape_information_data *extended_get_shape_information(short collection_code, short low_level_shape_index);

void get_shape_hotpoint(shape_descriptor texture, short *x0, short *y0);
struct shape_animation_data *get_shape_animation_data(shape_descriptor texture);
void process_collection_sounds(short colleciton_code, void (*process_sound)(short sound_index));



void mark_collection(short collection_code, bool loading);
void strip_collection(short collection_code);
void load_collections(bool with_progress_bar, bool is_opengl);
void load_replacement_collections(bool with_progress_bar, int progress_start, int progress_finish);
void unload_all_collections(void);



bool is_collection_present(short collection_index);

short get_number_of_collection_frames(short collection_index);

short get_number_of_collection_bitmaps(short collection_index);

short get_bitmap_index(short collection_index, short low_level_shape_index);

struct rgb_color_value *get_collection_colors(short collection_index, short clut_number, int &num_colors);


struct low_level_shape_definition *get_low_level_shape_definition(short collection_index, short low_level_shape_index);



void setup_revert_game_info(struct game_data *game_info, struct player_start_data *start, struct entry_point *entry);
bool revert_game(void);
bool load_game(bool use_last_load);
bool save_game(void);
bool save_game_full_auto(bool inOverwriteRecent);
void restart_game(void);



long get_net_map_data_length(void *data);
bool process_net_map_data(void *data);
void *get_map_for_net_transfer(struct entry_point *entry);



void set_keyboard_controller_status(bool active);
bool get_keyboard_controller_status(void);
void pause_keyboard_controller(bool active);
long get_heartbeat_count(void);
void sync_heartbeat_count(void);
void process_action_flags(short player_identifier, const uint32 *action_flags, short count);
void rewind_recording(void);
void stop_recording(void);
void stop_replay(void);
void move_replay(void);
void check_recording_replaying(void);
short find_key_setup(short *keycodes);
void set_default_keys(short *keycodes, short which_default);
void set_keys(short *keycodes);
bool has_recording_file(void);
void increment_replay_speed(void);
void decrement_replay_speed(void);
void reset_recording_and_playback_queues(void);
uint32 parse_keymap(void);



bool handle_preferences_dialog(void);
void handle_load_game(void);
void handle_save_game(void);
bool handle_start_game(void);
bool quit_without_saving(void);


void scroll_inventory(short dy);



enum {
        kNetworkJoinFailedUnjoined,
        kNetworkJoinFailedJoined,
        kNetworkJoinedNewGame,
        kNetworkJoinedResumeGame
};

bool network_gather(bool inResumingGame);
int network_join(void);



void handle_microphone(bool triggered);



void reset_absolute_positioning_device(_fixed yaw, _fixed pitch, _fixed velocity);



void import_definition_structures(void);


bool configure_key_setup(short *keycodes);


void get_default_map_spec(FileSpecifier& File);
void get_default_physics_spec(FileSpecifier& File);
void get_default_sounds_spec(FileSpecifier& File);
void get_default_shapes_spec(FileSpecifier& File);
bool get_default_theme_spec(FileSpecifier& File);


void get_default_file_specs(FileSpecifier* outMapSpec, FileSpecifier* outShapesSpec, FileSpecifier* outSoundsSpec, FileSpecifier* outPhysicsSpec);





bool dont_switch_to_new_weapon();


bool dont_auto_recenter();



void standardize_player_behavior_modifiers();
void restore_custom_player_behavior_modifiers();



bool is_player_behavior_standard();


void ReloadViewContext();
# 13 "../../AlephOneSrc/header.h" 2


# 1 "../../AlephOneSrc/screen_shared.h" 1
# 40 "../../AlephOneSrc/screen_shared.h"
# 1 "../../AlephOneSrc/shell.h" 1
# 42 "../../AlephOneSrc/shell.h"
# 1 "../../AlephOneSrc/SDL.h" 1
# 33 "../../AlephOneSrc/SDL.h"
# 1 "../../AlephOneSrc/SDL_main.h" 1
# 56 "../../AlephOneSrc/SDL_main.h"
extern "C" int SDL_main(int argc, char *argv[]);




# 1 "../../AlephOneSrc/SDL_types.h" 1
# 62 "../../AlephOneSrc/SDL_main.h" 2
# 1 "../../AlephOneSrc/begin_code.h" 1
# 63 "../../AlephOneSrc/SDL_main.h" 2


extern "C" {



extern __attribute__((dllexport)) void SDL_SetModuleHandle(void *hInst);

extern __attribute__((dllexport)) int SDL_RegisterApp(char *name, Uint32 style, void *hInst);


}

# 1 "../../AlephOneSrc/close_code.h" 1
# 77 "../../AlephOneSrc/SDL_main.h" 2
# 34 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 35 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_getenv.h" 1
# 36 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_error.h" 1
# 33 "../../AlephOneSrc/SDL_error.h"
# 1 "../../AlephOneSrc/begin_code.h" 1
# 34 "../../AlephOneSrc/SDL_error.h" 2


extern "C" {



extern __attribute__((dllexport)) void SDL_SetError(const char *fmt, ...);
extern __attribute__((dllexport)) char * SDL_GetError(void);
extern __attribute__((dllexport)) void SDL_ClearError(void);



typedef enum {
        SDL_ENOMEM,
        SDL_EFREAD,
        SDL_EFWRITE,
        SDL_EFSEEK,
        SDL_LASTERROR
} SDL_errorcode;
extern __attribute__((dllexport)) void SDL_Error(SDL_errorcode code);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 61 "../../AlephOneSrc/SDL_error.h" 2
# 37 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_rwops.h" 1
# 37 "../../AlephOneSrc/SDL_rwops.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 38 "../../AlephOneSrc/SDL_rwops.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 40 "../../AlephOneSrc/SDL_rwops.h" 2


extern "C" {




typedef struct SDL_RWops {




        int ( *seek)(struct SDL_RWops *context, int offset, int whence);





        int ( *read)(struct SDL_RWops *context, void *ptr, int size, int maxnum);





        int ( *write)(struct SDL_RWops *context, const void *ptr, int size, int num);


        int ( *close)(struct SDL_RWops *context);

        Uint32 type;
        union {
            struct {
                int autoclose;
                FILE *fp;
            } stdio;
            struct {
                Uint8 *base;
                Uint8 *here;
                Uint8 *stop;
            } mem;
            struct {
                void *data1;
            } unknown;
        } hidden;

} SDL_RWops;




extern __attribute__((dllexport)) SDL_RWops * SDL_RWFromFile(const char *file, const char *mode);

extern __attribute__((dllexport)) SDL_RWops * SDL_RWFromFP(FILE *fp, int autoclose);

extern __attribute__((dllexport)) SDL_RWops * SDL_RWFromMem(void *mem, int size);
extern __attribute__((dllexport)) SDL_RWops * SDL_RWFromConstMem(const void *mem, int size);

extern __attribute__((dllexport)) SDL_RWops * SDL_AllocRW(void);
extern __attribute__((dllexport)) void SDL_FreeRW(SDL_RWops *area);
# 110 "../../AlephOneSrc/SDL_rwops.h"
}

# 1 "../../AlephOneSrc/close_code.h" 1
# 113 "../../AlephOneSrc/SDL_rwops.h" 2
# 38 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_timer.h" 1
# 33 "../../AlephOneSrc/SDL_timer.h"
# 1 "../../AlephOneSrc/SDL_main.h" 1
# 34 "../../AlephOneSrc/SDL_timer.h" 2
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 35 "../../AlephOneSrc/SDL_timer.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 37 "../../AlephOneSrc/SDL_timer.h" 2


extern "C" {
# 51 "../../AlephOneSrc/SDL_timer.h"
extern __attribute__((dllexport)) Uint32 SDL_GetTicks(void);


extern __attribute__((dllexport)) void SDL_Delay(Uint32 ms);


typedef Uint32 ( *SDL_TimerCallback)(Uint32 interval);
# 87 "../../AlephOneSrc/SDL_timer.h"
extern __attribute__((dllexport)) int SDL_SetTimer(Uint32 interval, SDL_TimerCallback callback);
# 99 "../../AlephOneSrc/SDL_timer.h"
typedef Uint32 ( *SDL_NewTimerCallback)(Uint32 interval, void *param);


typedef struct _SDL_TimerID *SDL_TimerID;




extern __attribute__((dllexport)) SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_NewTimerCallback callback, void *param);




extern __attribute__((dllexport)) SDL_bool SDL_RemoveTimer(SDL_TimerID t);



}

# 1 "../../AlephOneSrc/close_code.h" 1
# 119 "../../AlephOneSrc/SDL_timer.h" 2
# 39 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_audio.h" 1
# 35 "../../AlephOneSrc/SDL_audio.h"
# 1 "../../AlephOneSrc/SDL_main.h" 1
# 36 "../../AlephOneSrc/SDL_audio.h" 2
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 37 "../../AlephOneSrc/SDL_audio.h" 2
# 1 "../../AlephOneSrc/SDL_error.h" 1
# 38 "../../AlephOneSrc/SDL_audio.h" 2
# 1 "../../AlephOneSrc/SDL_rwops.h" 1
# 39 "../../AlephOneSrc/SDL_audio.h" 2
# 1 "../../AlephOneSrc/SDL_byteorder.h" 1
# 40 "../../AlephOneSrc/SDL_audio.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 42 "../../AlephOneSrc/SDL_audio.h" 2


extern "C" {



typedef struct SDL_AudioSpec {
        int freq;
        Uint16 format;
        Uint8 channels;
        Uint8 silence;
        Uint16 samples;
        Uint16 padding;
        Uint32 size;






        void ( *callback)(void *userdata, Uint8 *stream, int len);
        void *userdata;
} SDL_AudioSpec;
# 87 "../../AlephOneSrc/SDL_audio.h"
typedef struct SDL_AudioCVT {
        int needed;
        Uint16 src_format;
        Uint16 dst_format;
        double rate_incr;
        Uint8 *buf;
        int len;
        int len_cvt;
        int len_mult;
        double len_ratio;
        void ( *filters[10])(struct SDL_AudioCVT *cvt, Uint16 format);
        int filter_index;
} SDL_AudioCVT;
# 108 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) int SDL_AudioInit(const char *driver_name);
extern __attribute__((dllexport)) void SDL_AudioQuit(void);





extern __attribute__((dllexport)) char * SDL_AudioDriverName(char *namebuf, int maxlen);
# 158 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) int SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained);




typedef enum {
        SDL_AUDIO_STOPPED = 0,
        SDL_AUDIO_PLAYING,
        SDL_AUDIO_PAUSED
} SDL_audiostatus;
extern __attribute__((dllexport)) SDL_audiostatus SDL_GetAudioStatus(void);
# 177 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) void SDL_PauseAudio(int pause_on);
# 196 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) SDL_AudioSpec * SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
# 205 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) void SDL_FreeWAV(Uint8 *audio_buf);
# 214 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) int SDL_BuildAudioCVT(SDL_AudioCVT *cvt,
                Uint16 src_format, Uint8 src_channels, int src_rate,
                Uint16 dst_format, Uint8 dst_channels, int dst_rate);
# 226 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) int SDL_ConvertAudio(SDL_AudioCVT *cvt);
# 236 "../../AlephOneSrc/SDL_audio.h"
extern __attribute__((dllexport)) void SDL_MixAudio(Uint8 *dst, const Uint8 *src, Uint32 len, int volume);







extern __attribute__((dllexport)) void SDL_LockAudio(void);
extern __attribute__((dllexport)) void SDL_UnlockAudio(void);




extern __attribute__((dllexport)) void SDL_CloseAudio(void);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 258 "../../AlephOneSrc/SDL_audio.h" 2
# 40 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_cdrom.h" 1
# 33 "../../AlephOneSrc/SDL_cdrom.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 34 "../../AlephOneSrc/SDL_cdrom.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 36 "../../AlephOneSrc/SDL_cdrom.h" 2


extern "C" {
# 54 "../../AlephOneSrc/SDL_cdrom.h"
typedef enum {
        CD_TRAYEMPTY,
        CD_STOPPED,
        CD_PLAYING,
        CD_PAUSED,
        CD_ERROR = -1
} CDstatus;




typedef struct SDL_CDtrack {
        Uint8 id;
        Uint8 type;
        Uint16 unused;
        Uint32 length;
        Uint32 offset;
} SDL_CDtrack;


typedef struct SDL_CD {
        int id;
        CDstatus status;


        int numtracks;
        int cur_track;
        int cur_frame;
        SDL_CDtrack track[99 +1];
} SDL_CD;
# 102 "../../AlephOneSrc/SDL_cdrom.h"
extern __attribute__((dllexport)) int SDL_CDNumDrives(void);







extern __attribute__((dllexport)) const char * SDL_CDName(int drive);







extern __attribute__((dllexport)) SDL_CD * SDL_CDOpen(int drive);





extern __attribute__((dllexport)) CDstatus SDL_CDStatus(SDL_CD *cdrom);
# 145 "../../AlephOneSrc/SDL_cdrom.h"
extern __attribute__((dllexport)) int SDL_CDPlayTracks(SDL_CD *cdrom,
                int start_track, int start_frame, int ntracks, int nframes);




extern __attribute__((dllexport)) int SDL_CDPlay(SDL_CD *cdrom, int start, int length);


extern __attribute__((dllexport)) int SDL_CDPause(SDL_CD *cdrom);


extern __attribute__((dllexport)) int SDL_CDResume(SDL_CD *cdrom);


extern __attribute__((dllexport)) int SDL_CDStop(SDL_CD *cdrom);


extern __attribute__((dllexport)) int SDL_CDEject(SDL_CD *cdrom);


extern __attribute__((dllexport)) void SDL_CDClose(SDL_CD *cdrom);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 174 "../../AlephOneSrc/SDL_cdrom.h" 2
# 41 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_joystick.h" 1
# 33 "../../AlephOneSrc/SDL_joystick.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 34 "../../AlephOneSrc/SDL_joystick.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 36 "../../AlephOneSrc/SDL_joystick.h" 2


extern "C" {
# 47 "../../AlephOneSrc/SDL_joystick.h"
struct _SDL_Joystick;
typedef struct _SDL_Joystick SDL_Joystick;






extern __attribute__((dllexport)) int SDL_NumJoysticks(void);






extern __attribute__((dllexport)) const char * SDL_JoystickName(int device_index);
# 71 "../../AlephOneSrc/SDL_joystick.h"
extern __attribute__((dllexport)) SDL_Joystick * SDL_JoystickOpen(int device_index);




extern __attribute__((dllexport)) int SDL_JoystickOpened(int device_index);




extern __attribute__((dllexport)) int SDL_JoystickIndex(SDL_Joystick *joystick);




extern __attribute__((dllexport)) int SDL_JoystickNumAxes(SDL_Joystick *joystick);






extern __attribute__((dllexport)) int SDL_JoystickNumBalls(SDL_Joystick *joystick);




extern __attribute__((dllexport)) int SDL_JoystickNumHats(SDL_Joystick *joystick);




extern __attribute__((dllexport)) int SDL_JoystickNumButtons(SDL_Joystick *joystick);






extern __attribute__((dllexport)) void SDL_JoystickUpdate(void);
# 119 "../../AlephOneSrc/SDL_joystick.h"
extern __attribute__((dllexport)) int SDL_JoystickEventState(int state);






extern __attribute__((dllexport)) Sint16 SDL_JoystickGetAxis(SDL_Joystick *joystick, int axis);
# 144 "../../AlephOneSrc/SDL_joystick.h"
extern __attribute__((dllexport)) Uint8 SDL_JoystickGetHat(SDL_Joystick *joystick, int hat);






extern __attribute__((dllexport)) int SDL_JoystickGetBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);





extern __attribute__((dllexport)) Uint8 SDL_JoystickGetButton(SDL_Joystick *joystick, int button);




extern __attribute__((dllexport)) void SDL_JoystickClose(SDL_Joystick *joystick);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 170 "../../AlephOneSrc/SDL_joystick.h" 2
# 42 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_events.h" 1
# 33 "../../AlephOneSrc/SDL_events.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 34 "../../AlephOneSrc/SDL_events.h" 2
# 1 "../../AlephOneSrc/SDL_active.h" 1
# 33 "../../AlephOneSrc/SDL_active.h"
# 1 "../../AlephOneSrc/begin_code.h" 1
# 34 "../../AlephOneSrc/SDL_active.h" 2


extern "C" {
# 51 "../../AlephOneSrc/SDL_active.h"
extern __attribute__((dllexport)) Uint8 SDL_GetAppState(void);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 59 "../../AlephOneSrc/SDL_active.h" 2
# 35 "../../AlephOneSrc/SDL_events.h" 2
# 1 "../../AlephOneSrc/SDL_keyboard.h" 1
# 33 "../../AlephOneSrc/SDL_keyboard.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 34 "../../AlephOneSrc/SDL_keyboard.h" 2
# 1 "../../AlephOneSrc/SDL_keysym.h" 1
# 37 "../../AlephOneSrc/SDL_keysym.h"
typedef enum {

        SDLK_UNKNOWN = 0,
        SDLK_FIRST = 0,
        SDLK_BACKSPACE = 8,
        SDLK_TAB = 9,
        SDLK_CLEAR = 12,
        SDLK_RETURN = 13,
        SDLK_PAUSE = 19,
        SDLK_ESCAPE = 27,
        SDLK_SPACE = 32,
        SDLK_EXCLAIM = 33,
        SDLK_QUOTEDBL = 34,
        SDLK_HASH = 35,
        SDLK_DOLLAR = 36,
        SDLK_AMPERSAND = 38,
        SDLK_QUOTE = 39,
        SDLK_LEFTPAREN = 40,
        SDLK_RIGHTPAREN = 41,
        SDLK_ASTERISK = 42,
        SDLK_PLUS = 43,
        SDLK_COMMA = 44,
        SDLK_MINUS = 45,
        SDLK_PERIOD = 46,
        SDLK_SLASH = 47,
        SDLK_0 = 48,
        SDLK_1 = 49,
        SDLK_2 = 50,
        SDLK_3 = 51,
        SDLK_4 = 52,
        SDLK_5 = 53,
        SDLK_6 = 54,
        SDLK_7 = 55,
        SDLK_8 = 56,
        SDLK_9 = 57,
        SDLK_COLON = 58,
        SDLK_SEMICOLON = 59,
        SDLK_LESS = 60,
        SDLK_EQUALS = 61,
        SDLK_GREATER = 62,
        SDLK_QUESTION = 63,
        SDLK_AT = 64,



        SDLK_LEFTBRACKET = 91,
        SDLK_BACKSLASH = 92,
        SDLK_RIGHTBRACKET = 93,
        SDLK_CARET = 94,
        SDLK_UNDERSCORE = 95,
        SDLK_BACKQUOTE = 96,
        SDLK_a = 97,
        SDLK_b = 98,
        SDLK_c = 99,
        SDLK_d = 100,
        SDLK_e = 101,
        SDLK_f = 102,
        SDLK_g = 103,
        SDLK_h = 104,
        SDLK_i = 105,
        SDLK_j = 106,
        SDLK_k = 107,
        SDLK_l = 108,
        SDLK_m = 109,
        SDLK_n = 110,
        SDLK_o = 111,
        SDLK_p = 112,
        SDLK_q = 113,
        SDLK_r = 114,
        SDLK_s = 115,
        SDLK_t = 116,
        SDLK_u = 117,
        SDLK_v = 118,
        SDLK_w = 119,
        SDLK_x = 120,
        SDLK_y = 121,
        SDLK_z = 122,
        SDLK_DELETE = 127,



        SDLK_WORLD_0 = 160,
        SDLK_WORLD_1 = 161,
        SDLK_WORLD_2 = 162,
        SDLK_WORLD_3 = 163,
        SDLK_WORLD_4 = 164,
        SDLK_WORLD_5 = 165,
        SDLK_WORLD_6 = 166,
        SDLK_WORLD_7 = 167,
        SDLK_WORLD_8 = 168,
        SDLK_WORLD_9 = 169,
        SDLK_WORLD_10 = 170,
        SDLK_WORLD_11 = 171,
        SDLK_WORLD_12 = 172,
        SDLK_WORLD_13 = 173,
        SDLK_WORLD_14 = 174,
        SDLK_WORLD_15 = 175,
        SDLK_WORLD_16 = 176,
        SDLK_WORLD_17 = 177,
        SDLK_WORLD_18 = 178,
        SDLK_WORLD_19 = 179,
        SDLK_WORLD_20 = 180,
        SDLK_WORLD_21 = 181,
        SDLK_WORLD_22 = 182,
        SDLK_WORLD_23 = 183,
        SDLK_WORLD_24 = 184,
        SDLK_WORLD_25 = 185,
        SDLK_WORLD_26 = 186,
        SDLK_WORLD_27 = 187,
        SDLK_WORLD_28 = 188,
        SDLK_WORLD_29 = 189,
        SDLK_WORLD_30 = 190,
        SDLK_WORLD_31 = 191,
        SDLK_WORLD_32 = 192,
        SDLK_WORLD_33 = 193,
        SDLK_WORLD_34 = 194,
        SDLK_WORLD_35 = 195,
        SDLK_WORLD_36 = 196,
        SDLK_WORLD_37 = 197,
        SDLK_WORLD_38 = 198,
        SDLK_WORLD_39 = 199,
        SDLK_WORLD_40 = 200,
        SDLK_WORLD_41 = 201,
        SDLK_WORLD_42 = 202,
        SDLK_WORLD_43 = 203,
        SDLK_WORLD_44 = 204,
        SDLK_WORLD_45 = 205,
        SDLK_WORLD_46 = 206,
        SDLK_WORLD_47 = 207,
        SDLK_WORLD_48 = 208,
        SDLK_WORLD_49 = 209,
        SDLK_WORLD_50 = 210,
        SDLK_WORLD_51 = 211,
        SDLK_WORLD_52 = 212,
        SDLK_WORLD_53 = 213,
        SDLK_WORLD_54 = 214,
        SDLK_WORLD_55 = 215,
        SDLK_WORLD_56 = 216,
        SDLK_WORLD_57 = 217,
        SDLK_WORLD_58 = 218,
        SDLK_WORLD_59 = 219,
        SDLK_WORLD_60 = 220,
        SDLK_WORLD_61 = 221,
        SDLK_WORLD_62 = 222,
        SDLK_WORLD_63 = 223,
        SDLK_WORLD_64 = 224,
        SDLK_WORLD_65 = 225,
        SDLK_WORLD_66 = 226,
        SDLK_WORLD_67 = 227,
        SDLK_WORLD_68 = 228,
        SDLK_WORLD_69 = 229,
        SDLK_WORLD_70 = 230,
        SDLK_WORLD_71 = 231,
        SDLK_WORLD_72 = 232,
        SDLK_WORLD_73 = 233,
        SDLK_WORLD_74 = 234,
        SDLK_WORLD_75 = 235,
        SDLK_WORLD_76 = 236,
        SDLK_WORLD_77 = 237,
        SDLK_WORLD_78 = 238,
        SDLK_WORLD_79 = 239,
        SDLK_WORLD_80 = 240,
        SDLK_WORLD_81 = 241,
        SDLK_WORLD_82 = 242,
        SDLK_WORLD_83 = 243,
        SDLK_WORLD_84 = 244,
        SDLK_WORLD_85 = 245,
        SDLK_WORLD_86 = 246,
        SDLK_WORLD_87 = 247,
        SDLK_WORLD_88 = 248,
        SDLK_WORLD_89 = 249,
        SDLK_WORLD_90 = 250,
        SDLK_WORLD_91 = 251,
        SDLK_WORLD_92 = 252,
        SDLK_WORLD_93 = 253,
        SDLK_WORLD_94 = 254,
        SDLK_WORLD_95 = 255,


        SDLK_KP0 = 256,
        SDLK_KP1 = 257,
        SDLK_KP2 = 258,
        SDLK_KP3 = 259,
        SDLK_KP4 = 260,
        SDLK_KP5 = 261,
        SDLK_KP6 = 262,
        SDLK_KP7 = 263,
        SDLK_KP8 = 264,
        SDLK_KP9 = 265,
        SDLK_KP_PERIOD = 266,
        SDLK_KP_DIVIDE = 267,
        SDLK_KP_MULTIPLY = 268,
        SDLK_KP_MINUS = 269,
        SDLK_KP_PLUS = 270,
        SDLK_KP_ENTER = 271,
        SDLK_KP_EQUALS = 272,


        SDLK_UP = 273,
        SDLK_DOWN = 274,
        SDLK_RIGHT = 275,
        SDLK_LEFT = 276,
        SDLK_INSERT = 277,
        SDLK_HOME = 278,
        SDLK_END = 279,
        SDLK_PAGEUP = 280,
        SDLK_PAGEDOWN = 281,


        SDLK_F1 = 282,
        SDLK_F2 = 283,
        SDLK_F3 = 284,
        SDLK_F4 = 285,
        SDLK_F5 = 286,
        SDLK_F6 = 287,
        SDLK_F7 = 288,
        SDLK_F8 = 289,
        SDLK_F9 = 290,
        SDLK_F10 = 291,
        SDLK_F11 = 292,
        SDLK_F12 = 293,
        SDLK_F13 = 294,
        SDLK_F14 = 295,
        SDLK_F15 = 296,


        SDLK_NUMLOCK = 300,
        SDLK_CAPSLOCK = 301,
        SDLK_SCROLLOCK = 302,
        SDLK_RSHIFT = 303,
        SDLK_LSHIFT = 304,
        SDLK_RCTRL = 305,
        SDLK_LCTRL = 306,
        SDLK_RALT = 307,
        SDLK_LALT = 308,
        SDLK_RMETA = 309,
        SDLK_LMETA = 310,
        SDLK_LSUPER = 311,
        SDLK_RSUPER = 312,
        SDLK_MODE = 313,
        SDLK_COMPOSE = 314,


        SDLK_HELP = 315,
        SDLK_PRINT = 316,
        SDLK_SYSREQ = 317,
        SDLK_BREAK = 318,
        SDLK_MENU = 319,
        SDLK_POWER = 320,
        SDLK_EURO = 321,
        SDLK_UNDO = 322,



        SDLK_LAST
} SDLKey;


typedef enum {
        KMOD_NONE = 0x0000,
        KMOD_LSHIFT= 0x0001,
        KMOD_RSHIFT= 0x0002,
        KMOD_LCTRL = 0x0040,
        KMOD_RCTRL = 0x0080,
        KMOD_LALT = 0x0100,
        KMOD_RALT = 0x0200,
        KMOD_LMETA = 0x0400,
        KMOD_RMETA = 0x0800,
        KMOD_NUM = 0x1000,
        KMOD_CAPS = 0x2000,
        KMOD_MODE = 0x4000,
        KMOD_RESERVED = 0x8000
} SDLMod;
# 35 "../../AlephOneSrc/SDL_keyboard.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 37 "../../AlephOneSrc/SDL_keyboard.h" 2


extern "C" {
# 58 "../../AlephOneSrc/SDL_keyboard.h"
typedef struct SDL_keysym {
        Uint8 scancode;
        SDLKey sym;
        SDLMod mod;
        Uint16 unicode;
} SDL_keysym;
# 77 "../../AlephOneSrc/SDL_keyboard.h"
extern __attribute__((dllexport)) int SDL_EnableUNICODE(int enable);
# 90 "../../AlephOneSrc/SDL_keyboard.h"
extern __attribute__((dllexport)) int SDL_EnableKeyRepeat(int delay, int interval);
# 99 "../../AlephOneSrc/SDL_keyboard.h"
extern __attribute__((dllexport)) Uint8 * SDL_GetKeyState(int *numkeys);




extern __attribute__((dllexport)) SDLMod SDL_GetModState(void);





extern __attribute__((dllexport)) void SDL_SetModState(SDLMod modstate);




extern __attribute__((dllexport)) char * SDL_GetKeyName(SDLKey key);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 123 "../../AlephOneSrc/SDL_keyboard.h" 2
# 36 "../../AlephOneSrc/SDL_events.h" 2
# 1 "../../AlephOneSrc/SDL_mouse.h" 1
# 33 "../../AlephOneSrc/SDL_mouse.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 34 "../../AlephOneSrc/SDL_mouse.h" 2
# 1 "../../AlephOneSrc/SDL_video.h" 1
# 35 "../../AlephOneSrc/SDL_video.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 36 "../../AlephOneSrc/SDL_video.h" 2
# 1 "../../AlephOneSrc/SDL_mutex.h" 1
# 36 "../../AlephOneSrc/SDL_mutex.h"
# 1 "../../AlephOneSrc/SDL_main.h" 1
# 37 "../../AlephOneSrc/SDL_mutex.h" 2
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 38 "../../AlephOneSrc/SDL_mutex.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 40 "../../AlephOneSrc/SDL_mutex.h" 2


extern "C" {
# 59 "../../AlephOneSrc/SDL_mutex.h"
struct SDL_mutex;
typedef struct SDL_mutex SDL_mutex;


extern __attribute__((dllexport)) SDL_mutex * SDL_CreateMutex(void);



extern __attribute__((dllexport)) int SDL_mutexP(SDL_mutex *mutex);






extern __attribute__((dllexport)) int SDL_mutexV(SDL_mutex *mutex);


extern __attribute__((dllexport)) void SDL_DestroyMutex(SDL_mutex *mutex);







struct SDL_semaphore;
typedef struct SDL_semaphore SDL_sem;


extern __attribute__((dllexport)) SDL_sem * SDL_CreateSemaphore(Uint32 initial_value);


extern __attribute__((dllexport)) void SDL_DestroySemaphore(SDL_sem *sem);





extern __attribute__((dllexport)) int SDL_SemWait(SDL_sem *sem);




extern __attribute__((dllexport)) int SDL_SemTryWait(SDL_sem *sem);







extern __attribute__((dllexport)) int SDL_SemWaitTimeout(SDL_sem *sem, Uint32 ms);




extern __attribute__((dllexport)) int SDL_SemPost(SDL_sem *sem);


extern __attribute__((dllexport)) Uint32 SDL_SemValue(SDL_sem *sem);







struct SDL_cond;
typedef struct SDL_cond SDL_cond;


extern __attribute__((dllexport)) SDL_cond * SDL_CreateCond(void);


extern __attribute__((dllexport)) void SDL_DestroyCond(SDL_cond *cond);




extern __attribute__((dllexport)) int SDL_CondSignal(SDL_cond *cond);




extern __attribute__((dllexport)) int SDL_CondBroadcast(SDL_cond *cond);





extern __attribute__((dllexport)) int SDL_CondWait(SDL_cond *cond, SDL_mutex *mut);







extern __attribute__((dllexport)) int SDL_CondWaitTimeout(SDL_cond *cond, SDL_mutex *mutex, Uint32 ms);



}

# 1 "../../AlephOneSrc/close_code.h" 1
# 165 "../../AlephOneSrc/SDL_mutex.h" 2
# 37 "../../AlephOneSrc/SDL_video.h" 2
# 1 "../../AlephOneSrc/SDL_rwops.h" 1
# 38 "../../AlephOneSrc/SDL_video.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 40 "../../AlephOneSrc/SDL_video.h" 2


extern "C" {







typedef struct SDL_Rect {
        Sint16 x, y;
        Uint16 w, h;
} SDL_Rect;

typedef struct SDL_Color {
        Uint8 r;
        Uint8 g;
        Uint8 b;
        Uint8 unused;
} SDL_Color;


typedef struct SDL_Palette {
        int ncolors;
        SDL_Color *colors;
} SDL_Palette;


typedef struct SDL_PixelFormat {
        SDL_Palette *palette;
        Uint8 BitsPerPixel;
        Uint8 BytesPerPixel;
        Uint8 Rloss;
        Uint8 Gloss;
        Uint8 Bloss;
        Uint8 Aloss;
        Uint8 Rshift;
        Uint8 Gshift;
        Uint8 Bshift;
        Uint8 Ashift;
        Uint32 Rmask;
        Uint32 Gmask;
        Uint32 Bmask;
        Uint32 Amask;


        Uint32 colorkey;

        Uint8 alpha;
} SDL_PixelFormat;




typedef struct SDL_Surface {
        Uint32 flags;
        SDL_PixelFormat *format;
        int w, h;
        Uint16 pitch;
        void *pixels;
        int offset;


        struct private_hwdata *hwdata;


        SDL_Rect clip_rect;
        Uint32 unused1;


        Uint32 locked;


        struct SDL_BlitMap *map;


        unsigned int format_version;


        int refcount;
} SDL_Surface;
# 151 "../../AlephOneSrc/SDL_video.h"
typedef int (*SDL_blit)(struct SDL_Surface *src, SDL_Rect *srcrect,
                        struct SDL_Surface *dst, SDL_Rect *dstrect);



typedef struct SDL_VideoInfo {
        Uint32 hw_available :1;
        Uint32 wm_available :1;
        Uint32 UnusedBits1 :6;
        Uint32 UnusedBits2 :1;
        Uint32 blit_hw :1;
        Uint32 blit_hw_CC :1;
        Uint32 blit_hw_A :1;
        Uint32 blit_sw :1;
        Uint32 blit_sw_CC :1;
        Uint32 blit_sw_A :1;
        Uint32 blit_fill :1;
        Uint32 UnusedBits3 :16;
        Uint32 video_mem;
        SDL_PixelFormat *vfmt;
} SDL_VideoInfo;
# 188 "../../AlephOneSrc/SDL_video.h"
typedef struct SDL_Overlay {
        Uint32 format;
        int w, h;
        int planes;
        Uint16 *pitches;
        Uint8 **pixels;


        struct private_yuvhwfuncs *hwfuncs;
        struct private_yuvhwdata *hwdata;


        Uint32 hw_overlay :1;
        Uint32 UnusedBits :31;
} SDL_Overlay;



typedef enum {
    SDL_GL_RED_SIZE,
    SDL_GL_GREEN_SIZE,
    SDL_GL_BLUE_SIZE,
    SDL_GL_ALPHA_SIZE,
    SDL_GL_BUFFER_SIZE,
    SDL_GL_DOUBLEBUFFER,
    SDL_GL_DEPTH_SIZE,
    SDL_GL_STENCIL_SIZE,
    SDL_GL_ACCUM_RED_SIZE,
    SDL_GL_ACCUM_GREEN_SIZE,
    SDL_GL_ACCUM_BLUE_SIZE,
    SDL_GL_ACCUM_ALPHA_SIZE,
    SDL_GL_STEREO,
    SDL_GL_MULTISAMPLEBUFFERS,
    SDL_GL_MULTISAMPLESAMPLES
} SDL_GLattr;
# 243 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_VideoInit(const char *driver_name, Uint32 flags);
extern __attribute__((dllexport)) void SDL_VideoQuit(void);





extern __attribute__((dllexport)) char * SDL_VideoDriverName(char *namebuf, int maxlen);







extern __attribute__((dllexport)) SDL_Surface * SDL_GetVideoSurface(void);







extern __attribute__((dllexport)) const SDL_VideoInfo * SDL_GetVideoInfo(void);
# 279 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_VideoModeOK(int width, int height, int bpp, Uint32 flags);
# 290 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Rect ** SDL_ListModes(SDL_PixelFormat *format, Uint32 flags);
# 350 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Surface * SDL_SetVideoMode
                        (int width, int height, int bpp, Uint32 flags);







extern __attribute__((dllexport)) void SDL_UpdateRects
                (SDL_Surface *screen, int numrects, SDL_Rect *rects);
extern __attribute__((dllexport)) void SDL_UpdateRect
                (SDL_Surface *screen, Sint32 x, Sint32 y, Uint32 w, Uint32 h);
# 374 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_Flip(SDL_Surface *screen);
# 384 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SetGamma(float red, float green, float blue);
# 398 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SetGammaRamp(const Uint16 *red, const Uint16 *green, const Uint16 *blue);
# 409 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_GetGammaRamp(Uint16 *red, Uint16 *green, Uint16 *blue);
# 426 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SetColors(SDL_Surface *surface,
                        SDL_Color *colors, int firstcolor, int ncolors);
# 445 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SetPalette(SDL_Surface *surface, int flags,
                                   SDL_Color *colors, int firstcolor,
                                   int ncolors);




extern __attribute__((dllexport)) Uint32 SDL_MapRGB
                        (SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b);




extern __attribute__((dllexport)) Uint32 SDL_MapRGBA(SDL_PixelFormat *format,
                                   Uint8 r, Uint8 g, Uint8 b, Uint8 a);




extern __attribute__((dllexport)) void SDL_GetRGB(Uint32 pixel, SDL_PixelFormat *fmt,
                                Uint8 *r, Uint8 *g, Uint8 *b);




extern __attribute__((dllexport)) void SDL_GetRGBA(Uint32 pixel, SDL_PixelFormat *fmt,
                                 Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
# 508 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Surface * SDL_CreateRGBSurface
                        (Uint32 flags, int width, int height, int depth,
                        Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
extern __attribute__((dllexport)) SDL_Surface * SDL_CreateRGBSurfaceFrom(void *pixels,
                        int width, int height, int depth, int pitch,
                        Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
extern __attribute__((dllexport)) void SDL_FreeSurface(SDL_Surface *surface);
# 534 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_LockSurface(SDL_Surface *surface);
extern __attribute__((dllexport)) void SDL_UnlockSurface(SDL_Surface *surface);







extern __attribute__((dllexport)) SDL_Surface * SDL_LoadBMP_RW(SDL_RWops *src, int freesrc);
# 553 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SaveBMP_RW
                (SDL_Surface *surface, SDL_RWops *dst, int freedst);
# 569 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SetColorKey
                        (SDL_Surface *surface, Uint32 flag, Uint32 key);
# 587 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_SetAlpha(SDL_Surface *surface, Uint32 flag, Uint8 alpha);
# 601 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_bool SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect);






extern __attribute__((dllexport)) void SDL_GetClipRect(SDL_Surface *surface, SDL_Rect *rect);
# 622 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Surface * SDL_ConvertSurface
                        (SDL_Surface *src, SDL_PixelFormat *fmt, Uint32 flags);
# 699 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_UpperBlit
                        (SDL_Surface *src, SDL_Rect *srcrect,
                         SDL_Surface *dst, SDL_Rect *dstrect);



extern __attribute__((dllexport)) int SDL_LowerBlit
                        (SDL_Surface *src, SDL_Rect *srcrect,
                         SDL_Surface *dst, SDL_Rect *dstrect);
# 718 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_FillRect
                (SDL_Surface *dst, SDL_Rect *dstrect, Uint32 color);
# 732 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Surface * SDL_DisplayFormat(SDL_Surface *surface);
# 746 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Surface * SDL_DisplayFormatAlpha(SDL_Surface *surface);
# 758 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) SDL_Overlay * SDL_CreateYUVOverlay(int width, int height,
                                Uint32 format, SDL_Surface *display);


extern __attribute__((dllexport)) int SDL_LockYUVOverlay(SDL_Overlay *overlay);
extern __attribute__((dllexport)) void SDL_UnlockYUVOverlay(SDL_Overlay *overlay);







extern __attribute__((dllexport)) int SDL_DisplayYUVOverlay(SDL_Overlay *overlay, SDL_Rect *dstrect);


extern __attribute__((dllexport)) void SDL_FreeYUVOverlay(SDL_Overlay *overlay);
# 791 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_GL_LoadLibrary(const char *path);




extern __attribute__((dllexport)) void * SDL_GL_GetProcAddress(const char* proc);




extern __attribute__((dllexport)) int SDL_GL_SetAttribute(SDL_GLattr attr, int value);
# 812 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);




extern __attribute__((dllexport)) void SDL_GL_SwapBuffers(void);





extern __attribute__((dllexport)) void SDL_GL_UpdateRects(int numrects, SDL_Rect* rects);
extern __attribute__((dllexport)) void SDL_GL_Lock(void);
extern __attribute__((dllexport)) void SDL_GL_Unlock(void);
# 834 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) void SDL_WM_SetCaption(const char *title, const char *icon);
extern __attribute__((dllexport)) void SDL_WM_GetCaption(char **title, char **icon);







extern __attribute__((dllexport)) void SDL_WM_SetIcon(SDL_Surface *icon, Uint8 *mask);






extern __attribute__((dllexport)) int SDL_WM_IconifyWindow(void);
# 867 "../../AlephOneSrc/SDL_video.h"
extern __attribute__((dllexport)) int SDL_WM_ToggleFullScreen(SDL_Surface *surface);





typedef enum {
        SDL_GRAB_QUERY = -1,
        SDL_GRAB_OFF = 0,
        SDL_GRAB_ON = 1,
        SDL_GRAB_FULLSCREEN
} SDL_GrabMode;





extern __attribute__((dllexport)) SDL_GrabMode SDL_WM_GrabInput(SDL_GrabMode mode);


extern __attribute__((dllexport)) int SDL_SoftStretch(SDL_Surface *src, SDL_Rect *srcrect,
                                    SDL_Surface *dst, SDL_Rect *dstrect);



}

# 1 "../../AlephOneSrc/close_code.h" 1
# 895 "../../AlephOneSrc/SDL_video.h" 2
# 35 "../../AlephOneSrc/SDL_mouse.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 37 "../../AlephOneSrc/SDL_mouse.h" 2


extern "C" {


typedef struct WMcursor WMcursor;
typedef struct SDL_Cursor {
        SDL_Rect area;
        Sint16 hot_x, hot_y;
        Uint8 *data;
        Uint8 *mask;
        Uint8 *save[2];
        WMcursor *wm_cursor;
} SDL_Cursor;
# 59 "../../AlephOneSrc/SDL_mouse.h"
extern __attribute__((dllexport)) Uint8 SDL_GetMouseState(int *x, int *y);







extern __attribute__((dllexport)) Uint8 SDL_GetRelativeMouseState(int *x, int *y);




extern __attribute__((dllexport)) void SDL_WarpMouse(Uint16 x, Uint16 y);
# 87 "../../AlephOneSrc/SDL_mouse.h"
extern __attribute__((dllexport)) SDL_Cursor * SDL_CreateCursor
                (Uint8 *data, Uint8 *mask, int w, int h, int hot_x, int hot_y);






extern __attribute__((dllexport)) void SDL_SetCursor(SDL_Cursor *cursor);




extern __attribute__((dllexport)) SDL_Cursor * SDL_GetCursor(void);




extern __attribute__((dllexport)) void SDL_FreeCursor(SDL_Cursor *cursor);
# 114 "../../AlephOneSrc/SDL_mouse.h"
extern __attribute__((dllexport)) int SDL_ShowCursor(int toggle);
# 136 "../../AlephOneSrc/SDL_mouse.h"
}

# 1 "../../AlephOneSrc/close_code.h" 1
# 139 "../../AlephOneSrc/SDL_mouse.h" 2
# 37 "../../AlephOneSrc/SDL_events.h" 2
# 1 "../../AlephOneSrc/SDL_joystick.h" 1
# 38 "../../AlephOneSrc/SDL_events.h" 2
# 1 "../../AlephOneSrc/SDL_quit.h" 1
# 39 "../../AlephOneSrc/SDL_events.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 41 "../../AlephOneSrc/SDL_events.h" 2


extern "C" {



enum { SDL_NOEVENT = 0,
       SDL_ACTIVEEVENT,
       SDL_KEYDOWN,
       SDL_KEYUP,
       SDL_MOUSEMOTION,
       SDL_MOUSEBUTTONDOWN,
       SDL_MOUSEBUTTONUP,
       SDL_JOYAXISMOTION,
       SDL_JOYBALLMOTION,
       SDL_JOYHATMOTION,
       SDL_JOYBUTTONDOWN,
       SDL_JOYBUTTONUP,
       SDL_QUIT,
       SDL_SYSWMEVENT,
       SDL_EVENT_RESERVEDA,
       SDL_EVENT_RESERVEDB,
       SDL_VIDEORESIZE,
       SDL_VIDEOEXPOSE,
       SDL_EVENT_RESERVED2,
       SDL_EVENT_RESERVED3,
       SDL_EVENT_RESERVED4,
       SDL_EVENT_RESERVED5,
       SDL_EVENT_RESERVED6,
       SDL_EVENT_RESERVED7,

       SDL_USEREVENT = 24,



       SDL_NUMEVENTS = 32
};



enum {
        SDL_ACTIVEEVENTMASK = (1<<(SDL_ACTIVEEVENT)),
        SDL_KEYDOWNMASK = (1<<(SDL_KEYDOWN)),
        SDL_KEYUPMASK = (1<<(SDL_KEYUP)),
        SDL_MOUSEMOTIONMASK = (1<<(SDL_MOUSEMOTION)),
        SDL_MOUSEBUTTONDOWNMASK = (1<<(SDL_MOUSEBUTTONDOWN)),
        SDL_MOUSEBUTTONUPMASK = (1<<(SDL_MOUSEBUTTONUP)),
        SDL_MOUSEEVENTMASK = (1<<(SDL_MOUSEMOTION))|
                                  (1<<(SDL_MOUSEBUTTONDOWN))|
                                  (1<<(SDL_MOUSEBUTTONUP)),
        SDL_JOYAXISMOTIONMASK = (1<<(SDL_JOYAXISMOTION)),
        SDL_JOYBALLMOTIONMASK = (1<<(SDL_JOYBALLMOTION)),
        SDL_JOYHATMOTIONMASK = (1<<(SDL_JOYHATMOTION)),
        SDL_JOYBUTTONDOWNMASK = (1<<(SDL_JOYBUTTONDOWN)),
        SDL_JOYBUTTONUPMASK = (1<<(SDL_JOYBUTTONUP)),
        SDL_JOYEVENTMASK = (1<<(SDL_JOYAXISMOTION))|
                                  (1<<(SDL_JOYBALLMOTION))|
                                  (1<<(SDL_JOYHATMOTION))|
                                  (1<<(SDL_JOYBUTTONDOWN))|
                                  (1<<(SDL_JOYBUTTONUP)),
        SDL_VIDEORESIZEMASK = (1<<(SDL_VIDEORESIZE)),
        SDL_VIDEOEXPOSEMASK = (1<<(SDL_VIDEOEXPOSE)),
        SDL_QUITMASK = (1<<(SDL_QUIT)),
        SDL_SYSWMEVENTMASK = (1<<(SDL_SYSWMEVENT))
};



typedef struct SDL_ActiveEvent {
        Uint8 type;
        Uint8 gain;
        Uint8 state;
} SDL_ActiveEvent;


typedef struct SDL_KeyboardEvent {
        Uint8 type;
        Uint8 which;
        Uint8 state;
        SDL_keysym keysym;
} SDL_KeyboardEvent;


typedef struct SDL_MouseMotionEvent {
        Uint8 type;
        Uint8 which;
        Uint8 state;
        Uint16 x, y;
        Sint16 xrel;
        Sint16 yrel;
} SDL_MouseMotionEvent;


typedef struct SDL_MouseButtonEvent {
        Uint8 type;
        Uint8 which;
        Uint8 button;
        Uint8 state;
        Uint16 x, y;
} SDL_MouseButtonEvent;


typedef struct SDL_JoyAxisEvent {
        Uint8 type;
        Uint8 which;
        Uint8 axis;
        Sint16 value;
} SDL_JoyAxisEvent;


typedef struct SDL_JoyBallEvent {
        Uint8 type;
        Uint8 which;
        Uint8 ball;
        Sint16 xrel;
        Sint16 yrel;
} SDL_JoyBallEvent;


typedef struct SDL_JoyHatEvent {
        Uint8 type;
        Uint8 which;
        Uint8 hat;
        Uint8 value;





} SDL_JoyHatEvent;


typedef struct SDL_JoyButtonEvent {
        Uint8 type;
        Uint8 which;
        Uint8 button;
        Uint8 state;
} SDL_JoyButtonEvent;





typedef struct SDL_ResizeEvent {
        Uint8 type;
        int w;
        int h;
} SDL_ResizeEvent;


typedef struct SDL_ExposeEvent {
        Uint8 type;
} SDL_ExposeEvent;


typedef struct SDL_QuitEvent {
        Uint8 type;
} SDL_QuitEvent;


typedef struct SDL_UserEvent {
        Uint8 type;
        int code;
        void *data1;
        void *data2;
} SDL_UserEvent;


struct SDL_SysWMmsg;
typedef struct SDL_SysWMmsg SDL_SysWMmsg;
typedef struct SDL_SysWMEvent {
        Uint8 type;
        SDL_SysWMmsg *msg;
} SDL_SysWMEvent;


typedef union {
        Uint8 type;
        SDL_ActiveEvent active;
        SDL_KeyboardEvent key;
        SDL_MouseMotionEvent motion;
        SDL_MouseButtonEvent button;
        SDL_JoyAxisEvent jaxis;
        SDL_JoyBallEvent jball;
        SDL_JoyHatEvent jhat;
        SDL_JoyButtonEvent jbutton;
        SDL_ResizeEvent resize;
        SDL_ExposeEvent expose;
        SDL_QuitEvent quit;
        SDL_UserEvent user;
        SDL_SysWMEvent syswm;
} SDL_Event;
# 241 "../../AlephOneSrc/SDL_events.h"
extern __attribute__((dllexport)) void SDL_PumpEvents(void);
# 255 "../../AlephOneSrc/SDL_events.h"
typedef enum {
        SDL_ADDEVENT,
        SDL_PEEKEVENT,
        SDL_GETEVENT
} SDL_eventaction;

extern __attribute__((dllexport)) int SDL_PeepEvents(SDL_Event *events, int numevents,
                                SDL_eventaction action, Uint32 mask);





extern __attribute__((dllexport)) int SDL_PollEvent(SDL_Event *event);





extern __attribute__((dllexport)) int SDL_WaitEvent(SDL_Event *event);





extern __attribute__((dllexport)) int SDL_PushEvent(SDL_Event *event);







typedef int ( *SDL_EventFilter)(const SDL_Event *event);
# 305 "../../AlephOneSrc/SDL_events.h"
extern __attribute__((dllexport)) void SDL_SetEventFilter(SDL_EventFilter filter);





extern __attribute__((dllexport)) SDL_EventFilter SDL_GetEventFilter(void);
# 325 "../../AlephOneSrc/SDL_events.h"
extern __attribute__((dllexport)) Uint8 SDL_EventState(Uint8 type, int state);




}

# 1 "../../AlephOneSrc/close_code.h" 1
# 333 "../../AlephOneSrc/SDL_events.h" 2
# 43 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_video.h" 1
# 44 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_byteorder.h" 1
# 45 "../../AlephOneSrc/SDL.h" 2
# 1 "../../AlephOneSrc/SDL_version.h" 1
# 33 "../../AlephOneSrc/SDL_version.h"
# 1 "../../AlephOneSrc/SDL_types.h" 1
# 34 "../../AlephOneSrc/SDL_version.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 36 "../../AlephOneSrc/SDL_version.h" 2


extern "C" {
# 47 "../../AlephOneSrc/SDL_version.h"
typedef struct SDL_version {
        Uint8 major;
        Uint8 minor;
        Uint8 patch;
} SDL_version;
# 82 "../../AlephOneSrc/SDL_version.h"
extern __attribute__((dllexport)) const SDL_version * SDL_Linked_Version(void);



}

# 1 "../../AlephOneSrc/close_code.h" 1
# 89 "../../AlephOneSrc/SDL_version.h" 2
# 46 "../../AlephOneSrc/SDL.h" 2

# 1 "../../AlephOneSrc/begin_code.h" 1
# 48 "../../AlephOneSrc/SDL.h" 2


extern "C" {
# 72 "../../AlephOneSrc/SDL.h"
extern __attribute__((dllexport)) int SDL_Init(Uint32 flags);


extern __attribute__((dllexport)) int SDL_InitSubSystem(Uint32 flags);


extern __attribute__((dllexport)) void SDL_QuitSubSystem(Uint32 flags);





extern __attribute__((dllexport)) Uint32 SDL_WasInit(Uint32 flags);




extern __attribute__((dllexport)) void SDL_Quit(void);



}

# 1 "../../AlephOneSrc/close_code.h" 1
# 96 "../../AlephOneSrc/SDL.h" 2
# 43 "../../AlephOneSrc/shell.h" 2

class FileSpecifier;







enum
{
        refSCREEN_WINDOW= 1000
};

enum
{
        refPREFERENCES_DIALOG= 8000,
        refCONFIGURE_KEYBOARD_DIALOG,
        refNETWORK_SETUP_DIALOG,
        refNETWORK_GATHER_DIALOG,
        refNETWORK_JOIN_DIALOG,
        refNETWORK_CARNAGE_DIALOG,

        LAST_DIALOG_REFCON= refNETWORK_CARNAGE_DIALOG,
        FIRST_DIALOG_REFCON= refPREFERENCES_DIALOG
};





enum {
        strPROMPTS= 131,
        _save_game_prompt= 0,
        _save_replay_prompt,
        _select_replay_prompt,
        _default_prompt
};



struct screen_mode_data
{
        short size;
        short acceleration;

        bool high_resolution;
        bool fullscreen, unused1;
        bool draw_every_other_line;

        short bit_depth;
        short gamma_level;

        short unused[8];
};
# 107 "../../AlephOneSrc/shell.h"
enum
{
        _keyboard_or_game_pad,
        _mouse_yaw_pitch,
        _mouse_yaw_velocity,
        _cybermaxx_input,
        _input_sprocket_only
};

struct system_information_data
{
        bool has_seven;
        bool has_ten;
        bool has_apple_events;
        bool appletalk_is_available;
        bool machine_is_68k;
        bool machine_is_68040;
        bool machine_is_ppc;
        bool machine_has_network_memory;
        bool machine_is_bluebox;
        bool sdl_networking_is_available;
};



extern struct system_information_data *system_information;
# 145 "../../AlephOneSrc/shell.h"
void global_idle_proc(void);
# 175 "../../AlephOneSrc/shell.h"
void initialize_shape_handler(void);
# 194 "../../AlephOneSrc/shell.h"
SDL_Surface *get_shape_surface(int shape, int collection = NONE, byte** outPointerToPixelData = __null, float inIllumination = -1.0f, bool inShrinkImage = false,
                               SDL_Color *palette = __null);


void open_shapes_file(FileSpecifier& File);
# 216 "../../AlephOneSrc/shell.h"
void update_game_window(void);



void load_environment_from_preferences(void);



void screen_printf(const char *format, ...);
# 41 "../../AlephOneSrc/screen_shared.h" 2
# 1 "../../AlephOneSrc/fades.h" 1
# 40 "../../AlephOneSrc/fades.h"
enum
{
        NUMBER_OF_GAMMA_LEVELS= 8,
        DEFAULT_GAMMA_LEVEL= 2
};

enum
{
        _start_cinematic_fade_in,
        _cinematic_fade_in,
        _long_cinematic_fade_in,
        _cinematic_fade_out,
        _end_cinematic_fade_out,

        _fade_red,
        _fade_big_red,
        _fade_bonus,
        _fade_bright,
        _fade_long_bright,
        _fade_yellow,
        _fade_big_yellow,
        _fade_purple,
        _fade_cyan,
        _fade_white,
        _fade_big_white,
        _fade_orange,
        _fade_long_orange,
        _fade_green,
        _fade_long_green,
        _fade_static,
        _fade_negative,
        _fade_big_negative,
        _fade_flicker_negative,
        _fade_dodge_purple,
        _fade_burn_cyan,
        _fade_dodge_yellow,
        _fade_burn_green,

        _fade_tint_green,
        _fade_tint_blue,
        _fade_tint_orange,
        _fade_tint_gross,
        _fade_tint_jjaro,

        NUMBER_OF_FADE_TYPES
};


enum
{
        _effect_under_water,
        _effect_under_lava,
        _effect_under_sewage,
        _effect_under_jjaro,
        _effect_under_goo,
        NUMBER_OF_FADE_EFFECT_TYPES
};




enum
{
        _tint_fader_type,
        _randomize_fader_type,
        _negate_fader_type,
        _dodge_fader_type,
        _burn_fader_type,
        _soft_tint_fader_type,
        NUMBER_OF_FADER_FUNCTIONS
};




void initialize_fades(void);
bool update_fades(void);

void start_fade(short type);
void stop_fade(void);
bool fade_finished(void);

void set_fade_effect(short type);

short get_fade_period(short type);

void gamma_correct_color_table(struct color_table *uncorrected_color_table, struct color_table *corrected_color_table, short gamma_level);

void explicit_start_fade(short type, struct color_table *original_color_table, struct color_table *animated_color_table);
void full_fade(short type, struct color_table *original_color_table);




void SetFadeEffectDelay(int _FadeEffectDelay);
# 42 "../../AlephOneSrc/screen_shared.h" 2

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/stdarg.h" 1 3
# 44 "../../AlephOneSrc/screen_shared.h" 2
# 61 "../../AlephOneSrc/screen_shared.h"
# 1 "../../AlephOneSrc/screen_drawing.h" 1
# 35 "../../AlephOneSrc/screen_drawing.h"
# 1 "../../AlephOneSrc/SDL.h" 1
# 36 "../../AlephOneSrc/screen_drawing.h" 2



enum {

        _player_name_rect= 0,
        _oxygen_rect,
        _shield_rect,
        _motion_sensor_rect,
        _microphone_rect,
        _inventory_rect,
        _weapon_display_rect,


        _new_game_button_rect,
        _load_game_button_rect,
        _gather_button_rect,
        _join_button_rect,
        _prefs_button_rect,
        _replay_last_button_rect,
        _save_last_button_rect,
        _replace_saved_button_rect,
        _credits_button_rect,
        _quit_button_rect,
        _center_button_rect,
        _singleton_game_button_rect,
        NUMBER_OF_INTERFACE_RECTANGLES
};


enum {
        _energy_weapon_full_color,
        _energy_weapon_empty_color,
        _black_color,
        _inventory_text_color,
        _inventory_header_background_color,
        _inventory_background_color,
        PLAYER_COLOR_BASE_INDEX,

        _white_color= 14,
        _invalid_weapon_color,
        _computer_border_background_text_color,
        _computer_border_text_color,
        _computer_interface_text_color,
        _computer_interface_color_purple,
        _computer_interface_color_red,
        _computer_interface_color_pink,
        _computer_interface_color_aqua,
        _computer_interface_color_yellow,
        _computer_interface_color_brown,
        _computer_interface_color_blue
};
# 111 "../../AlephOneSrc/screen_drawing.h"
struct screen_rectangle {
        short top, left;
        short bottom, right;
};
typedef struct screen_rectangle screen_rectangle;


void initialize_screen_drawing(void);

void _set_port_to_screen_window(void);
void _set_port_to_gworld(void);
void _restore_port(void);

void _set_port_to_term(void);



void _draw_screen_shape(shape_descriptor shape_id, screen_rectangle *destination,
        screen_rectangle *source);
void _draw_screen_shape_at_x_y(shape_descriptor shape, short x, short y);
void _draw_screen_shape_centered(shape_descriptor shape, screen_rectangle *rectangle,
        short flags);
void _draw_screen_text(const char *text, screen_rectangle *destination,
        short flags, short font_id, short text_color);
short _text_width(const char *buffer, short font_id);
short _text_width(const char *buffer, int start, int length, short font_id);

void _erase_screen(short color_index);

void _scroll_window(short dy, short rectangle_id, short background_color_index);

void _fill_screen_rectangle(screen_rectangle *rectangle, short color_index);
# 151 "../../AlephOneSrc/screen_drawing.h"
void _fill_rect(screen_rectangle *rectangle, short color_index);

void _frame_rect(screen_rectangle *rectangle, short color_index);


void _set_port_to_HUD();





void SetColorFontParserToScreenDrawing();


class sdl_font_info;
struct world_point2d;

extern int8 char_width(uint8 c, const sdl_font_info *font, uint16 style);
extern uint16 text_width(const char *text, const sdl_font_info *font, uint16 style);
extern uint16 text_width(const char *text, size_t length, const sdl_font_info *font, uint16 style);
extern int trunc_text(const char *text, int max_width, const sdl_font_info *font, uint16 style);
extern void draw_polygon(SDL_Surface *s, const world_point2d *vertex_array, int vertex_count, uint32 pixel);
extern void draw_line(SDL_Surface *s, const world_point2d *v1, const world_point2d *v2, uint32 pixel, int pen_size);
extern void draw_rectangle(SDL_Surface *s, const SDL_Rect *r, uint32 pixel);
# 62 "../../AlephOneSrc/screen_shared.h" 2
# 1 "../../AlephOneSrc/ViewControl.h" 1
# 50 "../../AlephOneSrc/ViewControl.h"
bool View_MapActive();


float View_FOV_Normal();
float View_FOV_ExtraVision();
float View_FOV_TunnelVision();



bool View_AdjustFOV(float& FOV, float FOV_Target);



bool View_FOV_FixHorizontalNotVertical();


bool View_DoFoldEffect();


bool View_DoStaticEffect();





typedef int16 angle;

struct LandscapeOptions
{


        short HorizExp;


        short VertExp;




        short OGL_AspRatExp;


        bool VertRepeat;


        angle Azimuth;




        LandscapeOptions(): HorizExp(1), VertExp(1), OGL_AspRatExp(0), VertRepeat(false), Azimuth(0) {}
};

LandscapeOptions *View_GetLandscapeOptions(shape_descriptor Desc);
# 63 "../../AlephOneSrc/screen_shared.h" 2
# 1 "../../AlephOneSrc/screen.h" 1
# 62 "../../AlephOneSrc/screen.h"
extern struct screen_mode_data screen_mode;




enum
{
        _320_160_HUD,
        _480_240_HUD,
        _640_320_HUD,
        _640_480,
        _800_400_HUD,
        _800_600,
        _1024_512_HUD,
        _1024_768,
        _1280_640_HUD,
        _1280_1024,
        _1600_800_HUD,
        _1600_1200,
        _1024_440_HUD,
        _1024_640,
        _1280_600_HUD,
        _1280_800,
        _1280_640WS_HUD,
        _1280_854,
        _1440_700_HUD,
        _1440_900,
        _1680_840_HUD,
        _1680_1050,
        _1920_950_HUD,
        _1920_1200,
        NUMBER_OF_VIEW_SIZES
};

enum
{
        _50_percent,
        _75_percent,
        _100_percent,
        _full_screen,
};

enum
{
        _no_acceleration,
        _opengl_acceleration
};
# 121 "../../AlephOneSrc/screen.h"
extern struct color_table *world_color_table, *visible_color_table, *interface_color_table;
extern SDL_Surface *main_surface;
# 134 "../../AlephOneSrc/screen.h"
struct screen_mode_data;



void change_screen_clut(struct color_table *color_table);
void change_interface_clut(struct color_table *color_table);
void animate_screen_clut(struct color_table *color_table, bool full_screen);

void build_direct_color_table(struct color_table *color_table, short bit_depth);

void start_teleporting_effect(bool out);
void start_extravision_effect(bool out);

void render_screen(short ticks_elapsed);

void toggle_overhead_map_display_status(void);


bool zoom_overhead_map_out(void);
bool zoom_overhead_map_in(void);

void enter_screen(void);
void exit_screen(void);

void darken_world_window(void);
void validate_world_window(void);



void assert_world_color_table(struct color_table *world_color_table, struct color_table *interface_color_table);





screen_mode_data *get_screen_mode(void);



short GetSizeWithHUD(short Size);
short GetSizeWithoutHUD(short Size);


void initialize_screen(struct screen_mode_data *mode, bool ShowFreqDialog);
void change_screen_mode(struct screen_mode_data *mode, bool redraw);
# 199 "../../AlephOneSrc/screen.h"
void toggle_fullscreen(bool fs);
void toggle_fullscreen();
void update_screen_window(void);
void clear_screen(void);






void dump_screen();


bool GetTunnelVision();
bool SetTunnelVision(bool TunnelVisionOn);


void RequestDrawingHUD();




short SizeWithHUD(short _size);
short SizeWithoutHUD(short _size);


void ShowMessage(char *Text);







void SetScriptHUDColor(int idx, int color);


void SetScriptHUDText(int idx, const char* text);


bool SetScriptHUDIcon(int idx, const char* icon, size_t length);

void SetScriptHUDSquare(int idx, int color);
# 64 "../../AlephOneSrc/screen_shared.h" 2
# 1 "../../AlephOneSrc/render.h" 1
# 46 "../../AlephOneSrc/render.h"
using namespace std;
# 61 "../../AlephOneSrc/render.h"
enum
{
        _render_effect_fold_in,
        _render_effect_fold_out,


        _render_effect_explosion,



};

enum
{
        _shading_normal,
        _shading_infravision
};
# 87 "../../AlephOneSrc/render.h"
struct point2d
{
        short x, y;
};
typedef struct point2d point2d;

struct definition_header
{
        short tag;
        short clip_left, clip_right;
};

struct view_data
{



        float field_of_view;
        float target_field_of_view;
        short standard_screen_width;
        short screen_width, screen_height;
        short horizontal_scale, vertical_scale;

        short half_screen_width, half_screen_height;
        short world_to_screen_x, world_to_screen_y;
        short dtanpitch;
        angle half_cone;
        angle half_vertical_cone;

        world_vector2d untransformed_left_edge, untransformed_right_edge;
        world_vector2d left_edge, right_edge, top_edge, bottom_edge;

        short ticks_elapsed;
        uint32 tick_count;
        short origin_polygon_index;
        angle yaw, pitch, roll;
        world_point3d origin;
        _fixed maximum_depth_intensity;

        short shading_mode;

        short effect, effect_phase;
        short real_world_to_screen_x, real_world_to_screen_y;

        bool overhead_map_active;
        short overhead_map_scale;

        bool under_media_boundary;
        short under_media_index;

        bool terminal_mode_active;



        bool show_weapons_in_hand;


        bool tunnel_vision_active;



        angle landscape_yaw;
};
# 161 "../../AlephOneSrc/render.h"
enum
{
        _polygon_is_visible_bit,
        _endpoint_has_been_visited_bit,
        _endpoint_is_visible_bit,
        _side_is_visible_bit,
        _line_has_clip_data_bit,
        _endpoint_has_clip_data_bit,
        _endpoint_has_been_transformed_bit,
        NUMBER_OF_RENDER_FLAGS,

        _polygon_is_visible= 1<<_polygon_is_visible_bit,
        _endpoint_has_been_visited= 1<<_endpoint_has_been_visited_bit,
        _endpoint_is_visible= 1<<_endpoint_is_visible_bit,
        _side_is_visible= 1<<_side_is_visible_bit,
        _line_has_clip_data= 1<<_line_has_clip_data_bit,
        _endpoint_has_clip_data= 1<<_endpoint_has_clip_data_bit,
        _endpoint_has_been_transformed= 1<<_endpoint_has_been_transformed_bit
};



extern vector<uint16> RenderFlagList;






void allocate_render_memory(void);

void initialize_view_data(struct view_data *view);
void render_view(struct view_data *view, struct bitmap_definition *destination);

void start_render_effect(struct view_data *view, short effect);



void render_overhead_map(struct view_data *view);
void render_computer_interface(struct view_data *view);

# 1 "../../AlephOneSrc/scottish_textures.h" 1
# 49 "../../AlephOneSrc/scottish_textures.h"
enum
{
        _tinted_transfer,



        _solid_transfer,

        _big_landscaped_transfer,
        _textured_transfer,
        _shadeless_transfer,
        _static_transfer



};







struct tint_table8
{
        pixel8 index[256];
};

struct tint_table16
{
        pixel16 red[31 +1];
        pixel16 green[31 +1];
        pixel16 blue[31 +1];
};

struct tint_table32
{
        pixel32 red[255 +1];
        pixel32 green[255 +1];
        pixel32 blue[255 +1];
};






class OGL_ModelData;

struct rectangle_definition
{
        uint16 flags;

        struct bitmap_definition *texture;


        int16 x0, y0;
        int16 x1, y1;


        int16 clip_left, clip_right;
        int16 clip_top, clip_bottom;



        int32 depth;



        _fixed ambient_shade;


        void *shading_tables;



        int16 transfer_mode, transfer_data;


        bool flip_vertical, flip_horizontal;





        shape_descriptor ShapeDesc;
        uint16 LowLevelShape;



        int16 xc;


        float Opacity;


        _fixed ceiling_light;
        OGL_ModelData *ModelPtr;
        short ModelSequence, ModelFrame, NextModelFrame;
        float MixFrac;
        world_point3d Position;
        short ProjDistance;
        short Azimuth;
        float Scale;
        float HorizScale;
        short LiquidRelHeight;
        bool BelowLiquid;
        int LightDepth;
        float LightDirection[3];


        rectangle_definition() :
                LowLevelShape(0) {}
};

struct polygon_definition
{
        uint16 flags;

        struct bitmap_definition *texture;


        _fixed ambient_shade;



        void *shading_tables;


        int16 transfer_mode, transfer_data;


        long_point3d origin;
        world_vector3d vector;


        int16 vertex_count;
        point2d vertices[((short)16)];



        shape_descriptor ShapeDesc;


        bool VoidPresent;
};






extern short number_of_shading_tables, shading_table_fractional_bits, shading_table_size;



void allocate_texture_tables(void);
# 203 "../../AlephOneSrc/render.h" 2
# 216 "../../AlephOneSrc/render.h"
void ResetOverheadMap();
# 65 "../../AlephOneSrc/screen_shared.h" 2





struct ViewSizeData
{
        short OverallWidth, OverallHeight;
        short MainWidth, MainHeight;
        short WithHUD, WithoutHUD;
        short flags;
};

enum {
  _view_show_HUD = (1 << 0)
};

const ViewSizeData ViewSizes[NUMBER_OF_VIEW_SIZES] =
{
        { 640, 480, 320, 160, _320_160_HUD, _640_480, _view_show_HUD},
        { 640, 480, 480, 240, _480_240_HUD, _640_480, _view_show_HUD},
        { 640, 480, 640, 320, _640_320_HUD, _640_480, _view_show_HUD},
        { 640, 480, 640, 480, _640_320_HUD, _640_480, 0},
        { 800, 600, 800, 400, _800_400_HUD, _800_600, _view_show_HUD},
        { 800, 600, 800, 600, _800_400_HUD, _800_600, 0},
        {1024, 768, 1024, 512, _1024_512_HUD, _1024_768, _view_show_HUD},
        {1024, 768, 1024, 768, _1024_512_HUD, _1024_768, 0},
        {1280, 1024, 1280, 640, _1280_640_HUD, _1280_1024, _view_show_HUD},
        {1280, 1024, 1280, 1024, _1280_640_HUD, _1280_1024, 0},
        {1600, 1200, 1600, 800, _1600_800_HUD, _1600_1200, _view_show_HUD},
        {1600, 1200, 1600, 1200, _1600_800_HUD, _1600_1200, 0},
        {1024, 640, 1024, 440, _1024_440_HUD, _1024_640, _view_show_HUD},
        {1024, 640, 1024, 640, _1024_440_HUD, _1024_640, 0},
        {1280, 800, 1280, 600, _1280_600_HUD, _1280_800, _view_show_HUD},
        {1280, 800, 1280, 800, _1280_600_HUD, _1280_800, 0},
        {1280, 854, 1280, 654, _1280_640WS_HUD, _1280_854, _view_show_HUD},
        {1280, 854, 1280, 854, _1280_640WS_HUD, _1280_854, _view_show_HUD},
        {1440, 900, 1440, 700, _1440_700_HUD, _1440_900, _view_show_HUD},
        {1440, 900, 1440, 700, _1440_700_HUD, _1440_900, 0},
        {1680, 1050, 1680, 840, _1680_840_HUD, _1680_1050, _view_show_HUD},
        {1680, 1050, 1680, 1050, _1680_840_HUD, _1680_1050, 0},
        {1920, 1200, 1920, 950, _1920_950_HUD, _1920_1200, _view_show_HUD},
        {1920, 1200, 1920, 1200, _1920_950_HUD, _1920_1200, 0},
};






static struct color_table *uncorrected_color_table;
extern struct color_table *world_color_table;
extern struct color_table *interface_color_table;
extern struct color_table *visible_color_table;

static struct view_data *world_view;


static struct bitmap_definition *world_pixels_structure;




static short PrevBufferWidth = (-32767 -1), PrevBufferHeight = (-32767 -1),
        PrevOffsetWidth = (-32767 -1), PrevOffsetHeight = (-32767 -1);

extern struct screen_mode_data screen_mode;


static bool displaying_fps= false;
static short frame_count, frame_index;
static long frame_ticks[64];



static bool ShowPosition = false;


static bool HUD_RenderRequest = false;

static bool screen_initialized= false;

extern short bit_depth;
extern short interface_bit_depth;



extern bool OGL_MapActive;



const int NumScreenMessages = 7;
struct ScreenMessage
{
        enum {
                Len = 256
        };

        int TimeRemaining;
        char Text[Len];

        ScreenMessage(): TimeRemaining(0) {Text[0] = 0;}
};

static int MostRecentMessage = NumScreenMessages-1;
static ScreenMessage Messages[NumScreenMessages];


static struct ScriptHUDElement {

        enum {
                Len = 256
        };


        unsigned char icon[1024];
        bool isicon;
        int color;
        char text[Len];
} ScriptHUDElements[6];




static void set_overhead_map_status(bool status);
static void set_terminal_status(bool status);




namespace icon {

        static inline char nextc(const char*& p, size_t& rem) {
                if(rem == 0) throw "end of string";
                --rem;
                return *(p++);
        }

        static inline unsigned char digit(char p) {
                if(p >= '0' && p <= '9') return p - '0';
                else if(p >= 'A' && p <= 'F') return p - 'A' + 0xA;
                else if(p >= 'a' && p <= 'f') return p - 'a' + 0xA;
                else throw "invalid digit";
        }

        static inline unsigned char readuc(const char*& p, size_t& rem) {
                char a = nextc(p, rem), b;
                b = nextc(p, rem);
                return (digit(a) << 4) | digit(b);
        }

        static bool parseicon(const char* p, size_t rem,
                                                                                                unsigned char palette[768], int& numcolors,
                                                                                                unsigned char graphic[256]) {
                char chars[256];
                try {
                        char oc, c;
                        size_t n, m;
                        numcolors = 0;
                        while(1) {
                                c = nextc(p, rem);
                                if(c >= '0' && c <= '9')
                                        numcolors = numcolors * 10 + (c - '0');
                                else break;
                        }
                        if(numcolors == 0) return 1;
                        oc = c;
                        do {
                                c = nextc(p, rem);
                        } while(c == oc);
                        n = 0;
                        while(n < (size_t)numcolors) {
                                chars[n] = c;
                                palette[n * 3] = readuc(p, rem);
                                palette[n * 3 + 1] = readuc(p, rem);
                                palette[n * 3 + 2] = readuc(p, rem);
                                ++n;
                                nextc(p, rem);
                                c = nextc(p, rem);
                        }
                        n = 0;
                        while(n < 256) {
                                for(m = 0; m < (size_t)numcolors; ++m) {
                                        if(chars[m] == c) {
                                                graphic[n++] = (unsigned char)m;
                                                break;
                                        }
                                }
                                c = nextc(p, rem);
                        }
                } catch(...) {
                        return false;
                }
                return true;
        }

        static void seticon(int idx, unsigned char palette[768], unsigned char graphic[256]) {
                unsigned char* p1, *p2, px;
                int n;
                p1 = ScriptHUDElements[idx].icon;
                p2 = graphic;
                for(n = 0; n < 256; ++n) {
                        px = *(p2++);
                        *(p1++) = 0xFF;
                        *(p1++) = palette[px * 3];
                        *(p1++) = palette[px * 3 + 1];
                        *(p1++) = palette[px * 3 + 2];
                }
                ScriptHUDElements[idx].isicon = true;
        }

}
# 325 "../../AlephOneSrc/screen_shared.h"
static void ResetFieldOfView();


void reset_screen();



void ResetFieldOfView()
{
        world_view->tunnel_vision_active = false;







        {
                world_view->field_of_view = View_FOV_Normal();
                world_view->target_field_of_view = View_FOV_Normal();
        }
}
# 419 "../../AlephOneSrc/screen_shared.h"
void change_gamma_level(
        short gamma_level);







static SDL_Surface *DisplayTextDest = __null;
static sdl_font_info *DisplayTextFont = __null;
static short DisplayTextStyle = 0;
# 477 "../../AlephOneSrc/screen_shared.h"
static void update_fps_display(SDL_Surface *s)

{
# 538 "../../AlephOneSrc/screen_shared.h"
}





static void DisplayPosition(SDL_Surface *s)

{
# 601 "../../AlephOneSrc/screen_shared.h"
}




static void DisplayInputLine(SDL_Surface *s)

{
# 640 "../../AlephOneSrc/screen_shared.h"
}




static void DisplayMessages(SDL_Surface *s)

{
# 803 "../../AlephOneSrc/screen_shared.h"
}


static void set_overhead_map_status(
        bool status)
{
        world_view->overhead_map_active= status;
}

static void set_terminal_status(
        bool status)
{
# 837 "../../AlephOneSrc/screen_shared.h"
}
# 16 "../../AlephOneSrc/header.h" 2
# 1 "../../AlephOneSrc/cscluts.h" 1
# 27 "../../AlephOneSrc/cscluts.h"
# 1 "../../AlephOneSrc/sdl_cseries.h" 1
# 38 "../../AlephOneSrc/sdl_cseries.h"
# 1 "../../AlephOneSrc/SDL.h" 1
# 39 "../../AlephOneSrc/sdl_cseries.h" 2
# 1 "../../AlephOneSrc/SDL_byteorder.h" 1
# 40 "../../AlephOneSrc/sdl_cseries.h" 2
# 48 "../../AlephOneSrc/sdl_cseries.h"
namespace std {};
# 88 "../../AlephOneSrc/sdl_cseries.h"
typedef int OSErr;
typedef unsigned char Str255[256];

struct Rect {
        int16 top, left;
        int16 bottom, right;
};

const int noErr = 0;


struct RGBColor {
        uint16 red, green, blue;
};

const int kFontIDMonaco = 4;
const int kFontIDCourier = 22;
# 135 "../../AlephOneSrc/sdl_cseries.h"
# 1 "../../AlephOneSrc/cscluts.h" 1
# 136 "../../AlephOneSrc/sdl_cseries.h" 2
# 28 "../../AlephOneSrc/cscluts.h" 2

class LoadedResource;

typedef struct rgb_color {
        uint16 red;
        uint16 green;
        uint16 blue;
} rgb_color;

typedef struct color_table {
        short color_count;
        rgb_color colors[256];
} color_table;






extern void build_color_table(
        color_table *table,
        LoadedResource &clut);

enum {
        gray15Percent,
        windowHighlight,

        NUM_SYSTEM_COLORS
};

extern RGBColor rgb_black;
extern RGBColor rgb_white;
extern RGBColor system_colors[NUM_SYSTEM_COLORS];
# 17 "../../AlephOneSrc/header.h" 2

# 1 "../../AlephOneSrc/csmisc.h" 1
# 33 "../../AlephOneSrc/csmisc.h"
extern uint32 machine_tick_count(void);
extern bool wait_for_click_or_keypress(
        uint32 ticks);
# 57 "../../AlephOneSrc/csmisc.h"
extern void kill_screen_saver(void);


extern void initialize_debugger(bool on);
# 19 "../../AlephOneSrc/header.h" 2




using namespace std;
# 35 "../../AlephOneSrc/dynamic_limits.h" 2





enum {
        _dynamic_limit_objects,
        _dynamic_limit_monsters,
        _dynamic_limit_paths,
        _dynamic_limit_projectiles,
        _dynamic_limit_effects,
        _dynamic_limit_rendered,
        _dynamic_limit_local_collision,
        _dynamic_limit_global_collision,
        NUMBER_OF_DYNAMIC_LIMITS
};






uint16 get_dynamic_limit(int which);
# 59 "../../AlephOneSrc/map.h" 2







const int NUMBER_OF_ENVIRONMENTS = 5;
const int NUMBER_OF_ENV_COLLECTIONS = 7;

extern short Environments[NUMBER_OF_ENVIRONMENTS][NUMBER_OF_ENV_COLLECTIONS];
# 93 "../../AlephOneSrc/map.h"
enum
{
        _damage_explosion,
        _damage_electrical_staff,
        _damage_projectile,
        _damage_absorbed,
        _damage_flame,
        _damage_hound_claws,
        _damage_alien_projectile,
        _damage_hulk_slap,
        _damage_compiler_bolt,
        _damage_fusion_bolt,
        _damage_hunter_bolt,
        _damage_fist,
        _damage_teleporter,
        _damage_defender,
        _damage_yeti_claws,
        _damage_yeti_projectile,
        _damage_crushing,
        _damage_lava,
        _damage_suffocation,
        _damage_goo,
        _damage_energy_drain,
        _damage_oxygen_drain,
        _damage_hummer_bolt,
        _damage_shotgun_projectile,
        NUMBER_OF_DAMAGE_TYPES
};

enum
{
        _alien_damage= 0x1
};

struct damage_definition
{
        int16 type, flags;

        int16 base, random;
        _fixed scale;
};
const int SIZEOF_damage_definition = 12;





enum
{
        _saved_monster,
        _saved_object,
        _saved_item,
        _saved_player,
        _saved_goal,
        _saved_sound_source
};

enum
{
        _map_object_is_invisible= 0x0001,
        _map_object_is_platform_sound= 0x0001,
        _map_object_hanging_from_ceiling= 0x0002,
        _map_object_is_blind= 0x0004,
        _map_object_is_deaf= 0x0008,
        _map_object_floats= 0x0010,
        _map_object_is_network_only= 0x0020


};




struct map_object
{
        int16 type;
        int16 index;
        int16 facing;
        int16 polygon_index;
        world_point3d location;

        uint16 flags;
};
const int SIZEOF_map_object = 16;


typedef world_point2d saved_map_pt;
typedef struct line_data saved_line;
typedef struct polygon_data saved_poly;
typedef struct map_annotation saved_annotation;
typedef struct map_object saved_object;
typedef struct static_data saved_map_data;



enum {
        _single_player_entry_point= 0x01,
        _multiplayer_cooperative_entry_point= 0x02,
        _multiplayer_carnage_entry_point= 0x04,
        _capture_the_flag_entry_point= 0x08,
        _king_of_hill_entry_point= 0x10,
        _defense_entry_point= 0x20,
        _rugby_entry_point= 0x40
};

struct entry_point
{
        int16 level_number;
        char level_name[64+2];
};



struct player_start_data
{
        int16 team;
        int16 identifier;
        int16 color;
        char name[32 +1];
};

enum {
        _player_start_doesnt_auto_recenter_flag= 0x4000,
        _player_start_doesnt_auto_switch_weapons_flag= 0x8000
};

const uint16 player_start_identifier_mask=
        (uint16)~(_player_start_doesnt_auto_recenter_flag | _player_start_doesnt_auto_switch_weapons_flag);

int16 player_identifier_value(int16 identifier);
int16 player_start_identifier_value(const player_start_data * const p);
bool player_identifier_doesnt_auto_recenter(int16 identifier);
bool player_start_doesnt_auto_recenter(const player_start_data * const p);
void set_player_start_doesnt_auto_recenter_status(player_start_data * const p, bool v);
bool player_identifier_doesnt_auto_switch_weapons(int16 identifier);
bool player_start_doesnt_auto_switch_Weapons(const player_start_data * const p);
void set_player_start_doesnt_auto_switch_weapons_status(player_start_data * const p, bool v);


inline int16 player_identifier_value(int16 identifier)
{ return identifier & player_start_identifier_mask; }

inline int16 player_start_identifier_value(const player_start_data * const p)
{ return (p)->identifier & player_start_identifier_mask; }

inline bool player_identifier_doesnt_auto_recenter(int16 identifier)
{ return ((identifier)&(_player_start_doesnt_auto_recenter_flag)) == 0? false:true; }

inline bool player_start_doesnt_auto_recenter(const player_start_data * const p)
{ return ((p->identifier)&(_player_start_doesnt_auto_recenter_flag)) == 0? false:true; }

inline void set_player_start_doesnt_auto_recenter_status(player_start_data * const p, bool v)
{ ((void)((v)?((p->identifier)|=(_player_start_doesnt_auto_recenter_flag)):((p->identifier)&=~(_player_start_doesnt_auto_recenter_flag)))); }

inline bool player_identifier_doesnt_auto_switch_weapons(int16 identifier)
{ return ((identifier)&(_player_start_doesnt_auto_switch_weapons_flag)) == 0? false:true; }

inline bool player_start_doesnt_auto_switch_Weapons(const player_start_data * const p)
{ return ((p->identifier)&(_player_start_doesnt_auto_switch_weapons_flag)) == 0? false:true; }

inline void set_player_start_doesnt_auto_switch_weapons_status(player_start_data * const p, bool v)
{ ((void)((v)?((p->identifier)|=(_player_start_doesnt_auto_switch_weapons_flag)):((p->identifier)&=~(_player_start_doesnt_auto_switch_weapons_flag)))); }


struct directory_data {
        int16 mission_flags;
        int16 environment_flags;
        int32 entry_point_flags;
        char level_name[(64+2)];
};
const int SIZEOF_directory_data = 74;






struct map_annotation
{
        int16 type;

        world_point2d location;
        int16 polygon_index;

        char text[64];
};
const int SIZEOF_map_annotation = 72;

struct map_annotation *get_next_map_annotation(int16 *count);






struct ambient_sound_image_data
{
        uint16 flags;

        int16 sound_index;
        int16 volume;

        int16 unused[5];
};
const int SIZEOF_ambient_sound_image_data = 16;





enum
{
        _sound_image_is_non_directional= 0x0001
};


struct random_sound_image_data
{
        uint16 flags;

        int16 sound_index;

        int16 volume, delta_volume;
        int16 period, delta_period;
        angle direction, delta_direction;
        _fixed pitch, delta_pitch;


        int16 phase;

        int16 unused[3];
};
const int SIZEOF_random_sound_image_data = 32;
# 353 "../../AlephOneSrc/map.h"
enum
{
        _obj_not_animated= 0x0000,
        _obj_animated= 0x2000,
        _obj_keyframe_started= 0x1000,
        _obj_last_frame_animated= 0x0800,
        _obj_transfer_mode_finished= 0x0400
};


enum
{
        _object_is_enlarged= 0x0200,
        _object_is_tiny= 0x0100,

        OBJECT_SCALE_FLAGS_MASK= _object_is_enlarged|_object_is_tiny
};
# 389 "../../AlephOneSrc/map.h"
enum
{
        _object_is_normal,
        _object_is_scenery,
        _object_is_monster,
        _object_is_projectile,
        _object_is_effect,
        _object_is_item,
        _object_is_device,
        _object_is_garbage
};







enum
{
        _xfer_normal,
        _xfer_fade_out_to_black,
        _xfer_invisibility,
        _xfer_subtle_invisibility,
        _xfer_pulsate,
        _xfer_wobble,
        _xfer_fast_wobble,
        _xfer_static,
        _xfer_50percent_static,
        _xfer_landscape,
        _xfer_smear,
        _xfer_fade_out_static,
        _xfer_pulsating_static,
        _xfer_fold_in,
        _xfer_fold_out,
        _xfer_horizontal_slide,
        _xfer_fast_horizontal_slide,
        _xfer_vertical_slide,
        _xfer_fast_vertical_slide,
        _xfer_wander,
        _xfer_fast_wander,
        _xfer_big_landscape,
        NUMBER_OF_TRANSFER_MODES
};

struct object_location
{
        struct world_point3d p;
        int16 polygon_index;

        angle yaw, pitch;

        uint16 flags;
};

struct object_data
{


        world_point3d location;
        int16 polygon;

        angle facing;




        shape_descriptor shape;

        uint16 sequence;
        uint16 flags;
        int16 transfer_mode, transfer_period;
        int16 transfer_phase;
        int16 permutation;

        int16 next_object;
        int16 parasitic_object;


        _fixed sound_pitch;
};
const int SIZEOF_object_data = 32;
# 484 "../../AlephOneSrc/map.h"
struct endpoint_data
{
        uint16 flags;
        world_distance highest_adjacent_floor_height, lowest_adjacent_ceiling_height;

        world_point2d vertex;
        world_point2d transformed;

        int16 supporting_polygon_index;
};
const int SIZEOF_endpoint_data = 16;


const int SIZEOF_world_point2d = 4;
# 526 "../../AlephOneSrc/map.h"
struct line_data
{
        int16 endpoint_indexes[2];
        uint16 flags;

        world_distance length;
        world_distance highest_adjacent_floor, lowest_adjacent_ceiling;



        int16 clockwise_polygon_side_index, counterclockwise_polygon_side_index;



        int16 clockwise_polygon_owner, counterclockwise_polygon_owner;

        int16 unused[6];
};
const int SIZEOF_line_data = 32;



enum
{
        _control_panel_status= 0x0001,
        _side_is_control_panel= 0x0002,
        _side_is_repair_switch= 0x0004,
        _side_is_destructive_switch= 0x0008,
        _side_is_lighted_switch= 0x0010,
        _side_switch_can_be_destroyed= 0x0020,
        _side_switch_can_only_be_hit_by_projectiles= 0x0040,

        _editor_dirty_bit= 0x4000
};

enum
{
        _panel_is_oxygen_refuel,
        _panel_is_shield_refuel,
        _panel_is_double_shield_refuel,
        _panel_is_triple_shield_refuel,
        _panel_is_light_switch,
        _panel_is_platform_switch,
        _panel_is_tag_switch,
        _panel_is_pattern_buffer,
        _panel_is_computer_terminal,
        NUMBER_OF_CONTROL_PANELS
};
# 589 "../../AlephOneSrc/map.h"
enum
{
        _full_side,
        _high_side,
        _low_side,
        _composite_side,
        _split_side

};

struct side_texture_definition
{
        world_distance x0, y0;
        shape_descriptor texture;
};

struct side_exclusion_zone
{
        world_point2d e0, e1, e2, e3;
};

struct side_data
{
        int16 type;
        uint16 flags;

        struct side_texture_definition primary_texture;
        struct side_texture_definition secondary_texture;
        struct side_texture_definition transparent_texture;



        struct side_exclusion_zone exclusion_zone;

        int16 control_panel_type;
        int16 control_panel_permutation;

        int16 primary_transfer_mode;
        int16 secondary_transfer_mode;
        int16 transparent_transfer_mode;

        int16 polygon_index, line_index;

        int16 primary_lightsource_index;
        int16 secondary_lightsource_index;
        int16 transparent_lightsource_index;

        int32 ambient_delta;

        int16 unused[1];
};
const int SIZEOF_side_data = 64;






enum
{
        _polygon_is_normal,
        _polygon_is_item_impassable,
        _polygon_is_monster_impassable,
        _polygon_is_hill,
        _polygon_is_base,
        _polygon_is_platform,
        _polygon_is_light_on_trigger,
        _polygon_is_platform_on_trigger,
        _polygon_is_light_off_trigger,
        _polygon_is_platform_off_trigger,
        _polygon_is_teleporter,
        _polygon_is_zone_border,
        _polygon_is_goal,
        _polygon_is_visible_monster_trigger,
        _polygon_is_invisible_monster_trigger,
        _polygon_is_dual_monster_trigger,
        _polygon_is_item_trigger,
        _polygon_must_be_explored,
        _polygon_is_automatic_exit,
        _polygon_is_minor_ouch,
        _polygon_is_major_ouch,
        _polygon_is_glue,
        _polygon_is_glue_trigger,
        _polygon_is_superglue
};





struct horizontal_surface_data
{
        world_distance height;
        int16 lightsource_index;
        shape_descriptor texture;
        int16 transfer_mode, transfer_mode_data;

        world_point2d origin;
};

struct polygon_data
{
        int16 type;
        uint16 flags;
        int16 permutation;

        uint16 vertex_count;
        int16 endpoint_indexes[8];
        int16 line_indexes[8];

        shape_descriptor floor_texture, ceiling_texture;
        world_distance floor_height, ceiling_height;
        int16 floor_lightsource_index, ceiling_lightsource_index;

        int32 area;

        int16 first_object;




        int16 first_exclusion_zone_index;
        int16 line_exclusion_zone_count;
        int16 point_exclusion_zone_count;

        int16 floor_transfer_mode;
        int16 ceiling_transfer_mode;

        int16 adjacent_polygon_indexes[8];


        int16 first_neighbor_index;
        int16 neighbor_count;

        world_point2d center;

        int16 side_indexes[8];

        world_point2d floor_origin, ceiling_origin;

        int16 media_index;
        int16 media_lightsource_index;



        int16 sound_source_indexes;


        int16 ambient_sound_image_index;
        int16 random_sound_image_index;

        int16 unused[1];
};
const int SIZEOF_polygon_data = 128;



struct saved_lighting_function_specification
{
        int16 function;

        int16 period, delta_period;
        uint16 intensity_hi, intensity_lo, delta_intensity_hi, delta_intensity_lo;
};

struct saved_static_light_data
{
        int16 type;
        uint16 flags;

        int16 phase;

        struct saved_lighting_function_specification primary_active, secondary_active, becoming_active;
        struct saved_lighting_function_specification primary_inactive, secondary_inactive, becoming_inactive;

        int16 tag;

        int16 unused[4];
};
const int SIZEOF_saved_static_light_data = 100;



enum
{
        _wuss_level,
        _easy_level,
        _normal_level,
        _major_damage_level,
        _total_carnage_level,
        NUMBER_OF_GAME_DIFFICULTY_LEVELS
};


enum
{
        kDifficultyLevelsStringSetID = 145
};





enum
{
        _reappears_in_random_location= 0x0001
};

struct object_frequency_definition
{
        uint16 flags;

        int16 initial_count;
        int16 minimum_count;
        int16 maximum_count;

        int16 random_count;
        uint16 random_chance;
};
const int SIZEOF_object_frequency_definition = 12;



enum
{
        _mission_none= 0x0000,
        _mission_extermination= 0x0001,
        _mission_exploration= 0x0002,
        _mission_retrieval= 0x0004,
        _mission_repair= 0x0008,
        _mission_rescue= 0x0010
};

enum
{
        _environment_normal= 0x0000,
        _environment_vacuum= 0x0001,
        _environment_magnetic= 0x0002,
        _environment_rebellion= 0x0004,
        _environment_low_gravity= 0x0008,

        _environment_network= 0x2000,
        _environment_single_player= 0x4000
};


struct static_data
{
        int16 environment_code;

        int16 physics_model;
        int16 song_index;
        int16 mission_flags;
        int16 environment_flags;

        int16 unused[4];

        char level_name[(64+2)];
        uint32 entry_point_flags;
};
const unsigned int SIZEOF_static_data = 88;

enum
{
        _multiplayer_game= 0x0001,
        _ammo_replenishes= 0x0002,
        _weapons_replenish= 0x0004,
        _specials_replenish= 0x0008,
        _monsters_replenish= 0x0010,
        _motion_sensor_does_not_work= 0x00020,
        _overhead_map_is_omniscient= 0x0040,
        _burn_items_on_death= 0x0080,
        _live_network_stats= 0x0100,
        _game_has_kill_limit= 0x0200,
        _force_unique_teams= 0x0400,
        _dying_is_penalized= 0x0800,
        _suicide_is_penalized= 0x1000,
        _overhead_map_shows_items= 0x2000,
        _overhead_map_shows_monsters= 0x4000,
        _overhead_map_shows_projectiles= 0x8000
};

enum
  {
    _allow_crosshair = 0x0001,
    _allow_tunnel_vision = 0x0002,
    _allow_behindview = 0x0004,
  };

enum
{
        _level_unfinished,
        _level_finished,
        _level_failed
};


enum {
        _game_of_kill_monsters,
        _game_of_cooperative_play,
        _game_of_capture_the_flag,
        _game_of_king_of_the_hill,
        _game_of_kill_man_with_ball,
        _game_of_defense,
        _game_of_rugby,
        _game_of_tag,
        NUMBER_OF_GAME_TYPES
};
# 907 "../../AlephOneSrc/map.h"
struct game_data
{



        int32 game_time_remaining;
        int16 game_type;
        int16 game_options;
        int16 cheat_flags;
        int16 kill_limit;
        int16 initial_random_seed;
        int16 difficulty_level;
        int16 parameters[2];
};

struct dynamic_data
{

        int32 tick_count;


        uint16 random_seed;



        struct game_data game_information;

        int16 player_count;
        int16 speaking_player_index;

        int16 unused;
        int16 platform_count;
        int16 endpoint_count;
        int16 line_count;
        int16 side_count;
        int16 polygon_count;
        int16 lightsource_count;
        int16 map_index_count;
        int16 ambient_sound_image_count, random_sound_image_count;


        int16 object_count;
        int16 monster_count;
        int16 projectile_count;
        int16 effect_count;
        int16 light_count;

        int16 default_annotation_count;
        int16 personal_annotation_count;

        int16 initial_objects_count;

        int16 garbage_object_count;


        int16 last_monster_index_to_get_time, last_monster_index_to_build_path;


        int16 new_monster_mangler_cookie, new_monster_vanishing_cookie;


        int16 civilians_killed_by_players;


        int16 random_monsters_left[64];
        int16 current_monster_count[64];
        int16 random_items_left[64];
        int16 current_item_count[64];

        int16 current_level_number;

        int16 current_civilian_causalties, current_civilian_count;
        int16 total_civilian_causalties, total_civilian_count;

        world_point2d game_beacon;
        int16 game_player_index;
};
const unsigned int SIZEOF_dynamic_data = 604;






extern struct static_data *static_world;
extern struct dynamic_data *dynamic_world;

extern vector<object_data> ObjectList;




extern vector<endpoint_data> EndpointList;



extern vector<line_data> LineList;



extern vector<side_data> SideList;



extern vector<polygon_data> PolygonList;
# 1021 "../../AlephOneSrc/map.h"
extern vector<ambient_sound_image_data> AmbientSoundImageList;



extern vector<random_sound_image_data> RandomSoundImageList;






extern vector<int16> MapIndexList;




extern vector<uint8> AutomapLineList;


extern vector<uint8> AutomapPolygonList;





extern vector<map_annotation> MapAnnotationList;



extern vector<map_object> SavedObjectList;






extern bool game_is_networked;
# 1066 "../../AlephOneSrc/map.h"
extern bool LandscapesLoaded;



extern short LoadedWallTexture;



void initialize_marathon(void);

void leaving_map(void);

bool entering_map(bool restoring_saved);



std::pair<bool, int16> update_world(void);


void reset_intermediate_action_queues();
void set_prediction_wanted(bool inPrediction);


void changed_polygon(short original_polygon_index, short new_polygon_index, short player_index);

short calculate_damage(struct damage_definition *damage);
void cause_polygon_damage(short polygon_index, short monster_index);

short calculate_level_completion_state(void);



void allocate_map_memory(void);
void initialize_map_for_new_game(void);
void initialize_map_for_new_level(void);

void mark_environment_collections(short environment_code, bool loading);
bool collection_in_environment(short collection_code, short environment_code);

bool valid_point2d(world_point2d *p);
bool valid_point3d(world_point3d *p);

void reconnect_map_object_list(void);
short new_map_object2d(world_point2d *location, short polygon_index, shape_descriptor shape, angle facing);
short new_map_object3d(world_point3d *location, short polygon_index, shape_descriptor shape, angle facing);
short new_map_object(struct object_location *location, shape_descriptor shape);
short attach_parasitic_object(short host_index, shape_descriptor shape, angle facing);
void remove_parasitic_object(short host_index);
bool translate_map_object(short object_index, world_point3d *new_location, short new_polygon_index);
short find_new_object_polygon(world_point2d *parent_location, world_point2d *child_location, short parent_polygon_index);
void remove_map_object(short index);




extern void remove_object_from_polygon_object_list(short object_index);
extern void remove_object_from_polygon_object_list(short object_index, short polygon_index);




extern void deferred_add_object_to_polygon_object_list(short object_index, short index_to_precede);




extern void perform_deferred_polygon_object_list_manipulations();



struct shape_and_transfer_mode
{

        short collection_code, low_level_shape_index;

        short transfer_mode;
        _fixed transfer_phase;


        short Frame, NextFrame;


        short Phase, Ticks;
};

void get_object_shape_and_transfer_mode(world_point3d *camera_location, short object_index, struct shape_and_transfer_mode *data);
void set_object_shape_and_transfer_mode(short object_index, shape_descriptor shape, short transfer_mode);
void animate_object(short object_index);
bool randomize_object_sequence(short object_index, shape_descriptor shape);

void play_object_sound(short object_index, short sound_code);
void play_polygon_sound(short polygon_index, short sound_code);
void _play_side_sound(short side_index, short sound_code, _fixed pitch);
void play_world_sound(short polygon_index, world_point3d *origin, short sound_code);



void handle_random_sound_image(void);

void initialize_map_for_new_player(void);
void generate_map(short level);

short world_point_to_polygon_index(world_point2d *location);
short clockwise_endpoint_in_line(short polygon_index, short line_index, short index);

short find_adjacent_polygon(short polygon_index, short line_index);
short find_adjacent_side(short polygon_index, short line_index);
short find_shared_line(short polygon_index1, short polygon_index2);
bool line_is_landscaped(short polygon_index, short line_index, world_distance z);
short find_line_crossed_leaving_polygon(short polygon_index, world_point2d *p0, world_point2d *p1);
bool point_in_polygon(short polygon_index, world_point2d *p);
void find_center_of_polygon(short polygon_index, world_point2d *center);

int32 point_to_line_segment_distance_squared(world_point2d *p, world_point2d *a, world_point2d *b);
int32 point_to_line_distance_squared(world_point2d *p, world_point2d *a, world_point2d *b);

_fixed closest_point_on_line(world_point2d *e0, world_point2d *e1, world_point2d *p, world_point2d *closest_point);
void closest_point_on_circle(world_point2d *c, world_distance radius, world_point2d *p, world_point2d *closest_point);

_fixed find_line_intersection(world_point2d *e0, world_point2d *e1, world_point3d *p0,
        world_point3d *p1, world_point3d *intersection);
_fixed find_floor_or_ceiling_intersection(world_distance h, world_point3d *p0, world_point3d *p1, world_point3d *intersection);

void ray_to_line_segment(world_point2d *p0, world_point2d *p1, angle theta, world_distance d);

void push_out_line(world_point2d *e0, world_point2d *e1, world_distance d, world_distance line_length);
bool keep_line_segment_out_of_walls(short polygon_index, world_point3d *p0,
        world_point3d *p1, world_distance maximum_delta_height, world_distance height, world_distance *adjusted_floor_height,
        world_distance *adjusted_ceiling_height, short *supporting_polygon_index);

_fixed get_object_light_intensity(short object_index);

bool line_has_variable_height(short line_index);

void recalculate_map_counts(void);

bool change_polygon_height(short polygon_index, world_distance new_floor_height,
        world_distance new_ceiling_height, struct damage_definition *damage);

bool line_is_obstructed(short polygon_index1, world_point2d *p1, short polygon_index2, world_point2d *p2);
bool point_is_player_visible(short max_players, short polygon_index, world_point2d *p, int32 *distance);
bool point_is_monster_visible(short polygon_index, world_point2d *p, int32 *distance);

void turn_object_to_shit(short garbage_object_index);

void random_point_on_circle(world_point3d *center, short center_polygon_index,
        world_distance radius, world_point3d *random_point, short *random_polygon_index);

void calculate_line_midpoint(short line_index, world_point3d *midpoint);

void *get_map_structure_chunk(long chunk_size);
void reallocate_map_structure_memory(long size);
# 1226 "../../AlephOneSrc/map.h"
object_data *get_object_data(
        const short object_index);

polygon_data *get_polygon_data(
        const short polygon_index);

line_data *get_line_data(
        const short line_index);

side_data *get_side_data(
        const short side_index);

endpoint_data *get_endpoint_data(
        const short endpoint_index);

short *get_map_indexes(
        const short index,
        const short count);

ambient_sound_image_data *get_ambient_sound_image_data(
        const short ambient_sound_image_index);

random_sound_image_data *get_random_sound_image_data(
        const short random_sound_image_index);



short new_map_endpoint(world_point2d *where);
short duplicate_map_endpoint(short old_endpoint_index);
short new_map_line(short a, short b, short poly_a, short poly_b, short side_a, short side_b);
short duplicate_map_line(short old_line_index);
short new_map_polygon(short *line_indexes, short line_count, short floor_height,
        short ceiling_height, short floor_texture, short ceiling_texture, short lightsource_index);

void precalculate_map_indexes(void);

void touch_polygon(short polygon_index);
void recalculate_redundant_polygon_data(short polygon_index);
void recalculate_redundant_endpoint_data(short endpoint_index);
void recalculate_redundant_line_data(short line_index);
void recalculate_redundant_side_data(short side_index, short line_index);

void calculate_endpoint_polygon_owners(short endpoint_index, short *first_index, short *index_count);
void calculate_endpoint_line_owners(short endpoint_index, short *first_index, short *index_count);

void guess_side_lightsource_indexes(short side_index);

void set_map_index_buffer_size(long length);



uint8 *unpack_endpoint_data(uint8 *Stream, endpoint_data* Objects, size_t Count);
uint8 *pack_endpoint_data(uint8 *Stream, endpoint_data* Objects, size_t Count);
uint8 *unpack_line_data(uint8 *Stream, line_data* Objects, size_t Count);
uint8 *pack_line_data(uint8 *Stream, line_data* Objects, size_t Count);
uint8 *unpack_side_data(uint8 *Stream, side_data* Objects, size_t Count);
uint8 *pack_side_data(uint8 *Stream, side_data* Objects, size_t Count);
uint8 *unpack_polygon_data(uint8 *Stream, polygon_data* Objects, size_t Count);
uint8 *pack_polygon_data(uint8 *Stream, polygon_data* Objects, size_t Count);

uint8 *unpack_map_annotation(uint8 *Stream, map_annotation* Objects, size_t Count);
uint8 *pack_map_annotation(uint8 *Stream, map_annotation* Objects, size_t Count);
uint8 *unpack_map_object(uint8 *Stream, map_object* Objects, size_t Count);
uint8 *pack_map_object(uint8 *Stream, map_object* Objects, size_t Count);
uint8 *unpack_object_frequency_definition(uint8 *Stream, object_frequency_definition* Objects, size_t Count);
uint8 *pack_object_frequency_definition(uint8 *Stream, object_frequency_definition* Objects, size_t Count);
uint8 *unpack_static_data(uint8 *Stream, static_data* Objects, size_t Count);
uint8 *pack_static_data(uint8 *Stream, static_data* Objects, size_t Count);

uint8 *unpack_ambient_sound_image_data(uint8 *Stream, ambient_sound_image_data* Objects, size_t Count);
uint8 *pack_ambient_sound_image_data(uint8 *Stream, ambient_sound_image_data* Objects, size_t Count);
uint8 *unpack_random_sound_image_data(uint8 *Stream, random_sound_image_data* Objects, size_t Count);
uint8 *pack_random_sound_image_data(uint8 *Stream, random_sound_image_data* Objects, size_t Count);

uint8 *unpack_dynamic_data(uint8 *Stream, dynamic_data* Objects, size_t Count);
uint8 *pack_dynamic_data(uint8 *Stream, dynamic_data* Objects, size_t Count);
uint8 *unpack_object_data(uint8 *Stream, object_data* Objects, size_t Count);
uint8 *pack_object_data(uint8 *Stream, object_data* Objects, size_t Count);

uint8 *unpack_damage_definition(uint8 *Stream, damage_definition* Objects, size_t Count);
uint8 *pack_damage_definition(uint8 *Stream, damage_definition* Objects, size_t Count);
# 1317 "../../AlephOneSrc/map.h"
void load_placement_data(uint8 *_monsters, uint8 *_items);
struct object_frequency_definition *get_placement_info(void);
void place_initial_objects(void);
void recreate_objects(void);
void object_was_just_added(short object_class, short object_type);
void object_was_just_destroyed(short object_class, short object_type);
short get_random_player_starting_location_and_facing(short max_player_index, short team, struct object_location *location);

void mark_all_monster_collections(bool loading);
void load_all_monster_sounds(void);





void update_lightsources(void);
short new_lightsource_from_old(short old_source);
void entered_polygon(short index);
void left_polygon(short index);

void change_light_state(size_t lightsource_index, short state);



void mark_control_panel_shapes(bool load);
void initialize_control_panels_for_level(void);
void update_control_panels(void);

bool control_panel_in_environment(short control_panel_type, short environment_code);

void change_device_state(short device_index, bool active);
short new_device(world_point2d *location, short initial_polygon_index,
        short type, short extra_data, bool active);
void update_action_key(short player_index, bool triggered);

bool untoggled_repair_switches_on_level(void);

void assume_correct_switch_position(short switch_type, short permutation, bool new_state);

void try_and_toggle_control_panel(short polygon_index, short line_index);

bool line_side_has_control_panel(short line_index, short polygon_index, short *side_index_with_panel);



struct map_identifier {
        uint32 scenario_checksum;
        short level_index;
};

void set_to_default_map(void);



bool use_map_file(uint32 checksum);
bool load_level_from_map(short level_index);
uint32 get_current_map_checksum(void);
bool select_map_to_use(void);



bool save_level(const char* filename);



short get_player_starting_location_and_facing(short team, short index,
        struct object_location *location);

void pause_game(void);
void resume_game(void);

bool get_indexed_entry_point(struct entry_point *entry_point, short *index, int32 type);
bool get_entry_points(vector<entry_point> &vec, int32 type);

bool new_game(short number_of_players, bool network,
        struct game_data *game_information,
        struct player_start_data *player_start_information,
        struct entry_point *entry_point);
bool goto_level(struct entry_point *entry, bool new_game);




extern struct object_frequency_definition object_placement_info[2*64];
extern struct object_frequency_definition *monster_placement_info;
extern struct object_frequency_definition *item_placement_info;
# 50 "../../AlephOneSrc/monsters.h" 2

# 1 "../../AlephOneSrc/monster_definitions.h" 1





# 1 "../../AlephOneSrc/monsters.h" 1
# 7 "../../AlephOneSrc/monster_definitions.h" 2
# 41 "../../AlephOneSrc/monster_definitions.h"
# 1 "../../AlephOneSrc/effects.h" 1
# 47 "../../AlephOneSrc/effects.h"
enum
{
        _end_when_animation_loops= 0x0001,
        _end_when_transfer_animation_loops= 0x0002,
        _sound_only= 0x0004,
        _make_twin_visible= 0x0008,
        _media_effect= 0x0010
};
struct effect_definition
{
        int16 collection, shape;

        _fixed sound_pitch;

        uint16 flags;
        int16 delay, delay_sound;
};

enum
{
        _effect_rocket_explosion,
        _effect_rocket_contrail,
        _effect_grenade_explosion,
        _effect_grenade_contrail,
        _effect_bullet_ricochet,
        _effect_alien_weapon_ricochet,
        _effect_flamethrower_burst,
        _effect_fighter_blood_splash,
        _effect_player_blood_splash,
        _effect_civilian_blood_splash,
        _effect_assimilated_civilian_blood_splash,
        _effect_enforcer_blood_splash,
        _effect_compiler_bolt_minor_detonation,
        _effect_compiler_bolt_major_detonation,
        _effect_compiler_bolt_major_contrail,
        _effect_fighter_projectile_detonation,
        _effect_fighter_melee_detonation,
        _effect_hunter_projectile_detonation,
        _effect_hunter_spark,
        _effect_minor_fusion_detonation,
        _effect_major_fusion_detonation,
        _effect_major_fusion_contrail,
        _effect_fist_detonation,
        _effect_minor_defender_detonation,
        _effect_major_defender_detonation,
        _effect_defender_spark,
        _effect_trooper_blood_splash,
        _effect_water_lamp_breaking,
        _effect_lava_lamp_breaking,
        _effect_sewage_lamp_breaking,
        _effect_alien_lamp_breaking,
        _effect_metallic_clang,
        _effect_teleport_object_in,
        _effect_teleport_object_out,
        _effect_small_water_splash,
        _effect_medium_water_splash,
        _effect_large_water_splash,
        _effect_large_water_emergence,
        _effect_small_lava_splash,
        _effect_medium_lava_splash,
        _effect_large_lava_splash,
        _effect_large_lava_emergence,
        _effect_small_sewage_splash,
        _effect_medium_sewage_splash,
        _effect_large_sewage_splash,
        _effect_large_sewage_emergence,
        _effect_small_goo_splash,
        _effect_medium_goo_splash,
        _effect_large_goo_splash,
        _effect_large_goo_emergence,
        _effect_minor_hummer_projectile_detonation,
        _effect_major_hummer_projectile_detonation,
        _effect_durandal_hummer_projectile_detonation,
        _effect_hummer_spark,
        _effect_cyborg_projectile_detonation,
        _effect_cyborg_blood_splash,
        _effect_minor_fusion_dispersal,
        _effect_major_fusion_dispersal,
        _effect_overloaded_fusion_dispersal,
        _effect_sewage_yeti_blood_splash,
        _effect_sewage_yeti_projectile_detonation,
        _effect_water_yeti_blood_splash,
        _effect_lava_yeti_blood_splash,
        _effect_lava_yeti_projectile_detonation,
        _effect_yeti_melee_detonation,
        _effect_juggernaut_spark,
        _effect_juggernaut_missile_contrail,

        _effect_small_jjaro_splash,
        _effect_medium_jjaro_splash,
        _effect_large_jjaro_splash,
        _effect_large_jjaro_emergence,
        _effect_civilian_fusion_blood_splash,
        _effect_assimilated_civilian_fusion_blood_splash,
        NUMBER_OF_EFFECT_TYPES
};






struct effect_data
{
        short type;
        short object_index;

        uint16 flags;

        short data;
        short delay;

        short unused[11];
};
const int SIZEOF_effect_data = 32;

const int SIZEOF_effect_definition = 14;





extern vector<effect_data> EffectList;
# 187 "../../AlephOneSrc/effects.h"
effect_data *get_effect_data(
        const short effect_index);




uint8 *unpack_effect_data(uint8 *Stream, effect_data *Objects, size_t Count);
uint8 *pack_effect_data(uint8 *Stream, effect_data *Objects, size_t Count);
uint8 *unpack_effect_definition(uint8 *Stream, size_t Count);
uint8 *pack_effect_definition(uint8 *Stream, size_t Count);
# 42 "../../AlephOneSrc/monster_definitions.h" 2
# 1 "../../AlephOneSrc/projectiles.h" 1
# 50 "../../AlephOneSrc/projectiles.h"
enum
{
        _projectile_rocket,
        _projectile_grenade,
        _projectile_pistol_bullet,
        _projectile_rifle_bullet,
        _projectile_shotgun_bullet,
        _projectile_staff,
        _projectile_staff_bolt,
        _projectile_flamethrower_burst,
        _projectile_compiler_bolt_minor,
        _projectile_compiler_bolt_major,
        _projectile_alien_weapon,
        _projectile_fusion_bolt_minor,
        _projectile_fusion_bolt_major,
        _projectile_hunter,
        _projectile_fist,
        _projectile_armageddon_sphere,
        _projectile_armageddon_electricity,
        _projectile_juggernaut_rocket,
        _projectile_trooper_bullet,
        _projectile_trooper_grenade,
        _projectile_minor_defender,
        _projectile_major_defender,
        _projectile_juggernaut_missile,
        _projectile_minor_energy_drain,
        _projectile_major_energy_drain,
        _projectile_oxygen_drain,
        _projectile_minor_hummer,
        _projectile_major_hummer,
        _projectile_durandal_hummer,
        _projectile_minor_cyborg_ball,
        _projectile_major_cyborg_ball,
        _projectile_ball,
        _projectile_minor_fusion_dispersal,
        _projectile_major_fusion_dispersal,
        _projectile_overloaded_fusion_dispersal,
        _projectile_yeti,
        _projectile_sewage_yeti,
        _projectile_lava_yeti,

        _projectile_smg_bullet,
        NUMBER_OF_PROJECTILE_TYPES
};
# 104 "../../AlephOneSrc/projectiles.h"
struct projectile_data
{
        short type;

        short object_index;

        short target_index;

        angle elevation;

        short owner_index;
        short owner_type;
        uint16 flags;


        short ticks_since_last_contrail, contrail_count;

        world_distance distance_travelled;

        world_distance gravity;

        _fixed damage_scale;

        short permutation;

        short unused[2];
};
const int SIZEOF_projectile_data = 32;

const int SIZEOF_projectile_definition = 48;





extern vector<projectile_data> ProjectileList;






bool preflight_projectile(world_point3d *origin, short polygon_index, world_point3d *_vector,
        angle delta_theta, short type, short owner, short owner_type, short *target_index);
short new_projectile(world_point3d *origin, short polygon_index, world_point3d *_vector,
        angle delta_theta, short type, short owner_index, short owner_type, short intended_target_index,
        _fixed damage_scale);
void detonate_projectile(world_point3d *origin, short polygon_index, short type,
        short owner_index, short owner_type, _fixed damage_scale);

void move_projectiles(void);

void remove_projectile(short projectile_index);
void remove_all_projectiles(void);

void orphan_projectiles(short monster_index);

void mark_projectile_collections(short type, bool loading);
void load_projectile_sounds(short type);

void drop_the_ball(world_point3d *origin, short polygon_index, short owner_index,
        short owner_type, short item_type);


bool ProjectileIsGuided(short Type);

projectile_data *get_projectile_data(
        const short projectile_index);




uint8 *unpack_projectile_data(uint8 *Stream, projectile_data *Objects, size_t Count);
uint8 *pack_projectile_data(uint8 *Stream, projectile_data *Objects, size_t Count);
uint8 *unpack_projectile_definition(uint8 *Stream, size_t Count);
uint8 *pack_projectile_definition(uint8 *Stream, size_t Count);

extern struct projectile_definition projectile_definitions[NUMBER_OF_PROJECTILE_TYPES];
# 43 "../../AlephOneSrc/monster_definitions.h" 2

# 1 "../../AlephOneSrc/mysound.h" 1
# 47 "../../AlephOneSrc/mysound.h"
class FileSpecifier;
class LoadedResource;





enum
{
        NUMBER_OF_SOUND_VOLUME_LEVELS= 8,

        MAXIMUM_SOUND_VOLUME_BITS= 8,
        MAXIMUM_SOUND_VOLUME= 1<<MAXIMUM_SOUND_VOLUME_BITS
};

enum
{
        _8bit_22k_source,
        _16bit_22k_source,

        NUMBER_OF_SOUND_SOURCES
};

enum
{
        _stereo_flag= 0x0001,
        _dynamic_tracking_flag= 0x0002,
        _doppler_shift_flag= 0x0004,
        _ambient_sound_flag= 0x0008,
        _16bit_sound_flag= 0x0010,
        _more_sounds_flag= 0x0020,
        _relative_volume_flag = 0x0040,
        _extra_memory_flag= 0x0100,
        _extra_extra_memory_flag= 0x0200
};

enum
{
        _sound_was_obstructed= 0x0001,
        _sound_was_media_obstructed= 0x0002,
        _sound_was_media_muffled= 0x0004
};

enum
{
        _lower_frequency= (1L<<16)-(1L<<16)/8,
        _normal_frequency= (1L<<16),
        _higher_frequency= (1L<<16)+(1L<<16)/8
};



enum
{
        _ambient_snd_water,
        _ambient_snd_sewage,
        _ambient_snd_lava,
        _ambient_snd_goo,
        _ambient_snd_under_media,
        _ambient_snd_wind,
        _ambient_snd_waterfall,
        _ambient_snd_siren,
        _ambient_snd_fan,
        _ambient_snd_spht_door,
        _ambient_snd_spht_platform,
        _ambient_snd_heavy_spht_door,
        _ambient_snd_heavy_spht_platform,
        _ambient_snd_light_machinery,
        _ambient_snd_heavy_machinery,
        _ambient_snd_transformer,
        _ambient_snd_sparking_transformer,
        _ambient_snd_machine_binder,
        _ambient_snd_machine_bookpress,
        _ambient_snd_machine_puncher,
        _ambient_snd_electric,
        _ambient_snd_alarm,
        _ambient_snd_night_wind,
        _ambient_snd_pfhor_door,
        _ambient_snd_pfhor_platform,
        _ambient_snd_alien_noise1,
        _ambient_snd_alien_noise2,

        _ambient_snd_alien_harmonics,

        NUMBER_OF_AMBIENT_SOUND_DEFINITIONS
};

enum
{
        _random_snd_water_drip,
        _random_snd_surface_explosion,
        _random_snd_underground_explosion,
        _random_snd_owl,

        _random_snd_creak,

        NUMBER_OF_RANDOM_SOUND_DEFINITIONS
};

enum
{
        _snd_startup,
        _snd_teleport_in,
        _snd_teleport_out,
        _snd_body_being_crunched,

        _snd_creak,

        _snd_absorbed,

        _snd_breathing,
        _snd_oxygen_warning,
        _snd_suffocation,

        _snd_energy_refuel,
        _snd_oxygen_refuel,
        _snd_cant_toggle_switch,
        _snd_switch_on,
        _snd_switch_off,
        _snd_puzzle_switch,
        _snd_chip_insertion,
        _snd_pattern_buffer,
        _snd_destroy_control_panel,

        _snd_adjust_volume,
        _snd_got_powerup,
        _snd_got_item,

        _snd_bullet_ricochet,
        _snd_metallic_ricochet,
        _snd_empty_gun,

        _snd_spht_door_opening,
        _snd_spht_door_closing,
        _snd_spht_door_obstructed,

        _snd_spht_platform_starting,
        _snd_spht_platform_stopping,

        _snd_owl,

        _snd_smg_firing,
        _snd_smg_reloading,



        _snd_heavy_spht_platform_starting,
        _snd_heavy_spht_platform_stopping,

        _snd_fist_hitting,

        _snd_magnum_firing,
        _snd_magnum_reloading,

        _snd_assault_rifle_firing,
        _snd_grenade_launcher_firing,
        _snd_grenade_exploding,
        _snd_grenade_flyby,

        _snd_fusion_firing,
        _snd_fusion_exploding,
        _snd_fusion_flyby,
        _snd_fusion_charging,

        _snd_rocket_exploding,
        _snd_rocket_flyby,
        _snd_rocket_firing,

        _snd_flamethrower,

        _snd_body_falling,
        _snd_body_exploding,
        _snd_bullet_hitting_flesh,

        _snd_fighter_activate,
        _snd_fighter_wail,
        _snd_fighter_scream,
        _snd_fighter_chatter,
        _snd_fighter_attack,
        _snd_fighter_projectile_hit,
        _snd_fighter_projectile_flyby,

        _snd_compiler_attack,
        _snd_compiler_death,
        _snd_compiler_hit,
        _snd_compiler_projectile_flyby,
        _snd_compiler_projectile_hit,

        _snd_cyborg_moving,
        _snd_cyborg_attack,
        _snd_cyborg_hit,
        _snd_cyborg_death,
        _snd_cyborg_projectile_bounce,
        _snd_cyborg_projectile_hit,
        _snd_cyborg_projectile_flyby,

        _snd_hummer_activate,
        _snd_hummer_start_attack,
        _snd_hummer_attack,
        _snd_hummer_dying,
        _snd_hummer_death,
        _snd_hummer_projectile_hit,
        _snd_hummer_projectile_flyby,

        _snd_human_wail,
        _snd_human_scream,
        _snd_human_hit,
        _snd_human_chatter,
        _snd_assimilated_human_chatter,
        _snd_human_trash_talk,
        _snd_human_apology,
        _snd_human_activation,
        _snd_human_clear,
        _snd_human_stop_shooting_me_you_bastard,
        _snd_human_area_secure,
        _snd_kill_the_player,

        _snd_water,
        _snd_sewage,
        _snd_lava,
        _snd_goo,
        _snd_under_media,
        _snd_wind,
        _snd_waterfall,
        _snd_siren,
        _snd_fan,
        _snd_spht_door,
        _snd_spht_platform,

        _snd_alien_harmonics,

        _snd_heavy_spht_platform,
        _snd_light_machinery,
        _snd_heavy_machinery,
        _snd_transformer,
        _snd_sparking_transformer,

        _snd_water_drip,

        _snd_walking_in_water,
        _snd_exit_water,
        _snd_enter_water,
        _snd_small_water_splash,
        _snd_medium_water_splash,
        _snd_large_water_splash,

        _snd_walking_in_lava,
        _snd_enter_lava,
        _snd_exit_lava,
        _snd_small_lava_splash,
        _snd_medium_lava_splash,
        _snd_large_lava_splash,

        _snd_walking_in_sewage,
        _snd_exit_sewage,
        _snd_enter_sewage,
        _snd_small_sewage_splash,
        _snd_medium_sewage_splash,
        _snd_large_sewage_splash,

        _snd_walking_in_goo,
        _snd_exit_goo,
        _snd_enter_goo,
        _snd_small_goo_splash,
        _snd_medium_goo_splash,
        _snd_large_goo_splash,

        _snd_major_fusion_firing,
        _snd_major_fusion_charged,

        _snd_assault_rifle_reloading,
        _snd_assault_rifle_shell_casings,

        _snd_shotgun_firing,
        _snd_shotgun_reloading,

        _snd_ball_bounce,
        _snd_you_are_it,
        _snd_got_ball,

        _snd_computer_interface_logon,
        _snd_computer_interface_logout,
        _snd_computer_interface_page,

        _snd_heavy_spht_door,
        _snd_heavy_spht_door_opening,
        _snd_heavy_spht_door_closing,
        _snd_heavy_spht_door_open,
        _snd_heavy_spht_door_closed,
        _snd_heavy_spht_door_obstructed,

        _snd_hunter_activate,
        _snd_hunter_attack,
        _snd_hunter_dying,
        _snd_hunter_landing,
        _snd_hunter_exploding,
        _snd_hunter_projectile_hit,
        _snd_hunter_projectile_flyby,

        _snd_enforcer_activate,
        _snd_enforcer_attack,
        _snd_enforcer_projectile_hit,
        _snd_enforcer_projectile_flyby,

        _snd_yeti_melee_attack,
        _snd_yeti_melee_attack_hit,
        _snd_yeti_projectile_attack,
        _snd_yeti_projectile_sewage_attack_hit,
        _snd_yeti_projectile_sewage_flyby,
        _snd_yeti_projectile_lava_attack_hit,
        _snd_yeti_projectile_lava_flyby,
        _snd_yeti_dying,

        _snd_machine_binder,
        _snd_machine_bookpress,
        _snd_machine_puncher,
        _snd_electric,
        _snd_alarm,
        _snd_night_wind,

        _snd_surface_explosion,
        _snd_underground_explosion,

        _snd_defender_attack,
        _snd_defender_hit,
        _snd_defender_flyby,
        _snd_defender_being_hit,
        _snd_defender_exploding,

        _snd_tick_chatter,
        _snd_tick_falling,
        _snd_tick_flapping,
        _snd_tick_exploding,

        _snd_ceiling_lamp_exploding,

        _snd_pfhor_platform_starting,
        _snd_pfhor_platform_stopping,
        _snd_pfhor_platform,

        _snd_pfhor_door_opening,
        _snd_pfhor_door_closing,
        _snd_pfhor_door_obstructed,
        _snd_pfhor_door,

        _snd_pfhor_switch_off,
        _snd_pfhor_switch_on,

        _snd_juggernaut_firing,
        _snd_juggernaut_warning,
        _snd_juggernaut_exploding,
        _snd_juggernaut_preparing_to_fire,

        _snd_enforcer_exploding,

        _snd_alien_noise1,
        _snd_alien_noise2,



        _snd_civilian_fusion_wail,
        _snd_civilian_fusion_scream,
        _snd_civilian_fusion_hit,
        _snd_civilian_fusion_chatter,
        _snd_assimilated_civilian_fusion_chatter,
        _snd_civilian_fusion_trash_talk,
        _snd_civilian_fusion_apology,
        _snd_civilian_fusion_activation,
        _snd_civilian_fusion_clear,
        _snd_civilian_fusion_stop_shooting_me_you_bastard,
        _snd_civilian_fusion_area_secure,
        _snd_civilian_fusion_kill_the_player,

        NUMBER_OF_SOUND_DEFINITIONS
};



typedef void (*add_ambient_sound_source_proc_ptr)(struct ambient_sound_data *ambient_sounds,
        world_location3d *source, world_location3d *listener, short sound_index,
        short absolute_volume);



struct sound_manager_parameters
{
        int16 channel_count;
        int16 volume;
        uint16 flags;

        int32 unused_long;
        _fixed pitch;

        int16 music;

        int16 unused[8];
};

struct dynamic_sound_data
{

        world_point3d *origin;


        world_vector3d *velocity;

        uint16 flags;
};





world_location3d *_sound_listener_proc(void);


uint16 _sound_obstructed_proc(world_location3d *source);

void _sound_add_ambient_sources_proc(void *data, add_ambient_sound_source_proc_ptr add_one_ambient_sound_source);



void initialize_sound_manager(struct sound_manager_parameters *parameters);
void default_sound_manager_parameters(void *prefs);
bool verify_sound_manager_parameters(struct sound_manager_parameters *parameters);
void set_sound_manager_parameters(struct sound_manager_parameters *parameters);

uint16 available_sound_manager_flags(uint16 flags);

bool adjust_sound_volume_up(struct sound_manager_parameters *parameters, short sound_index);
bool adjust_sound_volume_down(struct sound_manager_parameters *parameters, short sound_index);
void test_sound_volume(short volume, short sound_index);

void load_sound(short sound_index);
void load_sounds(short *sound_indexes, short count);

bool sound_is_playing(short sound_index);


void direct_play_sound(short sound_index, angle direction, short volume, _fixed pitch);

void _play_sound(short sound_index, world_location3d *source, short identifier, _fixed pitch);





void stop_sound(short identifier, short sound_index);
void unload_all_sounds(void);


void orphan_sound(short identifier);



void sound_manager_idle_proc(void);

void cause_ambient_sound_source_update(void);

short random_sound_index_to_sound_index(short random_sound_index);



short Sound_TerminalLogon();
short Sound_TerminalLogoff();
short Sound_TerminalPage();

short Sound_TeleportIn();
short Sound_TeleportOut();

short Sound_GotPowerup();
short Sound_GotItem();

short Sound_Crunched();
short Sound_Exploding();

short Sound_Breathing();
short Sound_OxygenWarning();

short Sound_AdjustVolume();



short Sound_ButtonSuccess();
short Sound_ButtonFailure();
short Sound_ButtonInoperative();
short Sound_OGL_Reset();


bool open_sound_file(FileSpecifier& File);






extern void play_sound_resource(LoadedResource &rsrc);
extern void stop_sound_resource(void);


extern void ensure_network_audio_playing();
extern void stop_network_audio();
# 45 "../../AlephOneSrc/monster_definitions.h" 2
# 1 "../../AlephOneSrc/items.h" 1
# 41 "../../AlephOneSrc/items.h"
enum
{
        _weapon,
        _ammunition,
        _powerup,
        _item,
        _weapon_powerup,
        _ball,

        NUMBER_OF_ITEM_TYPES,
        _network_statistics= NUMBER_OF_ITEM_TYPES
};

enum
{
        _i_knife,
        _i_magnum,
        _i_magnum_magazine,
        _i_plasma_pistol,
        _i_plasma_magazine,
        _i_assault_rifle,
        _i_assault_rifle_magazine,
        _i_assault_grenade_magazine,
        _i_missile_launcher,
        _i_missile_launcher_magazine,
        _i_invisibility_powerup,
        _i_invincibility_powerup,
        _i_infravision_powerup,
        _i_alien_shotgun,
        _i_alien_shotgun_magazine,
        _i_flamethrower,
        _i_flamethrower_canister,
        _i_extravision_powerup,
        _i_oxygen_powerup,
        _i_energy_powerup,
        _i_double_energy_powerup,
        _i_triple_energy_powerup,
        _i_shotgun,
        _i_shotgun_magazine,
        _i_spht_door_key,
        _i_uplink_chip,

        BALL_ITEM_BASE,
        _i_light_blue_ball= BALL_ITEM_BASE,
        _i_red_ball,
        _i_violet_ball,
        _i_yellow_ball,
        _i_brown_ball,
        _i_orange_ball,
        _i_blue_ball,
        _i_green_ball,


        _i_smg,
        _i_smg_ammo,

        NUMBER_OF_DEFINED_ITEMS
};


short new_item(struct object_location *location, short item_type);
void get_header_name(char *buffer, short type);
void get_item_name(char *buffer, short item_id, bool plural);
short get_item_kind(short item_id);
# 46 "../../AlephOneSrc/monster_definitions.h" 2
# 55 "../../AlephOneSrc/monster_definitions.h"
enum
{
        _class_player_bit,
        _class_human_civilian_bit,
        _class_madd_bit,
        _class_possessed_hummer_bit,

        _class_defender_bit,

        _class_fighter_bit,
        _class_trooper_bit,
        _class_hunter_bit,
        _class_enforcer_bit,
        _class_juggernaut_bit,
        _class_hummer_bit,

        _class_compiler_bit,
        _class_cyborg_bit,
        _class_assimilated_civilian_bit,

        _class_tick_bit,
        _class_yeti_bit,

        _class_player= 1<<_class_player_bit,
        _class_human_civilian= 1<<_class_human_civilian_bit,
        _class_madd= 1<<_class_madd_bit,
        _class_possessed_hummer= 1<<_class_possessed_hummer_bit,
        _class_human= _class_player|_class_human_civilian|_class_madd|_class_possessed_hummer,

        _class_defender= 1<<_class_defender_bit,

        _class_fighter= 1<<_class_fighter_bit,
        _class_trooper= 1<<_class_trooper_bit,
        _class_hunter= 1<<_class_hunter_bit,
        _class_enforcer= 1<<_class_enforcer_bit,
        _class_juggernaut= 1<<_class_juggernaut_bit,
        _class_pfhor= _class_fighter|_class_trooper|_class_hunter|_class_enforcer|_class_juggernaut,

        _class_compiler= 1<<_class_compiler_bit,
        _class_cyborg= 1<<_class_cyborg_bit,
        _class_assimilated_civilian= 1<<_class_assimilated_civilian_bit,
        _class_hummer= 1<<_class_hummer_bit,
        _class_client= _class_compiler|_class_assimilated_civilian|_class_cyborg|_class_hummer,

        _class_tick= 1<<_class_tick_bit,
        _class_yeti= 1<<_class_yeti_bit,
        _class_native= _class_tick|_class_yeti,

        _class_hostile_alien= _class_pfhor|_class_client,
        _class_neutral_alien= _class_native
};

enum
{
        _intelligence_low= 2,
        _intelligence_average= 3,
        _intelligence_high= 8
};

enum
{
        _slow_door_retry_mask= 63,
        _normal_door_retry_mask= 31,
        _fast_door_retry_mask= 15,
        _vidmaster_door_retry_mask= 3
};

enum
{
        _monster_is_omniscent= 0x1,
        _monster_flys= 0x2,
        _monster_is_alien= 0x4,
        _monster_major= 0x8,
        _monster_minor= 0x10,
        _monster_cannot_be_dropped= 0x20,
        _monster_floats= 0x40,
        _monster_cannot_attack= 0x80,
        _monster_uses_sniper_ledges= 0x100,
        _monster_is_invisible= 0x200,
        _monster_is_subtly_invisible= 0x400,
        _monster_is_kamakazi= 0x800,
        _monster_is_berserker= 0x1000,
        _monster_is_enlarged= 0x2000,
        _monster_has_delayed_hard_death= 0x4000,
        _monster_fires_symmetrically= 0x8000,
        _monster_has_nuclear_hard_death= 0x10000,
        _monster_cant_fire_backwards= 0x20000,
        _monster_can_die_in_flames= 0x40000,
        _monster_waits_with_clear_shot= 0x80000,
        _monster_is_tiny= 0x100000,
        _monster_attacks_immediately= 0x200000,
        _monster_is_not_afraid_of_water= 0x400000,
        _monster_is_not_afraid_of_sewage= 0x800000,
        _monster_is_not_afraid_of_lava= 0x1000000,
        _monster_is_not_afraid_of_goo= 0x2000000,
        _monster_can_teleport_under_media= 0x4000000,
        _monster_chooses_weapons_randomly= 0x8000000



};

enum
{
        _speed_slow= ((world_distance)(1<<10))/120,
        _speed_medium= ((world_distance)(1<<10))/80,
        _speed_almost_fast= ((world_distance)(1<<10))/70,
        _speed_fast= ((world_distance)(1<<10))/40,
        _speed_superfast1= ((world_distance)(1<<10))/30,
        _speed_superfast2= ((world_distance)(1<<10))/28,
        _speed_superfast3= ((world_distance)(1<<10))/26,
        _speed_superfast4= ((world_distance)(1<<10))/24,
        _speed_superfast5= ((world_distance)(1<<10))/22,
        _speed_blinding= ((world_distance)(1<<10))/20,
        _speed_insane= ((world_distance)(1<<10))/10
};






struct attack_definition
{
        int16 type;
        int16 repetitions;
        angle error;
        world_distance range;
        int16 attack_shape;

        world_distance dx, dy, dz;
};

struct monster_definition
{
        int16 collection;

        int16 vitality;
        uint32 immunities, weaknesses;
        uint32 flags;

        int32 _class;
        int32 friends, enemies;

        _fixed sound_pitch;
        int16 activation_sound, friendly_activation_sound, clear_sound;
        int16 kill_sound, apology_sound, friendly_fire_sound;
        int16 flaming_sound;
        int16 random_sound, random_sound_mask;

        int16 carrying_item_type;

        world_distance radius, height;
        world_distance preferred_hover_height;
        world_distance minimum_ledge_delta, maximum_ledge_delta;
        _fixed external_velocity_scale;
        int16 impact_effect, melee_impact_effect, contrail_effect;

        int16 half_visual_arc, half_vertical_visual_arc;
        world_distance visual_range, dark_visual_range;
        int16 intelligence;
        int16 speed, gravity, terminal_velocity;
        int16 door_retry_mask;
        int16 shrapnel_radius;
        struct damage_definition shrapnel_damage;

        shape_descriptor hit_shapes;
        shape_descriptor hard_dying_shape, soft_dying_shape;
        shape_descriptor hard_dead_shapes, soft_dead_shapes;
        shape_descriptor stationary_shape, moving_shape;
        shape_descriptor teleport_in_shape, teleport_out_shape;




        int16 attack_frequency;
        struct attack_definition melee_attack;
        struct attack_definition ranged_attack;
};
# 243 "../../AlephOneSrc/monster_definitions.h"
uint8 *unpack_monster_definition(uint8 *Stream, monster_definition *Objects, size_t Count);
uint8 *pack_monster_definition(uint8 *Stream, monster_definition *Objects, size_t Count);
# 52 "../../AlephOneSrc/monsters.h" 2
# 61 "../../AlephOneSrc/monsters.h"
enum
{
        _pass_one_zone_border= 0x0001,
        _passed_zone_border= 0x0002,
        _activate_invisible_monsters= 0x0004,
        _activate_deaf_monsters= 0x0008,
        _pass_solid_lines= 0x0010,
        _use_activation_biases= 0x0020,
        _activation_cannot_be_avoided= 0x0040
};


enum
{
        _activate_on_player,
        _activate_on_nearest_hostile,
        _activate_on_goal,
        _activate_randomly
};
# 89 "../../AlephOneSrc/monsters.h"
enum
{
        _monster_marine,
        _monster_tick_energy,
        _monster_tick_oxygen,
        _monster_tick_kamakazi,
        _monster_compiler_minor,
        _monster_compiler_major,
        _monster_compiler_minor_invisible,
        _monster_compiler_major_invisible,
        _monster_fighter_minor,
        _monster_fighter_major,
        _monster_fighter_minor_projectile,
        _monster_fighter_major_projectile,
        _civilian_crew,
        _civilian_science,
        _civilian_security,
        _civilian_assimilated,
        _monster_hummer_minor,
        _monster_hummer_major,
        _monster_hummer_big_minor,
        _monster_hummer_big_major,
        _monster_hummer_possessed,
        _monster_cyborg_minor,
        _monster_cyborg_major,
        _monster_cyborg_flame_minor,
        _monster_cyborg_flame_major,
        _monster_enforcer_minor,
        _monster_enforcer_major,
        _monster_hunter_minor,
        _monster_hunter_major,
        _monster_trooper_minor,
        _monster_trooper_major,
        _monster_mother_of_all_cyborgs,
        _monster_mother_of_all_hunters,
        _monster_sewage_yeti,
        _monster_water_yeti,
        _monster_lava_yeti,
        _monster_defender_minor,
        _monster_defender_major,
        _monster_juggernaut_minor,
        _monster_juggernaut_major,
        _monster_tiny_fighter,
        _monster_tiny_bob,
        _monster_tiny_yeti,

        _civilian_fusion_crew,
        _civilian_fusion_science,
        _civilian_fusion_security,
        _civilian_fusion_assimilated,
        NUMBER_OF_MONSTER_TYPES
};
# 181 "../../AlephOneSrc/monsters.h"
enum
{
        _monster_is_stationary,
        _monster_is_waiting_to_attack_again,
        _monster_is_moving,
        _monster_is_attacking_close,
        _monster_is_attacking_far,
        _monster_is_being_hit,
        _monster_is_dying_hard,
        _monster_is_dying_soft,
        _monster_is_dying_flaming,
        _monster_is_teleporting,
        _monster_is_teleporting_in,
        _monster_is_teleporting_out,
        NUMBER_OF_MONSTER_ACTIONS
};



enum
{
        _monster_locked,
        _monster_losing_lock,
        _monster_lost_lock,
        _monster_unlocked,
        _monster_running,
        NUMBER_OF_MONSTER_MODES
};

enum
{
        _monster_was_promoted= 0x1,
        _monster_was_demoted= 0x2,
        _monster_has_never_been_activated= 0x4,
        _monster_is_blind= 0x8,
        _monster_is_deaf= 0x10,
        _monster_teleports_out_when_deactivated= 0x20
};

struct monster_data
{
        short type;
        short vitality;
        uint16 flags;

        short path;
        world_distance path_segment_length;
        world_distance desired_height;

        short mode, action;
        short target_index;
        world_distance external_velocity;
        world_distance vertical_velocity;
        short ticks_since_attack, attack_repetitions;
        short changes_until_lock_lost;

        world_distance elevation;

        short object_index;

        int32 ticks_since_last_activation;

        short activation_bias;

        short goal_polygon_index;


        world_point3d sound_location;
        short sound_polygon_index;

        short random_desired_height;

        short unused[7];
};
const int SIZEOF_monster_data = 64;

const int SIZEOF_monster_definition = 156;





extern vector<monster_data> MonsterList;





short new_monster(struct object_location *location, short monster_code);
# 303 "../../AlephOneSrc/monsters.h"
void get_monster_dimensions(short monster_index, world_distance *radius, world_distance *height);







monster_data *get_monster_data(
        short monster_index);

bool bump_monster(short aggressor_index, short monster_index);

bool legal_polygon_height_change(short polygon_index, world_distance new_floor_height, world_distance new_ceiling_height, struct damage_definition *damage);
void adjust_monster_for_polygon_height_change(short monster_index, short polygon_index, world_distance new_floor_height, world_distance new_ceiling_height);
void accelerate_monster(short monster_index, angle direction, angle elevation, world_distance velocity);

void monster_died(short target_index);

short monster_placement_index(short monster_type);
short placement_index_to_monster_type(short placement_index);
void try_to_add_random_monster(short monster_type, bool activate);

short get_monster_impact_effect(short monster_index);
short get_monster_melee_impact_effect(short monster_index);

bool live_aliens_on_map(void);


void SetPlayerViewAttribs(int16 half_visual_arc, int16 half_vertical_visual_arc,
        world_distance visual_range, world_distance dark_visual_range);





uint8 *unpack_monster_data(uint8 *Stream, monster_data *Objects, size_t Count);
uint8 *pack_monster_data(uint8 *Stream, monster_data *Objects, size_t Count);
uint8 *unpack_monster_definition(uint8 *Stream, size_t Count);
uint8 *pack_monster_definition(uint8 *Stream, size_t Count);



extern struct monster_definition monster_definitions[NUMBER_OF_MONSTER_TYPES];
# 7 "General.h" 2

# 1 "../../AlephOneSrc/physics_models.h" 1
# 31 "../../AlephOneSrc/physics_models.h"
enum
{
        _model_game_walking,
        _model_game_running,
        NUMBER_OF_PHYSICS_MODELS
};



struct physics_constants
{
        _fixed maximum_forward_velocity, maximum_backward_velocity, maximum_perpendicular_velocity;
        _fixed acceleration, deceleration, airborne_deceleration;
        _fixed gravitational_acceleration, climbing_acceleration, terminal_velocity;
        _fixed external_deceleration;

        _fixed angular_acceleration, angular_deceleration, maximum_angular_velocity, angular_recentering_velocity;
        _fixed fast_angular_velocity, fast_angular_maximum;
        _fixed maximum_elevation;
        _fixed external_angular_deceleration;


        _fixed step_delta, step_amplitude;
        _fixed radius, height, dead_height, camera_height, splash_height;

        _fixed half_camera_separation;
};



extern struct physics_constants physics_models[NUMBER_OF_PHYSICS_MODELS];


uint8 *unpack_physics_constants(uint8 *Stream, physics_constants *Objects, size_t Count);
uint8 *pack_physics_constants(uint8 *Stream, physics_constants *Objects, size_t Count);
# 9 "General.h" 2



# 1 "../../AlephOneSrc/weapons.h" 1
# 45 "../../AlephOneSrc/weapons.h"
enum {
        _weapon_fist,
        _weapon_pistol,
        _weapon_plasma_pistol,
        _weapon_assault_rifle,
        _weapon_missile_launcher,
        _weapon_flamethrower,
        _weapon_alien_shotgun,
        _weapon_shotgun,
        _weapon_ball,

        _weapon_smg,
        MAXIMUM_NUMBER_OF_WEAPONS,

        _weapon_doublefisted_pistols= MAXIMUM_NUMBER_OF_WEAPONS,
        _weapon_doublefisted_shotguns,
        PLAYER_TORSO_SHAPE_COUNT
};

enum {
        _shape_weapon_idle,
        _shape_weapon_charging,
        _shape_weapon_firing,
        PLAYER_TORSO_WEAPON_ACTION_COUNT
};

enum {
        _primary_weapon,
        _secondary_weapon,
        NUMBER_OF_TRIGGERS
};

enum
{
        _position_low,
        _position_center,
        _position_high

};



struct weapon_display_information
{

        short collection, shape_index, low_level_shape_index;

        _fixed vertical_position, horizontal_position;
        short vertical_positioning_mode, horizontal_positioning_mode;
        short transfer_mode;
        _fixed transfer_phase;

        bool flip_horizontal, flip_vertical;


        short Frame, NextFrame;


        short Phase, Ticks;
};



enum
{
        MAXIMUM_SHELL_CASINGS= 4
};

struct trigger_data {
    short state, phase;
    short rounds_loaded;
    short shots_fired, shots_hit;
    short ticks_since_last_shot;
    short ticks_firing;
    uint16 sequence;
};

struct weapon_data {
        short weapon_type;
        uint16 flags;
        uint16 unused;
        struct trigger_data triggers[NUMBER_OF_TRIGGERS];
};

struct shell_casing_data
{
        short type;
        short frame;

        uint16 flags;

        _fixed x, y;
        _fixed vx, vy;
};

struct player_weapon_data {
        short current_weapon;
        short desired_weapon;
        struct weapon_data weapons[MAXIMUM_NUMBER_OF_WEAPONS];
        struct shell_casing_data shell_casings[MAXIMUM_SHELL_CASINGS];
};

struct trigger_definition {
        int16 rounds_per_magazine;
        int16 ammunition_type;
        int16 ticks_per_round;
        int16 recovery_ticks;
        int16 charging_ticks;
        world_distance recoil_magnitude;
        int16 firing_sound;
        int16 click_sound;
        int16 charging_sound;
        int16 shell_casing_sound;
        int16 reloading_sound;
        int16 charged_sound;
        int16 projectile_type;
        int16 theta_error;
        int16 dx, dz;
        int16 shell_casing_type;
        int16 burst_count;
};

struct weapon_definition {
        int16 item_type;
        int16 powerup_type;
        int16 weapon_class;
        int16 flags;

        _fixed firing_light_intensity;
        int16 firing_intensity_decay_ticks;



        _fixed idle_height, bob_amplitude, kick_height, reload_height;
        _fixed idle_width, horizontal_amplitude;







        int16 collection;
        int16 idle_shape, firing_shape, reloading_shape;
        int16 unused;
        int16 charging_shape, charged_shape;



        int16 ready_ticks, await_reload_ticks, loading_ticks, finish_loading_ticks, powerup_ticks;

        struct trigger_definition weapons_by_trigger[NUMBER_OF_TRIGGERS];
};


const int SIZEOF_weapon_definition = 134;

const int SIZEOF_player_weapon_data = 472;






uint8 *unpack_player_weapon_data(uint8 *Stream, size_t Count);
uint8 *pack_player_weapon_data(uint8 *Stream, size_t Count);
uint8 *unpack_weapon_definition(uint8 *Stream, size_t Count);
uint8 *pack_weapon_definition(uint8 *Stream, size_t Count);


size_t get_number_of_weapon_types();
# 13 "General.h" 2

# 1 "../../AlephOneSrc/effect_definitions.h" 1
# 43 "../../AlephOneSrc/effect_definitions.h"
extern struct effect_definition effect_definitions[NUMBER_OF_EFFECT_TYPES];


uint8 *unpack_effect_definition(uint8 *Stream, effect_definition *Objects, size_t Count);
uint8 *pack_effect_definition(uint8 *Stream, effect_definition *Objects, size_t Count);
# 15 "General.h" 2
# 1 "../../AlephOneSrc/projectile_definitions.h" 1






# 1 "../../AlephOneSrc/media.h" 1
# 53 "../../AlephOneSrc/media.h"
enum
{
        _media_water,
        _media_lava,
        _media_goo,
        _media_sewage,
        _media_jjaro,
        NUMBER_OF_MEDIA_TYPES
};

enum
{
        _media_sound_obstructed_by_floor,

        NUMBER_OF_MEDIA_FLAGS
};





enum
{
        _small_media_detonation_effect,
        _medium_media_detonation_effect,
        _large_media_detonation_effect,
        _large_media_emergence_effect,
        NUMBER_OF_MEDIA_DETONATION_TYPES
};

enum
{
        _media_snd_feet_entering,
        _media_snd_feet_leaving,
        _media_snd_head_entering,
        _media_snd_head_leaving,
        _media_snd_splashing,
        _media_snd_ambient_over,
        _media_snd_ambient_under,
        _media_snd_platform_entering,
        _media_snd_platform_leaving,

        NUMBER_OF_MEDIA_SOUNDS
};







struct media_data
{
        int16 type;
        uint16 flags;





        int16 light_index;


        angle current_direction;
        world_distance current_magnitude;

        world_distance low, high;

        world_point2d origin;
        world_distance height;

        _fixed minimum_light_intensity;
        shape_descriptor texture;
        int16 transfer_mode;

        int16 unused[2];
};
const int SIZEOF_media_data = 32;







extern vector<media_data> MediaList;







size_t new_media(struct media_data *data);

void update_medias(void);

void get_media_detonation_effect(short media_index, short type, short *detonation_effect);
short get_media_sound(short media_index, short type);
short get_media_submerged_fade_effect(short media_index);
struct damage_definition *get_media_damage(short media_index, _fixed scale);


bool IsMediaDangerous(short media_type);

bool media_in_environment(short media_type, short environment_code);

media_data *get_media_data(
        const size_t media_index);



size_t count_number_of_medias_used();



uint8 *unpack_media_data(uint8 *Stream, media_data* Objects, size_t Count);
uint8 *pack_media_data(uint8 *Stream, media_data* Objects, size_t Count);
# 8 "../../AlephOneSrc/projectile_definitions.h" 2
# 38 "../../AlephOneSrc/projectile_definitions.h"
enum
{
        _guided= 0x0001,
        _stop_when_animation_loops= 0x0002,
        _persistent= 0x0004,
        _alien_projectile= 0x0008,
        _affected_by_gravity= 0x0010,
        _no_horizontal_error= 0x0020,
        _no_vertical_error= 0x0040,
        _can_toggle_control_panels= 0x0080,
        _positive_vertical_error= 0x0100,
        _melee_projectile= 0x0200,
        _persistent_and_virulent= 0x0400,
        _usually_pass_transparent_side= 0x0800,
        _sometimes_pass_transparent_side= 0x1000,
        _doubly_affected_by_gravity= 0x2000,
        _rebounds_from_floor= 0x4000,
        _penetrates_media= 0x8000,
        _becomes_item_on_detonation= 0x10000,
        _bleeding_projectile= 0x20000,
        _horizontal_wander= 0x40000,
        _vertical_wander= 0x80000,
        _affected_by_half_gravity= 0x100000,
        _penetrates_media_boundary=0x200000
};



struct projectile_definition
{
        int16 collection, shape;
        int16 detonation_effect, media_detonation_effect;
        int16 contrail_effect, ticks_between_contrails, maximum_contrails;
        int16 media_projectile_promotion;

        world_distance radius;
        world_distance area_of_effect;
        struct damage_definition damage;

        uint32 flags;

        world_distance speed;
        world_distance maximum_range;

        _fixed sound_pitch;
        int16 flyby_sound, rebound_sound;
};





extern struct projectile_definition projectile_definitions[NUMBER_OF_PROJECTILE_TYPES];


uint8 *unpack_projectile_definition(uint8 *Stream, projectile_definition *Objects, size_t Count);
uint8 *pack_projectile_definition(uint8 *Stream, projectile_definition *Objects, size_t Count);
# 16 "General.h" 2
# 1 "../../AlephOneSrc/weapon_definitions.h" 1
# 40 "../../AlephOneSrc/weapon_definitions.h"
enum {
        _projectile_ball_dropped= 1000
};







enum
{
        _melee_class,
        _normal_class,
        _dual_function_class,
        _twofisted_pistol_class,
        _multipurpose_class


};

enum
{
        _no_flags= 0x0,
        _weapon_is_automatic= 0x01,
        _weapon_disappears_after_use= 0x02,
        _weapon_plays_instant_shell_casing_sound= 0x04,
        _weapon_overloads= 0x08,
        _weapon_has_random_ammo_on_pickup= 0x10,
        _powerup_is_temporary= 0x20,
        _weapon_reloads_in_one_hand= 0x40,
        _weapon_fires_out_of_phase= 0x80,
        _weapon_fires_under_media= 0x100,
        _weapon_triggers_share_ammo= 0x200,
        _weapon_secondary_has_angular_flipping= 0x400
};

enum {
        _weapon_in_hand_collection= 1,
        _fist_idle= 0,
        _fist_punching,
        _pistol_idle,
        _pistol_firing,
        _pistol_reloading,
        _shotgun_idle,
        _shotgun_firing,
        _shotgun_reloading,
        _assault_rifle_idle,
        _assault_rifle_firing,
        _assault_rifle_reloading,
        _fusion_idle,
        _fusion_firing,
        _missile_launcher_idle,
        _missile_launcher_firing,
        _flamethrower_idle,
        _flamethrower_transit,
        _flamethrower_firing,
        _assault_rifle_shell_casing,
        _pistol_shell_casing,
        _fusion_charged,
        _alien_weapon_idle,
        _alien_weapon_firing,

        _smg_idle,
        _smg_firing,
        _smg_reloading,
        _smg_shell_casing
};



enum
{
        _shell_casing_assault_rifle,
        _shell_casing_pistol,
        _shell_casing_pistol_left,
        _shell_casing_pistol_right,

        _shell_casing_smg,

        NUMBER_OF_SHELL_CASING_TYPES
};

struct shell_casing_definition
{
        int16 collection, shape;

        _fixed x0, y0;
        _fixed vx0, vy0;
        _fixed dvx, dvy;
};

extern struct shell_casing_definition shell_casing_definitions[NUMBER_OF_SHELL_CASING_TYPES];

extern struct weapon_definition weapon_definitions[MAXIMUM_NUMBER_OF_WEAPONS];



uint8 *unpack_weapon_definition(uint8 *Stream, weapon_definition *Objects, size_t Count);
uint8 *pack_weapon_definition(uint8 *Stream, weapon_definition *Objects, size_t Count);
# 17 "General.h" 2

# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCoption.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCoption.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvlabel.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvlabel.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCnwbase.h" 1
# 29 "C:/PROGRA~1/WIDEST~1/ws/include/WSCnwbase.h"
class WSCnwbase :public WSCbase{

  private:
  protected:
    char* _user_string;
    long _user_value;
    short _x;
    short _y;
    short _fore_color;
    short _blink_color;
    WSCushort _w;
    WSCushort _h;


    unsigned short _mouse_no;

    unsigned short _anchor_top;
    unsigned short _anchor_bottom;
    unsigned short _anchor_left;
    unsigned short _anchor_right;
    unsigned _anchor_top_use:1;
    unsigned _anchor_bottom_use:1;
    unsigned _anchor_left_use:1;
    unsigned _anchor_right_use:1;
    unsigned _blink_rate:4;
    unsigned _bl_refreshing:1;
    unsigned _bl_fl:1;
    unsigned _tw_fl:1;
        unsigned _blinking:1;
    unsigned _mouse_enter:1;
    unsigned _out_side_mouse_press:1;
    unsigned _out_side_mouse_release:1;
    unsigned _out_side_mouse_move:1;
    unsigned _mouse_grabed:1;
    unsigned _anchor_under_refreshing:1;

    static void _set_p_w_instance_name(void* ptr,void* data); static void _get_def_w_instance_name(void* ptr); static void _get_p_w_instance_name(void* ptr,void* data); virtual void setWorkWSNname (char*); virtual void getWorkWSNname (char**);
    static void _set_p_w_user_string(void* ptr,void* data); static void _get_def_w_user_string(void* ptr); static void _get_p_w_user_string(void* ptr,void* data); virtual void setWorkWSNuserString (char*); virtual void getWorkWSNuserString (char**);
    static void _set_p_w_user_value(void* ptr,void* data); static void _get_def_w_user_value(void* ptr); static void _get_p_w_user_value(void* ptr,void* data); virtual void setWorkWSNuserValue (long); virtual void getWorkWSNuserValue (long*);
    static void _set_p_w_bl_refreshing(void* ptr,void* data); static void _get_def_w_bl_refreshing(void* ptr); static void _get_p_w_bl_refreshing(void* ptr,void* data); virtual void setWorkWSNblinkRefreshing (WSCbool); virtual void getWorkWSNblinkRefreshing (WSCbool*);
    static void _set_p_w_vis(void* ptr,void* data); static void _get_def_w_vis(void* ptr); static void _get_p_w_vis(void* ptr,void* data); virtual void setWorkWSNvis (WSCbool); virtual void getWorkWSNvis (WSCbool*);
    static void _set_p_w_sensitive_work(void* ptr,void* data); static void _get_def_w_sensitive_work(void* ptr); static void _get_p_w_sensitive_work(void* ptr,void* data); virtual void setWorkWSNdet (WSCbool); virtual void getWorkWSNdet (WSCbool*);
    static void _set_p_w_x(void* ptr,void* data); static void _get_def_w_x(void* ptr); static void _get_p_w_x(void* ptr,void* data); virtual void setWorkWSNx (short); virtual void getWorkWSNx (short*);
    static void _set_p_w_y(void* ptr,void* data); static void _get_def_w_y(void* ptr); static void _get_p_w_y(void* ptr,void* data); virtual void setWorkWSNy (short); virtual void getWorkWSNy (short*);
    static void _set_p_w_w(void* ptr,void* data); static void _get_def_w_w(void* ptr); static void _get_p_w_w(void* ptr,void* data); virtual void setWorkWSNwidth (WSCushort); virtual void getWorkWSNwidth (WSCushort*);
    static void _set_p_w_h(void* ptr,void* data); static void _get_def_w_h(void* ptr); static void _get_p_w_h(void* ptr,void* data); virtual void setWorkWSNheight (WSCushort); virtual void getWorkWSNheight (WSCushort*);
    static void _set_p_w_fore_color(void* ptr,void* data); static void _get_def_w_fore_color(void* ptr); static void _get_p_w_fore_color(void* ptr,void* data); virtual void setWorkWSNforeColor (short); virtual void getWorkWSNforeColor (short*);
    static void _set_p_w_bl_fl(void* ptr,void* data); static void _get_def_w_bl_fl(void* ptr); static void _get_p_w_bl_fl(void* ptr,void* data); virtual void setWorkWSNblinkFlag (WSCbool); virtual void getWorkWSNblinkFlag (WSCbool*);
    static void _set_p_w_tw_fl(void* ptr,void* data); static void _get_def_w_tw_fl(void* ptr); static void _get_p_w_tw_fl(void* ptr,void* data); virtual void setWorkWSNtwinBlink (WSCbool); virtual void getWorkWSNtwinBlink (WSCbool*);
    static void _set_p_w_blink_color(void* ptr,void* data); static void _get_def_w_blink_color(void* ptr); static void _get_p_w_blink_color(void* ptr,void* data); virtual void setWorkWSNblinkColor (short); virtual void getWorkWSNblinkColor (short*);
    static void _set_p_w_blink_rate(void* ptr,void* data); static void _get_def_w_blink_rate(void* ptr); static void _get_p_w_blink_rate(void* ptr,void* data); virtual void setWorkWSNblinkRate (WSCuchar); virtual void getWorkWSNblinkRate (WSCuchar*);
    static void _set_p_w_anchor_top(void* ptr,void* data); static void _get_def_w_anchor_top(void* ptr); static void _get_p_w_anchor_top(void* ptr,void* data); virtual void setWorkWSNanchorTop (WSCushort); virtual void getWorkWSNanchorTop (WSCushort*);
    static void _set_p_w_anchor_bottom(void* ptr,void* data); static void _get_def_w_anchor_bottom(void* ptr); static void _get_p_w_anchor_bottom(void* ptr,void* data); virtual void setWorkWSNanchorBottom (WSCushort); virtual void getWorkWSNanchorBottom (WSCushort*);
    static void _set_p_w_anchor_left(void* ptr,void* data); static void _get_def_w_anchor_left(void* ptr); static void _get_p_w_anchor_left(void* ptr,void* data); virtual void setWorkWSNanchorLeft (WSCushort); virtual void getWorkWSNanchorLeft (WSCushort*);
    static void _set_p_w_anchor_right(void* ptr,void* data); static void _get_def_w_anchor_right(void* ptr); static void _get_p_w_anchor_right(void* ptr,void* data); virtual void setWorkWSNanchorRight (WSCushort); virtual void getWorkWSNanchorRight (WSCushort*);
    static void _set_p_w_anchor_top_use(void* ptr,void* data); static void _get_def_w_anchor_top_use(void* ptr); static void _get_p_w_anchor_top_use(void* ptr,void* data); virtual void setWorkWSNanchorTopFlag (WSCbool); virtual void getWorkWSNanchorTopFlag (WSCbool*);
    static void _set_p_w_anchor_bottom_use(void* ptr,void* data); static void _get_def_w_anchor_bottom_use(void* ptr); static void _get_p_w_anchor_bottom_use(void* ptr,void* data); virtual void setWorkWSNanchorBottomFlag (WSCbool); virtual void getWorkWSNanchorBottomFlag (WSCbool*);
    static void _set_p_w_anchor_left_use(void* ptr,void* data); static void _get_def_w_anchor_left_use(void* ptr); static void _get_p_w_anchor_left_use(void* ptr,void* data); virtual void setWorkWSNanchorLeftFlag (WSCbool); virtual void getWorkWSNanchorLeftFlag (WSCbool*);
    static void _set_p_w_anchor_right_use(void* ptr,void* data); static void _get_def_w_anchor_right_use(void* ptr); static void _get_p_w_anchor_right_use(void* ptr,void* data); virtual void setWorkWSNanchorRightFlag (WSCbool); virtual void getWorkWSNanchorRightFlag (WSCbool*);

    static void _set_p_w_export_(void* ptr,void* data); static void _get_def_w_export_(void* ptr); static void _get_p_w_export_(void* ptr,void* data); virtual void setWorkWSNexport (WSCbool); virtual void getWorkWSNexport (WSCbool*);



    static void _set_p_w_mouse_no(void* ptr,void* data); static void _get_def_w_mouse_no(void* ptr); static void _get_p_w_mouse_no(void* ptr,void* data); virtual void setWorkWSNmouse (WSCushort); virtual void getWorkWSNmouse (WSCushort*);
    WSCbase* _get_child_with_point(WSCpoint*,WSCbool);

    virtual long _device_initialize();
  public:
    WSCnwbase(WSCbase*,char*);
    virtual ~WSCnwbase();

    virtual void onChildAdded(WSCbase* );

    virtual void onMouseIn(WSCpoint*);
    virtual void onMouseOut();


    virtual long clear();
    virtual long redraw();
    virtual long cdraw();
    virtual long execEventProc(long ev,void*);
    virtual long addProcedure(WSCprocedure*);
    virtual void setScaleOffsetPtr(double*);
    virtual void setXOffsetPtr(short*);
    virtual void setYOffsetPtr(short*);
    virtual void update();
    virtual void _adjust_for_anchors(WSCushort,WSCushort);





    long getBlinkRate();

    WSCbool getBlinkRefresh();

    void setOutSideMousePress(WSCbool);
    void setOutSideMouseMove(WSCbool);
    void setOutSideMouseRelease(WSCbool);
    void setMouseGrabed(WSCbool);
    WSCbool getOutSideMouseMove();
    WSCbool getOutSideMouseRelease();
    WSCbool getOutSideMousePress();
    WSCbool getMouseGrabed();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCnwbase_info_ptr; virtual WSCclassInformation* getClassInformation();
        virtual char* getUseDevName();
    long getVer(long val = 1000); long checkVersion(long);
};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvlabel.h" 2




class WSCvlabel :public WSCnwbase{

  protected:
    short _select_color;
    short _select_fore_color;
    short _ts_color;
    short _bs_color;
    short _back_color;
    short _bg_blink_color;
    char* _label_string;
    WSCstring _str;
    short _label_pixmap;
    short _blink_pixmap;
    WSCushort _max_length;

    WSCuchar _grad_margin;
    unsigned _grad_no:4;

    unsigned _margin_top:4;
    unsigned _margin_bottom:4;
    unsigned _margin_left:4;
    unsigned _margin_right:4;
    unsigned _shadow_thick:4;
    signed _shadow_type:4;
    unsigned _font:4;
    unsigned _bl_type:2;
    unsigned _rv_fl:1;
    unsigned _bit_map:1;

    unsigned _use_pix:1;
    unsigned _alignment_v:3;
    unsigned _alignment_h:2;
    unsigned _emboss:1;
    unsigned _orientation:1;
    unsigned _auto_line_feed:1;
    unsigned _need_clear:1;
    unsigned _hilight_draw:1;

    static void _set_p_w_ts_color(void* ptr,void* data); static void _get_def_w_ts_color(void* ptr); static void _get_p_w_ts_color(void* ptr,void* data); virtual void setWorkWSNtopShadowColor (short); virtual void getWorkWSNtopShadowColor (short*);
    static void _set_p_w_bs_color(void* ptr,void* data); static void _get_def_w_bs_color(void* ptr); static void _get_p_w_bs_color(void* ptr,void* data); virtual void setWorkWSNbottomShadowColor (short); virtual void getWorkWSNbottomShadowColor (short*);
    static void _set_p_w_shadow_type(void* ptr,void* data); static void _get_def_w_shadow_type(void* ptr); static void _get_p_w_shadow_type(void* ptr,void* data); virtual void setWorkWSNshadowType (char); virtual void getWorkWSNshadowType (char*);
    static void _set_p_w_shadow_thick(void* ptr,void* data); static void _get_def_w_shadow_thick(void* ptr); static void _get_p_w_shadow_thick(void* ptr,void* data); virtual void setWorkWSNshadowThickness (WSCuchar); virtual void getWorkWSNshadowThickness (WSCuchar*);
    static void _set_p_w_back_color(void* ptr,void* data); static void _get_def_w_back_color(void* ptr); static void _get_p_w_back_color(void* ptr,void* data); virtual void setWorkWSNbackColor (short); virtual void getWorkWSNbackColor (short*);
    static void _set_p_w_bg_blink_color(void* ptr,void* data); static void _get_def_w_bg_blink_color(void* ptr); static void _get_p_w_bg_blink_color(void* ptr,void* data); virtual void setWorkWSNbackBlinkColor (short); virtual void getWorkWSNbackBlinkColor (short*);
    static void _set_p_w_rv_fl(void* ptr,void* data); static void _get_def_w_rv_fl(void* ptr); static void _get_p_w_rv_fl(void* ptr,void* data); virtual void setWorkWSNreverseFlag (WSCbool); virtual void getWorkWSNreverseFlag (WSCbool*);
    static void _set_p_w_bl_type(void* ptr,void* data); static void _get_def_w_bl_type(void* ptr); static void _get_p_w_bl_type(void* ptr,void* data); virtual void setWorkWSNblinkType (WSCuchar); virtual void getWorkWSNblinkType (WSCuchar*);
    static void _set_p_w_emboss(void* ptr,void* data); static void _get_def_w_emboss(void* ptr); static void _get_p_w_emboss(void* ptr,void* data); virtual void setWorkWSNemboss (WSCbool); virtual void getWorkWSNemboss (WSCbool*);
    static void _set_p_w_use_pix(void* ptr,void* data); static void _get_def_w_use_pix(void* ptr); static void _get_p_w_use_pix(void* ptr,void* data); virtual void setWorkWSNusePixmap (WSCbool); virtual void getWorkWSNusePixmap (WSCbool*);
    static void _set_p_w_label_string(void* ptr,void* data); static void _get_def_w_label_string(void* ptr); static void _get_p_w_label_string(void* ptr,void* data); virtual void setWorkWSNlabelString (char*); virtual void getWorkWSNlabelString (char**);
    static void _set_p_w_orientation(void* ptr,void* data); static void _get_def_w_orientation(void* ptr); static void _get_p_w_orientation(void* ptr,void* data); virtual void setWorkWSNorientation (WSCuchar); virtual void getWorkWSNorientation (WSCuchar*);
    static void _set_p_w_alignment_h(void* ptr,void* data); static void _get_def_w_alignment_h(void* ptr); static void _get_p_w_alignment_h(void* ptr,void* data); virtual void setWorkWSNalignmentH (WSCuchar); virtual void getWorkWSNalignmentH (WSCuchar*);
    static void _set_p_w_margin_top(void* ptr,void* data); static void _get_def_w_margin_top(void* ptr); static void _get_p_w_margin_top(void* ptr,void* data); virtual void setWorkWSNmarginTop (WSCuchar); virtual void getWorkWSNmarginTop (WSCuchar*);
    static void _set_p_w_margin_bottom(void* ptr,void* data); static void _get_def_w_margin_bottom(void* ptr); static void _get_p_w_margin_bottom(void* ptr,void* data); virtual void setWorkWSNmarginBottom (WSCuchar); virtual void getWorkWSNmarginBottom (WSCuchar*);
    static void _set_p_w_alignment_v(void* ptr,void* data); static void _get_def_w_alignment_v(void* ptr); static void _get_p_w_alignment_v(void* ptr,void* data); virtual void setWorkWSNalignmentV (WSCuchar); virtual void getWorkWSNalignmentV (WSCuchar*);
    static void _set_p_w_margin_left(void* ptr,void* data); static void _get_def_w_margin_left(void* ptr); static void _get_p_w_margin_left(void* ptr,void* data); virtual void setWorkWSNmarginLeft (WSCuchar); virtual void getWorkWSNmarginLeft (WSCuchar*);
    static void _set_p_w_margin_right(void* ptr,void* data); static void _get_def_w_margin_right(void* ptr); static void _get_p_w_margin_right(void* ptr,void* data); virtual void setWorkWSNmarginRight (WSCuchar); virtual void getWorkWSNmarginRight (WSCuchar*);
    static void _set_p_w_max_length(void* ptr,void* data); static void _get_def_w_max_length(void* ptr); static void _get_p_w_max_length(void* ptr,void* data); virtual void setWorkWSNmaxLength (WSCushort); virtual void getWorkWSNmaxLength (WSCushort*);
    static void _set_p_w_font(void* ptr,void* data); static void _get_def_w_font(void* ptr); static void _get_p_w_font(void* ptr,void* data); virtual void setWorkWSNfont (WSCuchar); virtual void getWorkWSNfont (WSCuchar*);
    static void _set_p_w_label_pixmap(void* ptr,void* data); static void _get_def_w_label_pixmap(void* ptr); static void _get_p_w_label_pixmap(void* ptr,void* data); virtual void setWorkWSNlabelPixmap (short); virtual void getWorkWSNlabelPixmap (short*);
    static void _set_p_w_blink_pixmap(void* ptr,void* data); static void _get_def_w_blink_pixmap(void* ptr); static void _get_p_w_blink_pixmap(void* ptr,void* data); virtual void setWorkWSNblinkPixmap (short); virtual void getWorkWSNblinkPixmap (short*);

    static void _set_p_w_grad_no(void* ptr,void* data); static void _get_def_w_grad_no(void* ptr); static void _get_p_w_grad_no(void* ptr,void* data); virtual void setWorkWSNgradation (WSCuchar); virtual void getWorkWSNgradation (WSCuchar*);
    static void _set_p_w_grad_margin(void* ptr,void* data); static void _get_def_w_grad_margin(void* ptr); static void _get_p_w_grad_margin(void* ptr,void* data); virtual void setWorkWSNgradationMargin (WSCuchar); virtual void getWorkWSNgradationMargin (WSCuchar*);

    static void _set_p_w_keep_pixmap_cache(void* ptr,void* data); static void _get_def_w_keep_pixmap_cache(void* ptr); static void _get_p_w_keep_pixmap_cache(void* ptr,void* data); virtual void setWorkWSNkeepPixmapCache (WSCbool); virtual void getWorkWSNkeepPixmapCache (WSCbool*);
    static void _set_p_w_auto_line_feed(void* ptr,void* data); static void _get_def_w_auto_line_feed(void* ptr); static void _get_p_w_auto_line_feed(void* ptr,void* data); virtual void setWorkWSNautoLineFeeding (WSCbool); virtual void getWorkWSNautoLineFeeding (WSCbool*);

    virtual long _device_initialize();
    static WSCuchar _vk_draw;
    static WSCbool _use_icon;
    static WSCstring _bar_pos;
    WSCuchar get_vk_draw();
    void set_vk_draw(WSCuchar);
    WSCbool get_use_icon();
    void set_use_icon(WSCbool);
    WSCstring get_bar_pos();
    void set_bar_pos(WSCstring);

  public:

    WSCvlabel(WSCbase* base, char* name);
    virtual ~WSCvlabel();
    virtual long draw();
    virtual void update();
    virtual char* getDefaultProperty();

    char getAlignment();
    WSCstring* getInternalString();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCvlabel_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCoption.h" 2

class WSCpopupFrame;



class WSCoption :public WSCvlabel{

  protected:
    WSCpopupFrame* _menu;
    WSCbool* _status_array;
    char* _menu_str;
    long _value;
    unsigned _press_state:1;

    static void _set_p_w_menu_str(void* ptr,void* data); static void _get_def_w_menu_str(void* ptr); static void _get_p_w_menu_str(void* ptr,void* data); virtual void setWorkWSNmenuItems (char*); virtual void getWorkWSNmenuItems (char**);
    static void _set_p_w_value(void* ptr,void* data); static void _get_def_w_value(void* ptr); static void _get_p_w_value(void* ptr,void* data); virtual void setWorkWSNvalue (long); virtual void getWorkWSNvalue (long*);



    virtual void setWorkWSNemboss(WSCbool);
    virtual void setWorkWSNshadowThickness(WSCuchar);

    virtual long _device_initialize();

    void _menu_popup(WSCpoint*);
    void _menu_popdown();
    void _menu_update();
 static void (*_ext_draw_proc)(void*);
 static char* _policy_name;

  public:
    WSCoption(WSCbase*,char*);
    virtual ~WSCoption();

    virtual long initialize();
    virtual long draw();
    virtual long addProcedure(WSCprocedure*);

    virtual void onActivate();
    virtual void onMousePress(WSCpoint*);
    virtual void onMouseMove(WSCpoint*);
    virtual void onMouseRelease(WSCpoint*);
    virtual void onParentVisibleChange(WSCbool);
    virtual void onVisibleChange(WSCbool);
    virtual void onValueChange(long);
    virtual void onGuiPolicyChange(long);
    virtual char* getDefaultProperty();

    long setItemSensitive(short no, WSCbool flag);
    long setSelectValue(long value, WSCbool flag);

    long getValue();
    long getItemValue(long pos);
    WSCbool* getSelectStatus();
    long getItemNum();
    long getItems();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCoption_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};
struct WSCoption_draw_struct{
  WSCoption* _this;
  WSDdev* dev;
  short x;
  short y;
  WSCushort width;
  WSCushort height;
  WSCushort shadow_thickness;
  long blinking;
  long blink_fore;
  long shadow_type;
  long blink_type;
  long twin_blink;
  short fore_color;
  short back_color;
  short blink_color;
  short back_blink_color;
  short top_shadow_color;
  short bottom_shadow_color;
  char* label_string;
  short label_pixmap;
  short blink_pixmap;

  long gradation;
  long gradation_margin;

  long margin_left;
  long margin_right;
  long margin_top;
  long margin_bottom;
  WSCbool emboss;
  WSCuchar font;
  WSCbool reverse_flag;
  WSCbool press_state;
};
# 19 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbaseList.h" 1
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbaseList.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCRroot.h" 1
# 31 "C:/PROGRA~1/WIDEST~1/ws/include/WSCRroot.h"
class WSCRroot :public WSCroot{

 protected:
  WSCstring _addr;
  WSCushort _port;
  WSCstring _instance_name;
  WSDserialize* _db;
  long _rstatus;
 public:
  WSCRroot();
  virtual ~WSCRroot();

  void setInstanceName(char*);
  void setAddr(char*);
  void setPort(WSCushort);
  long beginRemoteCall(WSCremoteCall*);
  long endRemoteCall();

  long getRemoteCallStatus();

  public: char* getThisClassName(); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null);
};
# 29 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbaseList.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCRbase.h" 1
# 32 "C:/PROGRA~1/WIDEST~1/ws/include/WSCRbase.h"
class WSCRbase :public WSCRroot{

 protected:
  WSCbase* _local;
static WSCindexData* _create_handlers;

 public:
  WSCRbase();
  virtual ~WSCRbase();
  void setLocalInstance(WSCbase*);

  static void setCreateHandler(char* cn,WSCRbase* (*hd)());
  static WSCRbase* getNewInstance(char* cn);

  void setVisible(WSCbool fl);
  WSCbool getVisible();
  void setSensitive(WSCbool fl);
  WSCbool getSensitive();

  long clear();
  long draw();
  long redraw();
  long cdraw();

  void onMouseIn(WSCpoint*);
  void onMouseOut();
  void onMouseMove(WSCpoint*);
  void onMousePress(WSCpoint*);
  void onMouseRelease(WSCpoint*);
  void onExpose(WSCrect*);
  void onResize(WSCrect*);
  void onVisibleChange(WSCbool);
  void onSensitiveChange(WSCbool);
  void onParentVisibleChange(WSCbool);
  void onParentSensitiveChange(WSCbool);
  void onEditModeChange(WSCbool);
  void onFocusChange(WSCbool);
  void onSpecialFocusChange(WSCbool);
  void onSelectionChange(WSCbool);

  void execProcedure(char*);
  void execProcedure(long);

  WSCbool setProperty(char *name,const WSCvariant&);
  WSCvariant getProperty(char* name);

  WSCbool getFocus();
  WSCbool getSpecialFocus();
  long setFocus(WSCbool fl = (WSCbool)1);
  long setSpecialFocus(WSCbool fl = (WSCbool)1);

  public: char* getThisClassName(); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null);
};
# 30 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbaseList.h" 2

class WSCbase;

class WSCremoteInstanceData{
  public:
    WSCstring _addr;
    WSCushort _port;
    WSCstring _public_instance_name;
    WSCstring _instance_name;
    WSCstring _class_name;

    WSCremoteInstanceData();
    ~WSCremoteInstanceData();

    void setPublicInstanceName(char*);
    void setInstanceName(char*);
    void setClassName(char*);
    void setAddr(char*);
    void setPort(WSCushort);

    WSCstring getPublicInstanceName();
    WSCstring getInstanceName();
    WSCstring getClassName();
    WSCstring getAddr();
    WSCushort getPort();

};

class WSCbaseList{

 private:
  void* _search_handler;
  WSClistData* _base_list;
  WSClistData* _need_update;
  WSClistData* _need_init;
  WSClistData _event_list;
  WSClistData _event_client_list;

  WSClistData _remote_instance_list;
  WSClistData _export_instance_list;
  WSClistData _export_instance_update_list;
  WSClistData _export_instance_delete_list;
  WSCbool _remote_data_list_updated;






  WSClistData _root_instance_list;
  WSClistData _selected_instance_list;
  WSCulong _target_instance_id;


  WSClistData _event_proc_list;
  WSClistData _event_proc_fname_list;
  WSClistData _event_proc_trg_list;
  WSClistData _event_proc_data_list;
  void (*_event_proc_handler)(char*,void*);
  WSCstring _instance_position_cname;
  WSCbool _instance_position_mode;


 public:
  WSCbaseList();
  virtual ~WSCbaseList();

  WSCbase* getInstance(char* class_name,char* objname);
  WSClistData* getClassList();

  void addClient(WSCbase*,void* bases = __null);
  void delClient(WSCbase* ,void* bases = __null);

  long countObject(char* );
  void addNeedUpdate(WSCbase*);
  void addNeedInitialize(WSCbase*);
  void execUpdate();
  void execInitialize();
  void setUserData(char*,void *);
  void* getUserData(char*);
  void setUserLongData(char*,WSCulong);
  WSCulong getUserLongData(char*);
  void setUserStringData(char*,char*);
  char* getUserStringData(char*);

  WSClistData* getInstanceList(char*);

  WSCRbase* getRemoteInstance(char*);


  void setSearchInstanceHandler(void*);
  WSCbase* searchInstance(char* class_name,char* objname);
  WSCbool existInstance(WSCbase*);
  void addEvent(WSCbase*,long ev = (char)-1);
  void delEvent(WSCbase*,long ev = (char)-1);
  void execEvent(long,void*);
  void execEvent(long);
  void execEvent(char*);


  void addEventProc(char* fname,char*,long);
  void addEventProc(char* fname,char*,void*);
  void delEventProc(char* fname,char*);
  void addEventProc(void(*hd)(void*),char*,void*);
  void delEventProc(void(*hd)(void*),char*);
  void execEventProc(char*);
  void delAllEventProc();
  void setEventProcHandler(void(*hd)(char*,void*));



  long addRemoteInstanceData(WSCremoteInstanceData* idata);
  long delRemoteInstanceData(WSCremoteInstanceData* idata);
  WSCbool getRemoteInstanceListUpdated();
  void setRemoteInstanceListUpdated(WSCbool);



  long addExportInstanceList(WSCbase* inst);
  long delExportInstanceList(WSCbase* inst);
  long addExportInstanceUpdateList(WSCbase* inst);
  long delExportInstanceUpdateList(WSCbase* inst);

  long addExportInstanceDeleteList(WSCbase* inst);
  long delExportInstanceDeleteList(WSCbase* inst);

  WSClistData* getExportInstanceDeleteList();
  WSClistData* getExportInstanceUpdateList();
  WSClistData* getExportInstanceList();




  void setInstanceId(long kind,WSCulong data);
  WSCulong getInstanceId(WSCulong id,long kind,WSCulong data);
  WSCstring getInstanceData(WSCulong id,long kind,WSCulong data);
  WSCbase* getInstanceFromId(WSCulong id);
  WSCulong getIdFromInstance(WSCbase* inst);




  static void setInternalWindowCreateHandler(void(*)(WSCbase*));
  static void* getInternalWindowCreateHandler();
  static void setInternalWindowVisibleHandler(void(*)(WSCbase*));
  static void* getInternalWindowVisibleHandler();
  static void setInternalWindowUnvisibleHandler(void(*)(WSCbase*));
  static void* getInternalWindowUnvisibleHandler();
  static void setInternalWindowDestroyHandler(void(*)(WSCbase*));
  static void* getInternalWindowDestroyHandler();


  void setNewInstancePositionMode(WSCbool fl);
  WSCbool getNewInstancePositionMode();
  void setNewInstanceClassName(char*);
  WSCstring getNewInstanceClassName();



  WSCremoteInstanceData* getRemoteInstanceData(char* pname);
  WSClistData* getRemoteInstanceList();

};

extern __attribute__((dllexport)) WSCbaseList* WSGIappObjectList();
# 20 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCwindow.h" 1
# 32 "C:/PROGRA~1/WIDEST~1/ws/include/WSCwindow.h"
class WSCwindow :public WSCbase{

  protected:

    char* _title_string;

    char* _user_string;
    char* _group_name;
    WSClistData _children;
    long _user_value;
    short _x;
    short _y;
    WSCushort _w;
    WSCushort _h;
    short _fg_no;
    short _bg_no;
    short _ts_no;
    short _bs_no;
    short _bp_no;
    short _a1_color;
    short _a2_color;
    short _a3_color;
    WSCushort _mouse_no;
    WSCushort _margin_left;
    WSCuchar _bar_thick;

    WSCuchar _grad_margin;
    unsigned _grad_no:4;

    unsigned _shadow_thick:4;

    signed _title_bar:4;

    signed _shadow_type:4;
    unsigned _unique:1;
    unsigned _pixmap_style:2;
    unsigned _exit:1;
    unsigned _margin:4;
    unsigned _update_resize:1;
    unsigned _indicator:1;
    unsigned _emboss:1;
    unsigned _vis_ch_sequence:1;
    unsigned _enable_close:1;

    static void _set_p_w_instance_name(void* ptr,void* data); static void _get_def_w_instance_name(void* ptr); static void _get_p_w_instance_name(void* ptr,void* data); virtual void setWorkWSNname (char*); virtual void getWorkWSNname (char**);

    static void _set_p_w_title_string(void* ptr,void* data); static void _get_def_w_title_string(void* ptr); static void _get_p_w_title_string(void* ptr,void* data); virtual void setWorkWSNtitleString (char*); virtual void getWorkWSNtitleString (char**);

    static void _set_p_w_user_string(void* ptr,void* data); static void _get_def_w_user_string(void* ptr); static void _get_p_w_user_string(void* ptr,void* data); virtual void setWorkWSNuserString (char*); virtual void getWorkWSNuserString (char**);
    static void _set_p_w_user_value(void* ptr,void* data); static void _get_def_w_user_value(void* ptr); static void _get_p_w_user_value(void* ptr,void* data); virtual void setWorkWSNuserValue (long); virtual void getWorkWSNuserValue (long*);
    static void _set_p_w_x(void* ptr,void* data); static void _get_def_w_x(void* ptr); static void _get_p_w_x(void* ptr,void* data); virtual void setWorkWSNx (short); virtual void getWorkWSNx (short*);
    static void _set_p_w_y(void* ptr,void* data); static void _get_def_w_y(void* ptr); static void _get_p_w_y(void* ptr,void* data); virtual void setWorkWSNy (short); virtual void getWorkWSNy (short*);
    static void _set_p_w_w(void* ptr,void* data); static void _get_def_w_w(void* ptr); static void _get_p_w_w(void* ptr,void* data); virtual void setWorkWSNwidth (WSCushort); virtual void getWorkWSNwidth (WSCushort*);
    static void _set_p_w_h(void* ptr,void* data); static void _get_def_w_h(void* ptr); static void _get_p_w_h(void* ptr,void* data); virtual void setWorkWSNheight (WSCushort); virtual void getWorkWSNheight (WSCushort*);
    static void _set_p_w_shadow_thick(void* ptr,void* data); static void _get_def_w_shadow_thick(void* ptr); static void _get_p_w_shadow_thick(void* ptr,void* data); virtual void setWorkWSNshadowThickness (WSCuchar); virtual void getWorkWSNshadowThickness (WSCuchar*);
    static void _set_p_w_fg_no(void* ptr,void* data); static void _get_def_w_fg_no(void* ptr); static void _get_p_w_fg_no(void* ptr,void* data); virtual void setWorkWSNforeColor (short); virtual void getWorkWSNforeColor (short*);
    static void _set_p_w_bg_no(void* ptr,void* data); static void _get_def_w_bg_no(void* ptr); static void _get_p_w_bg_no(void* ptr,void* data); virtual void setWorkWSNbackColor (short); virtual void getWorkWSNbackColor (short*);
    static void _set_p_w_ts_no(void* ptr,void* data); static void _get_def_w_ts_no(void* ptr); static void _get_p_w_ts_no(void* ptr,void* data); virtual void setWorkWSNtopShadowColor (short); virtual void getWorkWSNtopShadowColor (short*);
    static void _set_p_w_bs_no(void* ptr,void* data); static void _get_def_w_bs_no(void* ptr); static void _get_p_w_bs_no(void* ptr,void* data); virtual void setWorkWSNbottomShadowColor (short); virtual void getWorkWSNbottomShadowColor (short*);
    static void _set_p_w_bp_no(void* ptr,void* data); static void _get_def_w_bp_no(void* ptr); static void _get_p_w_bp_no(void* ptr,void* data); virtual void setWorkWSNbackPixmap (short); virtual void getWorkWSNbackPixmap (short*);

    static void _set_p_w_title_bar(void* ptr,void* data); static void _get_def_w_title_bar(void* ptr); static void _get_p_w_title_bar(void* ptr,void* data); virtual void setWorkWSNtitleBar (char); virtual void getWorkWSNtitleBar (char*);

    static void _set_p_w_shadow_type(void* ptr,void* data); static void _get_def_w_shadow_type(void* ptr); static void _get_p_w_shadow_type(void* ptr,void* data); virtual void setWorkWSNshadowType (char); virtual void getWorkWSNshadowType (char*);
    static void _set_p_w_vis(void* ptr,void* data); static void _get_def_w_vis(void* ptr); static void _get_p_w_vis(void* ptr,void* data); virtual void setWorkWSNvis (WSCbool); virtual void getWorkWSNvis (WSCbool*);
    static void _set_p_w_sensitive_work(void* ptr,void* data); static void _get_def_w_sensitive_work(void* ptr); static void _get_p_w_sensitive_work(void* ptr,void* data); virtual void setWorkWSNdet (WSCbool); virtual void getWorkWSNdet (WSCbool*);
    static void _set_p_w_pixmap_style(void* ptr,void* data); static void _get_def_w_pixmap_style(void* ptr); static void _get_p_w_pixmap_style(void* ptr,void* data); virtual void setWorkWSNpixmapStyle (WSCuchar); virtual void getWorkWSNpixmapStyle (WSCuchar*);
    static void _set_p_w_group_name(void* ptr,void* data); static void _get_def_w_group_name(void* ptr); static void _get_p_w_group_name(void* ptr,void* data); virtual void setWorkWSNgroup (char*); virtual void getWorkWSNgroup (char**);
    static void _set_p_w_unique(void* ptr,void* data); static void _get_def_w_unique(void* ptr); static void _get_p_w_unique(void* ptr,void* data); virtual void setWorkWSNunique (WSCbool); virtual void getWorkWSNunique (WSCbool*);
    static void _set_p_w_mouse_no(void* ptr,void* data); static void _get_def_w_mouse_no(void* ptr); static void _get_p_w_mouse_no(void* ptr,void* data); virtual void setWorkWSNmouse (WSCushort); virtual void getWorkWSNmouse (WSCushort*);

    static void _set_p_w_grad_no(void* ptr,void* data); static void _get_def_w_grad_no(void* ptr); static void _get_p_w_grad_no(void* ptr,void* data); virtual void setWorkWSNgradation (WSCuchar); virtual void getWorkWSNgradation (WSCuchar*);
    static void _set_p_w_grad_margin(void* ptr,void* data); static void _get_def_w_grad_margin(void* ptr); static void _get_p_w_grad_margin(void* ptr,void* data); virtual void setWorkWSNgradationMargin (WSCuchar); virtual void getWorkWSNgradationMargin (WSCuchar*);

    static void _set_p_w_exit(void* ptr,void* data); static void _get_def_w_exit(void* ptr); static void _get_p_w_exit(void* ptr,void* data); virtual void setWorkWSNexit (WSCbool); virtual void getWorkWSNexit (WSCbool*);
    static void _set_p_w_indicator(void* ptr,void* data); static void _get_def_w_indicator(void* ptr); static void _get_p_w_indicator(void* ptr,void* data); virtual void setWorkWSNindicatorOn (WSCbool); virtual void getWorkWSNindicatorOn (WSCbool*);
    static void _set_p_w_margin(void* ptr,void* data); static void _get_def_w_margin(void* ptr); static void _get_p_w_margin(void* ptr,void* data); virtual void setWorkWSNmargin (WSCuchar); virtual void getWorkWSNmargin (WSCuchar*);
    static void _set_p_w_margin_left(void* ptr,void* data); static void _get_def_w_margin_left(void* ptr); static void _get_p_w_margin_left(void* ptr,void* data); virtual void setWorkWSNmarginLeft (WSCushort); virtual void getWorkWSNmarginLeft (WSCushort*);
    static void _set_p_w_bar_thick(void* ptr,void* data); static void _get_def_w_bar_thick(void* ptr); static void _get_p_w_bar_thick(void* ptr,void* data); virtual void setWorkWSNbarThickness (WSCuchar); virtual void getWorkWSNbarThickness (WSCuchar*);
    static void _set_p_w_emboss(void* ptr,void* data); static void _get_def_w_emboss(void* ptr); static void _get_p_w_emboss(void* ptr,void* data); virtual void setWorkWSNemboss (WSCbool); virtual void getWorkWSNemboss (WSCbool*);

    static void _set_p_w_export_(void* ptr,void* data); static void _get_def_w_export_(void* ptr); static void _get_p_w_export_(void* ptr,void* data); virtual void setWorkWSNexport (WSCbool); virtual void getWorkWSNexport (WSCbool*);

    static void _set_p_w_keep_pixmap_cache(void* ptr,void* data); static void _get_def_w_keep_pixmap_cache(void* ptr); static void _get_p_w_keep_pixmap_cache(void* ptr,void* data); virtual void setWorkWSNkeepPixmapCache (WSCbool); virtual void getWorkWSNkeepPixmapCache (WSCbool*);

    void _exec_child_adjust_for_anchors();

    virtual long _device_initialize();

    static WSClistData* _workwindow_list;
    static WSClistData* getWorkWindowList();
    static void (*_exit_handler)();
    static void _delay_visible(unsigned char,void*);
  public:
    WSCwindow(WSCbase*,char*);
    virtual ~WSCwindow();
    virtual long initialize();
    virtual long execEventProc(long ev,void*);

    virtual void onVisibleChange(WSCbool);
    virtual void onResize(WSCrect*);
    virtual void onParentVisibleChange(WSCbool);
    virtual void onFocusChange(WSCbool);

    virtual void onEditModeChange(WSCbool);

    virtual void onDefaultColorChange();
    virtual void onWindowClose();

    virtual long draw();
    virtual long clear();
    virtual long redraw();
    virtual long cdraw();
    virtual void update();

    long setMapStatus(long);

    virtual long getObjectType();
    virtual WSClistData& getChildren();
    virtual WSClistData* getChildrenPtr();
    virtual void setChildren(WSClistData&);
    virtual void adjustForm();
    virtual void setVisible(WSCbool);
    virtual void internalUpdate();

    virtual long restackChild(WSCbase*,int order);


    void execResizeEvent();

 static void setGlobalExitHandler(void(*)());

    long setWindowStatus(long status);
    long getWindowStatus();
    long getPixmapStyle();
    WSCbool getEnableClose();
    void setEnableClose(WSCbool);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCwindow_info_ptr; virtual WSCclassInformation* getClassInformation();
    virtual char* getUseDevName();
    long getVer(long val = 1000); long checkVersion(long);
};
extern __attribute__((dllexport)) long WSGFsetActiveWindow(WSCbase*);
extern __attribute__((dllexport)) WSCbase* WSGFgetActiveWindow();
extern __attribute__((dllexport)) WSCbase* WSGFgetPreActiveWindow();
# 21 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexForm.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexForm.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCform.h" 1
# 30 "C:/PROGRA~1/WIDEST~1/ws/include/WSCform.h"
class WSCform :public WSCbase{

  protected:
    char* _user_string;
    long _user_value;
    WSClistData _children;
    short _x;
    short _y;
    WSCushort _w;
    WSCushort _h;
    short _fore_color;
    short _back_color;
    short _ts_color;
    short _bs_color;
    short _bp_color;
    WSCushort _mouse_no;
    unsigned short _anchor_top;
    unsigned short _anchor_bottom;
    unsigned short _anchor_left;
    unsigned short _anchor_right;
    short _a1_color;
    short _a2_color;
    short _a3_color;

    WSCuchar _grad_margin;
    unsigned _grad_no:4;

    unsigned _anchor_top_use:1;
    unsigned _anchor_bottom_use:1;
    unsigned _anchor_left_use:1;
    unsigned _anchor_right_use:1;

    unsigned _shadow_thick:4;
    signed _shadow_type:4;
    unsigned _pixmap_style:2;
    unsigned _no_refresh:1;
    unsigned _update_resize:1;

    static void _set_p_w_instance_name(void* ptr,void* data); static void _get_def_w_instance_name(void* ptr); static void _get_p_w_instance_name(void* ptr,void* data); virtual void setWorkWSNname (char*); virtual void getWorkWSNname (char**);
    static void _set_p_w_user_string(void* ptr,void* data); static void _get_def_w_user_string(void* ptr); static void _get_p_w_user_string(void* ptr,void* data); virtual void setWorkWSNuserString (char*); virtual void getWorkWSNuserString (char**);
    static void _set_p_w_user_value(void* ptr,void* data); static void _get_def_w_user_value(void* ptr); static void _get_p_w_user_value(void* ptr,void* data); virtual void setWorkWSNuserValue (long); virtual void getWorkWSNuserValue (long*);
    static void _set_p_w_x(void* ptr,void* data); static void _get_def_w_x(void* ptr); static void _get_p_w_x(void* ptr,void* data); virtual void setWorkWSNx (short); virtual void getWorkWSNx (short*);
    static void _set_p_w_y(void* ptr,void* data); static void _get_def_w_y(void* ptr); static void _get_p_w_y(void* ptr,void* data); virtual void setWorkWSNy (short); virtual void getWorkWSNy (short*);
    static void _set_p_w_w(void* ptr,void* data); static void _get_def_w_w(void* ptr); static void _get_p_w_w(void* ptr,void* data); virtual void setWorkWSNwidth (WSCushort); virtual void getWorkWSNwidth (WSCushort*);
    static void _set_p_w_h(void* ptr,void* data); static void _get_def_w_h(void* ptr); static void _get_p_w_h(void* ptr,void* data); virtual void setWorkWSNheight (WSCushort); virtual void getWorkWSNheight (WSCushort*);
    static void _set_p_w_shadow_thick(void* ptr,void* data); static void _get_def_w_shadow_thick(void* ptr); static void _get_p_w_shadow_thick(void* ptr,void* data); virtual void setWorkWSNshadowThickness (WSCuchar); virtual void getWorkWSNshadowThickness (WSCuchar*);
    static void _set_p_w_fore_color(void* ptr,void* data); static void _get_def_w_fore_color(void* ptr); static void _get_p_w_fore_color(void* ptr,void* data); virtual void setWorkWSNforeColor (short); virtual void getWorkWSNforeColor (short*);
    static void _set_p_w_back_color(void* ptr,void* data); static void _get_def_w_back_color(void* ptr); static void _get_p_w_back_color(void* ptr,void* data); virtual void setWorkWSNbackColor (short); virtual void getWorkWSNbackColor (short*);
    static void _set_p_w_ts_color(void* ptr,void* data); static void _get_def_w_ts_color(void* ptr); static void _get_p_w_ts_color(void* ptr,void* data); virtual void setWorkWSNtopShadowColor (short); virtual void getWorkWSNtopShadowColor (short*);
    static void _set_p_w_bs_color(void* ptr,void* data); static void _get_def_w_bs_color(void* ptr); static void _get_p_w_bs_color(void* ptr,void* data); virtual void setWorkWSNbottomShadowColor (short); virtual void getWorkWSNbottomShadowColor (short*);
    static void _set_p_w_bp_color(void* ptr,void* data); static void _get_def_w_bp_color(void* ptr); static void _get_p_w_bp_color(void* ptr,void* data); virtual void setWorkWSNbackPixmap (short); virtual void getWorkWSNbackPixmap (short*);
    static void _set_p_w_shadow_type(void* ptr,void* data); static void _get_def_w_shadow_type(void* ptr); static void _get_p_w_shadow_type(void* ptr,void* data); virtual void setWorkWSNshadowType (char); virtual void getWorkWSNshadowType (char*);
    static void _set_p_w_vis(void* ptr,void* data); static void _get_def_w_vis(void* ptr); static void _get_p_w_vis(void* ptr,void* data); virtual void setWorkWSNvis (WSCbool); virtual void getWorkWSNvis (WSCbool*);
    static void _set_p_w_sensitive_work(void* ptr,void* data); static void _get_def_w_sensitive_work(void* ptr); static void _get_p_w_sensitive_work(void* ptr,void* data); virtual void setWorkWSNdet (WSCbool); virtual void getWorkWSNdet (WSCbool*);
    static void _set_p_w_pixmap_style(void* ptr,void* data); static void _get_def_w_pixmap_style(void* ptr); static void _get_p_w_pixmap_style(void* ptr,void* data); virtual void setWorkWSNpixmapStyle (WSCuchar); virtual void getWorkWSNpixmapStyle (WSCuchar*);
    static void _set_p_w_mouse_no(void* ptr,void* data); static void _get_def_w_mouse_no(void* ptr); static void _get_p_w_mouse_no(void* ptr,void* data); virtual void setWorkWSNmouse (WSCushort); virtual void getWorkWSNmouse (WSCushort*);

    static void _set_p_w_grad_no(void* ptr,void* data); static void _get_def_w_grad_no(void* ptr); static void _get_p_w_grad_no(void* ptr,void* data); virtual void setWorkWSNgradation (WSCuchar); virtual void getWorkWSNgradation (WSCuchar*);
    static void _set_p_w_grad_margin(void* ptr,void* data); static void _get_def_w_grad_margin(void* ptr); static void _get_p_w_grad_margin(void* ptr,void* data); virtual void setWorkWSNgradationMargin (WSCuchar); virtual void getWorkWSNgradationMargin (WSCuchar*);

    static void _set_p_w_anchor_top(void* ptr,void* data); static void _get_def_w_anchor_top(void* ptr); static void _get_p_w_anchor_top(void* ptr,void* data); virtual void setWorkWSNanchorTop (WSCushort); virtual void getWorkWSNanchorTop (WSCushort*);
    static void _set_p_w_anchor_bottom(void* ptr,void* data); static void _get_def_w_anchor_bottom(void* ptr); static void _get_p_w_anchor_bottom(void* ptr,void* data); virtual void setWorkWSNanchorBottom (WSCushort); virtual void getWorkWSNanchorBottom (WSCushort*);
    static void _set_p_w_anchor_left(void* ptr,void* data); static void _get_def_w_anchor_left(void* ptr); static void _get_p_w_anchor_left(void* ptr,void* data); virtual void setWorkWSNanchorLeft (WSCushort); virtual void getWorkWSNanchorLeft (WSCushort*);
    static void _set_p_w_anchor_right(void* ptr,void* data); static void _get_def_w_anchor_right(void* ptr); static void _get_p_w_anchor_right(void* ptr,void* data); virtual void setWorkWSNanchorRight (WSCushort); virtual void getWorkWSNanchorRight (WSCushort*);
    static void _set_p_w_anchor_top_use(void* ptr,void* data); static void _get_def_w_anchor_top_use(void* ptr); static void _get_p_w_anchor_top_use(void* ptr,void* data); virtual void setWorkWSNanchorTopFlag (WSCbool); virtual void getWorkWSNanchorTopFlag (WSCbool*);
    static void _set_p_w_anchor_bottom_use(void* ptr,void* data); static void _get_def_w_anchor_bottom_use(void* ptr); static void _get_p_w_anchor_bottom_use(void* ptr,void* data); virtual void setWorkWSNanchorBottomFlag (WSCbool); virtual void getWorkWSNanchorBottomFlag (WSCbool*);
    static void _set_p_w_anchor_left_use(void* ptr,void* data); static void _get_def_w_anchor_left_use(void* ptr); static void _get_p_w_anchor_left_use(void* ptr,void* data); virtual void setWorkWSNanchorLeftFlag (WSCbool); virtual void getWorkWSNanchorLeftFlag (WSCbool*);
    static void _set_p_w_anchor_right_use(void* ptr,void* data); static void _get_def_w_anchor_right_use(void* ptr); static void _get_p_w_anchor_right_use(void* ptr,void* data); virtual void setWorkWSNanchorRightFlag (WSCbool); virtual void getWorkWSNanchorRightFlag (WSCbool*);

    static void _set_p_w_export_(void* ptr,void* data); static void _get_def_w_export_(void* ptr); static void _get_p_w_export_(void* ptr,void* data); virtual void setWorkWSNexport (WSCbool); virtual void getWorkWSNexport (WSCbool*);

    static void _set_p_w_keep_pixmap_cache(void* ptr,void* data); static void _get_def_w_keep_pixmap_cache(void* ptr); static void _get_p_w_keep_pixmap_cache(void* ptr,void* data); virtual void setWorkWSNkeepPixmapCache (WSCbool); virtual void getWorkWSNkeepPixmapCache (WSCbool*);

    virtual long _device_initialize();
    virtual void _exec_child_adjust_for_anchors();
static void (*_ext_draw_proc)(void*);
static char* _policy_name;

  public:
    WSCform(WSCbase*,char*);
    virtual ~WSCform();

    virtual void onResize(WSCrect*);
    virtual void onVisibleChange(WSCbool);
    virtual void onParentVisibleChange(WSCbool);
    virtual void onGuiPolicyChange(long);

    virtual void _adjust_for_anchors(WSCushort,WSCushort);

    virtual long execEventProc(long ev,void*);

    virtual long draw();
    virtual long clear();
    virtual long redraw();
    virtual long cdraw();


    virtual void update();
    virtual long getObjectType();
    virtual WSClistData& getChildren();
    virtual WSClistData* getChildrenPtr();
    virtual void setChildren(WSClistData&);
    virtual void internalUpdate();

    virtual long restackChild(WSCbase*,int order);


    void execResizeEvent();
    void setNoRefresh(WSCbool);
    WSCbool getNoRefresh();
    long getPixmapStyle();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCform_info_ptr; virtual WSCclassInformation* getClassInformation();
    virtual char* getUseDevName();
    long getVer(long val = 1010); long checkVersion(long);
};
struct WSCform_draw_struct{
  WSCform* _this;
  WSDdev* dev;
  short x;
  short y;
  WSCushort width;
  WSCushort height;
  WSCushort shadow_thickness;
  short fore_color;
  short back_color;
  short top_shadow_color;
  short bottom_shadow_color;
  short back_pixmap;
  long shadow_type;

  short gradation;
  short gradation_margin;

};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCindexForm.h" 2


class WSCindexForm :public WSCform{

  protected:
     WSClistData _btns;
     WSCform* _tab_form;
     char* _menu_string;
     char* _sc_str;
     WSCushort _bar_thick;
     WSCuchar _value;
     unsigned _orientation:1;
     unsigned _need_adjust:1;
     unsigned _flipped:1;
     unsigned _use_icon:1;

     static void _set_p_w_bar_thick(void* ptr,void* data); static void _get_def_w_bar_thick(void* ptr); static void _get_p_w_bar_thick(void* ptr,void* data); virtual void setWorkWSNbarThickness (WSCushort); virtual void getWorkWSNbarThickness (WSCushort*);
     static void _set_p_w_orientation(void* ptr,void* data); static void _get_def_w_orientation(void* ptr); static void _get_p_w_orientation(void* ptr,void* data); virtual void setWorkWSNorientation (WSCuchar); virtual void getWorkWSNorientation (WSCuchar*);
     static void _set_p_w_menu_string(void* ptr,void* data); static void _get_def_w_menu_string(void* ptr); static void _get_p_w_menu_string(void* ptr,void* data); virtual void setWorkWSNmenuItems (char*); virtual void getWorkWSNmenuItems (char**);
     static void _set_p_w_value(void* ptr,void* data); static void _get_def_w_value(void* ptr); static void _get_p_w_value(void* ptr,void* data); virtual void setWorkWSNvalue (WSCuchar); virtual void getWorkWSNvalue (WSCuchar*);
     static void _set_p_w_flipped(void* ptr,void* data); static void _get_def_w_flipped(void* ptr); static void _get_p_w_flipped(void* ptr,void* data); virtual void setWorkWSNflip (WSCbool); virtual void getWorkWSNflip (WSCbool*);
     static void _set_p_w_use_icon(void* ptr,void* data); static void _get_def_w_use_icon(void* ptr); static void _get_p_w_use_icon(void* ptr,void* data); virtual void setWorkWSNuseIcon (WSCbool); virtual void getWorkWSNuseIcon (WSCbool*);
     static void _set_p_w_sc_str(void* ptr,void* data); static void _get_def_w_sc_str(void* ptr); static void _get_p_w_sc_str(void* ptr,void* data); virtual void setWorkWSNshortcut (char*); virtual void getWorkWSNshortcut (char**);

     virtual void setWorkWSNbackColor(short);
     virtual void setWorkWSNforeColor(short);
     virtual void setWorkWSNwidth(WSCushort);
     virtual void setWorkWSNheight(WSCushort);
     virtual void setWorkWSNshadowType(char);
     virtual void setWorkWSNshadowThickness(WSCuchar);

     void _value_adjust();
     void _adjust();
     void _vis_adjust();
     static void _index_op(WSCbase*);
static void (*_ext_draw_proc)(void*);
static char* _policy_name;

  public:
    WSCindexForm(WSCbase*,char*);
    virtual ~WSCindexForm();
    virtual void onGuiPolicyChange(long);

    virtual long initialize();
    virtual long draw();
    virtual long redraw();
    virtual long clear();
    virtual long cdraw();


    void set_btn_background(short no);
    WSCbase* get_target_btn();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCindexForm_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};
struct WSCindexForm_draw_struct{
  WSCindexForm* _this;
  WSDdev* dev;
  short x;
  short y;
  WSCushort width;
  WSCushort height;
  WSCushort shadow_thickness;
  short fore_color;
  short back_color;
  short top_shadow_color;
  short bottom_shadow_color;
  short back_pixmap;
  long shadow_type;

  short gradation;
  short gradation_margin;

  WSCushort bar_thickness;
  WSCuchar orientation;
  WSCbool flipped;
  char* menu_string;
  WSCulong value;
};
# 22 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvifield.h" 1
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvifield.h"
class WSDkeyboard;



class WSCvifield :public WSCvlabel{

  protected:
    static long _cur_timer_id;
    long _mx;
    long _my;
    char* _upname;
    char* _dwname;
    char* _lname;
    char* _rname;
    char* _rtname;
    char* _tbname;
    char* _btbname;
    char* _data_source_name;

    long _cur_pos;

    WSCushort _cbase;
    long _disp_cur_x;
    long _disp_cur_y;
    long _cur_pos_bk;
    WSCushort* _ucs2;
    WSCushort* _str_work;

    long _lines;
    unsigned _data_source_type:2;
    long _select_pos1;
    long _select_pos2;
    unsigned _enable_fep:4;
    unsigned _icursor:1;
    unsigned _enable_focus_move:1;
    unsigned _fspace:1;
    unsigned _cursor_adjust:1;
    unsigned _multi_lines:1;
    unsigned _skip_mode:1;
    unsigned _enable_max:1;
    unsigned _cursor_fore:1;
    unsigned _no_hatch:1;
    unsigned _no_mcur_adjust:1;
    unsigned _mouse_pressed:1;
    unsigned _deleting:1;
    unsigned _return_key_focus:1;
    unsigned _key_input_disable:1;
    unsigned _fep_set_focus:1;
    unsigned _display_only:1;
    unsigned _need_ds_update:1;
    unsigned _text_changed:1;



    static void _set_p_w_cur_pos(void* ptr,void* data); static void _get_def_w_cur_pos(void* ptr); static void _get_p_w_cur_pos(void* ptr,void* data); virtual void setWorkWSNcursorPos (short); virtual void getWorkWSNcursorPos (short*);
    static void _set_p_w_enable_fep(void* ptr,void* data); static void _get_def_w_enable_fep(void* ptr); static void _get_p_w_enable_fep(void* ptr,void* data); virtual void setWorkWSNenableFep (WSCuchar); virtual void getWorkWSNenableFep (WSCuchar*);
    static void _set_p_w_icursor(void* ptr,void* data); static void _get_def_w_icursor(void* ptr); static void _get_p_w_icursor(void* ptr,void* data); virtual void setWorkWSNinterCur (WSCbool); virtual void getWorkWSNinterCur (WSCbool*);
    static void _set_p_w_enable_focus_move(void* ptr,void* data); static void _get_def_w_enable_focus_move(void* ptr); static void _get_p_w_enable_focus_move(void* ptr,void* data); virtual void setWorkWSNenableFocusMove (WSCbool); virtual void getWorkWSNenableFocusMove (WSCbool*);
    static void _set_p_w_upname(void* ptr,void* data); static void _get_def_w_upname(void* ptr); static void _get_p_w_upname(void* ptr,void* data); virtual void setWorkWSNupward (char*); virtual void getWorkWSNupward (char**);
    static void _set_p_w_dwname(void* ptr,void* data); static void _get_def_w_dwname(void* ptr); static void _get_p_w_dwname(void* ptr,void* data); virtual void setWorkWSNdownward (char*); virtual void getWorkWSNdownward (char**);
    static void _set_p_w_lname(void* ptr,void* data); static void _get_def_w_lname(void* ptr); static void _get_p_w_lname(void* ptr,void* data); virtual void setWorkWSNleftward (char*); virtual void getWorkWSNleftward (char**);
    static void _set_p_w_rname(void* ptr,void* data); static void _get_def_w_rname(void* ptr); static void _get_p_w_rname(void* ptr,void* data); virtual void setWorkWSNrightward (char*); virtual void getWorkWSNrightward (char**);
    static void _set_p_w_rtname(void* ptr,void* data); static void _get_def_w_rtname(void* ptr); static void _get_p_w_rtname(void* ptr,void* data); virtual void setWorkWSNreturn (char*); virtual void getWorkWSNreturn (char**);
    static void _set_p_w_tbname(void* ptr,void* data); static void _get_def_w_tbname(void* ptr); static void _get_p_w_tbname(void* ptr,void* data); virtual void setWorkWSNtab (char*); virtual void getWorkWSNtab (char**);
    static void _set_p_w_btbname(void* ptr,void* data); static void _get_def_w_btbname(void* ptr); static void _get_p_w_btbname(void* ptr,void* data); virtual void setWorkWSNbacktab (char*); virtual void getWorkWSNbacktab (char**);
    static void _set_p_w_fspace(void* ptr,void* data); static void _get_def_w_fspace(void* ptr); static void _get_p_w_fspace(void* ptr,void* data); virtual void setWorkWSNfillSpace (WSCbool); virtual void getWorkWSNfillSpace (WSCbool*);
    static void _set_p_w_cursor_adjust(void* ptr,void* data); static void _get_def_w_cursor_adjust(void* ptr); static void _get_p_w_cursor_adjust(void* ptr,void* data); virtual void setWorkWSNcursorAdjust (WSCbool); virtual void getWorkWSNcursorAdjust (WSCbool*);
    static void _set_p_w_skip_mode(void* ptr,void* data); static void _get_def_w_skip_mode(void* ptr); static void _get_p_w_skip_mode(void* ptr,void* data); virtual void setWorkWSNifieldSkipMode (WSCbool); virtual void getWorkWSNifieldSkipMode (WSCbool*);
    static void _set_p_w_no_hatch(void* ptr,void* data); static void _get_def_w_no_hatch(void* ptr); static void _get_p_w_no_hatch(void* ptr,void* data); virtual void setWorkWSNnoHatch (WSCbool); virtual void getWorkWSNnoHatch (WSCbool*);
    static void _set_p_w_return_key_focus(void* ptr,void* data); static void _get_def_w_return_key_focus(void* ptr); static void _get_p_w_return_key_focus(void* ptr,void* data); virtual void setWorkWSNreturnKeyFocus (WSCbool); virtual void getWorkWSNreturnKeyFocus (WSCbool*);

    static void _set_p_w_data_source_type(void* ptr,void* data); static void _get_def_w_data_source_type(void* ptr); static void _get_p_w_data_source_type(void* ptr,void* data); virtual void setWorkWSNdataSource (WSCuchar); virtual void getWorkWSNdataSource (WSCuchar*);
    static void _set_p_w_data_source_name(void* ptr,void* data); static void _get_def_w_data_source_name(void* ptr); static void _get_p_w_data_source_name(void* ptr,void* data); virtual void setWorkWSNdataSourceName (char*); virtual void getWorkWSNdataSourceName (char**);
    static void _set_p_w_display_only(void* ptr,void* data); static void _get_def_w_display_only(void* ptr); static void _get_p_w_display_only(void* ptr,void* data); virtual void setWorkWSNdisplayOnly (WSCbool); virtual void getWorkWSNdisplayOnly (WSCbool*);


    virtual void setWorkWSNmaxLength(WSCushort data);
    virtual void setWorkWSNlabelString(char* data);
    virtual void getWorkWSNlabelString(char** data);

    static void _cursor_blink_handler(WSCuchar,void*);
    static WSCbool _special_key_handler(void*,WSDkeyboard*,WSCbool);
    static void _key_handler(void*,WSDkeyboard*,WSCbool);



    virtual void _on_key_input(WSDkeyboard*,WSCbool);
    virtual long _device_initialize();


    void _adjust_cbase();
    void _set_text(WSCushort*);
    void _update_text();
    void _fill_space();
    void _set_cur_pos(long absolute_pos);
    void _get_cur_pos(long* x,long* y,long* pos);


    WSCbool _return_key_ok();

    void _fep_cursor_adjust(WSDkeyboard*);
 virtual long _cursor_move(char direction);
    void _get_disp_cur_pos(long* x,long* y);
    long _get_absolute_pos(long x,long y);
    void _set_select_pos1(long pos);
    void _set_select_pos2(long pos);
    void _delete_select_string();
    void _reset_select_string();
    void _replace_string(WSCushort*);
    void _adjust_max_len();
    void _set_ds_instance();

    void _focus_move_for_combo(long);

  public:
    WSCvifield(WSCbase*,char*);
    virtual ~WSCvifield();

    virtual void onCursorBlink();
    virtual void onFocusChange(WSCbool);
    virtual void onWindowFocusChange(WSCbool);
    virtual void onSpecialFocusChange(WSCbool);
    virtual void onMousePress(WSCpoint*);
    virtual void onMouseRelease(WSCpoint*);
    virtual void onMouseMove(WSCpoint*);
    virtual void onKeyHook(WSDkeyboard*);
    virtual void onKeyInput(WSDkeyboard*,WSCbool);
    virtual void onKey(WSDkeyboard*,WSCbool);
    virtual void onActivate();
    virtual void onValueChange();
    virtual void onSelectionChange(WSCbool);
    virtual void onVisibleChange(WSCbool);
    virtual void onParentVisibleChange(WSCbool);

    virtual void setData(WSCvariant*,long code = -2);
    virtual long getDataSourceType();
    virtual char* getDataSourcePropertyName();

    virtual long draw();
    virtual void update();

    void setCursorFore(WSCbool fl);
    WSCbool getCursorFore();
    WSCbool setCurPos(long pos);
    void replaceSelectedString(char*,long encode = -2);
    WSCstring getSelectedString();
    void deleteSelectedString();
    long setSelect(long,long);
    long getSelectedPos();
    long setFepStatus(WSCbool);
    WSCushort* getBuf();
    WSCstring getString();
    void setBuf(WSCushort*);
    void addString(char*,long encode = -2);
    void setKeyInputDisable(WSCbool);
    WSCbool getKeyInputDisable();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCvifield_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1001); long checkVersion(long);
};
# 23 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCmessageDialog.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCmessageDialog.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbaseDialog.h" 1
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCbaseDialog.h"
class WSCvbtn;
class WSCvlabel;
class WSCform;



class WSCbaseDialog :public WSCwindow{

  private:
  protected:
    WSCvbtn* _end_btn;
    WSCvbtn* _ok_btn;
    WSCvbtn* _no_btn;
    WSCform* _cmd_form;
    WSCvlabel* _title_label;

    WSCvlabel* _title_labels1;
    WSCvlabel* _title_labels2;

    void* _rep;
    char* _ok_str;
    char* _no_str;
    char* _cancel_str;
    char* _tb_name;
    char* _btb_name;

    short _title_pixmap;
    char _focus_btn;
    unsigned _ok:1;
    unsigned _no:1;
    unsigned _cancel:1;
    unsigned _status:2;
    unsigned _modal:1;
    unsigned _default_pos:1;
    unsigned _popuped:1;
    unsigned _enable_esc:1;
    unsigned _enable_close_on_cancel:1;
    unsigned _font:4;

    static void _set_p_w_ok(void* ptr,void* data); static void _get_def_w_ok(void* ptr); static void _get_p_w_ok(void* ptr,void* data); virtual void setWorkWSNok (WSCbool); virtual void getWorkWSNok (WSCbool*);
    static void _set_p_w_no(void* ptr,void* data); static void _get_def_w_no(void* ptr); static void _get_p_w_no(void* ptr,void* data); virtual void setWorkWSNno (WSCbool); virtual void getWorkWSNno (WSCbool*);
    static void _set_p_w_cancel(void* ptr,void* data); static void _get_def_w_cancel(void* ptr); static void _get_p_w_cancel(void* ptr,void* data); virtual void setWorkWSNcancel (WSCbool); virtual void getWorkWSNcancel (WSCbool*);
    static void _set_p_w_title_pixmap(void* ptr,void* data); static void _get_def_w_title_pixmap(void* ptr); static void _get_p_w_title_pixmap(void* ptr,void* data); virtual void setWorkWSNlabelPixmap (short); virtual void getWorkWSNlabelPixmap (short*);
    static void _set_p_w_ok_str(void* ptr,void* data); static void _get_def_w_ok_str(void* ptr); static void _get_p_w_ok_str(void* ptr,void* data); virtual void setWorkWSNokString (char*); virtual void getWorkWSNokString (char**);
    static void _set_p_w_no_str(void* ptr,void* data); static void _get_def_w_no_str(void* ptr); static void _get_p_w_no_str(void* ptr,void* data); virtual void setWorkWSNnoString (char*); virtual void getWorkWSNnoString (char**);
    static void _set_p_w_cancel_str(void* ptr,void* data); static void _get_def_w_cancel_str(void* ptr); static void _get_p_w_cancel_str(void* ptr,void* data); virtual void setWorkWSNcancelString (char*); virtual void getWorkWSNcancelString (char**);
    static void _set_p_w_rep(void* ptr,void* data); static void _get_def_w_rep(void* ptr); static void _get_p_w_rep(void* ptr,void* data); virtual void setWorkWSNreplyHandler (void*); virtual void getWorkWSNreplyHandler (void**);
    static void _set_p_w_modal(void* ptr,void* data); static void _get_def_w_modal(void* ptr); static void _get_p_w_modal(void* ptr,void* data); virtual void setWorkWSNmodal (WSCbool); virtual void getWorkWSNmodal (WSCbool*);
    static void _set_p_w_default_pos(void* ptr,void* data); static void _get_def_w_default_pos(void* ptr); static void _get_p_w_default_pos(void* ptr,void* data); virtual void setWorkWSNdefaultPosition (WSCbool); virtual void getWorkWSNdefaultPosition (WSCbool*);
    static void _set_p_w_keep_pixmap_cache(void* ptr,void* data); static void _get_def_w_keep_pixmap_cache(void* ptr); static void _get_p_w_keep_pixmap_cache(void* ptr,void* data); virtual void setWorkWSNkeepPixmapCache (WSCbool); virtual void getWorkWSNkeepPixmapCache (WSCbool*);
    static void _set_p_w_tb_name(void* ptr,void* data); static void _get_def_w_tb_name(void* ptr); static void _get_p_w_tb_name(void* ptr,void* data); virtual void setWorkWSNtab (char*); virtual void getWorkWSNtab (char**);
    static void _set_p_w_btb_name(void* ptr,void* data); static void _get_def_w_btb_name(void* ptr); static void _get_p_w_btb_name(void* ptr,void* data); virtual void setWorkWSNbacktab (char*); virtual void getWorkWSNbacktab (char**);
    static void _set_p_w_font(void* ptr,void* data); static void _get_def_w_font(void* ptr); static void _get_p_w_font(void* ptr,void* data); virtual void setWorkWSNfont (WSCuchar); virtual void getWorkWSNfont (WSCuchar*);

    virtual void setWorkWSNwidth(WSCushort);
    virtual void setWorkWSNheight(WSCushort);

    virtual void setWorkWSNtitleString(char*);

    static void _ok_btn_work(WSCbase*);
    static void _no_btn_work(WSCbase*);
    static void _end_btn_work(WSCbase*);

     virtual long _device_initialize();

  public:
    WSCbaseDialog(WSCbase*,char*);
    virtual ~WSCbaseDialog();
    virtual long initialize();

    virtual void onResize(WSCrect*);
    virtual void onVisibleChange(WSCbool);
    virtual void onParentVisibleChange(WSCbool);
    virtual void onActivate();
    virtual void onGuiPolicyChange(long);
    virtual void onFocusChange(WSCbool);
    virtual void onSpecialFocusChange(WSCbool);

    WSCbase* getFormObject();
    WSCbase* getCmdFormObject();
    long getStatus();
    virtual long popup();
    void setFocusBtn(long);
    void setEnableEscapeKey(WSCbool);
    WSCbool getEnableEscapeKey();
    void setEnableCloseOnCancel(WSCbool);
    WSCbool getEnableCloseOnCancel();
    virtual WSCbase* getFocusMoveInternalInstance(long);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCbaseDialog_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCmessageDialog.h" 2



class WSCmessageDialog :public WSCbaseDialog{

  protected:
    char* _label_string;
    WSCform* _area1;
    WSCvlabel* _label;
    short _wbg_no;

    static void _set_p_w_label_string(void* ptr,void* data); static void _get_def_w_label_string(void* ptr); static void _get_p_w_label_string(void* ptr,void* data); virtual void setWorkWSNlabelString (char*); virtual void getWorkWSNlabelString (char**);
    static void _set_p_w_wbg_no(void* ptr,void* data); static void _get_def_w_wbg_no(void* ptr); static void _get_p_w_wbg_no(void* ptr,void* data); virtual void setWorkWSNworkBackColor (short); virtual void getWorkWSNworkBackColor (short*);


  public:
    WSCmessageDialog(WSCbase*,char*);
    virtual ~WSCmessageDialog();
    virtual long initialize();


    virtual void onActivate();
    virtual void onGuiPolicyChange(long);

    virtual void adjustForm();
    virtual char* getDefaultProperty();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCmessageDialog_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};

extern __attribute__((dllexport)) WSCmessageDialog* WSGIappMessageDialog();
# 24 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSClist.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSClist.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCscrForm.h" 1
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCscrForm.h"
class WSCscrFrame;
class WSCvscrBar;



class WSCscrForm :public WSCform{

  protected:
    WSCscrFrame* _scr_area;
    WSCvscrBar* _h_scr;
    WSCvscrBar* _v_scr;
    WSCushort _scr_area_w;
    WSCushort _scr_area_h;

    WSCushort _v_scr_slider_sz;
    WSCushort _h_scr_slider_sz;
    WSCushort _v_scr_max_sz;
    WSCushort _h_scr_max_sz;

    short _v_scr_x_bk;
    short _h_scr_y_bk;
    WSCushort _v_scr_w_bk;
    WSCushort _v_scr_h_bk;
    WSCushort _h_scr_w_bk;
    WSCushort _h_scr_h_bk;

    WSCushort _work_width;
    WSCushort _work_height;
    WSCushort _wx_pos;
    WSCushort _wy_pos;
    WSCushort _increment;
    WSCushort _page_increment;
    WSCushort _scroll_width;
    WSCushort _scroll_height;
    WSCushort _bar_thick;
    short _bar_back_color;
    short _work_back_color;
    short _scr_offset_x;
    short _scr_offset_y;
    unsigned _marginw:3;
    unsigned _padding:5;
    unsigned _hbar_visible:1;
    unsigned _vbar_visible:1;
    unsigned _virtual_scr:1;
    unsigned _frame:1;
    unsigned _no_scroll:1;
    unsigned _update_work_area:1;

    static short _btn_x;
    static short _btn_y;
    static short _btn_x_pressed;
    static short _btn_y_pressed;
    static WSCushort _value_pressed;

    static void _set_p_w_work_width(void* ptr,void* data); static void _get_def_w_work_width(void* ptr); static void _get_p_w_work_width(void* ptr,void* data); virtual void setWorkWSNworkWidth (WSCushort); virtual void getWorkWSNworkWidth (WSCushort*);
    static void _set_p_w_work_height(void* ptr,void* data); static void _get_def_w_work_height(void* ptr); static void _get_p_w_work_height(void* ptr,void* data); virtual void setWorkWSNworkHeight (WSCushort); virtual void getWorkWSNworkHeight (WSCushort*);
    static void _set_p_w_wx_pos(void* ptr,void* data); static void _get_def_w_wx_pos(void* ptr); static void _get_p_w_wx_pos(void* ptr,void* data); virtual void setWorkWSNhbarValue (WSCushort); virtual void getWorkWSNhbarValue (WSCushort*);
    static void _set_p_w_wy_pos(void* ptr,void* data); static void _get_def_w_wy_pos(void* ptr); static void _get_p_w_wy_pos(void* ptr,void* data); virtual void setWorkWSNvbarValue (WSCushort); virtual void getWorkWSNvbarValue (WSCushort*);
    static void _set_p_w_increment(void* ptr,void* data); static void _get_def_w_increment(void* ptr); static void _get_p_w_increment(void* ptr,void* data); virtual void setWorkWSNincrement (WSCushort); virtual void getWorkWSNincrement (WSCushort*);
    static void _set_p_w_page_increment(void* ptr,void* data); static void _get_def_w_page_increment(void* ptr); static void _get_p_w_page_increment(void* ptr,void* data); virtual void setWorkWSNpageIncrement (WSCushort); virtual void getWorkWSNpageIncrement (WSCushort*);
    static void _set_p_w_work_back_color(void* ptr,void* data); static void _get_def_w_work_back_color(void* ptr); static void _get_p_w_work_back_color(void* ptr,void* data); virtual void setWorkWSNworkBackColor (short); virtual void getWorkWSNworkBackColor (short*);
    static void _set_p_w_bar_thick(void* ptr,void* data); static void _get_def_w_bar_thick(void* ptr); static void _get_p_w_bar_thick(void* ptr,void* data); virtual void setWorkWSNbarThickness (WSCushort); virtual void getWorkWSNbarThickness (WSCushort*);
    static void _set_p_w_bar_back_color(void* ptr,void* data); static void _get_def_w_bar_back_color(void* ptr); static void _get_p_w_bar_back_color(void* ptr,void* data); virtual void setWorkWSNbarShadowColor (short); virtual void getWorkWSNbarShadowColor (short*);
    static void _set_p_w_hbar_visible(void* ptr,void* data); static void _get_def_w_hbar_visible(void* ptr); static void _get_p_w_hbar_visible(void* ptr,void* data); virtual void setWorkWSNhbarVisible (WSCbool); virtual void getWorkWSNhbarVisible (WSCbool*);
    static void _set_p_w_vbar_visible(void* ptr,void* data); static void _get_def_w_vbar_visible(void* ptr); static void _get_p_w_vbar_visible(void* ptr,void* data); virtual void setWorkWSNvbarVisible (WSCbool); virtual void getWorkWSNvbarVisible (WSCbool*);
    static void _set_p_w_scroll_width(void* ptr,void* data); static void _get_def_w_scroll_width(void* ptr); static void _get_p_w_scroll_width(void* ptr,void* data); virtual void setWorkWSNscrollWidth (WSCushort); virtual void getWorkWSNscrollWidth (WSCushort*);
    static void _set_p_w_scroll_height(void* ptr,void* data); static void _get_def_w_scroll_height(void* ptr); static void _get_p_w_scroll_height(void* ptr,void* data); virtual void setWorkWSNscrollHeight (WSCushort); virtual void getWorkWSNscrollHeight (WSCushort*);
    static void _set_p_w_marginw(void* ptr,void* data); static void _get_def_w_marginw(void* ptr); static void _get_p_w_marginw(void* ptr,void* data); virtual void setWorkWSNmargin (WSCuchar); virtual void getWorkWSNmargin (WSCuchar*);
    static void _set_p_w_virtual_scr(void* ptr,void* data); static void _get_def_w_virtual_scr(void* ptr); static void _get_p_w_virtual_scr(void* ptr,void* data); virtual void setWorkWSNvirtualScroll (WSCbool); virtual void getWorkWSNvirtualScroll (WSCbool*);
    static void _set_p_w_frame(void* ptr,void* data); static void _get_def_w_frame(void* ptr); static void _get_p_w_frame(void* ptr,void* data); virtual void setWorkWSNframe (WSCbool); virtual void getWorkWSNframe (WSCbool*);

    virtual void setWorkWSNshadowThickness(WSCuchar);
    virtual void setWorkWSNforeColor(short);
    virtual void setWorkWSNtopShadowColor(short);
    virtual void setWorkWSNbottomShadowColor(short);
    virtual void setWorkWSNpixmapStyle(WSCuchar);
    virtual void setWorkWSNbackColor(short);
    virtual void setWorkWSNwidth(WSCushort);
    virtual void setWorkWSNheight(WSCushort);

    static void _h_scr_work_op(WSCbase*);
    static void _ha_scr_work_op(WSCbase*);
    static void _v_scr_work_op(WSCbase*);
    static void _va_scr_work_op(WSCbase*);
    static void _scr_mouse_press(WSCbase*);
    static void _scr_mouse_release(WSCbase*);
    static void _scr_mouse_move(WSCbase*);
    static void _scr_mouse_dclick(WSCbase*);

    WSCushort _get_shift_width();
    WSCushort _get_shift_height();

    virtual void _adjust();
    void _adjust_scr_area();
    void _adjust_children();
    void _redraw_scr();

    virtual long _device_initialize();

    WSCbool _get_hbar_visible();
    WSCbool _get_vbar_visible();
    void _set_no_scroll(WSCbool fl);
    virtual void _adjust_no_scroll();
 static void (*_ext_draw_proc)(void*);
 static char* _policy_name;

  public:
    WSCscrForm(WSCbase*,char*);
    virtual ~WSCscrForm();

 static void setUseScrBarClass(char*);
 static char* getUseScrBarClass();

    virtual long initialize();
    virtual void update();

    virtual void onParentVisibleChange(WSCbool);
    virtual void onActivate();
    virtual void onChildAdded(WSCbase*);
    virtual void onValueChange();
    virtual void onGuiPolicyChange(long);
    virtual void onMousePress(WSCpoint*);
    virtual void onScrMousePress(WSCpoint*);
    virtual void onScrMouseRelease(WSCpoint*);
    virtual void onScrMouseMove(WSCpoint*);
    virtual void onScrMouseDoubleClick(WSCpoint*);
    virtual void onVisibleChange(WSCbool);

    virtual long execEventProc(long ev,void*);
    virtual long clear();
    virtual long draw();
    virtual long redraw();
    virtual long cdraw();

    virtual long setPropertyEditMode(WSCbool );

    virtual void _exec_child_adjust_for_anchors();
    virtual long getObjectType();

    long getVisibleWidth();
    long getVisibleHeight();
    WSCbase* getScrFrame();

    WSCbase* getVScrBar();
    WSCbase* getHScrBar();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCscrForm_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1001); long checkVersion(long);
};

struct WSCscrForm_draw_struct{
  WSCscrForm* _this;
  WSDdev* dev;
  short x;
  short y;
  WSCushort width;
  WSCushort height;
  WSCushort shadow_thickness;
  short fore_color;
  short back_color;
  short top_shadow_color;
  short bottom_shadow_color;
  short work_back_color;
  short back_pixmap;
  long shadow_type;

  short gradation;
  short gradation_margin;

  WSCushort bar_thickness;
  WSCuchar margin_width;
  WSCuchar padding;
  WSCbool frame;
  WSCbool vbar_visible;
  WSCbool hbar_visible;

};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSClist.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCsform.h" 1
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCsform.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSDkeyboard.h" 1
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSDkeyboard.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSkeysym.h" 1
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSDkeyboard.h" 2

class WSDdev;
class WSCballoonHelp;

typedef WSCbool (*WSDkeyProc)(long,WSCbool );
typedef void (*WSDfocusKeyProc)(void*,WSCbool );
typedef void (*WSDloseFocusProc)(void*);

class WSDkeyboard :public WSCroot{

  protected:
    WSCstring _select_str;
    void (*_normal_proc1)(void*,WSDkeyboard*,WSCbool);
    void (*_normal_proc2)(void*);
    WSCbool (*_special_proc)(void*,WSDkeyboard*,WSCbool);
    WSCbool (*_global_proc)(long,WSCbool);
    void* _normal_ptr;
    void* _special_ptr;
    long _key;
    WSCstring _text;
    unsigned _with_shift:1;
    unsigned _with_lock:1;
    unsigned _with_alt:1;
    unsigned _with_cntl:1;
    unsigned _is_cursor:1;
    unsigned _is_function:1;
    unsigned _is_tty_function:1;
    unsigned _enable_fep:1;
    unsigned _fep_on:1;
    unsigned _is_pressed:1;
    unsigned _global_key_sensitive:1;
    unsigned _keep_focus:1;

    static WSCballoonHelp* _status_win;
    WSCbase* _focus_instance;
    WSCbase* _special_focus_instance;
    static void _mode_win_move(WSCbase*);

    void setVisibleModeWindow(WSCbool fl);
    void setPositionModeWindow(short x,short y);
    void setModeString(char*);

  public:
    WSDkeyboard();

    virtual long initialize();
    virtual void setKey(long);
    virtual void setEnableFep(WSDdev*,WSCbool);

    long getKey();
    WSCbool isPressed();
    WSCbool withShift();
    WSCbool withLock();
    WSCbool withCntl();
    WSCbool withAlt();
    WSCbool isCursorKey();
    WSCbool isFuncKey();
    WSCbool isTtyFunction();
    WSCbool getFepStatus();
    WSCbool executeHandler(WSCbool press);
    WSCbool getEnableFep();

    void setWithShift(WSCbool fl);
    void setWithLock(WSCbool fl);
    void setWithCntl(WSCbool fl);
    void setWithAlt(WSCbool fl);
    void setIsCursorKey(WSCbool fl);
    void setIsFuncKey(WSCbool fl);
    void setIsTtyFunction(WSCbool fl);
    void setIsPressed(WSCbool fl);

    virtual long startFep(WSDdev*,short x,short y,short fontno,short fgno,short bgno);
    virtual long startAscii(WSDdev*,short x,short y,short fontno,short fgno,short bgno);
    virtual long setFepPos(WSDdev*,short x,short y,short fontno,short fgno,short bgno);
    virtual long resetFep(WSDdev*);
    virtual long setFepStatus(long val);

    WSCstring* getTextString();
    char* getText(long encode = -2);
    void setText(char*,long encode = -2);
    static void setCreateInstanceHandler( WSDkeyboard* (*hd)() );
    WSCbase* getFocusInstance();


    void setFocusInputWorkProc( void (*)(void*,WSDkeyboard*, WSCbool), void (*)(void*),void* ,WSCbase* focus_instance);

    void resetFocusInputWorkProc();
    WSCbase* getSpecialFocusInstance();

    void setSpecialInputWorkProc( WSCbool (*)(void* ptr, WSDkeyboard*,WSCbool ), void* ptr,WSCbase* focus_instance);

    void resetSpecialInputWorkProc();
    void setGlobalKeyHook( WSCbool (*)(long,WSCbool) );
    virtual void setSelectedString(char*,long encode = -2);
    virtual char* getSelectedString(long encode = -2);

    void setGlobalKeySensitive(WSCbool fl);
    WSCbool getGlobalKeySensitive();

    void setKeepFocus(WSCbool fl);
    WSCbool getKeepFocus();

    public: char* getThisClassName(); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null);
};
extern __attribute__((dllexport)) WSDkeyboard* WSGIappKeyboard();
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSCsform.h" 2



class WSCsform :public WSCform{

  private:
  protected:
    char* _pos;
    WSClistData _pos_list;
    WSCushort _bw;
    WSCushort _hit_bar;
    char* _separator;
    WSCuchar _minimum;
    unsigned _margin_top:4;
    unsigned _margin_bottom:4;
    unsigned _margin_left:4;
    unsigned _margin_right:4;
    unsigned _orientation:1;
    unsigned _pressed:1;
    unsigned _adjust_init:1;
    unsigned _exec_resize:1;
    unsigned _adjust_btn:1;
    unsigned _delay_adjust_flag:1;
    unsigned _need_adjust:1;
    unsigned _refreshing:1;

    static void _set_p_w_bw(void* ptr,void* data); static void _get_def_w_bw(void* ptr); static void _get_p_w_bw(void* ptr,void* data); virtual void setWorkWSNbarThickness (WSCushort); virtual void getWorkWSNbarThickness (WSCushort*);
    static void _set_p_w_pos(void* ptr,void* data); static void _get_def_w_pos(void* ptr); static void _get_p_w_pos(void* ptr,void* data); virtual void setWorkWSNbarValue (char*); virtual void getWorkWSNbarValue (char**);
    static void _set_p_w_orientation(void* ptr,void* data); static void _get_def_w_orientation(void* ptr); static void _get_p_w_orientation(void* ptr,void* data); virtual void setWorkWSNorientation (WSCuchar); virtual void getWorkWSNorientation (WSCuchar*);
    static void _set_p_w_margin_top(void* ptr,void* data); static void _get_def_w_margin_top(void* ptr); static void _get_p_w_margin_top(void* ptr,void* data); virtual void setWorkWSNmarginTop (WSCuchar); virtual void getWorkWSNmarginTop (WSCuchar*);
    static void _set_p_w_margin_bottom(void* ptr,void* data); static void _get_def_w_margin_bottom(void* ptr); static void _get_p_w_margin_bottom(void* ptr,void* data); virtual void setWorkWSNmarginBottom (WSCuchar); virtual void getWorkWSNmarginBottom (WSCuchar*);
    static void _set_p_w_margin_left(void* ptr,void* data); static void _get_def_w_margin_left(void* ptr); static void _get_p_w_margin_left(void* ptr,void* data); virtual void setWorkWSNmarginLeft (WSCuchar); virtual void getWorkWSNmarginLeft (WSCuchar*);
    static void _set_p_w_margin_right(void* ptr,void* data); static void _get_def_w_margin_right(void* ptr); static void _get_p_w_margin_right(void* ptr,void* data); virtual void setWorkWSNmarginRight (WSCuchar); virtual void getWorkWSNmarginRight (WSCuchar*);
    static void _set_p_w_refreshing(void* ptr,void* data); static void _get_def_w_refreshing(void* ptr); static void _get_p_w_refreshing(void* ptr,void* data); virtual void setWorkWSNrefreshing (WSCbool); virtual void getWorkWSNrefreshing (WSCbool*);
    static void _set_p_w_minimum(void* ptr,void* data); static void _get_def_w_minimum(void* ptr); static void _get_p_w_minimum(void* ptr,void* data); virtual void setWorkWSNminimum (WSCuchar); virtual void getWorkWSNminimum (WSCuchar*);
    static void _set_p_w_separator(void* ptr,void* data); static void _get_def_w_separator(void* ptr); static void _get_p_w_separator(void* ptr,void* data); virtual void setWorkWSNseparator (char*); virtual void getWorkWSNseparator (char**);

    virtual long _device_initialize();
    virtual void setWorkWSNwidth(WSCushort);
    virtual void setWorkWSNheight(WSCushort);

    void _adjust();
    void _adjust_pos();
 static void _delay_adjust_work(void*);
 static void _move_adjust_work(void*);
    void _parse_pos(char*);
    void _clear_area();
    virtual void _exec_child_adjust_for_anchors();
    static WSCbool _special_key_handler(void*,WSDkeyboard*,WSCbool);

  public:
    WSCsform(WSCbase*,char*);
    virtual ~WSCsform();

    virtual void onResize(WSCrect*);
    virtual void onMousePress(WSCpoint*);
    virtual void onMouseMove(WSCpoint*);
    virtual void onMouseRelease(WSCpoint*);
    virtual void onVisibleChange(WSCbool fl);
    virtual void onParentVisibleChange(WSCbool fl);
    virtual void onValueChange();

    virtual long draw();
    virtual void update();
    long getStatus();
    void setAdjustChildren(WSCbool);
    long setManaged(WSCbase*,WSCbool);
    WSCbool getManaged(WSCbase*);

    virtual WSCbool adjustAnchor();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCsform_info_ptr; virtual WSCclassInformation* getClassInformation();
    virtual char* getUseDevName();
    long getVer(long val = 1010); long checkVersion(long);
};
# 28 "C:/PROGRA~1/WIDEST~1/ws/include/WSClist.h" 2


class WSDkeyboard;

class WSClist :public WSCscrForm{

  protected:
     WSCsform* _btn_area;
     char* _bar_pos;
     char* _title_string;
     char* _data;
     char* _data_source_name;
     WSCbase* _default_input_instance;
     WSCbase* _input_instance;
     WSClistData _input_instances;
     char* _separator;
     WSClistData _lb_list;
     WSCstring _lb_class;
     WSCulong _wy_pos_bak;
     short _select_color;
     short _select_fore_color;
     short _icon_pixmap;
     short _icon_pixmap_old;

     char* _upname;
     char* _dwname;
     char* _lname;
     char* _rname;
     char* _rtname;
     char* _tbname;
     char* _btbname;

     WSCushort _w_bk;

     WSCushort _lb_width;
     WSCushort _work_height_bk;
     short _pre_select;
     WSCuchar _lb_height;
     WSCuchar _lb_height_bk;
     char _sort_pos;
     unsigned _font:4;
     unsigned _disp_type:2;
     unsigned _data_source_type:2;
     unsigned _mselect:1;
     unsigned _select_item_changed:1;
     unsigned _activate:1;
     unsigned _reverse_select:1;
     unsigned _absolute_select_change:1;
     unsigned _use_icon:1;
     unsigned _need_update:1;
     unsigned _enable_input:1;
     unsigned _need_ds_update:1;
     unsigned _need_scr_redraw:1;
     unsigned _need_update_btn_area:1;
     unsigned _enable_focus_move:1;
     unsigned _return_key_focus:1;


     static void _set_p_w_lb_height(void* ptr,void* data); static void _get_def_w_lb_height(void* ptr); static void _get_p_w_lb_height(void* ptr,void* data); virtual void setWorkWSNitemHeight (WSCuchar); virtual void getWorkWSNitemHeight (WSCuchar*);
     static void _set_p_w_font(void* ptr,void* data); static void _get_def_w_font(void* ptr); static void _get_p_w_font(void* ptr,void* data); virtual void setWorkWSNfont (WSCuchar); virtual void getWorkWSNfont (WSCuchar*);
     static void _set_p_w_select_color(void* ptr,void* data); static void _get_def_w_select_color(void* ptr); static void _get_p_w_select_color(void* ptr,void* data); virtual void setWorkWSNselectColor (short); virtual void getWorkWSNselectColor (short*);
     static void _set_p_w_select_fore_color(void* ptr,void* data); static void _get_def_w_select_fore_color(void* ptr); static void _get_p_w_select_fore_color(void* ptr,void* data); virtual void setWorkWSNselectForeColor (short); virtual void getWorkWSNselectForeColor (short*);
     static void _set_p_w_disp_type(void* ptr,void* data); static void _get_def_w_disp_type(void* ptr); static void _get_p_w_disp_type(void* ptr,void* data); virtual void setWorkWSNtype (WSCuchar); virtual void getWorkWSNtype (WSCuchar*);
     static void _set_p_w_mselect(void* ptr,void* data); static void _get_def_w_mselect(void* ptr); static void _get_p_w_mselect(void* ptr,void* data); virtual void setWorkWSNmultiSelect (WSCbool); virtual void getWorkWSNmultiSelect (WSCbool*);
     static void _set_p_w_reverse_select(void* ptr,void* data); static void _get_def_w_reverse_select(void* ptr); static void _get_p_w_reverse_select(void* ptr,void* data); virtual void setWorkWSNreverseSelect (WSCbool); virtual void getWorkWSNreverseSelect (WSCbool*);
     static void _set_p_w_padding(void* ptr,void* data); static void _get_def_w_padding(void* ptr); static void _get_p_w_padding(void* ptr,void* data); virtual void setWorkWSNtitleHeight (WSCuchar); virtual void getWorkWSNtitleHeight (WSCuchar*);
     static void _set_p_w_title_string(void* ptr,void* data); static void _get_def_w_title_string(void* ptr); static void _get_p_w_title_string(void* ptr,void* data); virtual void setWorkWSNtitleString (char*); virtual void getWorkWSNtitleString (char**);
     static void _set_p_w_bar_pos(void* ptr,void* data); static void _get_def_w_bar_pos(void* ptr); static void _get_p_w_bar_pos(void* ptr,void* data); virtual void setWorkWSNbarValue (char*); virtual void getWorkWSNbarValue (char**);
     static void _set_p_w_use_icon(void* ptr,void* data); static void _get_def_w_use_icon(void* ptr); static void _get_p_w_use_icon(void* ptr,void* data); virtual void setWorkWSNuseIcon (WSCbool); virtual void getWorkWSNuseIcon (WSCbool*);
     static void _set_p_w_icon_pixmap(void* ptr,void* data); static void _get_def_w_icon_pixmap(void* ptr); static void _get_p_w_icon_pixmap(void* ptr,void* data); virtual void setWorkWSNiconPixmap (short); virtual void getWorkWSNiconPixmap (short*);
     static void _set_p_w_data(void* ptr,void* data); static void _get_def_w_data(void* ptr); static void _get_p_w_data(void* ptr,void* data); virtual void setWorkWSNdata (char*); virtual void getWorkWSNdata (char**);
     static void _set_p_w_data_source_type(void* ptr,void* data); static void _get_def_w_data_source_type(void* ptr); static void _get_p_w_data_source_type(void* ptr,void* data); virtual void setWorkWSNdataSource (WSCuchar); virtual void getWorkWSNdataSource (WSCuchar*);
     static void _set_p_w_data_source_name(void* ptr,void* data); static void _get_def_w_data_source_name(void* ptr); static void _get_p_w_data_source_name(void* ptr,void* data); virtual void setWorkWSNdataSourceName (char*); virtual void getWorkWSNdataSourceName (char**);
     static void _set_p_w_enable_input(void* ptr,void* data); static void _get_def_w_enable_input(void* ptr); static void _get_p_w_enable_input(void* ptr,void* data); virtual void setWorkWSNenableInput (WSCbool); virtual void getWorkWSNenableInput (WSCbool*);
     static void _set_p_w_separator(void* ptr,void* data); static void _get_def_w_separator(void* ptr); static void _get_p_w_separator(void* ptr,void* data); virtual void setWorkWSNseparator (char*); virtual void getWorkWSNseparator (char**);

    static void _set_p_w_enable_focus_move(void* ptr,void* data); static void _get_def_w_enable_focus_move(void* ptr); static void _get_p_w_enable_focus_move(void* ptr,void* data); virtual void setWorkWSNenableFocusMove (WSCbool); virtual void getWorkWSNenableFocusMove (WSCbool*);
    static void _set_p_w_upname(void* ptr,void* data); static void _get_def_w_upname(void* ptr); static void _get_p_w_upname(void* ptr,void* data); virtual void setWorkWSNupward (char*); virtual void getWorkWSNupward (char**);
    static void _set_p_w_dwname(void* ptr,void* data); static void _get_def_w_dwname(void* ptr); static void _get_p_w_dwname(void* ptr,void* data); virtual void setWorkWSNdownward (char*); virtual void getWorkWSNdownward (char**);
    static void _set_p_w_lname(void* ptr,void* data); static void _get_def_w_lname(void* ptr); static void _get_p_w_lname(void* ptr,void* data); virtual void setWorkWSNleftward (char*); virtual void getWorkWSNleftward (char**);
    static void _set_p_w_rname(void* ptr,void* data); static void _get_def_w_rname(void* ptr); static void _get_p_w_rname(void* ptr,void* data); virtual void setWorkWSNrightward (char*); virtual void getWorkWSNrightward (char**);
    static void _set_p_w_rtname(void* ptr,void* data); static void _get_def_w_rtname(void* ptr); static void _get_p_w_rtname(void* ptr,void* data); virtual void setWorkWSNreturn (char*); virtual void getWorkWSNreturn (char**);
    static void _set_p_w_tbname(void* ptr,void* data); static void _get_def_w_tbname(void* ptr); static void _get_p_w_tbname(void* ptr,void* data); virtual void setWorkWSNtab (char*); virtual void getWorkWSNtab (char**);
    static void _set_p_w_btbname(void* ptr,void* data); static void _get_def_w_btbname(void* ptr); static void _get_p_w_btbname(void* ptr,void* data); virtual void setWorkWSNbacktab (char*); virtual void getWorkWSNbacktab (char**);
    static void _set_p_w_return_key_focus(void* ptr,void* data); static void _get_def_w_return_key_focus(void* ptr); static void _get_p_w_return_key_focus(void* ptr,void* data); virtual void setWorkWSNreturnKeyFocus (WSCbool); virtual void getWorkWSNreturnKeyFocus (WSCbool*);

    virtual void setWorkWSNwidth(WSCushort);
    virtual void setWorkWSNheight(WSCushort);
    virtual void setWorkWSNworkWidth(WSCushort);
    virtual void setWorkWSNworkHeight(WSCushort);
    virtual void setWorkWSNbackColor(short);
    virtual void setWorkWSNforeColor(short);
    virtual void setWorkWSNtopShadowColor(short);
    virtual void setWorkWSNbottomShadowColor(short);
    virtual void setWorkWSNworkBackColor(short);

    virtual void _adjust();
    static void _btn_area_valuech(WSCbase*);
    static void _btn_activate(WSCbase*);
    void _set_data(char*);
    void _clear_ds_instance();
    void _set_ds_instance();
    virtual void _adjust_input(WSCbase* target,long pos,
                               WSCbool vis,short x,short y);




    void _lb_adjust_work(long&,long,WSCbool,long&);
    virtual void _lb_adjust();
    void _update_lb_height();
    void _data_from_file(char*);
    static void _input_focus_lose(WSCbase*);
    static void _text_input_focus_lose(WSCbase*);
    static void _input_fix_work(WSCbase*);
    virtual void _adjust_no_scroll();
    WSCstring _get_data();
    WSCbase* _get_input_instance(long pos,long column = -1);
  public:
    WSClist(WSCbase*,char*);
    virtual ~WSClist();

    virtual long draw();
    virtual void update();


    virtual void setData(WSCvariant*,long code = -2);
    virtual void setData(const WSCvariant&,long code = -2);

    virtual long getDataSourceType();
    virtual char* getDataSourcePropertyName();


    virtual void onSort();
    virtual void onItemSelected();
    virtual void onItemPreSelected();
    virtual void onItemDoubleClicked();
    virtual void onInputFixed(WSCstring str,long pos,long column);
    virtual void onInputStarted(WSCstring str,long pos,long column);
    virtual void onKey(WSDkeyboard*,WSCbool);
    virtual void onValueChange();
    virtual char* getDefaultProperty();
    virtual void onScrMousePress(WSCpoint*);
    virtual void onScrMouseRelease(WSCpoint*);
    virtual void onFocusChange(WSCbool);
    void _focus_move(long direct);


    void setLabelHeight(WSCushort h);
    void delAll();
    WSCbase* getLabel(long pos);
    long getNum();
    WSCstring getItem(long pos,long col = -1);
    void addItem(char* item,long pos = -1);
    void replaceItem(char* item,long pos);
    void replaceItem(char* item,long pos,long column);
    void delPos(long pos);
    long getPreSelectedPos();
    long setPreSelectPos(long);
    long getSelectedPos();
    long setSelectPos(long ,WSCbool create_event = (WSCbool)1);
    WSCstring getSelectedItem();
    void setTopPos(long);
    void setBottomPos(long);
    long getTopPos();
    long getBottomPos();

    void updateList();
    void setLabelProperty(char*,char*);
    void setLabelClass(char*);
    WSCbool getSelectItemChanged();
    void setSelectItemChanged(WSCbool);
    WSClistData* getLabels();
    void getSelectedLabels(WSClistData&);
    void setEnableActivate(WSCbool);
    WSCbool getEnableActivate();
    void setAbsoluteChangeSelectFlag(WSCbool);
    WSCbool getAbsoluteChangeSelectFlag();

    long setItemVisible(long pos,WSCbool fl);
    long setItemValue(long pos,long kind,long val);
    long getItemValue(long pos,long kind,long* val);
    long getSortPos();
    char getSortOrder(long col_no);
    void setSortPos(long col_no);
    void sort(long col_no,char order = 3);
    WSCstring getInputString();
    void setInputString(WSCstring str);
    long getInputPos(long* pos,long* col);
    long setInputStatus(long status,long pos,long col=-1);
    long setInputType(char* cname,char* prop,WSCvariant data,long pos,long col=-1);

    void cancelInput();
    char* getSeparator();
    long getSelectedNextPos(long pos);
    WSCstring getSelectedNextItem(long pos);
    WSCbool getSelected(long pos);
    WSCbool setSelected(long pos,WSCbool,WSCbool create_event = (WSCbool)1);
    virtual WSCbool canFocus();
    void resetUpdateFlag();

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSClist_info_ptr; virtual WSCclassInformation* getClassInformation();
};
# 25 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvradio.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvradio.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvtoggle.h" 1
# 29 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvtoggle.h"
class WSDkeyboard;
class WSClistData;

class WSCvtoggle :public WSCvlabel{

  private:
  protected:
    char* _select_string;
    char* _group_name;
    char* _td_name;
    char* _bd_name;
    char* _ld_name;
    char* _rd_name;
    char* _tb_name;
    char* _btb_name;
    char* _sc_str;
    short _indicator_color;
    short _select_color;
    short _indicator_pixmap;
    short _select_pixmap;
    short _id;
    unsigned _indicator_size:6;
    unsigned _indicator_type:2;
    unsigned _indicator_shadow_thick:4;
    unsigned _indicator_on:1;
    unsigned _enable_focus_move:1;
    unsigned _unique:1;
    unsigned _select_reset:1;
    unsigned _press_status:1;
    unsigned _toggle_status:1;
    unsigned _return_key_focus:1;
    unsigned _alt_focus_registered:1;

    static void _set_p_w_select_string(void* ptr,void* data); static void _get_def_w_select_string(void* ptr); static void _get_p_w_select_string(void* ptr,void* data); virtual void setWorkWSNselectString (char*); virtual void getWorkWSNselectString (char**);
    static void _set_p_w_indicator_on(void* ptr,void* data); static void _get_def_w_indicator_on(void* ptr); static void _get_p_w_indicator_on(void* ptr,void* data); virtual void setWorkWSNindicatorOn (WSCbool); virtual void getWorkWSNindicatorOn (WSCbool*);
    static void _set_p_w_indicator_type(void* ptr,void* data); static void _get_def_w_indicator_type(void* ptr); static void _get_p_w_indicator_type(void* ptr,void* data); virtual void setWorkWSNindicatorType (WSCuchar); virtual void getWorkWSNindicatorType (WSCuchar*);
    static void _set_p_w_indicator_size(void* ptr,void* data); static void _get_def_w_indicator_size(void* ptr); static void _get_p_w_indicator_size(void* ptr,void* data); virtual void setWorkWSNindicatorSize (WSCuchar); virtual void getWorkWSNindicatorSize (WSCuchar*);
    static void _set_p_w_indicator_shadow_thick(void* ptr,void* data); static void _get_def_w_indicator_shadow_thick(void* ptr); static void _get_p_w_indicator_shadow_thick(void* ptr,void* data); virtual void setWorkWSNindicatorShadow (WSCuchar); virtual void getWorkWSNindicatorShadow (WSCuchar*);
    static void _set_p_w_indicator_color(void* ptr,void* data); static void _get_def_w_indicator_color(void* ptr); static void _get_p_w_indicator_color(void* ptr,void* data); virtual void setWorkWSNindicatorColor (short); virtual void getWorkWSNindicatorColor (short*);
    static void _set_p_w_indicator_pixmap(void* ptr,void* data); static void _get_def_w_indicator_pixmap(void* ptr); static void _get_p_w_indicator_pixmap(void* ptr,void* data); virtual void setWorkWSNindicatorPixmap (short); virtual void getWorkWSNindicatorPixmap (short*);
    static void _set_p_w_select_color(void* ptr,void* data); static void _get_def_w_select_color(void* ptr); static void _get_p_w_select_color(void* ptr,void* data); virtual void setWorkWSNselectColor (short); virtual void getWorkWSNselectColor (short*);
    static void _set_p_w_select_pixmap(void* ptr,void* data); static void _get_def_w_select_pixmap(void* ptr); static void _get_p_w_select_pixmap(void* ptr,void* data); virtual void setWorkWSNselectPixmap (short); virtual void getWorkWSNselectPixmap (short*);
    static void _set_p_w_unique(void* ptr,void* data); static void _get_def_w_unique(void* ptr); static void _get_p_w_unique(void* ptr,void* data); virtual void setWorkWSNunique (WSCbool); virtual void getWorkWSNunique (WSCbool*);
    static void _set_p_w_group_name(void* ptr,void* data); static void _get_def_w_group_name(void* ptr); static void _get_p_w_group_name(void* ptr,void* data); virtual void setWorkWSNgroup (char*); virtual void getWorkWSNgroup (char**);
    static void _set_p_w_id(void* ptr,void* data); static void _get_def_w_id(void* ptr); static void _get_p_w_id(void* ptr,void* data); virtual void setWorkWSNid (short); virtual void getWorkWSNid (short*);
    static void _set_p_w_select_reset(void* ptr,void* data); static void _get_def_w_select_reset(void* ptr); static void _get_p_w_select_reset(void* ptr,void* data); virtual void setWorkWSNselectReset (WSCbool); virtual void getWorkWSNselectReset (WSCbool*);
    static void _set_p_w_enable_focus_move(void* ptr,void* data); static void _get_def_w_enable_focus_move(void* ptr); static void _get_p_w_enable_focus_move(void* ptr,void* data); virtual void setWorkWSNenableFocusMove (WSCbool); virtual void getWorkWSNenableFocusMove (WSCbool*);
    static void _set_p_w_td_name(void* ptr,void* data); static void _get_def_w_td_name(void* ptr); static void _get_p_w_td_name(void* ptr,void* data); virtual void setWorkWSNupward (char*); virtual void getWorkWSNupward (char**);
    static void _set_p_w_bd_name(void* ptr,void* data); static void _get_def_w_bd_name(void* ptr); static void _get_p_w_bd_name(void* ptr,void* data); virtual void setWorkWSNdownward (char*); virtual void getWorkWSNdownward (char**);
    static void _set_p_w_ld_name(void* ptr,void* data); static void _get_def_w_ld_name(void* ptr); static void _get_p_w_ld_name(void* ptr,void* data); virtual void setWorkWSNleftward (char*); virtual void getWorkWSNleftward (char**);
    static void _set_p_w_rd_name(void* ptr,void* data); static void _get_def_w_rd_name(void* ptr); static void _get_p_w_rd_name(void* ptr,void* data); virtual void setWorkWSNrightward (char*); virtual void getWorkWSNrightward (char**);
    static void _set_p_w_tb_name(void* ptr,void* data); static void _get_def_w_tb_name(void* ptr); static void _get_p_w_tb_name(void* ptr,void* data); virtual void setWorkWSNtab (char*); virtual void getWorkWSNtab (char**);
    static void _set_p_w_btb_name(void* ptr,void* data); static void _get_def_w_btb_name(void* ptr); static void _get_p_w_btb_name(void* ptr,void* data); virtual void setWorkWSNbacktab (char*); virtual void getWorkWSNbacktab (char**);
    static void _set_p_w_toggle_status(void* ptr,void* data); static void _get_def_w_toggle_status(void* ptr); static void _get_p_w_toggle_status(void* ptr,void* data); virtual void setWorkWSNstatus (WSCbool); virtual void getWorkWSNstatus (WSCbool*);
    static void _set_p_w_return_key_focus(void* ptr,void* data); static void _get_def_w_return_key_focus(void* ptr); static void _get_p_w_return_key_focus(void* ptr,void* data); virtual void setWorkWSNreturnKeyFocus (WSCbool); virtual void getWorkWSNreturnKeyFocus (WSCbool*);
    static void _set_p_w_sc_str(void* ptr,void* data); static void _get_def_w_sc_str(void* ptr); static void _get_p_w_sc_str(void* ptr,void* data); virtual void setWorkWSNshortcut (char*); virtual void getWorkWSNshortcut (char**);

    virtual long _device_initialize();

    static WSClistData* _tgl_list;
    static WSClistData* _get_toggle_list();
    static void _key_handler(void*,WSDkeyboard*,WSCbool);

 static void (*_ext_draw_proc)(void*);
 static char* _policy_name;
    long _set_status(WSCbool state,WSCbool create_event = (WSCbool)1);

    void _extra_focus_move(long direct);
  public:
    WSCvtoggle(WSCbase*,char*);
    virtual ~WSCvtoggle();

    virtual void onMousePress(WSCpoint*);
    virtual void onMouseRelease(WSCpoint*);
    virtual void onMouseOut();
    virtual void onValueChange(WSCbool);
    virtual void onSensitiveChange(WSCbool);
    virtual void onKey(WSDkeyboard*,WSCbool);
    virtual void onFocusChange(WSCbool);
    virtual void onGuiPolicyChange(long);

    virtual long addProcedure(WSCprocedure*);
    virtual long draw();
    long setStatus(WSCbool state,WSCbool create_event = (WSCbool)1);
    WSCbool getStatus();
    long getGroupValue();
    long setGroupValue(long);
    long clearGroupValue();
    virtual long execEventProc(long,void*);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCvtoggle_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};

struct WSCvtoggle_draw_struct{
  WSCvtoggle* _this;
  WSDdev* dev;
  short x;
  short y;
  WSCushort width;
  WSCushort height;
  WSCushort shadow_thickness;
  long blinking;
  long blink_fore;
  long shadow_type;
  long blink_type;
  long twin_blink;
  short fore_color;
  short back_color;
  short blink_color;
  short select_color;
  short back_blink_color;
  short top_shadow_color;
  short bottom_shadow_color;
  char* label_string;
  char* select_string;
  char* shortcut_string;
  short label_pixmap;
  short blink_pixmap;
  short select_pixmap;
  short press_status;
  long orientation;

  long gradation;
  long gradation_margin;

  long margin_left;
  long margin_right;
  long margin_top;
  long margin_bottom;
  WSCbool emboss;
  WSCuchar font;
  WSCbool reverse_flag;
  WSCbool enable_focus_move;
  WSCbool toggle_status;
  WSCbool unique;
  WSCbool select_reset;
  WSCuchar indicator_size;
  WSCuchar indicator_type;
  WSCuchar indicator_shadow_thickness;
  WSCbool indicator_on;
  short indicator_pixmap;
  short indicator_color;
};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCvradio.h" 2


class WSCvradio :public WSCvtoggle{
  protected:
static void (*_ext_draw_proc)(void*);
static char* _policy_name;

  public:
    WSCvradio(WSCbase*,char*);
    virtual long draw();
    virtual void onGuiPolicyChange(long);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCvradio_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};
# 26 "General.h" 2
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCcheckGroup.h" 1
# 26 "C:/PROGRA~1/WIDEST~1/ws/include/WSCcheckGroup.h"
# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCradioGroup.h" 1
# 31 "C:/PROGRA~1/WIDEST~1/ws/include/WSCradioGroup.h"
class WSCradioGroup :public WSCform{

  protected:
    WSClistData _radio_list;
    char* _title_string;
    char* _menu_str;
    WSCulong _value;
    WSCushort _item_height;
    short _indicator_color;
    short _select_color;
    short _indicator_pixmap;
    short _select_pixmap;
    short _label_pixmap;

     char* _upname;
     char* _dwname;
     char* _lname;
     char* _rname;
     char* _rtname;
     char* _tbname;
     char* _btbname;
     char* _sc_str;

    unsigned _font:4;
    unsigned _margin:3;
    unsigned _unique:1;
    unsigned _indicator_size:6;
    unsigned _indicator_type:2;
    unsigned _indicator_shadow_thick:4;
    unsigned _indicator_on:1;
    unsigned _orientation:1;
    unsigned _enable_focus_move:1;
    unsigned _return_key_focus:1;

    static void _set_p_w_value(void* ptr,void* data); static void _get_def_w_value(void* ptr); static void _get_p_w_value(void* ptr,void* data); virtual void setWorkWSNvalue (WSCulong); virtual void getWorkWSNvalue (WSCulong*);
    static void _set_p_w_title_string(void* ptr,void* data); static void _get_def_w_title_string(void* ptr); static void _get_p_w_title_string(void* ptr,void* data); virtual void setWorkWSNtitleString (char*); virtual void getWorkWSNtitleString (char**);
    static void _set_p_w_menu_str(void* ptr,void* data); static void _get_def_w_menu_str(void* ptr); static void _get_p_w_menu_str(void* ptr,void* data); virtual void setWorkWSNmenuItems (char*); virtual void getWorkWSNmenuItems (char**);
    static void _set_p_w_item_height(void* ptr,void* data); static void _get_def_w_item_height(void* ptr); static void _get_p_w_item_height(void* ptr,void* data); virtual void setWorkWSNmenuItemHeight (WSCushort); virtual void getWorkWSNmenuItemHeight (WSCushort*);
    static void _set_p_w_font(void* ptr,void* data); static void _get_def_w_font(void* ptr); static void _get_p_w_font(void* ptr,void* data); virtual void setWorkWSNfont (WSCuchar); virtual void getWorkWSNfont (WSCuchar*);
    static void _set_p_w_margin(void* ptr,void* data); static void _get_def_w_margin(void* ptr); static void _get_p_w_margin(void* ptr,void* data); virtual void setWorkWSNmargin (WSCuchar); virtual void getWorkWSNmargin (WSCuchar*);
    static void _set_p_w_indicator_on(void* ptr,void* data); static void _get_def_w_indicator_on(void* ptr); static void _get_p_w_indicator_on(void* ptr,void* data); virtual void setWorkWSNindicatorOn (WSCbool); virtual void getWorkWSNindicatorOn (WSCbool*);
    static void _set_p_w_indicator_type(void* ptr,void* data); static void _get_def_w_indicator_type(void* ptr); static void _get_p_w_indicator_type(void* ptr,void* data); virtual void setWorkWSNindicatorType (WSCuchar); virtual void getWorkWSNindicatorType (WSCuchar*);
    static void _set_p_w_indicator_size(void* ptr,void* data); static void _get_def_w_indicator_size(void* ptr); static void _get_p_w_indicator_size(void* ptr,void* data); virtual void setWorkWSNindicatorSize (WSCuchar); virtual void getWorkWSNindicatorSize (WSCuchar*);
    static void _set_p_w_indicator_shadow_thick(void* ptr,void* data); static void _get_def_w_indicator_shadow_thick(void* ptr); static void _get_p_w_indicator_shadow_thick(void* ptr,void* data); virtual void setWorkWSNindicatorShadow (WSCuchar); virtual void getWorkWSNindicatorShadow (WSCuchar*);
    static void _set_p_w_indicator_color(void* ptr,void* data); static void _get_def_w_indicator_color(void* ptr); static void _get_p_w_indicator_color(void* ptr,void* data); virtual void setWorkWSNindicatorColor (short); virtual void getWorkWSNindicatorColor (short*);
    static void _set_p_w_indicator_pixmap(void* ptr,void* data); static void _get_def_w_indicator_pixmap(void* ptr); static void _get_p_w_indicator_pixmap(void* ptr,void* data); virtual void setWorkWSNindicatorPixmap (short); virtual void getWorkWSNindicatorPixmap (short*);
    static void _set_p_w_select_color(void* ptr,void* data); static void _get_def_w_select_color(void* ptr); static void _get_p_w_select_color(void* ptr,void* data); virtual void setWorkWSNselectColor (short); virtual void getWorkWSNselectColor (short*);
    static void _set_p_w_select_pixmap(void* ptr,void* data); static void _get_def_w_select_pixmap(void* ptr); static void _get_p_w_select_pixmap(void* ptr,void* data); virtual void setWorkWSNselectPixmap (short); virtual void getWorkWSNselectPixmap (short*);
    static void _set_p_w_label_pixmap(void* ptr,void* data); static void _get_def_w_label_pixmap(void* ptr); static void _get_p_w_label_pixmap(void* ptr,void* data); virtual void setWorkWSNlabelPixmap (short); virtual void getWorkWSNlabelPixmap (short*);
    static void _set_p_w_orientation(void* ptr,void* data); static void _get_def_w_orientation(void* ptr); static void _get_p_w_orientation(void* ptr,void* data); virtual void setWorkWSNorientation (WSCuchar); virtual void getWorkWSNorientation (WSCuchar*);
    static void _set_p_w_keep_pixmap_cache(void* ptr,void* data); static void _get_def_w_keep_pixmap_cache(void* ptr); static void _get_p_w_keep_pixmap_cache(void* ptr,void* data); virtual void setWorkWSNkeepPixmapCache (WSCbool); virtual void getWorkWSNkeepPixmapCache (WSCbool*);

    static void _set_p_w_enable_focus_move(void* ptr,void* data); static void _get_def_w_enable_focus_move(void* ptr); static void _get_p_w_enable_focus_move(void* ptr,void* data); virtual void setWorkWSNenableFocusMove (WSCbool); virtual void getWorkWSNenableFocusMove (WSCbool*);
    static void _set_p_w_upname(void* ptr,void* data); static void _get_def_w_upname(void* ptr); static void _get_p_w_upname(void* ptr,void* data); virtual void setWorkWSNupward (char*); virtual void getWorkWSNupward (char**);
    static void _set_p_w_dwname(void* ptr,void* data); static void _get_def_w_dwname(void* ptr); static void _get_p_w_dwname(void* ptr,void* data); virtual void setWorkWSNdownward (char*); virtual void getWorkWSNdownward (char**);
    static void _set_p_w_lname(void* ptr,void* data); static void _get_def_w_lname(void* ptr); static void _get_p_w_lname(void* ptr,void* data); virtual void setWorkWSNleftward (char*); virtual void getWorkWSNleftward (char**);
    static void _set_p_w_rname(void* ptr,void* data); static void _get_def_w_rname(void* ptr); static void _get_p_w_rname(void* ptr,void* data); virtual void setWorkWSNrightward (char*); virtual void getWorkWSNrightward (char**);
    static void _set_p_w_rtname(void* ptr,void* data); static void _get_def_w_rtname(void* ptr); static void _get_p_w_rtname(void* ptr,void* data); virtual void setWorkWSNreturn (char*); virtual void getWorkWSNreturn (char**);
    static void _set_p_w_tbname(void* ptr,void* data); static void _get_def_w_tbname(void* ptr); static void _get_p_w_tbname(void* ptr,void* data); virtual void setWorkWSNtab (char*); virtual void getWorkWSNtab (char**);
    static void _set_p_w_btbname(void* ptr,void* data); static void _get_def_w_btbname(void* ptr); static void _get_p_w_btbname(void* ptr,void* data); virtual void setWorkWSNbacktab (char*); virtual void getWorkWSNbacktab (char**);
    static void _set_p_w_return_key_focus(void* ptr,void* data); static void _get_def_w_return_key_focus(void* ptr); static void _get_p_w_return_key_focus(void* ptr,void* data); virtual void setWorkWSNreturnKeyFocus (WSCbool); virtual void getWorkWSNreturnKeyFocus (WSCbool*);
    static void _set_p_w_sc_str(void* ptr,void* data); static void _get_def_w_sc_str(void* ptr); static void _get_p_w_sc_str(void* ptr,void* data); virtual void setWorkWSNshortcut (char*); virtual void getWorkWSNshortcut (char**);


    virtual void setWorkWSNbackColor(short);
    virtual void _adjust();
    static void _value_ch_handler(WSCbase*);

  public:
    WSCradioGroup(WSCbase*,char*);
    virtual ~WSCradioGroup();

    virtual void update();
    virtual long draw();

    virtual void onValueChange();
    virtual void onVisibleChange(WSCbool);
    virtual char* getDefaultProperty();
    virtual void onFocusChange(WSCbool);

    long setItemSensitive(short no, WSCbool flag);
    WSCbool getItemSensitive(short no);
    WSCvradio* getItem(short no);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCradioGroup_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1001); long checkVersion(long);
};
# 27 "C:/PROGRA~1/WIDEST~1/ws/include/WSCcheckGroup.h" 2



class WSCcheckGroup :public WSCradioGroup{

  protected:

  public:
    WSCcheckGroup(WSCbase*,char*);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCcheckGroup_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1001); long checkVersion(long);
};
# 27 "General.h" 2

# 1 "C:/PROGRA~1/WIDEST~1/ws/include/WSCdialog.h" 1
# 29 "C:/PROGRA~1/WIDEST~1/ws/include/WSCdialog.h"
class WSCindexForm;

class WSCdialog :public WSCbaseDialog{

  protected:
    WSCform* _area1;
    short _wbg_no;

    static void _set_p_w_wbg_no(void* ptr,void* data); static void _get_def_w_wbg_no(void* ptr); static void _get_p_w_wbg_no(void* ptr,void* data); virtual void setWorkWSNworkBackColor (short); virtual void getWorkWSNworkBackColor (short*);


  public:
    WSCdialog(WSCbase*,char*);
    virtual ~WSCdialog();
    virtual long initialize();

    virtual void adjustForm();
    virtual void onGuiPolicyChange(long);

    public: static WSCbase* createInstance(WSCbase*,char*); virtual char* getClassName(); virtual void* cast(char *cname = __null); virtual void* cast2(char *cname = __null); static WSCclassInformation* WSCdialog_info_ptr; virtual WSCclassInformation* getClassInformation();
    long getVer(long val = 1000); long checkVersion(long);
};
# 29 "General.h" 2

# 1 "../../HPLLib/HPLAlephLib.h" 1



# 1 "../../HPLLib/HPLMapTool.h" 1





# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/map" 1 3
# 65 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/map" 3

# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_tree.h" 1 3
# 91 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_tree.h" 3
namespace std
{
  enum _Rb_tree_color { _M_red = false, _M_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;
    };

  struct _Rb_tree_base_iterator
  {
    typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
    typedef bidirectional_iterator_tag iterator_category;
    typedef ptrdiff_t difference_type;

    _Base_ptr _M_node;

    void
    _M_increment()
    {
      if (_M_node->_M_right != 0)
        {
          _M_node = _M_node->_M_right;
          while (_M_node->_M_left != 0)
            _M_node = _M_node->_M_left;
        }
      else
        {
          _Base_ptr __y = _M_node->_M_parent;
          while (_M_node == __y->_M_right)
            {
              _M_node = __y;
              __y = __y->_M_parent;
            }
          if (_M_node->_M_right != __y)
            _M_node = __y;
        }
    }

    void
    _M_decrement()
    {
      if (_M_node->_M_color == _M_red
          && _M_node->_M_parent->_M_parent == _M_node)
        _M_node = _M_node->_M_right;
      else if (_M_node->_M_left != 0)
        {
          _Base_ptr __y = _M_node->_M_left;
          while (__y->_M_right != 0)
            __y = __y->_M_right;
          _M_node = __y;
        }
      else
        {
          _Base_ptr __y = _M_node->_M_parent;
          while (_M_node == __y->_M_left)
            {
              _M_node = __y;
              __y = __y->_M_parent;
            }
          _M_node = __y;
        }
    }
  };

  template<typename _Val, typename _Ref, typename _Ptr>
    struct _Rb_tree_iterator : public _Rb_tree_base_iterator
    {
      typedef _Val value_type;
      typedef _Ref reference;
      typedef _Ptr pointer;
      typedef _Rb_tree_iterator<_Val, _Val&, _Val*> iterator;
      typedef _Rb_tree_iterator<_Val, const _Val&, const _Val*>
      const_iterator;
      typedef _Rb_tree_iterator<_Val, _Ref, _Ptr> _Self;
      typedef _Rb_tree_node<_Val>* _Link_type;

      _Rb_tree_iterator() {}
      _Rb_tree_iterator(_Link_type __x) { _M_node = __x; }
      _Rb_tree_iterator(const iterator& __it) { _M_node = __it._M_node; }

      reference
      operator*() const { return _Link_type(_M_node)->_M_value_field; }

      pointer
      operator->() const { return &(operator*()); }

      _Self&
      operator++()
      {
        _M_increment();
        return *this;
      }

      _Self
      operator++(int)
      {
        _Self __tmp = *this;
        _M_increment();
        return __tmp;
      }

      _Self&
      operator--() { _M_decrement(); return *this; }

      _Self
      operator--(int)
      {
        _Self __tmp = *this;
        _M_decrement();
        return __tmp;
      }
  };

  template<typename _Val, typename _Ref, typename _Ptr>
    inline bool
    operator==(const _Rb_tree_iterator<_Val, _Ref, _Ptr>& __x,
               const _Rb_tree_iterator<_Val, _Ref, _Ptr>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val, const _Val&, const _Val*>& __x,
               const _Rb_tree_iterator<_Val, _Val&, _Val*>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val, _Val&, _Val*>& __x,
               const _Rb_tree_iterator<_Val, const _Val&, const _Val*>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val, typename _Ref, typename _Ptr>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val, _Ref, _Ptr>& __x,
               const _Rb_tree_iterator<_Val, _Ref, _Ptr>& __y)
    { return __x._M_node != __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val, const _Val&, const _Val*>& __x,
               const _Rb_tree_iterator<_Val, _Val&, _Val*>& __y)
    { return __x._M_node != __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val, _Val&, _Val*>& __x,
               const _Rb_tree_iterator<_Val, const _Val&, const _Val*>& __y)
    { return __x._M_node != __y._M_node; }

  inline void
  _Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
  {
    _Rb_tree_node_base* __y = __x->_M_right;
    __x->_M_right = __y->_M_left;
    if (__y->_M_left !=0)
      __y->_M_left->_M_parent = __x;
    __y->_M_parent = __x->_M_parent;

    if (__x == __root)
      __root = __y;
    else if (__x == __x->_M_parent->_M_left)
      __x->_M_parent->_M_left = __y;
    else
      __x->_M_parent->_M_right = __y;
    __y->_M_left = __x;
    __x->_M_parent = __y;
  }

  inline void
  _Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
  {
    _Rb_tree_node_base* __y = __x->_M_left;
    __x->_M_left = __y->_M_right;
    if (__y->_M_right != 0)
      __y->_M_right->_M_parent = __x;
    __y->_M_parent = __x->_M_parent;

    if (__x == __root)
      __root = __y;
    else if (__x == __x->_M_parent->_M_right)
      __x->_M_parent->_M_right = __y;
    else
      __x->_M_parent->_M_left = __y;
    __y->_M_right = __x;
    __x->_M_parent = __y;
  }

  inline void
  _Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
  {
    __x->_M_color = _M_red;
    while (__x != __root
           && __x->_M_parent->_M_color == _M_red)
      {
        if (__x->_M_parent == __x->_M_parent->_M_parent->_M_left)
          {
            _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_right;
            if (__y && __y->_M_color == _M_red)
              {
                __x->_M_parent->_M_color = _M_black;
                __y->_M_color = _M_black;
                __x->_M_parent->_M_parent->_M_color = _M_red;
                __x = __x->_M_parent->_M_parent;
              }
            else
              {
                if (__x == __x->_M_parent->_M_right)
                  {
                    __x = __x->_M_parent;
                    _Rb_tree_rotate_left(__x, __root);
                  }
                __x->_M_parent->_M_color = _M_black;
                __x->_M_parent->_M_parent->_M_color = _M_red;
                _Rb_tree_rotate_right(__x->_M_parent->_M_parent, __root);
              }
          }
        else
          {
            _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_left;
            if (__y && __y->_M_color == _M_red)
              {
                __x->_M_parent->_M_color = _M_black;
                __y->_M_color = _M_black;
                __x->_M_parent->_M_parent->_M_color = _M_red;
                __x = __x->_M_parent->_M_parent;
              }
            else
              {
                if (__x == __x->_M_parent->_M_left)
                  {
                    __x = __x->_M_parent;
                    _Rb_tree_rotate_right(__x, __root);
                  }
                __x->_M_parent->_M_color = _M_black;
                __x->_M_parent->_M_parent->_M_color = _M_red;
                _Rb_tree_rotate_left(__x->_M_parent->_M_parent, __root);
              }
          }
      }
    __root->_M_color = _M_black;
  }

  inline _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* __z,
                               _Rb_tree_node_base*& __root,
                               _Rb_tree_node_base*& __leftmost,
                               _Rb_tree_node_base*& __rightmost)
  {
    _Rb_tree_node_base* __y = __z;
    _Rb_tree_node_base* __x = 0;
    _Rb_tree_node_base* __x_parent = 0;
    if (__y->_M_left == 0)
      __x = __y->_M_right;
    else
      if (__y->_M_right == 0)
        __x = __y->_M_left;
      else
        {

          __y = __y->_M_right;
          while (__y->_M_left != 0)
            __y = __y->_M_left;
          __x = __y->_M_right;
        }
    if (__y != __z)
      {

        __z->_M_left->_M_parent = __y;
        __y->_M_left = __z->_M_left;
        if (__y != __z->_M_right)
          {
            __x_parent = __y->_M_parent;
            if (__x) __x->_M_parent = __y->_M_parent;
            __y->_M_parent->_M_left = __x;
            __y->_M_right = __z->_M_right;
            __z->_M_right->_M_parent = __y;
          }
        else
          __x_parent = __y;
        if (__root == __z)
          __root = __y;
        else if (__z->_M_parent->_M_left == __z)
          __z->_M_parent->_M_left = __y;
        else
          __z->_M_parent->_M_right = __y;
        __y->_M_parent = __z->_M_parent;
        std::swap(__y->_M_color, __z->_M_color);
        __y = __z;

      }
    else
      {
        __x_parent = __y->_M_parent;
        if (__x)
          __x->_M_parent = __y->_M_parent;
        if (__root == __z)
          __root = __x;
        else
          if (__z->_M_parent->_M_left == __z)
            __z->_M_parent->_M_left = __x;
          else
            __z->_M_parent->_M_right = __x;
        if (__leftmost == __z)
          if (__z->_M_right == 0)
            __leftmost = __z->_M_parent;

          else
            __leftmost = _Rb_tree_node_base::_S_minimum(__x);
        if (__rightmost == __z)
          if (__z->_M_left == 0)
            __rightmost = __z->_M_parent;

          else
            __rightmost = _Rb_tree_node_base::_S_maximum(__x);
      }
    if (__y->_M_color != _M_red)
      {
        while (__x != __root && (__x == 0 || __x->_M_color == _M_black))
          if (__x == __x_parent->_M_left)
            {
              _Rb_tree_node_base* __w = __x_parent->_M_right;
              if (__w->_M_color == _M_red)
                {
                  __w->_M_color = _M_black;
                  __x_parent->_M_color = _M_red;
                  _Rb_tree_rotate_left(__x_parent, __root);
                  __w = __x_parent->_M_right;
                }
              if ((__w->_M_left == 0 ||
                   __w->_M_left->_M_color == _M_black) &&
                  (__w->_M_right == 0 ||
                   __w->_M_right->_M_color == _M_black))
                {
                  __w->_M_color = _M_red;
                  __x = __x_parent;
                  __x_parent = __x_parent->_M_parent;
                }
              else
                {
                  if (__w->_M_right == 0
                      || __w->_M_right->_M_color == _M_black)
                    {
                      if (__w->_M_left) __w->_M_left->_M_color = _M_black;
                      __w->_M_color = _M_red;
                      _Rb_tree_rotate_right(__w, __root);
                      __w = __x_parent->_M_right;
                    }
                  __w->_M_color = __x_parent->_M_color;
                  __x_parent->_M_color = _M_black;
                  if (__w->_M_right)
                    __w->_M_right->_M_color = _M_black;
                  _Rb_tree_rotate_left(__x_parent, __root);
                  break;
                }
            }
          else
            {

              _Rb_tree_node_base* __w = __x_parent->_M_left;
              if (__w->_M_color == _M_red)
                {
                  __w->_M_color = _M_black;
                  __x_parent->_M_color = _M_red;
                  _Rb_tree_rotate_right(__x_parent, __root);
                  __w = __x_parent->_M_left;
                }
              if ((__w->_M_right == 0 ||
                   __w->_M_right->_M_color == _M_black) &&
                  (__w->_M_left == 0 ||
                   __w->_M_left->_M_color == _M_black))
                {
                  __w->_M_color = _M_red;
                  __x = __x_parent;
                  __x_parent = __x_parent->_M_parent;
                }
              else
                {
                  if (__w->_M_left == 0 || __w->_M_left->_M_color == _M_black)
                    {
                      if (__w->_M_right) __w->_M_right->_M_color = _M_black;
                      __w->_M_color = _M_red;
                      _Rb_tree_rotate_left(__w, __root);
                      __w = __x_parent->_M_left;
                    }
                  __w->_M_color = __x_parent->_M_color;
                  __x_parent->_M_color = _M_black;
                  if (__w->_M_left)
                    __w->_M_left->_M_color = _M_black;
                  _Rb_tree_rotate_right(__x_parent, __root);
                  break;
                }
            }
        if (__x) __x->_M_color = _M_black;
      }
    return __y;
  }







  template<typename _Tp, typename _Alloc, bool _S_instanceless>
    class _Rb_tree_alloc_base
    {
    public:
    typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;

      allocator_type
      get_allocator() const { return _M_node_allocator; }

      _Rb_tree_alloc_base(const allocator_type& __a)
      : _M_node_allocator(__a), _M_header(0) {}

    protected:
      typename _Alloc_traits<_Rb_tree_node<_Tp>, _Alloc>::allocator_type
      _M_node_allocator;

      _Rb_tree_node<_Tp>* _M_header;

      _Rb_tree_node<_Tp>*
      _M_get_node() { return _M_node_allocator.allocate(1); }

      void
      _M_put_node(_Rb_tree_node<_Tp>* __p)
      { _M_node_allocator.deallocate(__p, 1); }
    };


  template<typename _Tp, typename _Alloc>
    class _Rb_tree_alloc_base<_Tp, _Alloc, true>
    {
    public:
    typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;
      allocator_type get_allocator() const { return allocator_type(); }

      _Rb_tree_alloc_base(const allocator_type&) : _M_header(0) {}

    protected:
      _Rb_tree_node<_Tp>* _M_header;

      typedef typename _Alloc_traits<_Rb_tree_node<_Tp>, _Alloc>::_Alloc_type
      _Alloc_type;

      _Rb_tree_node<_Tp>*
      _M_get_node() { return _Alloc_type::allocate(1); }

      void
      _M_put_node(_Rb_tree_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }
    };

  template<typename _Tp, typename _Alloc>
    struct _Rb_tree_base : public _Rb_tree_alloc_base<_Tp, _Alloc,
                                  _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
    {
      typedef _Rb_tree_alloc_base<_Tp,
        _Alloc, _Alloc_traits<_Tp, _Alloc>::_S_instanceless> _Base;
      typedef typename _Base::allocator_type allocator_type;

      _Rb_tree_base(const allocator_type& __a)
      : _Base(__a) { _M_header = _M_get_node(); }
      ~_Rb_tree_base() { _M_put_node(_M_header); }
    };


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree : protected _Rb_tree_base<_Val, _Alloc>
    {
      typedef _Rb_tree_base<_Val, _Alloc> _Base;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef _Rb_tree_node<_Val> _Rb_tree_node;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node* _Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef typename _Base::allocator_type allocator_type;
      allocator_type get_allocator() const { return _Base::get_allocator(); }

    protected:
      using _Base::_M_get_node;
      using _Base::_M_put_node;
      using _Base::_M_header;

      _Link_type
      _M_create_node(const value_type& __x)
      {
        _Link_type __tmp = _M_get_node();
        try
          { _Construct(&__tmp->_M_value_field, __x); }
        catch(...)
          {
          _M_put_node(__tmp);
          throw;
          }
        return __tmp;
      }

      _Link_type
      _M_clone_node(_Link_type __x)
      {
        _Link_type __tmp = _M_create_node(__x->_M_value_field);
        __tmp->_M_color = __x->_M_color;
        __tmp->_M_left = 0;
        __tmp->_M_right = 0;
        return __tmp;
      }

      void
      destroy_node(_Link_type __p)
      {
        _Destroy(&__p->_M_value_field);
        _M_put_node(__p);
      }

      size_type _M_node_count;
      _Compare _M_key_compare;

      _Link_type&
      _M_root() const { return (_Link_type&) _M_header->_M_parent; }

      _Link_type&
      _M_leftmost() const { return (_Link_type&) _M_header->_M_left; }

      _Link_type&
      _M_rightmost() const { return (_Link_type&) _M_header->_M_right; }

      static _Link_type&
      _S_left(_Link_type __x) { return (_Link_type&)(__x->_M_left); }

      static _Link_type&
      _S_right(_Link_type __x) { return (_Link_type&)(__x->_M_right); }

      static _Link_type&
      _S_parent(_Link_type __x) { return (_Link_type&)(__x->_M_parent); }

      static reference
      _S_value(_Link_type __x) { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Link_type __x) { return _KeyOfValue()(_S_value(__x)); }

      static _Rb_tree_color&
      _S_color(_Link_type __x) { return __x->_M_color; }

      static _Link_type&
      _S_left(_Base_ptr __x) { return (_Link_type&)(__x->_M_left); }

      static _Link_type&
      _S_right(_Base_ptr __x) { return (_Link_type&)(__x->_M_right); }

      static _Link_type&
      _S_parent(_Base_ptr __x) { return (_Link_type&)(__x->_M_parent); }

      static reference
      _S_value(_Base_ptr __x) { return ((_Link_type)__x)->_M_value_field; }

      static const _Key&
      _S_key(_Base_ptr __x) { return _KeyOfValue()(_S_value(_Link_type(__x)));}

      static _Rb_tree_color&
      _S_color(_Base_ptr __x) { return (_Link_type(__x)->_M_color); }

      static _Link_type
      _S_minimum(_Link_type __x)
      { return (_Link_type) _Rb_tree_node_base::_S_minimum(__x); }

      static _Link_type
      _S_maximum(_Link_type __x)
      { return (_Link_type) _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type, reference, pointer> iterator;
      typedef _Rb_tree_iterator<value_type, const_reference, const_pointer>
      const_iterator;

      typedef reverse_iterator<const_iterator> const_reverse_iterator;
      typedef reverse_iterator<iterator> reverse_iterator;

    private:
      iterator
      _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);

      _Link_type
      _M_copy(_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

    public:

      _Rb_tree()
        : _Base(allocator_type()), _M_node_count(0), _M_key_compare()
      { _M_empty_initialize(); }

      _Rb_tree(const _Compare& __comp)
        : _Base(allocator_type()), _M_node_count(0), _M_key_compare(__comp)
      { _M_empty_initialize(); }

      _Rb_tree(const _Compare& __comp, const allocator_type& __a)
        : _Base(__a), _M_node_count(0), _M_key_compare(__comp)
      { _M_empty_initialize(); }

      _Rb_tree(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x)
        : _Base(__x.get_allocator()), _M_node_count(0),
                 _M_key_compare(__x._M_key_compare)
      {
        if (__x._M_root() == 0)
          _M_empty_initialize();
        else
          {
            _S_color(_M_header) = _M_red;
            _M_root() = _M_copy(__x._M_root(), _M_header);
            _M_leftmost() = _S_minimum(_M_root());
            _M_rightmost() = _S_maximum(_M_root());
          }
        _M_node_count = __x._M_node_count;
      }

      ~_Rb_tree() { clear(); }

      _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>&
      operator=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x);

    private:
      void _M_empty_initialize()
      {
        _S_color(_M_header) = _M_red;

        _M_root() = 0;
        _M_leftmost() = _M_header;
        _M_rightmost() = _M_header;
      }

    public:

      _Compare
      key_comp() const { return _M_key_compare; }

      iterator
      begin() { return _M_leftmost(); }

      const_iterator
      begin() const { return _M_leftmost(); }

      iterator
      end() { return _M_header; }

      const_iterator
      end() const { return _M_header; }

      reverse_iterator
      rbegin() { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const { return const_reverse_iterator(begin()); }

      bool
      empty() const { return _M_node_count == 0; }

      size_type
      size() const { return _M_node_count; }

      size_type
      max_size() const { return size_type(-1); }

      void
      swap(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __t)
      {
        std::swap(_M_header, __t._M_header);
        std::swap(_M_node_count, __t._M_node_count);
        std::swap(_M_key_compare, __t._M_key_compare);
      }


      pair<iterator,bool>
      insert_unique(const value_type& __x);

      iterator
      insert_equal(const value_type& __x);

      iterator
      insert_unique(iterator __position, const value_type& __x);

      iterator
      insert_equal(iterator __position, const value_type& __x);

      template<typename _InputIterator>
      void
      insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
      void
      insert_equal(_InputIterator __first, _InputIterator __last);

      void
      erase(iterator __position);

      size_type
      erase(const key_type& __x);

      void
      erase(iterator __first, iterator __last);

      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        if (_M_node_count != 0)
          {
            _M_erase(_M_root());
            _M_leftmost() = _M_header;
            _M_root() = 0;
            _M_rightmost() = _M_header;
            _M_node_count = 0;
          }
      }


      iterator
      find(const key_type& __x);

      const_iterator
      find(const key_type& __x) const;

      size_type
      count(const key_type& __x) const;

      iterator
      lower_bound(const key_type& __x);

      const_iterator
      lower_bound(const key_type& __x) const;

      iterator
      upper_bound(const key_type& __x);

      const_iterator
      upper_bound(const key_type& __x) const;

      pair<iterator,iterator>
      equal_range(const key_type& __x);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
               const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
    {
      return __x.size() == __y.size() &&
        equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
              const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
    {
      return lexicographical_compare(__x.begin(), __x.end(),
                                     __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
               const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
              const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
               const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
  { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
               const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
  { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x,
         _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __y)
    { __x.swap(__y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>&
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    operator=(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>& __x)
    {
      if (this != &__x)
        {

          clear();
          _M_node_count = 0;
          _M_key_compare = __x._M_key_compare;
          if (__x._M_root() == 0)
            {
              _M_root() = 0;
              _M_leftmost() = _M_header;
              _M_rightmost() = _M_header;
            }
          else
            {
              _M_root() = _M_copy(__x._M_root(), _M_header);
              _M_leftmost() = _S_minimum(_M_root());
              _M_rightmost() = _S_maximum(_M_root());
              _M_node_count = __x._M_node_count;
            }
        }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    _M_insert(_Base_ptr __x_, _Base_ptr __y_, const _Val& __v)
    {
      _Link_type __x = (_Link_type) __x_;
      _Link_type __y = (_Link_type) __y_;
      _Link_type __z;

      if (__y == _M_header || __x != 0 ||
          _M_key_compare(_KeyOfValue()(__v), _S_key(__y)))
        {
          __z = _M_create_node(__v);
          _S_left(__y) = __z;

          if (__y == _M_header)
            {
              _M_root() = __z;
              _M_rightmost() = __z;
            }
          else if (__y == _M_leftmost())
            _M_leftmost() = __z;
        }
      else
        {
          __z = _M_create_node(__v);
          _S_right(__y) = __z;

          if (__y == _M_rightmost())
            _M_rightmost() = __z;
        }
      _S_parent(__z) = __y;
      _S_left(__z) = 0;
      _S_right(__z) = 0;
      _Rb_tree_rebalance(__z, _M_header->_M_parent);
      ++_M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    insert_equal(const _Val& __v)
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();
      while (__x != 0)
        {
          __y = __x;
          __x = _M_key_compare(_KeyOfValue()(__v), _S_key(__x)) ?
            _S_left(__x) : _S_right(__x);
        }
      return _M_insert(__x, __y, __v);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator,
    bool>
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    insert_unique(const _Val& __v)
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();
      bool __comp = true;
      while (__x != 0)
        {
          __y = __x;
          __comp = _M_key_compare(_KeyOfValue()(__v), _S_key(__x));
          __x = __comp ? _S_left(__x) : _S_right(__x);
        }
      iterator __j = iterator(__y);
      if (__comp)
        if (__j == begin())
          return pair<iterator,bool>(_M_insert(__x, __y, __v), true);
        else
          --__j;
      if (_M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
        return pair<iterator,bool>(_M_insert(__x, __y, __v), true);
      return pair<iterator,bool>(__j, false);
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    insert_unique(iterator __position, const _Val& __v)
    {
      if (__position._M_node == _M_header->_M_left)
        {

          if (size() > 0 &&
              _M_key_compare(_KeyOfValue()(__v), _S_key(__position._M_node)))
            return _M_insert(__position._M_node, __position._M_node, __v);

          else
            return insert_unique(__v).first;
        }
      else if (__position._M_node == _M_header)
        {

          if (_M_key_compare(_S_key(_M_rightmost()), _KeyOfValue()(__v)))
            return _M_insert(0, _M_rightmost(), __v);
          else
            return insert_unique(__v).first;
        }
      else
        {
          iterator __before = __position;
          --__before;
          if (_M_key_compare(_S_key(__before._M_node), _KeyOfValue()(__v))
              && _M_key_compare(_KeyOfValue()(__v),_S_key(__position._M_node)))
            {
              if (_S_right(__before._M_node) == 0)
                return _M_insert(0, __before._M_node, __v);
              else
                return _M_insert(__position._M_node, __position._M_node, __v);

            }
          else
            return insert_unique(__v).first;
        }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    insert_equal(iterator __position, const _Val& __v)
    {
      if (__position._M_node == _M_header->_M_left)
        {

          if (size() > 0 &&
              !_M_key_compare(_S_key(__position._M_node), _KeyOfValue()(__v)))
            return _M_insert(__position._M_node, __position._M_node, __v);

          else
            return insert_equal(__v);
        }
      else if (__position._M_node == _M_header)
        {

          if (!_M_key_compare(_KeyOfValue()(__v), _S_key(_M_rightmost())))
            return _M_insert(0, _M_rightmost(), __v);
          else
            return insert_equal(__v);
        }
      else
        {
          iterator __before = __position;
          --__before;
          if (!_M_key_compare(_KeyOfValue()(__v), _S_key(__before._M_node))
              && !_M_key_compare(_S_key(__position._M_node),
                                 _KeyOfValue()(__v)))
            {
              if (_S_right(__before._M_node) == 0)
                return _M_insert(0, __before._M_node, __v);
              else
                return _M_insert(__position._M_node, __position._M_node, __v);

            }
          else
            return insert_equal(__v);
        }
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key,_Val,_KoV,_Cmp,_Alloc>::
      insert_equal(_II __first, _II __last)
      {
        for ( ; __first != __last; ++__first)
          insert_equal(*__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
    void
    _Rb_tree<_Key,_Val,_KoV,_Cmp,_Alloc>::
    insert_unique(_II __first, _II __last)
    {
      for ( ; __first != __last; ++__first)
        insert_unique(*__first);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::erase(iterator __position)
    {
      _Link_type __y =
        (_Link_type) _Rb_tree_rebalance_for_erase(__position._M_node,
                                                  _M_header->_M_parent,
                                                  _M_header->_M_left,
                                                  _M_header->_M_right);
      destroy_node(__y);
      --_M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::size_type
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)
    {
      pair<iterator,iterator> __p = equal_range(__x);
      size_type __n = distance(__p.first, __p.second);
      erase(__p.first, __p.second);
      return __n;
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key,_Val,_KoV,_Compare,_Alloc>::
    _M_copy(_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      try
        {
          if (__x->_M_right)
            __top->_M_right = _M_copy(_S_right(__x), __top);
          __p = __top;
          __x = _S_left(__x);

          while (__x != 0)
            {
              _Link_type __y = _M_clone_node(__x);
              __p->_M_left = __y;
              __y->_M_parent = __p;
              if (__x->_M_right)
                __y->_M_right = _M_copy(_S_right(__x), __y);
              __p = __y;
              __x = _S_left(__x);
            }
        }
      catch(...)
        {
          _M_erase(__top);
          throw;
        }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::_M_erase(_Link_type __x)
    {

      while (__x != 0)
        {
          _M_erase(_S_right(__x));
          _Link_type __y = _S_left(__x);
          destroy_node(__x);
          __x = __y;
        }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first == begin() && __last == end())
        clear();
      else
        while (__first != __last) erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
        erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k)
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();

      while (__x != 0)
        if (!_M_key_compare(_S_key(__x), __k))
          __y = __x, __x = _S_left(__x);
        else
          __x = _S_right(__x);

      iterator __j = iterator(__y);
      return (__j == end() || _M_key_compare(__k, _S_key(__j._M_node))) ?
        end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    find(const _Key& __k) const
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();

     while (__x != 0)
       {
         if (!_M_key_compare(_S_key(__x), __k))
           __y = __x, __x = _S_left(__x);
         else
           __x = _S_right(__x);
       }
     const_iterator __j = const_iterator(__y);
     return (__j == end() || _M_key_compare(__k, _S_key(__j._M_node))) ?
       end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::size_type
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      size_type __n = distance(__p.first, __p.second);
      return __n;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    lower_bound(const _Key& __k)
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();

      while (__x != 0)
        if (!_M_key_compare(_S_key(__x), __k))
          __y = __x, __x = _S_left(__x);
        else
          __x = _S_right(__x);

      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    lower_bound(const _Key& __k) const
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();

      while (__x != 0)
        if (!_M_key_compare(_S_key(__x), __k))
          __y = __x, __x = _S_left(__x);
        else
          __x = _S_right(__x);

      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    upper_bound(const _Key& __k)
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();

      while (__x != 0)
        if (_M_key_compare(__k, _S_key(__x)))
          __y = __x, __x = _S_left(__x);
        else
          __x = _S_right(__x);

      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    upper_bound(const _Key& __k) const
    {
      _Link_type __y = _M_header;
      _Link_type __x = _M_root();

      while (__x != 0)
        if (_M_key_compare(__k, _S_key(__x)))
          __y = __x, __x = _S_left(__x);
        else
          __x = _S_right(__x);

      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline
    pair<typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator,
                                                                   typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator>
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::
    equal_range(const _Key& __k)
    { return pair<iterator, iterator>(lower_bound(__k), upper_bound(__k)); }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
  inline
  pair<typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::const_iterator,
                                                                typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::const_iterator>
  _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>
  ::equal_range(const _Key& __k) const
  {
    return pair<const_iterator,const_iterator>(lower_bound(__k),
                                               upper_bound(__k));
  }

  inline int
  __black_count(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)
  {
    if (__node == 0)
      return 0;
    int __sum = 0;
    do
      {
        if (__node->_M_color == _M_black)
          ++__sum;
        if (__node == __root)
          break;
        __node = __node->_M_parent;
      }
    while (1);
    return __sum;
  }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
    if (_M_node_count == 0 || begin() == end())
      return _M_node_count == 0 && begin() == end() &&
        _M_header->_M_left == _M_header && _M_header->_M_right == _M_header;

    int __len = __black_count(_M_leftmost(), _M_root());
    for (const_iterator __it = begin(); __it != end(); ++__it)
      {
        _Link_type __x = (_Link_type) __it._M_node;
        _Link_type __L = _S_left(__x);
        _Link_type __R = _S_right(__x);

        if (__x->_M_color == _M_red)
          if ((__L && __L->_M_color == _M_red)
              || (__R && __R->_M_color == _M_red))
            return false;

        if (__L && _M_key_compare(_S_key(__x), _S_key(__L)))
          return false;
        if (__R && _M_key_compare(_S_key(__R), _S_key(__x)))
          return false;

        if (!__L && !__R && __black_count(__x, _M_root()) != __len)
          return false;
      }

    if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
      return false;
    if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
      return false;
    return true;
    }
}
# 67 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/map" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 1 3
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
namespace std
{
# 77 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
template <class _Key, class _Tp, class _Compare = less<_Key>,
          class _Alloc = allocator<pair<const _Key, _Tp> > >
class map
{

 
  ;

public:

  typedef _Key key_type;
  typedef _Tp data_type;
  typedef _Tp mapped_type;
  typedef pair<const _Key, _Tp> value_type;
  typedef _Compare key_compare;

  class value_compare
    : public binary_function<value_type, value_type, bool> {
  friend class map<_Key,_Tp,_Compare,_Alloc>;
  protected :
    _Compare comp;
    value_compare(_Compare __c) : comp(__c) {}
  public:
    bool operator()(const value_type& __x, const value_type& __y) const {
      return comp(__x.first, __y.first);
    }
  };

private:
  typedef _Rb_tree<key_type, value_type,
                   _Select1st<value_type>, key_compare, _Alloc> _Rep_type;
  _Rep_type _M_t;
public:
  typedef typename _Rep_type::pointer pointer;
  typedef typename _Rep_type::const_pointer const_pointer;
  typedef typename _Rep_type::reference reference;
  typedef typename _Rep_type::const_reference const_reference;
  typedef typename _Rep_type::iterator iterator;
  typedef typename _Rep_type::const_iterator const_iterator;
  typedef typename _Rep_type::reverse_iterator reverse_iterator;
  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
  typedef typename _Rep_type::size_type size_type;
  typedef typename _Rep_type::difference_type difference_type;
  typedef typename _Rep_type::allocator_type allocator_type;



  map() : _M_t(_Compare(), allocator_type()) {}
  explicit map(const _Compare& __comp,
               const allocator_type& __a = allocator_type())
    : _M_t(__comp, __a) {}

  template <class _InputIterator>
  map(_InputIterator __first, _InputIterator __last)
    : _M_t(_Compare(), allocator_type())
    { _M_t.insert_unique(__first, __last); }

  template <class _InputIterator>
  map(_InputIterator __first, _InputIterator __last, const _Compare& __comp,
      const allocator_type& __a = allocator_type())
    : _M_t(__comp, __a) { _M_t.insert_unique(__first, __last); }
  map(const map<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}

  map<_Key,_Tp,_Compare,_Alloc>&
  operator=(const map<_Key, _Tp, _Compare, _Alloc>& __x)
  {
    _M_t = __x._M_t;
    return *this;
  }



  key_compare key_comp() const { return _M_t.key_comp(); }
  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }
  allocator_type get_allocator() const { return _M_t.get_allocator(); }





  iterator begin() { return _M_t.begin(); }





  const_iterator begin() const { return _M_t.begin(); }





  iterator end() { return _M_t.end(); }






  const_iterator end() const { return _M_t.end(); }





  reverse_iterator rbegin() { return _M_t.rbegin(); }






  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }






  reverse_iterator rend() { return _M_t.rend(); }






  const_reverse_iterator rend() const { return _M_t.rend(); }


  bool empty() const { return _M_t.empty(); }

  size_type size() const { return _M_t.size(); }

  size_type max_size() const { return _M_t.max_size(); }
# 221 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  _Tp& operator[](const key_type& __k) {
    iterator __i = lower_bound(__k);

    if (__i == end() || key_comp()(__k, (*__i).first))
      __i = insert(__i, value_type(__k, _Tp()));
    return (*__i).second;
  }

  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }
# 244 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  pair<iterator,bool> insert(const value_type& __x)
    { return _M_t.insert_unique(__x); }
# 261 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  iterator insert(iterator position, const value_type& __x)
    { return _M_t.insert_unique(position, __x); }







  template <class _InputIterator>
  void insert(_InputIterator __first, _InputIterator __last) {
    _M_t.insert_unique(__first, __last);
  }
# 284 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  void erase(iterator __position) { _M_t.erase(__position); }
# 297 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  size_type erase(const key_type& __x) { return _M_t.erase(__x); }
# 309 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  void erase(iterator __first, iterator __last)
    { _M_t.erase(__first, __last); }






  void clear() { _M_t.clear(); }
# 332 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  iterator find(const key_type& __x) { return _M_t.find(__x); }
# 345 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }
# 354 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  size_type count(const key_type& __x) const {
    return _M_t.find(__x) == _M_t.end() ? 0 : 1;
  }
# 369 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }
# 382 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  const_iterator lower_bound(const key_type& __x) const {
    return _M_t.lower_bound(__x);
  }
# 393 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }
# 403 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  const_iterator upper_bound(const key_type& __x) const {
    return _M_t.upper_bound(__x);
  }
# 423 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  pair<iterator,iterator> equal_range(const key_type& __x) {
    return _M_t.equal_range(__x);
  }
# 443 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_map.h" 3
  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {
    return _M_t.equal_range(__x);
  }

  template <class _K1, class _T1, class _C1, class _A1>
  friend bool operator== (const map<_K1, _T1, _C1, _A1>&,
                          const map<_K1, _T1, _C1, _A1>&);
  template <class _K1, class _T1, class _C1, class _A1>
  friend bool operator< (const map<_K1, _T1, _C1, _A1>&,
                         const map<_K1, _T1, _C1, _A1>&);
};

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x,
                       const map<_Key,_Tp,_Compare,_Alloc>& __y) {
  return __x._M_t == __y._M_t;
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x,
                      const map<_Key,_Tp,_Compare,_Alloc>& __y) {
  return __x._M_t < __y._M_t;
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator!=(const map<_Key,_Tp,_Compare,_Alloc>& __x,
                       const map<_Key,_Tp,_Compare,_Alloc>& __y) {
  return !(__x == __y);
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator>(const map<_Key,_Tp,_Compare,_Alloc>& __x,
                      const map<_Key,_Tp,_Compare,_Alloc>& __y) {
  return __y < __x;
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator<=(const map<_Key,_Tp,_Compare,_Alloc>& __x,
                       const map<_Key,_Tp,_Compare,_Alloc>& __y) {
  return !(__y < __x);
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator>=(const map<_Key,_Tp,_Compare,_Alloc>& __x,
                       const map<_Key,_Tp,_Compare,_Alloc>& __y) {
  return !(__x < __y);
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline void swap(map<_Key,_Tp,_Compare,_Alloc>& __x,
                 map<_Key,_Tp,_Compare,_Alloc>& __y) {
  __x.swap(__y);
}

}
# 68 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/map" 2 3
# 1 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 1 3
# 66 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
namespace std
{

template <class _Key, class _Tp,
          class _Compare = less<_Key>,
          class _Alloc = allocator<pair<const _Key, _Tp> > >
class multimap;

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                       const multimap<_Key,_Tp,_Compare,_Alloc>& __y);

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                      const multimap<_Key,_Tp,_Compare,_Alloc>& __y);
# 90 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
template <class _Key, class _Tp, class _Compare, class _Alloc>
class multimap
{

 
  ;

public:



  typedef _Key key_type;
  typedef _Tp data_type;
  typedef _Tp mapped_type;
  typedef pair<const _Key, _Tp> value_type;
  typedef _Compare key_compare;

  class value_compare : public binary_function<value_type, value_type, bool> {
  friend class multimap<_Key,_Tp,_Compare,_Alloc>;
  protected:
    _Compare comp;
    value_compare(_Compare __c) : comp(__c) {}
  public:
    bool operator()(const value_type& __x, const value_type& __y) const {
      return comp(__x.first, __y.first);
    }
  };

private:
  typedef _Rb_tree<key_type, value_type,
                  _Select1st<value_type>, key_compare, _Alloc> _Rep_type;
  _Rep_type _M_t;
public:
  typedef typename _Rep_type::pointer pointer;
  typedef typename _Rep_type::const_pointer const_pointer;
  typedef typename _Rep_type::reference reference;
  typedef typename _Rep_type::const_reference const_reference;
  typedef typename _Rep_type::iterator iterator;
  typedef typename _Rep_type::const_iterator const_iterator;
  typedef typename _Rep_type::reverse_iterator reverse_iterator;
  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
  typedef typename _Rep_type::size_type size_type;
  typedef typename _Rep_type::difference_type difference_type;
  typedef typename _Rep_type::allocator_type allocator_type;



  multimap() : _M_t(_Compare(), allocator_type()) { }
  explicit multimap(const _Compare& __comp,
                    const allocator_type& __a = allocator_type())
    : _M_t(__comp, __a) { }

  template <class _InputIterator>
  multimap(_InputIterator __first, _InputIterator __last)
    : _M_t(_Compare(), allocator_type())
    { _M_t.insert_equal(__first, __last); }

  template <class _InputIterator>
  multimap(_InputIterator __first, _InputIterator __last,
           const _Compare& __comp,
           const allocator_type& __a = allocator_type())
    : _M_t(__comp, __a) { _M_t.insert_equal(__first, __last); }
  multimap(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) { }

  multimap<_Key,_Tp,_Compare,_Alloc>&
  operator=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) {
    _M_t = __x._M_t;
    return *this;
  }



  key_compare key_comp() const { return _M_t.key_comp(); }
  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }
  allocator_type get_allocator() const { return _M_t.get_allocator(); }





  iterator begin() { return _M_t.begin(); }






  const_iterator begin() const { return _M_t.begin(); }





  iterator end() { return _M_t.end(); }






  const_iterator end() const { return _M_t.end(); }






  reverse_iterator rbegin() { return _M_t.rbegin(); }






  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }






  reverse_iterator rend() { return _M_t.rend(); }






  const_reverse_iterator rend() const { return _M_t.rend(); }


  bool empty() const { return _M_t.empty(); }


  size_type size() const { return _M_t.size(); }


  size_type max_size() const { return _M_t.max_size(); }

  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }
# 242 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  iterator insert(const value_type& __x) { return _M_t.insert_equal(__x); }
# 259 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  iterator insert(iterator __position, const value_type& __x) {
    return _M_t.insert_equal(__position, __x);
  }
# 270 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  template <class _InputIterator>
  void insert(_InputIterator __first, _InputIterator __last) {
    _M_t.insert_equal(__first, __last);
  }
# 284 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  void erase(iterator __position) { _M_t.erase(__position); }
# 297 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  size_type erase(const key_type& __x) { return _M_t.erase(__x); }
# 309 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  void erase(iterator __first, iterator __last)
    { _M_t.erase(__first, __last); }






  void clear() { _M_t.clear(); }
# 332 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  iterator find(const key_type& __x) { return _M_t.find(__x); }
# 345 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }






  size_type count(const key_type& __x) const { return _M_t.count(__x); }
# 365 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }
# 378 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  const_iterator lower_bound(const key_type& __x) const {
    return _M_t.lower_bound(__x);
  }






  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }







  const_iterator upper_bound(const key_type& __x) const {
    return _M_t.upper_bound(__x);
  }
# 413 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  pair<iterator,iterator> equal_range(const key_type& __x) {
    return _M_t.equal_range(__x);
  }
# 431 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/bits/stl_multimap.h" 3
  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {
    return _M_t.equal_range(__x);
  }

  template <class _K1, class _T1, class _C1, class _A1>
  friend bool operator== (const multimap<_K1, _T1, _C1, _A1>&,
                          const multimap<_K1, _T1, _C1, _A1>&);
  template <class _K1, class _T1, class _C1, class _A1>
  friend bool operator< (const multimap<_K1, _T1, _C1, _A1>&,
                         const multimap<_K1, _T1, _C1, _A1>&);
};

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                       const multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  return __x._M_t == __y._M_t;
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                      const multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  return __x._M_t < __y._M_t;
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator!=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                       const multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  return !(__x == __y);
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator>(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                      const multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  return __y < __x;
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator<=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                       const multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  return !(__y < __x);
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline bool operator>=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                       const multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  return !(__x < __y);
}

template <class _Key, class _Tp, class _Compare, class _Alloc>
inline void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x,
                 multimap<_Key,_Tp,_Compare,_Alloc>& __y) {
  __x.swap(__y);
}

}
# 69 "C:/PROGRA~1/WIDEST~1/gcc/include/c++/3.2/map" 2 3
# 7 "../../HPLLib/HPLMapTool.h" 2


# 1 "../../AlephOneSrc/wad.h" 1
# 42 "../../AlephOneSrc/wad.h"
# 1 "../../AlephOneSrc/tags.h" 1
# 71 "../../AlephOneSrc/tags.h"
enum Typecode {
        _typecode_unknown= NONE,
        _typecode_creator= 0,
        _typecode_scenario,
        _typecode_savegame,
        _typecode_film,
        _typecode_physics,
        _typecode_shapes,
        _typecode_sounds,
        _typecode_patch,
        _typecode_images,
        _typecode_preferences,
        _typecode_music,
        _typecode_theme,
        _typecode_netscript,
        NUMBER_OF_TYPECODES
};



void initialize_typecodes();


uint32 get_typecode(Typecode which);
void set_typecode(Typecode which, uint32 _type);
# 43 "../../AlephOneSrc/wad.h" 2
# 55 "../../AlephOneSrc/wad.h"
class FileSpecifier;
class OpenedFile;


typedef uint32 WadDataType;


struct wad_header {
        int16 version;
        int16 data_version;
        char file_name[64];
        uint32 checksum;
        int32 directory_offset;
        int16 wad_count;
        int16 application_specific_directory_data_size;
        int16 entry_header_size;
        int16 directory_entry_base_size;
        uint32 parent_checksum;
        int16 unused[20];
};
const int SIZEOF_wad_header = 128;

struct old_directory_entry {
        int32 offset_to_start;
        int32 length;
};
const int SIZEOF_old_directory_entry = 8;

struct directory_entry {
        int32 offset_to_start;
        int32 length;
        int16 index;
};
const int SIZEOF_directory_entry = 10;

struct old_entry_header {
        WadDataType tag;
        int32 next_offset;
        int32 length;




};
const int SIZEOF_old_entry_header = 12;

struct entry_header {
        WadDataType tag;
        int32 next_offset;
        int32 length;
        int32 offset;




};
const int SIZEOF_entry_header = 16;


struct tag_data {
        WadDataType tag;
        byte *data;
        long length;
        long offset;
};


struct wad_data {
        short tag_count;
        short padding;
        byte *read_only_data;
        struct tag_data *tag_data;
};


bool wad_file_has_checksum(FileSpecifier& File, uint32 checksum);
bool wad_file_has_parent_checksum(FileSpecifier& File, uint32 checksum);


short number_of_wads_in_file(FileSpecifier& File);



bool create_wadfile(FileSpecifier& File, Typecode Type);

bool open_wad_file_for_reading(FileSpecifier& File, OpenedFile& OFile);
bool open_wad_file_for_writing(FileSpecifier& File, OpenedFile& OFile);

void close_wad_file(OpenedFile& OFile);




bool read_wad_header(OpenedFile& OFile, struct wad_header *header);


struct wad_data *read_indexed_wad_from_file(OpenedFile& OFile,
        struct wad_header *header, short index, bool read_only);


void free_wad(struct wad_data *wad);

long get_size_of_directory_data(struct wad_header *header);




void *extract_type_from_wad(struct wad_data *wad, WadDataType type,
        size_t *length);


long calculate_wad_length(struct wad_header *file_header, struct wad_data *wad);


void *get_indexed_directory_data(struct wad_header *header, short index,
        void *directories);

void *read_directory_data(OpenedFile& OFile, struct wad_header *header);

uint32 read_wad_file_checksum(FileSpecifier& File);
uint32 read_wad_file_parent_checksum(FileSpecifier& File);







bool find_file_with_modification_date(FileSpecifier& File,
        Typecode file_type, short path_resource_id, TimeType modification_date);




void *get_flat_data(FileSpecifier& File, bool use_union, short wad_index);
long get_flat_data_length(void *data);


struct wad_data *inflate_flat_data(void *data, struct wad_header *header);


struct wad_data *create_empty_wad(void);
void fill_default_wad_header(FileSpecifier& File, short wadfile_version,
        short data_version, short wad_count, short application_directory_data_size,
        struct wad_header *header);
bool write_wad_header(OpenedFile& OFile, struct wad_header *header);
bool write_directorys(OpenedFile& OFile, struct wad_header *header,
        void *entries);
void calculate_and_store_wadfile_checksum(OpenedFile& OFile);
bool write_wad(OpenedFile& OFile, struct wad_header *file_header,
        struct wad_data *wad, long offset);

void set_indexed_directory_offset_and_length(struct wad_header *header,
        void *entries, short index, long offset, long length, short wad_index);


struct wad_data *append_data_to_wad(
        struct wad_data *wad,
        WadDataType type,
        void *data,
        size_t size,
        size_t offset);

void remove_tag_from_wad(struct wad_data *wad, WadDataType type);


void dump_wad(struct wad_data *wad);




void SetBetweenlevels(bool _BetweenLevels);
bool IsBetweenLevels();
# 10 "../../HPLLib/HPLMapTool.h" 2


# 1 "../../HPLLib/HPLSelectData.h" 1
# 12 "../../HPLLib/HPLSelectData.h"
namespace hpl{
namespace aleph{
namespace map{
    struct SelPoint{
        int index;
        int offset[2];
    };
    struct SelLine{
        int index;
        int offset[2][2];
    };
    struct SelPolygon{
        int index;
        int offset[8][2];
        int num;
    };
    struct SelObject{
        int index;
        int offset[2];
    };
    struct SelSide{
        int index;
    };
    class HPLSelectData{
    private:
        std::vector<struct SelPoint> selpoints;
        std::vector<struct SelLine> sellines;
        std::vector<struct SelPolygon> selpolygons;
        std::vector<struct SelObject> selobjects;
        struct SelSide side;
        bool _isSelected;
    public:
        HPLSelectData();
        ~HPLSelectData();
    public:

        std::vector<struct SelPoint>* getSelPoints();
        std::vector<struct SelLine>* getSelLines();
        std::vector<struct SelPolygon>* getSelPolygons();
        std::vector<struct SelObject>* getSelObjects();
        struct SelSide* getSelSide();

        bool containsPoint(int index);
        bool containsLine(int index);
        bool containsPolygon(int index);
        bool containsObject(int index);
        bool isSelectSide(int index);

        bool isSelected();
        void setSelected(bool sel);


        void clear();

        bool isSelectOnePoint();
        bool isSelectOneLine();
        bool isSelectOnePolygon();
        bool isSelectOneObject();
        bool isSelectOneSide();

        void addSelPoint(int index, int offset[2]);
        void addSelLine(int index, int offset[2][2]);
        void addSelPolygon(int index, int offset[8][2], int num);
        void addSelObject(int index, int offset[2]);
        void addSelSide(int index);
    };
};
};
};
# 13 "../../HPLLib/HPLMapTool.h" 2

namespace hpl{
namespace aleph{
namespace map{
# 29 "../../HPLLib/HPLMapTool.h"
        bool isSelectPoint(int viewPX, int viewPY,
                                           int worldPX, int worldPY,
                                           int offsetViewX, int offsetViewY,
                                           int offsetWorldX, int offsetWorldY,
                                           int div,
                                           int distance);
        bool isSelectPoint(world_point2d &point0, world_point2d &point1,
                                           int distance);
# 45 "../../HPLLib/HPLMapTool.h"
        void getSnapedPointToGrid(world_point2d &srcPoint, world_point2d* destPoint,
                int gridInterval);







        world_point2d getWorldPoint2DFromViewPoint(int viewPX, int viewPY,
        int offsetXWorld, int offsetYWorld, int zoomDivision, int offsetx, int offsety);
        void getViewPointFromWorldPoint2D(world_point2d& point, int *dest,
        int offsetXWorld, int offsetYWorld, int zoomDivision, int offsetx, int offsety);
# 69 "../../HPLLib/HPLMapTool.h"
        bool isSelectLine(int viewPX, int viewPY,
                                           int worldPX0, int worldPY0,
                                           int worldPX1, int worldPY1,
                                           int offsetViewX, int offsetViewY,
                                           int offsetWorldX, int offsetWorldY,
                                           int div,
                                           int distance);

        bool isSelectLine(world_point2d &point,
                                          world_point2d &linePoint0, world_point2d &linePoint1,
                                          int distance);





        double getLineLength(int index);



        double getPointsDistance(world_point2d& pointA, world_point2d& pointB);






        void fixLine(int index, bool isDeleteOldSide);




        void fixSide(int leftPolyIndex, int rightPolyIndex, int sideIndex,
                int lineIndex, bool isDeleteOldSide);
# 116 "../../HPLLib/HPLMapTool.h"
        bool isPointInSelection(int px, int py,
                                                        int offsetViewX, int offsetViewY,
                                                        int offsetWorldX, int offsetWorldY,
                                                        int pointDistance,
                                                        int lineDistance,
                                                        int objectDistance,
                                                        hpl::aleph::map::HPLSelectData* selectInfo,
                                                        int heightMax, int heightMin, int div);

};
};
};
# 5 "../../HPLLib/HPLAlephLib.h" 2

# 1 "../../HPLLib/HPLMath.h" 1



namespace hpl{
namespace math{

    template<class T>
    void exchange(T *a, T *b)
    {
        T temp = *a;
        *a = *b;
        *b = temp;
    }




    template<class T>
    int sgn(T n)
    {
        if( n > 0){
            return 1;
        }else if( n < 0){
            return -1;
        }else{
            return 0;
        }
    }





    double getDegreeFromRadian(double rad);
    double getRadianFromDegree(double deg);







    template<class T>
    bool isPointInRect(T px, T py, T rx0, T ry0, T rx1, T ry1)
    {
        T left = (rx0<rx1?rx0:rx1);
        T right = (rx0<rx1?rx1:rx0);
        T top = (ry0<ry1?ry0:ry1);
        T bottom = (ry0<ry1?ry1:ry0);

        if( left <= px && px <= right &&
        top <= py && py <= bottom){
            return true;
        }
        return false;
    }



    bool isLineInRect(int lx0, int ly0, int lx1, int ly1,
                        int rx0, int ry0, int rx1, int ry1);




    bool isPolygonInRect(int **points, int point_num,
                        int rx0, int ry0, int rx1, int ry1);






    double getDegreeFromVector(double dx, double dy);







    bool isNearbyPointToLine(double px, double py,
                     double lx0, double ly0, double lx1, double ly1,
                     double distance);





    bool isNearbyPoints(double px0, double py0,
                     double px1, double py1, double distance);


};
};
# 7 "../../HPLLib/HPLAlephLib.h" 2



# 1 "../../HPLLib/HPLStringModifier.h" 1






namespace hpl{
namespace string{



    std::vector<std::string> Split( std::string src, const char* key);



    std::string appendFrontString(std::string &src,
                                           int power,
                                           std::string& appender);





    std::vector<std::string> loadFromFile(const char* path);
};
};
# 11 "../../HPLLib/HPLAlephLib.h" 2

# 1 "../../HPLLib/HPLQuickSort.h" 1



namespace hpl{
namespace math{
namespace qsort{
    void quickSort(int *indexes, int max);
};
};
};
# 13 "../../HPLLib/HPLAlephLib.h" 2

# 1 "../../HPLLib/HPLSurfaceModifier.h" 1



# 1 "../../AlephOneSrc/SDL.h" 1
# 5 "../../HPLLib/HPLSurfaceModifier.h" 2

namespace hpl{
namespace surface{
    Uint32 getpixel(SDL_Surface *surface, int x, int y);

    Uint32 getpixel(Uint8* pixels, int pitch, int bpp, int x, int y);




    void putpixel(SDL_Surface *surface, int x, int y, Uint32 pixel);
};
};
# 15 "../../HPLLib/HPLAlephLib.h" 2
# 31 "General.h" 2

namespace Windows{
        enum{
                None,
                Monster,
                Effect,
                Projectile,
                Physics,
                Weapon,

                NUMBER_OF_WINDOWS
        };
};

struct stockName{
        std::string name;

};

const int NUMBER_OF_CLASS_INFORMATIONS = 16;
const int NUMBER_OF_MONSTER_ACTIVATE_INFORMATIONS = 4;
const int NUMBER_OF_MONSTER_INTELLIGENCE_INFORMATIONS = 3;
const int NUMBER_OF_MONSTER_DOOR_RETRY_MASK_INFORMATIONS = 4;
const int NUMBER_OF_MONSTER_FLAG_INFORMATIONS = 28;
const int NUMBER_OF_SPEED_INFORMATIONS = 11;
const int NUMBER_OF_EFFECT_FLAG_INFORMATIONS = 5;
const int NUMBER_OF_WEAPON_CLASS_INFORMATIONS = 5;
const int NUMBER_OF_WEAPON_FLAG_INFORMATIONS = 11;
const int NUMBER_OF_PROJECTILE_FLAG_INFORMATIONS = 22;
const int NUMBER_OF_ERROR_MESSAGE_INFORMATIONS = 3;

extern int windowType;
extern int selectedMonsterType;
extern int selectedEffectType;
extern int selectedProjectileType;
extern int selectedPhysicsType;
extern int selectedWeaponType;

extern int selectIndex;

extern struct monster_definition monster_default_definitions[NUMBER_OF_MONSTER_TYPES];
extern struct effect_definition effect_default_definitions[NUMBER_OF_EFFECT_TYPES];
extern struct projectile_definition projectile_default_definitions[NUMBER_OF_PROJECTILE_TYPES];
extern struct physics_constants physics_default_models[NUMBER_OF_PHYSICS_MODELS];
extern struct weapon_definition weapon_default_definitions[MAXIMUM_NUMBER_OF_WEAPONS];


extern std::vector<std::string> stockCollections;
extern std::vector<std::string> stockMonsterClasses;
extern std::vector<std::string> stockSpeeds;
extern std::vector<std::string> stockItemTypes;
extern std::vector<std::string> stockEffects;
extern std::vector<std::string> stockProjectiles;
extern std::vector<std::string> stockSounds;
extern std::vector<std::string> stockDamages;
extern std::vector<std::string> stockMonsterActivates;
extern std::vector<std::string> stockMonsterDoorRetryMasks;
extern std::vector<std::string> stockWeaponClasses;
extern std::vector<std::string> stockShellCasingTypes;
extern std::vector<std::string> stockPhysicsTypes;
extern std::vector<std::string> stockMonsterFlags;
extern std::vector<std::string> stockProjectileFlags;
extern std::vector<std::string> stockWeaponFlags;


extern int valueSpeed[NUMBER_OF_SPEED_INFORMATIONS];
extern int valueMonsterClasses[NUMBER_OF_CLASS_INFORMATIONS];
extern int valueIntelligences[NUMBER_OF_MONSTER_INTELLIGENCE_INFORMATIONS];
extern int valueMonsterDoorRetryMask[NUMBER_OF_MONSTER_DOOR_RETRY_MASK_INFORMATIONS];
extern int valueMonsterFlags[NUMBER_OF_MONSTER_FLAG_INFORMATIONS];
extern int valueEffectFlags[NUMBER_OF_EFFECT_FLAG_INFORMATIONS];
extern int valueWeaponFlags[NUMBER_OF_WEAPON_FLAG_INFORMATIONS];
extern int valueProjectileFlags[NUMBER_OF_PROJECTILE_FLAG_INFORMATIONS];

void setDefinitionsToDefault();
void setupDialog();
long getInteger(WSCbase* obj);



WSCbase* getObject(const char* class_name, const char* obj_name);
WSCbase* getChild(WSCbase* parent, const char* obj_name);
void messageBox(const char* format, ...);
void changeForm(int wtype);
void setValueByName(WSCbase* object);
void selectFromDialog(int selectedType, int* value, WSCbase* object,
        std::vector<std::string>& stock,
        bool isMaxNONE);
# 5 "ActivationSndBtnDownFunc.cpp" 2




void ActivationSndBtnDownFunc(WSCbase* object){

        int type = selectedMonsterType;
        bool isMaxNONE = true;
        selectFromDialog(&monster_definitions[type].activation_sound,
                object, stockSounds, isMaxNONE);
}
static WSCfunctionRegister op("ActivationSndBtnDownFunc",(void*)ActivationSndBtnDownFunc);
