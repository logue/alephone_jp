// -*- C++ -*- generated by wxGlade 0.5 on Fri Jun 29 22:39:20 2007 from C:\0save\marathon\MapEditorWX\src\res\MapEditorWX.wxg

#include "Dialogues.h"


wxDialog::wxDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: wxDialog::wxDialog
    sizer_11_staticbox = new wxStaticBox(this, -1, wxT("Controlled by"));
    sizer_12_staticbox = new wxStaticBox(this, -1, wxT("When Bites"));
    sizer_19_staticbox = new wxStaticBox(this, -1, wxT("Open"));
    sizer_28_staticbox = new wxStaticBox(this, -1, wxT("Activates"));
    sizer_27_staticbox = new wxStaticBox(this, -1, wxT("Deactivates"));
    sizer_31_staticbox = new wxStaticBox(this, -1, wxT("Misc"));
    sizer_10_staticbox = new wxStaticBox(this, -1, wxT("Initially"));
    label_1 = new wxStaticText(this, wxID_ANY, wxT("Type"));
    const wxString choice_1_choices[] = {
        
    };
    choice_1 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_1_choices, 0);
    label_2 = new wxStaticText(this, wxID_ANY, wxT("Speed"));
    text_ctrl_1 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    const wxString choice_2_choices[] = {
        
    };
    choice_2 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_2_choices, 0);
    label_3 = new wxStaticText(this, wxID_ANY, wxT("Delay"));
    text_ctrl_2 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    const wxString choice_3_choices[] = {
        
    };
    choice_3 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_3_choices, 0);
    checkbox_7 = new wxCheckBox(this, wxID_ANY, wxT("Auto Calc Min Height"));
    label_4 = new wxStaticText(this, wxID_ANY, wxT("Min Height"));
    text_ctrl_3 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    checkbox_8 = new wxCheckBox(this, wxID_ANY, wxT("Auto Clac Max Height"));
    label_5 = new wxStaticText(this, wxID_ANY, wxT("Max Height"));
    text_ctrl_4 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    checkbox_1 = new wxCheckBox(this, wxID_ANY, wxT("Active"));
    checkbox_2 = new wxCheckBox(this, wxID_ANY, wxT("Opened"));
    checkbox_3 = new wxCheckBox(this, wxID_ANY, wxT("Player"));
    checkbox_4 = new wxCheckBox(this, wxID_ANY, wxT("Aliens"));
    checkbox_5 = new wxCheckBox(this, wxID_ANY, wxT("Causes Damage"));
    checkbox_6 = new wxCheckBox(this, wxID_ANY, wxT("Reverse"));
    checkbox_9 = new wxCheckBox(this, wxID_ANY, wxT("Door"));
    label_6 = new wxStaticText(this, wxID_ANY, wxT("Default Preset"));
    const wxString choice_4_choices[] = {
        
    };
    choice_4 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_4_choices, 0);
    radio_btn_1 = new wxRadioButton(this, wxID_ANY, wxT("From Floor"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    radio_btn_2 = new wxRadioButton(this, wxID_ANY, wxT("From Ceiling"));
    radio_btn_3 = new wxRadioButton(this, wxID_ANY, wxT("From Both"));
    checkbox_10 = new wxCheckBox(this, wxID_ANY, wxT("Floor to Ceiling"));
    label_7 = new wxStaticText(this, wxID_ANY, wxT("Copy from"));
    const wxString choice_5_choices[] = {
        
    };
    choice_5 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_5_choices, 0);
    checkbox_15 = new wxCheckBox(this, wxID_ANY, wxT("Only once"));
    checkbox_16 = new wxCheckBox(this, wxID_ANY, wxT("Activates polygon lights"));
    checkbox_17 = new wxCheckBox(this, wxID_ANY, wxT("Activates adjacent polygon"));
    checkbox_18 = new wxCheckBox(this, wxID_ANY, wxT("Deactivates adjacent polygon"));
    checkbox_19 = new wxCheckBox(this, wxID_ANY, wxT("Adjacent at each level"));
    label_8 = new wxStaticText(this, wxID_ANY, wxT("Tag"));
    const wxString choice_6_choices[] = {
        
    };
    choice_6 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_6_choices, 0);
    radio_btn_4 = new wxRadioButton(this, wxID_ANY, wxT("Never"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    radio_btn_5 = new wxRadioButton(this, wxID_ANY, wxT("At each level"));
    radio_btn_6 = new wxRadioButton(this, wxID_ANY, wxT("At initial level"));
    checkbox_12 = new wxCheckBox(this, wxID_ANY, wxT("Deactivates polygon lights"));
    checkbox_13 = new wxCheckBox(this, wxID_ANY, wxT("Deactivates adjacent platform"));
    checkbox_14 = new wxCheckBox(this, wxID_ANY, wxT("Activates adjacent platform"));
    checkbox_20 = new wxCheckBox(this, wxID_ANY, wxT("Can't deactivate extenally"));
    checkbox_21 = new wxCheckBox(this, wxID_ANY, wxT("Uses native polygon heights"));
    checkbox_22 = new wxCheckBox(this, wxID_ANY, wxT("Delay befire activation"));
    checkbox_24 = new wxCheckBox(this, wxID_ANY, wxT("Doesn't activate parent"));
    checkbox_23 = new wxCheckBox(this, wxID_ANY, wxT("Contracts slower"));
    checkbox_25 = new wxCheckBox(this, wxID_ANY, wxT("Locked"));
    checkbox_26 = new wxCheckBox(this, wxID_ANY, wxT("Secret"));
    button_1 = new wxButton(this, wxID_ANY, wxT("OK"));
    button_2 = new wxButton(this, wxID_ANY, wxT("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(wxDialog, wxDialog)
    // begin wxGlade: wxDialog::event_table
    EVT_CHOICE(wxID_ANY, wxDialog::OnChoiceType)
    // end wxGlade
END_EVENT_TABLE();


void wxDialog::OnChoiceType(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (wxDialog::OnChoiceType) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add wxDialog event handlers


void wxDialog::set_properties()
{
    // begin wxGlade: wxDialog::set_properties
    SetTitle(wxT("dialog_1"));
    label_2->SetMinSize(wxSize(35, 14));
    text_ctrl_1->SetMinSize(wxSize(60, -1));
    choice_2->SetMinSize(wxSize(80, -1));
    label_3->SetMinSize(wxSize(35, 14));
    text_ctrl_2->SetMinSize(wxSize(60, -1));
    choice_3->SetMinSize(wxSize(90, -1));
    label_4->SetMinSize(wxSize(61, 14));
    label_5->SetMinSize(wxSize(61, 14));
    // end wxGlade
}


void wxDialog::do_layout()
{
    // begin wxGlade: wxDialog::do_layout
    wxFlexGridSizer* sizer_1 = new wxFlexGridSizer(2, 1, 0, 0);
    wxBoxSizer* sizer_21 = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* sizer_30 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* sizer_32 = new wxFlexGridSizer(1, 2, 0, 0);
    wxStaticBoxSizer* sizer_31 = new wxStaticBoxSizer(sizer_31_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_27 = new wxStaticBoxSizer(sizer_27_staticbox, wxVERTICAL);
    wxFlexGridSizer* sizer_26 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* sizer_29 = new wxFlexGridSizer(1, 2, 0, 0);
    wxStaticBoxSizer* sizer_28 = new wxStaticBoxSizer(sizer_28_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* sizer_16 = new wxFlexGridSizer(3, 1, 0, 0);
    wxBoxSizer* sizer_18 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_20 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_19 = new wxStaticBoxSizer(sizer_19_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_17 = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* sizer_3 = new wxFlexGridSizer(2, 1, 0, 0);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_12 = new wxStaticBoxSizer(sizer_12_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_11 = new wxStaticBoxSizer(sizer_11_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_10 = new wxStaticBoxSizer(sizer_10_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_13 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_15 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_14 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* sizer_7 = new wxFlexGridSizer(1, 2, 0, 0);
    sizer_7->Add(label_1, 0, 0, 0);
    sizer_7->Add(choice_1, 0, 0, 0);
    sizer_6->Add(sizer_7, 1, wxEXPAND, 0);
    sizer_8->Add(label_2, 0, 0, 0);
    sizer_8->Add(text_ctrl_1, 0, 0, 0);
    sizer_8->Add(choice_2, 0, 0, 0);
    sizer_6->Add(sizer_8, 1, 0, 0);
    sizer_9->Add(label_3, 0, 0, 0);
    sizer_9->Add(text_ctrl_2, 0, 0, 0);
    sizer_9->Add(choice_3, 0, 0, 0);
    sizer_6->Add(sizer_9, 1, 0, 0);
    sizer_5->Add(sizer_6, 1, wxEXPAND, 0);
    sizer_13->Add(checkbox_7, 0, 0, 0);
    sizer_14->Add(label_4, 0, 0, 0);
    sizer_14->Add(text_ctrl_3, 0, 0, 0);
    sizer_13->Add(sizer_14, 1, 0, 0);
    sizer_13->Add(checkbox_8, 0, 0, 0);
    sizer_15->Add(label_5, 0, 0, 0);
    sizer_15->Add(text_ctrl_4, 0, 0, 0);
    sizer_13->Add(sizer_15, 1, 0, 0);
    sizer_5->Add(sizer_13, 1, 0, 0);
    sizer_3->Add(sizer_5, 1, wxEXPAND, 0);
    sizer_10->Add(checkbox_1, 0, 0, 0);
    sizer_10->Add(checkbox_2, 0, 0, 0);
    sizer_4->Add(sizer_10, 1, wxEXPAND, 0);
    sizer_11->Add(checkbox_3, 0, 0, 0);
    sizer_11->Add(checkbox_4, 0, 0, 0);
    sizer_4->Add(sizer_11, 1, wxEXPAND, 0);
    sizer_12->Add(checkbox_5, 0, 0, 0);
    sizer_12->Add(checkbox_6, 0, 0, 0);
    sizer_4->Add(sizer_12, 1, wxEXPAND, 0);
    sizer_3->Add(sizer_4, 1, wxEXPAND, 0);
    sizer_2->Add(sizer_3, 1, wxEXPAND, 0);
    sizer_16->Add(checkbox_9, 0, 0, 0);
    sizer_17->Add(label_6, 0, 0, 0);
    sizer_17->Add(choice_4, 0, 0, 0);
    sizer_16->Add(sizer_17, 1, wxEXPAND, 0);
    sizer_19->Add(radio_btn_1, 0, 0, 0);
    sizer_19->Add(radio_btn_2, 0, 0, 0);
    sizer_19->Add(radio_btn_3, 0, 0, 0);
    sizer_19->Add(checkbox_10, 0, 0, 0);
    sizer_18->Add(sizer_19, 1, wxEXPAND, 0);
    sizer_20->Add(label_7, 0, 0, 0);
    sizer_20->Add(choice_5, 0, 0, 0);
    sizer_18->Add(sizer_20, 1, wxEXPAND, 0);
    sizer_16->Add(sizer_18, 1, wxEXPAND, 0);
    sizer_2->Add(sizer_16, 1, wxEXPAND, 0);
    sizer_1->Add(sizer_2, 1, wxEXPAND, 0);
    sizer_28->Add(checkbox_15, 0, 0, 0);
    sizer_28->Add(checkbox_16, 0, 0, 0);
    sizer_28->Add(checkbox_17, 0, 0, 0);
    sizer_28->Add(checkbox_18, 0, 0, 0);
    sizer_28->Add(checkbox_19, 0, 0, 0);
    sizer_26->Add(sizer_28, 1, wxEXPAND, 0);
    sizer_29->Add(label_8, 0, 0, 0);
    sizer_29->Add(choice_6, 0, 0, 0);
    sizer_26->Add(sizer_29, 1, wxEXPAND, 0);
    sizer_21->Add(sizer_26, 1, wxEXPAND, 0);
    sizer_27->Add(radio_btn_4, 0, 0, 0);
    sizer_27->Add(radio_btn_5, 0, 0, 0);
    sizer_27->Add(radio_btn_6, 0, 0, 0);
    sizer_27->Add(checkbox_12, 0, 0, 0);
    sizer_27->Add(checkbox_13, 0, 0, 0);
    sizer_27->Add(checkbox_14, 0, 0, 0);
    sizer_21->Add(sizer_27, 1, wxEXPAND, 0);
    sizer_31->Add(checkbox_20, 0, 0, 0);
    sizer_31->Add(checkbox_21, 0, 0, 0);
    sizer_31->Add(checkbox_22, 0, 0, 0);
    sizer_31->Add(checkbox_24, 0, 0, 0);
    sizer_31->Add(checkbox_23, 0, 0, 0);
    sizer_31->Add(checkbox_25, 0, 0, 0);
    sizer_31->Add(checkbox_26, 0, 0, 0);
    sizer_30->Add(sizer_31, 1, wxEXPAND, 0);
    sizer_32->Add(button_1, 0, 0, 0);
    sizer_32->Add(button_2, 0, 0, 0);
    sizer_30->Add(sizer_32, 1, wxEXPAND, 0);
    sizer_21->Add(sizer_30, 1, 0, 0);
    sizer_1->Add(sizer_21, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    Layout();
    // end wxGlade
}


HeightDialog1::HeightDialog1(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: HeightDialog1::HeightDialog1
    label_9 = new wxStaticText(this, wxID_ANY, wxT("Floor"));
    text_ctrl_5 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    slider_2 = new wxSlider(this, wxID_ANY, 0, 0, 10, wxDefaultPosition, wxDefaultSize, wxSL_VERTICAL);
    slider_3 = new wxSlider(this, wxID_ANY, 0, 0, 10, wxDefaultPosition, wxDefaultSize, wxSL_VERTICAL);
    label_10 = new wxStaticText(this, wxID_ANY, wxT("Ceiling"));
    text_ctrl_6 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    checkbox_11 = new wxCheckBox(this, wxID_ANY, wxT("Draw hidden lines"));

    set_properties();
    do_layout();
    // end wxGlade
}


void HeightDialog1::set_properties()
{
    // begin wxGlade: HeightDialog1::set_properties
    SetTitle(wxT("dialog_2"));
    text_ctrl_5->SetMinSize(wxSize(50, -1));
    slider_2->SetMinSize(wxSize(-1, 200));
    slider_3->SetMinSize(wxSize(-1, 200));
    text_ctrl_6->SetMinSize(wxSize(50, -1));
    // end wxGlade
}


void HeightDialog1::do_layout()
{
    // begin wxGlade: HeightDialog1::do_layout
    wxBoxSizer* sizer_22 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_23 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_25 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_24 = new wxBoxSizer(wxVERTICAL);
    sizer_24->Add(label_9, 0, 0, 0);
    sizer_24->Add(text_ctrl_5, 0, 0, 0);
    sizer_23->Add(sizer_24, 1, wxEXPAND, 0);
    sizer_23->Add(slider_2, 0, 0, 0);
    sizer_23->Add(slider_3, 0, 0, 0);
    sizer_25->Add(label_10, 0, 0, 0);
    sizer_25->Add(text_ctrl_6, 0, 0, 0);
    sizer_23->Add(sizer_25, 1, wxEXPAND, 0);
    sizer_22->Add(sizer_23, 1, wxEXPAND, 0);
    sizer_22->Add(checkbox_11, 0, 0, 0);
    SetSizer(sizer_22);
    sizer_22->Fit(this);
    Layout();
    // end wxGlade
}


AnnotationDialog::AnnotationDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: AnnotationDialog::AnnotationDialog
    label_12 = new wxStaticText(this, wxID_ANY, wxT("Type"));
    const wxString choice_8_choices[] = {
        wxT("Normal")
    };
    choice_8 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, choice_8_choices, 0);
    text_ctrl_7 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxHSCROLL);
    label_11 = new wxStaticText(this, wxID_ANY, wxT("Dependency polygon index"));
    const wxString choice_7_choices[] = {
        
    };
    choice_7 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_7_choices, 0);
    button_3 = new wxButton(this, wxID_ANY, wxT("OK"));
    button_4 = new wxButton(this, wxID_ANY, wxT("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
}


void AnnotationDialog::set_properties()
{
    // begin wxGlade: AnnotationDialog::set_properties
    SetTitle(wxT("dialog_3"));
    choice_8->SetSelection(0);
    text_ctrl_7->SetMinSize(wxSize(250, 60));
    // end wxGlade
}


void AnnotationDialog::do_layout()
{
    // begin wxGlade: AnnotationDialog::do_layout
    wxFlexGridSizer* sizer_33 = new wxFlexGridSizer(4, 1, 0, 0);
    wxBoxSizer* sizer_34 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_35 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_36 = new wxBoxSizer(wxHORIZONTAL);
    sizer_36->Add(label_12, 0, 0, 0);
    sizer_36->Add(choice_8, 0, 0, 0);
    sizer_33->Add(sizer_36, 1, wxEXPAND, 0);
    sizer_33->Add(text_ctrl_7, 0, wxEXPAND, 0);
    sizer_35->Add(label_11, 0, 0, 0);
    sizer_35->Add(choice_7, 0, 0, 0);
    sizer_33->Add(sizer_35, 1, wxEXPAND, 0);
    sizer_34->Add(button_3, 0, 0, 0);
    sizer_34->Add(button_4, 0, 0, 0);
    sizer_33->Add(sizer_34, 1, wxEXPAND, 0);
    SetSizer(sizer_33);
    sizer_33->Fit(this);
    Layout();
    // end wxGlade
}


ColorCustomize::ColorCustomize(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: ColorCustomize::ColorCustomize
    label_13 = new wxStaticText(this, wxID_ANY, wxT("Background"));
    button_7 = new wxButton(this, wxID_ANY, wxT("Choose color"));
    panel_1 = new wxPanel(this, wxID_ANY);
    label_14 = new wxStaticText(this, wxID_ANY, wxT("Grid line"));
    button_8 = new wxButton(this, wxID_ANY, wxT("Choose color"));
    panel_2 = new wxPanel(this, wxID_ANY);
    label_16 = new wxStaticText(this, wxID_ANY, wxT("Lines"));
    button_9 = new wxButton(this, wxID_ANY, wxT("Choose color"));
    panel_3 = new wxPanel(this, wxID_ANY);
    label_15 = new wxStaticText(this, wxID_ANY, wxT("Polygons"));
    button_10 = new wxButton(this, wxID_ANY, wxT("Choose color"));
    panel_4 = new wxPanel(this, wxID_ANY);
    label_17 = new wxStaticText(this, wxID_ANY, wxT("Strings"));
    button_11 = new wxButton(this, wxID_ANY, wxT("Choose color"));
    panel_5 = new wxPanel(this, wxID_ANY);
    label_18 = new wxStaticText(this, wxID_ANY, wxT("Points"));
    button_12 = new wxButton(this, wxID_ANY, wxT("Choose color"));
    panel_6 = new wxPanel(this, wxID_ANY);
    button_5 = new wxButton(this, wxID_ANY, wxT("OK"));
    button_6 = new wxButton(this, wxID_ANY, wxT("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(ColorCustomize, wxDialog)
    // begin wxGlade: ColorCustomize::event_table
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnBackground)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnGrid)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnLines)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnPolygons)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnStrings)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnPoints)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnOk)
    EVT_BUTTON(wxID_ANY, ColorCustomize::OnCancel)
    // end wxGlade
END_EVENT_TABLE();


void ColorCustomize::OnBackground(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnBackground) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnGrid(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnGrid) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnLines(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnLines) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnPolygons(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnPolygons) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnStrings(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnStrings) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnPoints(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnPoints) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnOk(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnOk) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ColorCustomize::OnCancel(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ColorCustomize::OnCancel) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add ColorCustomize event handlers


void ColorCustomize::set_properties()
{
    // begin wxGlade: ColorCustomize::set_properties
    SetTitle(wxT("dialog_4"));
    // end wxGlade
}


void ColorCustomize::do_layout()
{
    // begin wxGlade: ColorCustomize::do_layout
    wxFlexGridSizer* sizer_37 = new wxFlexGridSizer(7, 1, 0, 0);
    wxBoxSizer* sizer_44 = new wxBoxSizer(wxHORIZONTAL);
    wxGridSizer* sizer_43 = new wxGridSizer(1, 3, 0, 0);
    wxGridSizer* sizer_42 = new wxGridSizer(1, 3, 0, 0);
    wxGridSizer* sizer_41 = new wxGridSizer(1, 3, 0, 0);
    wxGridSizer* sizer_40 = new wxGridSizer(1, 3, 0, 0);
    wxGridSizer* sizer_39 = new wxGridSizer(1, 3, 0, 0);
    wxGridSizer* sizer_38 = new wxGridSizer(1, 3, 0, 0);
    sizer_38->Add(label_13, 0, 0, 0);
    sizer_38->Add(button_7, 0, 0, 0);
    sizer_38->Add(panel_1, 1, wxEXPAND, 0);
    sizer_37->Add(sizer_38, 1, wxEXPAND, 0);
    sizer_39->Add(label_14, 0, 0, 0);
    sizer_39->Add(button_8, 0, 0, 0);
    sizer_39->Add(panel_2, 1, wxEXPAND, 0);
    sizer_37->Add(sizer_39, 1, wxEXPAND, 0);
    sizer_40->Add(label_16, 0, 0, 0);
    sizer_40->Add(button_9, 0, 0, 0);
    sizer_40->Add(panel_3, 1, wxEXPAND, 0);
    sizer_37->Add(sizer_40, 1, wxEXPAND, 0);
    sizer_41->Add(label_15, 0, 0, 0);
    sizer_41->Add(button_10, 0, 0, 0);
    sizer_41->Add(panel_4, 1, wxEXPAND, 0);
    sizer_37->Add(sizer_41, 1, wxEXPAND, 0);
    sizer_42->Add(label_17, 0, 0, 0);
    sizer_42->Add(button_11, 0, 0, 0);
    sizer_42->Add(panel_5, 1, wxEXPAND, 0);
    sizer_37->Add(sizer_42, 1, wxEXPAND, 0);
    sizer_43->Add(label_18, 0, 0, 0);
    sizer_43->Add(button_12, 0, 0, 0);
    sizer_43->Add(panel_6, 1, wxEXPAND, 0);
    sizer_37->Add(sizer_43, 1, wxEXPAND, 0);
    sizer_44->Add(button_5, 0, 0, 0);
    sizer_44->Add(button_6, 0, 0, 0);
    sizer_37->Add(sizer_44, 1, wxEXPAND, 0);
    SetSizer(sizer_37);
    sizer_37->Fit(this);
    Layout();
    // end wxGlade
}


EditorPreferences::EditorPreferences(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: EditorPreferences::EditorPreferences
    label_19 = new wxStaticText(this, wxID_ANY, wxT("Grid size"));
    const wxString choice_9_choices[] = {
        
    };
    choice_9 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_9_choices, 0);
    checkbox_27 = new wxCheckBox(this, wxID_ANY, wxT("Show grid"));
    checkbox_28 = new wxCheckBox(this, wxID_ANY, wxT("Fit to grid"));
    checkbox_31 = new wxCheckBox(this, wxID_ANY, wxT("Show monsters"));
    checkbox_30 = new wxCheckBox(this, wxID_ANY, wxT("Show items"));
    checkbox_32 = new wxCheckBox(this, wxID_ANY, wxT("Show scenery"));
    checkbox_33 = new wxCheckBox(this, wxID_ANY, wxT("Show players"));
    checkbox_34 = new wxCheckBox(this, wxID_ANY, wxT("Show goals"));
    checkbox_35 = new wxCheckBox(this, wxID_ANY, wxT("Show sounds"));
    checkbox_36 = new wxCheckBox(this, wxID_ANY, wxT("Show annotations"));
    checkbox_29 = new wxCheckBox(this, wxID_ANY, wxT("Visual mode-Crossfair"));
    label_20 = new wxStaticText(this, wxID_ANY, wxT("Color set"));
    const wxString choice_10_choices[] = {
        
    };
    choice_10 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_10_choices, 0);
    checkbox_37 = new wxCheckBox(this, wxID_ANY, wxT("Show polygons"));
    checkbox_38 = new wxCheckBox(this, wxID_ANY, wxT("Show lines"));
    button_15 = new wxButton(this, wxID_ANY, wxT("Set as default"));
    button_13 = new wxButton(this, wxID_ANY, wxT("OK"));
    button_14 = new wxButton(this, wxID_ANY, wxT("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(EditorPreferences, wxDialog)
    // begin wxGlade: EditorPreferences::event_table
    EVT_BUTTON(wxID_ANY, EditorPreferences::OnDefault)
    EVT_BUTTON(wxID_ANY, EditorPreferences::OnOk)
    EVT_BUTTON(wxID_ANY, EditorPreferences::OnCancel)
    // end wxGlade
END_EVENT_TABLE();


void EditorPreferences::OnDefault(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (EditorPreferences::OnDefault) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void EditorPreferences::OnOk(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (EditorPreferences::OnOk) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void EditorPreferences::OnCancel(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (EditorPreferences::OnCancel) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add EditorPreferences event handlers


void EditorPreferences::set_properties()
{
    // begin wxGlade: EditorPreferences::set_properties
    SetTitle(wxT("dialog_5"));
    // end wxGlade
}


void EditorPreferences::do_layout()
{
    // begin wxGlade: EditorPreferences::do_layout
    wxFlexGridSizer* sizer_45 = new wxFlexGridSizer(3, 1, 0, 0);
    wxBoxSizer* sizer_48 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_47 = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* sizer_50 = new wxFlexGridSizer(3, 1, 0, 0);
    wxBoxSizer* sizer_51 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_49 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_46 = new wxBoxSizer(wxHORIZONTAL);
    sizer_46->Add(label_19, 0, 0, 0);
    sizer_46->Add(choice_9, 0, 0, 0);
    sizer_45->Add(sizer_46, 1, wxEXPAND, 0);
    sizer_49->Add(checkbox_27, 0, 0, 0);
    sizer_49->Add(checkbox_28, 0, 0, 0);
    sizer_49->Add(checkbox_31, 0, 0, 0);
    sizer_49->Add(checkbox_30, 0, 0, 0);
    sizer_49->Add(checkbox_32, 0, 0, 0);
    sizer_49->Add(checkbox_33, 0, 0, 0);
    sizer_49->Add(checkbox_34, 0, 0, 0);
    sizer_49->Add(checkbox_35, 0, 0, 0);
    sizer_49->Add(checkbox_36, 0, 0, 0);
    sizer_49->Add(checkbox_29, 0, 0, 0);
    sizer_47->Add(sizer_49, 1, wxEXPAND, 0);
    sizer_51->Add(label_20, 0, 0, 0);
    sizer_51->Add(choice_10, 0, 0, 0);
    sizer_50->Add(sizer_51, 1, wxEXPAND, 0);
    sizer_50->Add(checkbox_37, 0, 0, 0);
    sizer_50->Add(checkbox_38, 0, 0, 0);
    sizer_50->Add(button_15, 0, 0, 0);
    sizer_47->Add(sizer_50, 1, wxEXPAND, 0);
    sizer_45->Add(sizer_47, 1, wxEXPAND, 0);
    sizer_48->Add(button_13, 0, 0, 0);
    sizer_48->Add(button_14, 0, 0, 0);
    sizer_45->Add(sizer_48, 1, wxEXPAND, 0);
    SetSizer(sizer_45);
    sizer_45->Fit(this);
    Layout();
    // end wxGlade
}


PlacementDialog::PlacementDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: PlacementDialog::PlacementDialog
    label_21 = new wxStaticText(this, wxID_ANY, wxT("Initial"));
    text_ctrl_8 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_22 = new wxStaticText(this, wxID_ANY, wxT("Minimum"));
    text_ctrl_9 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_23 = new wxStaticText(this, wxID_ANY, wxT("Maximum"));
    text_ctrl_10 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_24 = new wxStaticText(this, wxID_ANY, wxT("Random count"));
    text_ctrl_11 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_25 = new wxStaticText(this, wxID_ANY, wxT("Random chance"));
    text_ctrl_12 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    button_17 = new wxButton(this, wxID_ANY, wxT("Supply this infinitly"));
    button_18 = new wxButton(this, wxID_ANY, wxT("We cannot exterminate all monsters"));
    button_19 = new wxButton(this, wxID_ANY, wxT("Set the number of monster to initial"));
    checkbox_39 = new wxCheckBox(this, wxID_ANY, wxT("place at random location"));
    list_ctrl_1 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    button_16 = new wxButton(this, wxID_ANY, wxT("OK"));

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(PlacementDialog, wxDialog)
    // begin wxGlade: PlacementDialog::event_table
    EVT_TEXT(wxID_ANY, PlacementDialog::OnEditInitial)
    EVT_TEXT(wxID_ANY, PlacementDialog::OnEditMinimum)
    EVT_TEXT(wxID_ANY, PlacementDialog::OnEditMaximum)
    EVT_TEXT(wxID_ANY, PlacementDialog::OnEditRandomCount)
    EVT_TEXT(wxID_ANY, PlacementDialog::OnRandomChance)
    EVT_BUTTON(wxID_ANY, PlacementDialog::OnOk)
    // end wxGlade
END_EVENT_TABLE();


void PlacementDialog::OnEditInitial(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PlacementDialog::OnEditInitial) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PlacementDialog::OnEditMinimum(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PlacementDialog::OnEditMinimum) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PlacementDialog::OnEditMaximum(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PlacementDialog::OnEditMaximum) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PlacementDialog::OnEditRandomCount(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PlacementDialog::OnEditRandomCount) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PlacementDialog::OnRandomChance(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PlacementDialog::OnRandomChance) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PlacementDialog::OnOk(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PlacementDialog::OnOk) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add PlacementDialog event handlers


void PlacementDialog::set_properties()
{
    // begin wxGlade: PlacementDialog::set_properties
    SetTitle(wxT("dialog_6"));
    list_ctrl_1->SetMinSize(wxSize(600, 300));
    // end wxGlade
}


void PlacementDialog::do_layout()
{
    // begin wxGlade: PlacementDialog::do_layout
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(3, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_2 = new wxFlexGridSizer(1, 3, 0, 0);
    wxFlexGridSizer* grid_sizer_4 = new wxFlexGridSizer(4, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_3 = new wxFlexGridSizer(5, 2, 0, 0);
    grid_sizer_3->Add(label_21, 0, 0, 0);
    grid_sizer_3->Add(text_ctrl_8, 0, 0, 0);
    grid_sizer_3->Add(label_22, 0, 0, 0);
    grid_sizer_3->Add(text_ctrl_9, 0, 0, 0);
    grid_sizer_3->Add(label_23, 0, 0, 0);
    grid_sizer_3->Add(text_ctrl_10, 0, 0, 0);
    grid_sizer_3->Add(label_24, 0, 0, 0);
    grid_sizer_3->Add(text_ctrl_11, 0, 0, 0);
    grid_sizer_3->Add(label_25, 0, 0, 0);
    grid_sizer_3->Add(text_ctrl_12, 0, 0, 0);
    grid_sizer_2->Add(grid_sizer_3, 1, wxEXPAND, 0);
    grid_sizer_4->Add(button_17, 0, 0, 0);
    grid_sizer_4->Add(button_18, 0, 0, 0);
    grid_sizer_4->Add(button_19, 0, 0, 0);
    grid_sizer_4->Add(checkbox_39, 0, 0, 0);
    grid_sizer_2->Add(grid_sizer_4, 1, wxEXPAND, 0);
    grid_sizer_1->Add(grid_sizer_2, 1, wxEXPAND, 0);
    grid_sizer_1->Add(list_ctrl_1, 1, wxEXPAND, 0);
    grid_sizer_1->Add(button_16, 0, wxALIGN_RIGHT, 0);
    SetSizer(grid_sizer_1);
    grid_sizer_1->Fit(this);
    Layout();
    // end wxGlade
}


TerminalDialog::TerminalDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: TerminalDialog::TerminalDialog
    const wxString list_box_1_choices[] = {
        
    };
    list_box_1 = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, list_box_1_choices, 0);
    const wxString list_box_2_choices[] = {
        
    };
    list_box_2 = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, list_box_2_choices, 0);
    const wxString list_box_3_choices[] = {
        
    };
    list_box_3 = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, list_box_3_choices, 0);
    panel_7 = new wxPanel(this, wxID_ANY);
    text_ctrl_13 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
    button_20 = new wxButton(this, wxID_OK, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(TerminalDialog, wxDialog)
    // begin wxGlade: TerminalDialog::event_table
    EVT_LISTBOX(wxID_ANY, TerminalDialog::OnSelTerminal)
    EVT_LISTBOX(wxID_ANY, TerminalDialog::OnSelScreen)
    EVT_LISTBOX(wxID_ANY, TerminalDialog::OnSelInfo)
    EVT_TEXT(wxID_ANY, TerminalDialog::OnEdit)
    EVT_BUTTON(wxID_ANY, TerminalDialog::OnOk)
    // end wxGlade
END_EVENT_TABLE();


void TerminalDialog::OnSelTerminal(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (TerminalDialog::OnSelTerminal) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void TerminalDialog::OnSelScreen(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (TerminalDialog::OnSelScreen) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void TerminalDialog::OnSelInfo(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (TerminalDialog::OnSelInfo) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void TerminalDialog::OnEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (TerminalDialog::OnEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void TerminalDialog::OnOk(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (TerminalDialog::OnOk) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add TerminalDialog event handlers


void TerminalDialog::set_properties()
{
    // begin wxGlade: TerminalDialog::set_properties
    SetTitle(wxT("dialog_7"));
    list_box_1->SetMinSize(wxSize(-1, 200));
    list_box_2->SetMinSize(wxSize(-1, 100));
    panel_7->SetMinSize(wxSize(500, 200));
    text_ctrl_13->SetMinSize(wxSize(500, 200));
    // end wxGlade
}


void TerminalDialog::do_layout()
{
    // begin wxGlade: TerminalDialog::do_layout
    wxFlexGridSizer* grid_sizer_5 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_7 = new wxFlexGridSizer(3, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_6 = new wxFlexGridSizer(3, 1, 0, 0);
    grid_sizer_6->Add(list_box_1, 0, 0, 0);
    grid_sizer_6->Add(list_box_2, 0, 0, 0);
    grid_sizer_6->Add(list_box_3, 0, 0, 0);
    grid_sizer_5->Add(grid_sizer_6, 1, wxEXPAND, 0);
    grid_sizer_7->Add(panel_7, 1, wxEXPAND, 0);
    grid_sizer_7->Add(text_ctrl_13, 0, 0, 0);
    grid_sizer_7->Add(button_20, 0, wxALIGN_RIGHT, 0);
    grid_sizer_5->Add(grid_sizer_7, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_5);
    grid_sizer_5->Fit(this);
    Layout();
    // end wxGlade
}


PointPropDialog::PointPropDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: PointPropDialog::PointPropDialog
    sizer_52_staticbox = new wxStaticBox(this, -1, wxT("Flags"));
    radio_btn_7 = new wxRadioButton(this, wxID_ANY, wxT("Solid"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    radio_btn_8 = new wxRadioButton(this, wxID_ANY, wxT("Transparent"));
    checkbox_40 = new wxCheckBox(this, wxID_ANY, wxT("Elevation"));
    label_29 = new wxStaticText(this, wxID_ANY, wxT("Floor height"));
    text_ctrl_14 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    panel_8 = new wxPanel(this, wxID_ANY);
    label_30 = new wxStaticText(this, wxID_ANY, wxT("Ceiling hegiht"));
    text_ctrl_15 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    panel_9 = new wxPanel(this, wxID_ANY);
    label_31 = new wxStaticText(this, wxID_ANY, wxT("Vertex"));
    text_ctrl_16 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    text_ctrl_18 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_32 = new wxStaticText(this, wxID_ANY, wxT("Transformed"));
    text_ctrl_17 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    text_ctrl_19 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_33 = new wxStaticText(this, wxID_ANY, wxT("Supporting polygon index"));
    const wxString choice_11_choices[] = {
        
    };
    choice_11 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_11_choices, 0);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(PointPropDialog, wxDialog)
    // begin wxGlade: PointPropDialog::event_table
    EVT_RADIOBUTTON(wxID_ANY, PointPropDialog::OnSlidBtn)
    EVT_RADIOBUTTON(wxID_ANY, PointPropDialog::OnTransBtn)
    EVT_CHECKBOX(wxID_ANY, PointPropDialog::OnElevationBtn)
    EVT_TEXT(wxID_ANY, PointPropDialog::OnEditFloor)
    EVT_TEXT(wxID_ANY, PointPropDialog::OnEditCeiling)
    EVT_TEXT(wxID_ANY, PointPropDialog::OnEdit)
    EVT_TEXT(wxID_ANY, PointPropDialog::OnEditY)
    EVT_TEXT(wxID_ANY, PointPropDialog::OnEditTX)
    EVT_TEXT(wxID_ANY, PointPropDialog::OnEditTY)
    EVT_CHOICE(wxID_ANY, PointPropDialog::OnPolyChoice)
    // end wxGlade
END_EVENT_TABLE();


void PointPropDialog::OnSlidBtn(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnSlidBtn) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnTransBtn(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnTransBtn) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnElevationBtn(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnElevationBtn) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnEditFloor(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnEditFloor) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnEditCeiling(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnEditCeiling) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnEditY(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnEditY) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnEditTX(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnEditTX) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnEditTY(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnEditTY) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PointPropDialog::OnPolyChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PointPropDialog::OnPolyChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add PointPropDialog event handlers


void PointPropDialog::set_properties()
{
    // begin wxGlade: PointPropDialog::set_properties
    SetTitle(wxT("dialog_8"));
    // end wxGlade
}


void PointPropDialog::do_layout()
{
    // begin wxGlade: PointPropDialog::do_layout
    wxFlexGridSizer* grid_sizer_10 = new wxFlexGridSizer(3, 1, 0, 0);
    wxGridSizer* grid_sizer_12 = new wxGridSizer(1, 2, 0, 0);
    wxGridSizer* grid_sizer_11 = new wxGridSizer(4, 3, 0, 0);
    wxStaticBoxSizer* sizer_52 = new wxStaticBoxSizer(sizer_52_staticbox, wxVERTICAL);
    sizer_52->Add(radio_btn_7, 0, 0, 0);
    sizer_52->Add(radio_btn_8, 0, 0, 0);
    sizer_52->Add(checkbox_40, 0, 0, 0);
    grid_sizer_10->Add(sizer_52, 1, wxEXPAND, 0);
    grid_sizer_11->Add(label_29, 0, 0, 0);
    grid_sizer_11->Add(text_ctrl_14, 0, 0, 0);
    grid_sizer_11->Add(panel_8, 1, wxEXPAND, 0);
    grid_sizer_11->Add(label_30, 0, 0, 0);
    grid_sizer_11->Add(text_ctrl_15, 0, 0, 0);
    grid_sizer_11->Add(panel_9, 1, wxEXPAND, 0);
    grid_sizer_11->Add(label_31, 0, 0, 0);
    grid_sizer_11->Add(text_ctrl_16, 0, 0, 0);
    grid_sizer_11->Add(text_ctrl_18, 0, 0, 0);
    grid_sizer_11->Add(label_32, 0, 0, 0);
    grid_sizer_11->Add(text_ctrl_17, 0, 0, 0);
    grid_sizer_11->Add(text_ctrl_19, 0, 0, 0);
    grid_sizer_10->Add(grid_sizer_11, 1, wxEXPAND, 0);
    grid_sizer_12->Add(label_33, 0, 0, 0);
    grid_sizer_12->Add(choice_11, 0, 0, 0);
    grid_sizer_10->Add(grid_sizer_12, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_10);
    grid_sizer_10->Fit(this);
    Layout();
    // end wxGlade
}


PolygonPropDialog::PolygonPropDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: PolygonPropDialog::PolygonPropDialog
    label_34 = new wxStaticText(this, wxID_ANY, wxT("Polygon ID"));
    text_ctrl_20 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_46 = new wxStaticText(this, wxID_ANY, wxT("First neighbour"));
    text_ctrl_21 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_35 = new wxStaticText(this, wxID_ANY, wxT("Type"));
    const wxString choice_12_choices[] = {
        
    };
    choice_12 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_12_choices, 0);
    label_47 = new wxStaticText(this, wxID_ANY, wxT("Near count"));
    text_ctrl_22 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_36 = new wxStaticText(this, wxID_ANY, wxT("Permutation"));
    text_ctrl_25 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_48 = new wxStaticText(this, wxID_ANY, wxT("Center X"));
    text_ctrl_23 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_37 = new wxStaticText(this, wxID_ANY, wxT("Floor light"));
    const wxString choice_13_choices[] = {
        
    };
    choice_13 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_13_choices, 0);
    label_49 = new wxStaticText(this, wxID_ANY, wxT("Center Y"));
    text_ctrl_24 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_38 = new wxStaticText(this, wxID_ANY, wxT("Ceiling light"));
    const wxString choice_14_choices[] = {
        
    };
    choice_14 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_14_choices, 0);
    label_26 = new wxStaticText(this, wxID_ANY, wxT("Floor origin"));
    text_ctrl_33 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_27 = new wxStaticText(this, wxID_ANY, wxT("x"));
    text_ctrl_35 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_39 = new wxStaticText(this, wxID_ANY, wxT("Area"));
    text_ctrl_26 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_55 = new wxStaticText(this, wxID_ANY, wxT("Ceiling origin"));
    text_ctrl_34 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_28 = new wxStaticText(this, wxID_ANY, wxT("x"));
    text_ctrl_36 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_40 = new wxStaticText(this, wxID_ANY, wxT("First object"));
    const wxString choice_19_choices[] = {
        
    };
    choice_19 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_19_choices, 0);
    label_54 = new wxStaticText(this, wxID_ANY, wxT("Media"));
    const wxString choice_15_choices[] = {
        
    };
    choice_15 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_15_choices, 0);
    label_41 = new wxStaticText(this, wxID_ANY, wxT("First ex zone"));
    text_ctrl_28 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_53 = new wxStaticText(this, wxID_ANY, wxT("Media light"));
    const wxString choice_16_choices[] = {
        
    };
    choice_16 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_16_choices, 0);
    label_42 = new wxStaticText(this, wxID_ANY, wxT("Line ex zone"));
    text_ctrl_29 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_52 = new wxStaticText(this, wxID_ANY, wxT("Snd src index"));
    const wxString choice_20_choices[] = {
        
    };
    choice_20 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_20_choices, 0);
    label_43 = new wxStaticText(this, wxID_ANY, wxT("Floor trans"));
    text_ctrl_30 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_51 = new wxStaticText(this, wxID_ANY, wxT("Amb snd"));
    const wxString choice_17_choices[] = {
        
    };
    choice_17 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_17_choices, 0);
    label_44 = new wxStaticText(this, wxID_ANY, wxT("Ceiling trans"));
    text_ctrl_31 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_50 = new wxStaticText(this, wxID_ANY, wxT("Rnd snd"));
    const wxString choice_18_choices[] = {
        
    };
    choice_18 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_18_choices, 0);
    button_21 = new wxButton(this, wxID_ANY, wxT("Platform settings"));
    panel_10 = new wxPanel(this, wxID_ANY);
    panel_11 = new wxPanel(this, wxID_ANY);
    panel_12 = new wxPanel(this, wxID_ANY);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(PolygonPropDialog, wxDialog)
    // begin wxGlade: PolygonPropDialog::event_table
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnIDEdit)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnFirstNeighborEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnTypeChoice)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnNearCountEdit)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnPermuEdit)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnCenterXEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnFloorLightEdit)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnCenterYEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnCeilingLightEdit)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnFloorOriginXEdit)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnFloorOriginY)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnAreaEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnFirstObjChoice)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnMediaChoice)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnFirstExZoneEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnMediaLightChoice)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnLineExZoneEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnSndSrcIndexChoice)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnFloorTransEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnAmbSndChoice)
    EVT_TEXT(wxID_ANY, PolygonPropDialog::OnCeilingTransEdit)
    EVT_CHOICE(wxID_ANY, PolygonPropDialog::OnRndSndChoice)
    EVT_BUTTON(wxID_ANY, PolygonPropDialog::OnPlatformBtn)
    // end wxGlade
END_EVENT_TABLE();


void PolygonPropDialog::OnIDEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnIDEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFirstNeighborEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFirstNeighborEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnTypeChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnTypeChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnNearCountEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnNearCountEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnPermuEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnPermuEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnCenterXEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnCenterXEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFloorLightEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFloorLightEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnCenterYEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnCenterYEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnCeilingLightEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnCeilingLightEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFloorOriginXEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFloorOriginXEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFloorOriginY(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFloorOriginY) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnAreaEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnAreaEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFirstObjChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFirstObjChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnMediaChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnMediaChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFirstExZoneEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFirstExZoneEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnMediaLightChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnMediaLightChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnLineExZoneEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnLineExZoneEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnSndSrcIndexChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnSndSrcIndexChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnFloorTransEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnFloorTransEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnAmbSndChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnAmbSndChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnCeilingTransEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnCeilingTransEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnRndSndChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnRndSndChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonPropDialog::OnPlatformBtn(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonPropDialog::OnPlatformBtn) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add PolygonPropDialog event handlers


void PolygonPropDialog::set_properties()
{
    // begin wxGlade: PolygonPropDialog::set_properties
    SetTitle(wxT("Polygon property"));
    choice_12->SetMinSize(wxSize(100, 22));
    choice_13->SetMinSize(wxSize(100, 22));
    choice_14->SetMinSize(wxSize(100, 22));
    text_ctrl_33->SetMinSize(wxSize(30, 20));
    text_ctrl_35->SetMinSize(wxSize(30, 20));
    text_ctrl_34->SetMinSize(wxSize(30, 20));
    text_ctrl_36->SetMinSize(wxSize(30, 20));
    choice_19->SetMinSize(wxSize(100, 22));
    choice_15->SetMinSize(wxSize(100, 22));
    choice_16->SetMinSize(wxSize(100, 22));
    choice_20->SetMinSize(wxSize(100, 22));
    choice_17->SetMinSize(wxSize(100, 22));
    choice_18->SetMinSize(wxSize(100, 22));
    // end wxGlade
}


void PolygonPropDialog::do_layout()
{
    // begin wxGlade: PolygonPropDialog::do_layout
    wxFlexGridSizer* grid_sizer_13 = new wxFlexGridSizer(12, 4, 0, 0);
    wxGridSizer* grid_sizer_9 = new wxGridSizer(1, 3, 0, 0);
    wxGridSizer* grid_sizer_8 = new wxGridSizer(1, 3, 0, 0);
    grid_sizer_13->Add(label_34, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_20, 0, 0, 0);
    grid_sizer_13->Add(label_46, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_21, 0, 0, 0);
    grid_sizer_13->Add(label_35, 0, 0, 0);
    grid_sizer_13->Add(choice_12, 0, 0, 0);
    grid_sizer_13->Add(label_47, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_22, 0, 0, 0);
    grid_sizer_13->Add(label_36, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_25, 0, 0, 0);
    grid_sizer_13->Add(label_48, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_23, 0, 0, 0);
    grid_sizer_13->Add(label_37, 0, 0, 0);
    grid_sizer_13->Add(choice_13, 0, 0, 0);
    grid_sizer_13->Add(label_49, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_24, 0, 0, 0);
    grid_sizer_13->Add(label_38, 0, 0, 0);
    grid_sizer_13->Add(choice_14, 0, 0, 0);
    grid_sizer_13->Add(label_26, 0, 0, 0);
    grid_sizer_8->Add(text_ctrl_33, 0, 0, 0);
    grid_sizer_8->Add(label_27, 0, 0, 0);
    grid_sizer_8->Add(text_ctrl_35, 0, 0, 0);
    grid_sizer_13->Add(grid_sizer_8, 1, wxEXPAND, 0);
    grid_sizer_13->Add(label_39, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_26, 0, 0, 0);
    grid_sizer_13->Add(label_55, 0, 0, 0);
    grid_sizer_9->Add(text_ctrl_34, 0, 0, 0);
    grid_sizer_9->Add(label_28, 0, 0, 0);
    grid_sizer_9->Add(text_ctrl_36, 0, 0, 0);
    grid_sizer_13->Add(grid_sizer_9, 1, wxEXPAND, 0);
    grid_sizer_13->Add(label_40, 0, 0, 0);
    grid_sizer_13->Add(choice_19, 0, 0, 0);
    grid_sizer_13->Add(label_54, 0, 0, 0);
    grid_sizer_13->Add(choice_15, 0, 0, 0);
    grid_sizer_13->Add(label_41, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_28, 0, 0, 0);
    grid_sizer_13->Add(label_53, 0, 0, 0);
    grid_sizer_13->Add(choice_16, 0, 0, 0);
    grid_sizer_13->Add(label_42, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_29, 0, 0, 0);
    grid_sizer_13->Add(label_52, 0, 0, 0);
    grid_sizer_13->Add(choice_20, 0, 0, 0);
    grid_sizer_13->Add(label_43, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_30, 0, 0, 0);
    grid_sizer_13->Add(label_51, 0, 0, 0);
    grid_sizer_13->Add(choice_17, 0, 0, 0);
    grid_sizer_13->Add(label_44, 0, 0, 0);
    grid_sizer_13->Add(text_ctrl_31, 0, 0, 0);
    grid_sizer_13->Add(label_50, 0, 0, 0);
    grid_sizer_13->Add(choice_18, 0, 0, 0);
    grid_sizer_13->Add(button_21, 0, 0, 0);
    grid_sizer_13->Add(panel_10, 1, wxEXPAND, 0);
    grid_sizer_13->Add(panel_11, 1, wxEXPAND, 0);
    grid_sizer_13->Add(panel_12, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_13);
    grid_sizer_13->Fit(this);
    Layout();
    // end wxGlade
}


PolygonNum::PolygonNum(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: PolygonNum::PolygonNum
    bitmap_button_1 = new wxBitmapButton(this, wxID_ANY, wxNullBitmap);
    bitmap_button_2 = new wxBitmapButton(this, wxID_ANY, wxNullBitmap);
    bitmap_button_3 = new wxBitmapButton(this, wxID_ANY, wxNullBitmap);
    bitmap_button_4 = new wxBitmapButton(this, wxID_ANY, wxNullBitmap);
    bitmap_button_5 = new wxBitmapButton(this, wxID_ANY, wxNullBitmap);
    bitmap_button_6 = new wxBitmapButton(this, wxID_ANY, wxNullBitmap);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(PolygonNum, wxDialog)
    // begin wxGlade: PolygonNum::event_table
    EVT_BUTTON(wxID_ANY, PolygonNum::OnPoly3)
    EVT_BUTTON(wxID_ANY, PolygonNum::OnPoly4)
    EVT_BUTTON(wxID_ANY, PolygonNum::OnPoly5)
    EVT_BUTTON(wxID_ANY, PolygonNum::OnPoly6)
    EVT_BUTTON(wxID_ANY, PolygonNum::OnPoly7)
    EVT_BUTTON(wxID_ANY, PolygonNum::OnPoly8)
    // end wxGlade
END_EVENT_TABLE();


void PolygonNum::OnPoly3(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonNum::OnPoly3) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonNum::OnPoly4(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonNum::OnPoly4) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonNum::OnPoly5(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonNum::OnPoly5) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonNum::OnPoly6(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonNum::OnPoly6) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonNum::OnPoly7(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonNum::OnPoly7) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void PolygonNum::OnPoly8(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonNum::OnPoly8) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add PolygonNum event handlers


void PolygonNum::set_properties()
{
    // begin wxGlade: PolygonNum::set_properties
    SetTitle(wxT("dialog_10"));
    bitmap_button_1->SetSize(bitmap_button_1->GetBestSize());
    bitmap_button_2->SetSize(bitmap_button_2->GetBestSize());
    bitmap_button_3->SetSize(bitmap_button_3->GetBestSize());
    bitmap_button_4->SetSize(bitmap_button_4->GetBestSize());
    bitmap_button_5->SetSize(bitmap_button_5->GetBestSize());
    bitmap_button_6->SetSize(bitmap_button_6->GetBestSize());
    // end wxGlade
}


void PolygonNum::do_layout()
{
    // begin wxGlade: PolygonNum::do_layout
    wxFlexGridSizer* grid_sizer_14 = new wxFlexGridSizer(1, 6, 0, 0);
    grid_sizer_14->Add(bitmap_button_1, 0, 0, 0);
    grid_sizer_14->Add(bitmap_button_2, 0, 0, 0);
    grid_sizer_14->Add(bitmap_button_3, 0, 0, 0);
    grid_sizer_14->Add(bitmap_button_4, 0, 0, 0);
    grid_sizer_14->Add(bitmap_button_5, 0, 0, 0);
    grid_sizer_14->Add(bitmap_button_6, 0, 0, 0);
    SetSizer(grid_sizer_14);
    grid_sizer_14->Fit(this);
    Layout();
    // end wxGlade
}


ObjectPropDialog::ObjectPropDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: ObjectPropDialog::ObjectPropDialog
    label_45 = new wxStaticText(this, wxID_ANY, wxT("Object type"));
    text_ctrl_27 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    const wxString choice_21_choices[] = {
        
    };
    choice_21 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_21_choices, 0);
    label_56 = new wxStaticText(this, wxID_ANY, wxT("Object index"));
    text_ctrl_32 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    const wxString choice_22_choices[] = {
        
    };
    choice_22 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_22_choices, 0);
    checkbox_46 = new wxCheckBox(this, wxID_ANY, wxT("Hidden"));
    checkbox_47 = new wxCheckBox(this, wxID_ANY, wxT("Hung on ceiling"));
    checkbox_48 = new wxCheckBox(this, wxID_ANY, wxT("Can't seeing"));
    checkbox_49 = new wxCheckBox(this, wxID_ANY, wxT("Can't hearing"));
    checkbox_50 = new wxCheckBox(this, wxID_ANY, wxT("From aerial"));
    checkbox_51 = new wxCheckBox(this, wxID_ANY, wxT("Only network game"));
    label_59 = new wxStaticText(this, wxID_ANY, wxT("Polygon ID"));
    text_ctrl_37 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    label_58 = new wxStaticText(this, wxID_ANY, wxT("Facing/Direction"));
    text_ctrl_38 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    panel_16 = new wxPanel(this, wxID_ANY);
    label_60 = new wxStaticText(this, wxID_ANY, wxT("Launch by"));
    const wxString choice_23_choices[] = {
        
    };
    choice_23 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_23_choices, 0);
    panel_17 = new wxPanel(this, wxID_ANY);
    label_61 = new wxStaticText(this, wxID_ANY, wxT("Location x"));
    text_ctrl_39 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_63 = new wxStaticText(this, wxID_ANY, wxT("y"));
    text_ctrl_41 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_62 = new wxStaticText(this, wxID_ANY, wxT("            z"));
    text_ctrl_40 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    panel_18 = new wxPanel(this, wxID_ANY);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(ObjectPropDialog, wxDialog)
    // begin wxGlade: ObjectPropDialog::event_table
    EVT_CHOICE(wxID_ANY, ObjectPropDialog::OnTypeChoice)
    EVT_CHOICE(wxID_ANY, ObjectPropDialog::OnIndexChoice)
    EVT_CHECKBOX(wxID_ANY, ObjectPropDialog::OnHiddenCheck)
    EVT_CHECKBOX(wxID_ANY, ObjectPropDialog::OnCeilingCheck)
    EVT_CHECKBOX(wxID_ANY, ObjectPropDialog::OnSeeCheck)
    EVT_CHECKBOX(wxID_ANY, ObjectPropDialog::OnHearCheck)
    EVT_CHECKBOX(wxID_ANY, ObjectPropDialog::OnAerialCheck)
    EVT_CHECKBOX(wxID_ANY, ObjectPropDialog::OnNetCheck)
    EVT_CHOICE(wxID_ANY, ObjectPropDialog::OnLaunchChoice)
    EVT_TEXT(wxID_ANY, ObjectPropDialog::OnXEdit)
    EVT_TEXT(wxID_ANY, ObjectPropDialog::OnYEdit)
    EVT_TEXT(wxID_ANY, ObjectPropDialog::OnZEdit)
    // end wxGlade
END_EVENT_TABLE();


void ObjectPropDialog::OnTypeChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnTypeChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnIndexChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnIndexChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnHiddenCheck(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnHiddenCheck) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnCeilingCheck(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnCeilingCheck) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnSeeCheck(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnSeeCheck) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnHearCheck(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnHearCheck) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnAerialCheck(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnAerialCheck) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnNetCheck(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnNetCheck) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnLaunchChoice(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnLaunchChoice) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnXEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnXEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnYEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnYEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void ObjectPropDialog::OnZEdit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (ObjectPropDialog::OnZEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add ObjectPropDialog event handlers


void ObjectPropDialog::set_properties()
{
    // begin wxGlade: ObjectPropDialog::set_properties
    SetTitle(wxT("dialog_11"));
    text_ctrl_27->SetMinSize(wxSize(20, -1));
    text_ctrl_32->SetMinSize(wxSize(20, -1));
    panel_16->SetMinSize(wxSize(120, 120));
    choice_23->SetMinSize(wxSize(90, 22));
    text_ctrl_39->SetMinSize(wxSize(50, -1));
    text_ctrl_41->SetMinSize(wxSize(50, -1));
    text_ctrl_40->SetMinSize(wxSize(50, -1));
    // end wxGlade
}


void ObjectPropDialog::do_layout()
{
    // begin wxGlade: ObjectPropDialog::do_layout
    wxFlexGridSizer* grid_sizer_15 = new wxFlexGridSizer(4, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_20 = new wxFlexGridSizer(3, 3, 0, 0);
    wxFlexGridSizer* grid_sizer_24 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_18 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_19 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_21 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_23 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_22 = new wxFlexGridSizer(6, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_16 = new wxFlexGridSizer(2, 3, 0, 0);
    grid_sizer_16->Add(label_45, 0, 0, 0);
    grid_sizer_16->Add(text_ctrl_27, 0, 0, 0);
    grid_sizer_16->Add(choice_21, 0, 0, 0);
    grid_sizer_16->Add(label_56, 0, 0, 0);
    grid_sizer_16->Add(text_ctrl_32, 0, 0, 0);
    grid_sizer_16->Add(choice_22, 0, 0, 0);
    grid_sizer_15->Add(grid_sizer_16, 1, wxEXPAND, 0);
    grid_sizer_22->Add(checkbox_46, 0, 0, 0);
    grid_sizer_22->Add(checkbox_47, 0, 0, 0);
    grid_sizer_22->Add(checkbox_48, 0, 0, 0);
    grid_sizer_22->Add(checkbox_49, 0, 0, 0);
    grid_sizer_22->Add(checkbox_50, 0, 0, 0);
    grid_sizer_22->Add(checkbox_51, 0, 0, 0);
    grid_sizer_21->Add(grid_sizer_22, 1, wxEXPAND, 0);
    grid_sizer_23->Add(label_59, 0, 0, 0);
    grid_sizer_23->Add(text_ctrl_37, 0, 0, 0);
    grid_sizer_21->Add(grid_sizer_23, 1, wxEXPAND, 0);
    grid_sizer_15->Add(grid_sizer_21, 1, wxEXPAND, 0);
    grid_sizer_19->Add(label_58, 0, 0, 0);
    grid_sizer_19->Add(text_ctrl_38, 0, 0, 0);
    grid_sizer_18->Add(grid_sizer_19, 1, wxEXPAND, 0);
    grid_sizer_18->Add(panel_16, 1, 0, 0);
    grid_sizer_15->Add(grid_sizer_18, 1, wxEXPAND, 0);
    grid_sizer_20->Add(label_60, 0, 0, 0);
    grid_sizer_20->Add(choice_23, 0, 0, 0);
    grid_sizer_20->Add(panel_17, 1, wxEXPAND, 0);
    grid_sizer_20->Add(label_61, 0, 0, 0);
    grid_sizer_20->Add(text_ctrl_39, 0, 0, 0);
    grid_sizer_24->Add(label_63, 0, 0, 0);
    grid_sizer_24->Add(text_ctrl_41, 0, 0, 0);
    grid_sizer_20->Add(grid_sizer_24, 1, wxEXPAND, 0);
    grid_sizer_20->Add(label_62, 0, 0, 0);
    grid_sizer_20->Add(text_ctrl_40, 0, 0, 0);
    grid_sizer_20->Add(panel_18, 1, wxEXPAND, 0);
    grid_sizer_15->Add(grid_sizer_20, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_15);
    grid_sizer_15->Fit(this);
    Layout();
    // end wxGlade
}


SelectLevelDialog::SelectLevelDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: SelectLevelDialog::SelectLevelDialog
    label_57 = new wxStaticText(this, wxID_ANY, wxT("Select level"));
    const wxString list_box_4_choices[] = {
        
    };
    list_box_4 = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, list_box_4_choices, 0);
    button_22 = new wxButton(this, wxID_OK, wxEmptyString);
    button_23 = new wxButton(this, wxID_CANCEL, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(SelectLevelDialog, wxDialog)
    // begin wxGlade: SelectLevelDialog::event_table
    EVT_LISTBOX(wxID_ANY, SelectLevelDialog::OnList)
    EVT_BUTTON(wxID_OK, SelectLevelDialog::OnOk)
    EVT_BUTTON(wxID_CANCEL, SelectLevelDialog::OnCancel)
    // end wxGlade
END_EVENT_TABLE();


void SelectLevelDialog::OnList(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (SelectLevelDialog::OnList) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void SelectLevelDialog::OnOk(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (SelectLevelDialog::OnOk) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void SelectLevelDialog::OnCancel(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (SelectLevelDialog::OnCancel) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add SelectLevelDialog event handlers


void SelectLevelDialog::set_properties()
{
    // begin wxGlade: SelectLevelDialog::set_properties
    SetTitle(wxT("dialog_12"));
    list_box_4->SetMinSize(wxSize(320, 320));
    // end wxGlade
}


void SelectLevelDialog::do_layout()
{
    // begin wxGlade: SelectLevelDialog::do_layout
    wxFlexGridSizer* grid_sizer_17 = new wxFlexGridSizer(3, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_25 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_17->Add(label_57, 0, 0, 0);
    grid_sizer_17->Add(list_box_4, 0, wxEXPAND, 0);
    grid_sizer_25->Add(button_22, 0, wxRIGHT|wxALIGN_RIGHT, 0);
    grid_sizer_25->Add(button_23, 0, wxRIGHT|wxALIGN_RIGHT, 0);
    grid_sizer_17->Add(grid_sizer_25, 1, wxALIGN_RIGHT, 0);
    SetSizer(grid_sizer_17);
    grid_sizer_17->Fit(this);
    Layout();
    // end wxGlade
}


LinePropDialog::LinePropDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: LinePropDialog::LinePropDialog
    sizer_54_staticbox = new wxStaticBox(this, -1, wxT("flags"));
    label_64 = new wxStaticText(this, wxID_ANY, wxT("endpoint indexes"));
    text_ctrl_42 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    text_ctrl_43 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    checkbox_45 = new wxCheckBox(this, wxID_ANY, wxT("Landscape"));
    checkbox_52 = new wxCheckBox(this, wxID_ANY, wxT("Elevation"));
    checkbox_53 = new wxCheckBox(this, wxID_ANY, wxT("Variable elev"));
    checkbox_54 = new wxCheckBox(this, wxID_ANY, wxT("Has trans side"));
    const wxString radio_box_1_choices[] = {
        wxT("Solid"),
        wxT("Transparent")
    };
    radio_box_1 = new wxRadioBox(this, wxID_ANY, wxT("solidity"), wxDefaultPosition, wxDefaultSize, 2, radio_box_1_choices, 2, wxRA_SPECIFY_ROWS);
    label_66 = new wxStaticText(this, wxID_ANY, wxT("length"));
    text_ctrl_45 = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    label_67 = new wxStaticText(this, wxID_ANY, wxT("highest floor"));
    text_ctrl_46 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_70 = new wxStaticText(this, wxID_ANY, wxT("lowest ceiling"));
    text_ctrl_47 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_71 = new wxStaticText(this, wxID_ANY, wxT("clockwise side"));
    const wxString choice_24_choices[] = {
        
    };
    choice_24 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_24_choices, 0);
    label_69 = new wxStaticText(this, wxID_ANY, wxT("c-clockwise side"));
    const wxString choice_25_choices[] = {
        
    };
    choice_25 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_25_choices, 0);
    label_72 = new wxStaticText(this, wxID_ANY, wxT("clockwise poly"));
    const wxString choice_26_choices[] = {
        
    };
    choice_26 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_26_choices, 0);
    label_68 = new wxStaticText(this, wxID_ANY, wxT("c-clockwise poly"));
    const wxString choice_27_choices[] = {
        
    };
    choice_27 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_27_choices, 0);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(LinePropDialog, wxDialog)
    // begin wxGlade: LinePropDialog::event_table
    EVT_TEXT(wxID_ANY, LinePropDialog::OnEndpoint1Edit)
    EVT_TEXT(wxID_ANY, LinePropDialog::OnEndpoint2Edit)
    EVT_CHECKBOX(wxID_ANY, LinePropDialog::OnLandscape)
    EVT_CHECKBOX(wxID_ANY, LinePropDialog::OnElevation)
    EVT_CHECKBOX(wxID_ANY, LinePropDialog::OnVariableElev)
    EVT_CHECKBOX(wxID_ANY, LinePropDialog::OnHasTransSide)
    EVT_RADIOBOX(wxID_ANY, LinePropDialog::OnRadioSel)
    EVT_TEXT(wxID_ANY, LinePropDialog::OnFloor)
    EVT_TEXT(wxID_ANY, LinePropDialog::OnCeiling)
    EVT_CHOICE(wxID_ANY, LinePropDialog::OnClockwiseSide)
    EVT_CHOICE(wxID_ANY, LinePropDialog::OnCClockwiseSide)
    EVT_CHOICE(wxID_ANY, LinePropDialog::OnClockwisePoly)
    EVT_CHOICE(wxID_ANY, LinePropDialog::OnCClockwisePoly)
    // end wxGlade
END_EVENT_TABLE();


void LinePropDialog::OnEndpoint1Edit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnEndpoint1Edit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnEndpoint2Edit(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnEndpoint2Edit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnLandscape(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnLandscape) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnElevation(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnElevation) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnVariableElev(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnVariableElev) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnHasTransSide(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnHasTransSide) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnRadioSel(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnRadioSel) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnFloor(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnFloor) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnCeiling(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnCeiling) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnClockwiseSide(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnClockwiseSide) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnCClockwiseSide(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnCClockwiseSide) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnClockwisePoly(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnClockwisePoly) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void LinePropDialog::OnCClockwisePoly(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (LinePropDialog::OnCClockwisePoly) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add LinePropDialog event handlers


void LinePropDialog::set_properties()
{
    // begin wxGlade: LinePropDialog::set_properties
    SetTitle(wxT("dialog_13"));
    text_ctrl_42->SetMinSize(wxSize(50, -1));
    text_ctrl_43->SetMinSize(wxSize(50, -1));
    radio_box_1->SetSelection(0);
    // end wxGlade
}


void LinePropDialog::do_layout()
{
    // begin wxGlade: LinePropDialog::do_layout
    wxFlexGridSizer* grid_sizer_26 = new wxFlexGridSizer(9, 2, 0, 0);
    wxStaticBoxSizer* sizer_54 = new wxStaticBoxSizer(sizer_54_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_27 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_26->Add(label_64, 0, 0, 0);
    grid_sizer_27->Add(text_ctrl_42, 0, 0, 0);
    grid_sizer_27->Add(text_ctrl_43, 0, 0, 0);
    grid_sizer_26->Add(grid_sizer_27, 1, wxEXPAND, 0);
    sizer_54->Add(checkbox_45, 0, 0, 0);
    sizer_54->Add(checkbox_52, 0, 0, 0);
    sizer_54->Add(checkbox_53, 0, 0, 0);
    sizer_54->Add(checkbox_54, 0, 0, 0);
    grid_sizer_26->Add(sizer_54, 1, wxEXPAND, 0);
    grid_sizer_26->Add(radio_box_1, 0, 0, 0);
    grid_sizer_26->Add(label_66, 0, 0, 0);
    grid_sizer_26->Add(text_ctrl_45, 0, 0, 0);
    grid_sizer_26->Add(label_67, 0, 0, 0);
    grid_sizer_26->Add(text_ctrl_46, 0, 0, 0);
    grid_sizer_26->Add(label_70, 0, 0, 0);
    grid_sizer_26->Add(text_ctrl_47, 0, 0, 0);
    grid_sizer_26->Add(label_71, 0, 0, 0);
    grid_sizer_26->Add(choice_24, 0, 0, 0);
    grid_sizer_26->Add(label_69, 0, 0, 0);
    grid_sizer_26->Add(choice_25, 0, 0, 0);
    grid_sizer_26->Add(label_72, 0, 0, 0);
    grid_sizer_26->Add(choice_26, 0, 0, 0);
    grid_sizer_26->Add(label_68, 0, 0, 0);
    grid_sizer_26->Add(choice_27, 0, 0, 0);
    SetSizer(grid_sizer_26);
    grid_sizer_26->Fit(this);
    Layout();
    // end wxGlade
}


PolygonTypeDialog::PolygonTypeDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: PolygonTypeDialog::PolygonTypeDialog
    list_ctrl_2 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(PolygonTypeDialog, wxDialog)
    // begin wxGlade: PolygonTypeDialog::event_table
    EVT_LIST_ITEM_SELECTED(wxID_ANY, PolygonTypeDialog::OnSel)
    // end wxGlade
END_EVENT_TABLE();


void PolygonTypeDialog::OnSel(wxListEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (PolygonTypeDialog::OnSel) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add PolygonTypeDialog event handlers


void PolygonTypeDialog::set_properties()
{
    // begin wxGlade: PolygonTypeDialog::set_properties
    SetTitle(wxT("dialog_14"));
    list_ctrl_2->SetMinSize(wxSize(120,120));
    // end wxGlade
}


void PolygonTypeDialog::do_layout()
{
    // begin wxGlade: PolygonTypeDialog::do_layout
    wxBoxSizer* sizer_53 = new wxBoxSizer(wxHORIZONTAL);
    sizer_53->Add(list_ctrl_2, 1, wxEXPAND, 0);
    SetSizer(sizer_53);
    sizer_53->Fit(this);
    Layout();
    // end wxGlade
}


LevelInfoDialog::LevelInfoDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: LevelInfoDialog::LevelInfoDialog
    sizer_58_staticbox = new wxStaticBox(this, -1, wxT("Env Type"));
    sizer_59_staticbox = new wxStaticBox(this, -1, wxT("Mission Type"));
    sizer_60_staticbox = new wxStaticBox(this, -1, wxT("Game Type"));
    label_65 = new wxStaticText(this, wxID_ANY, wxT("Level lavel"));
    text_ctrl_44 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_73 = new wxStaticText(this, wxID_ANY, wxT("Environment"));
    const wxString choice_28_choices[] = {
        
    };
    choice_28 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_28_choices, 0);
    label_74 = new wxStaticText(this, wxID_ANY, wxT("Landscape"));
    const wxString choice_29_choices[] = {
        
    };
    choice_29 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_29_choices, 0);
    checkbox_60 = new wxCheckBox(this, wxID_ANY, wxT("Single Player"));
    checkbox_62 = new wxCheckBox(this, wxID_ANY, wxT("Cooperation (COOP)"));
    checkbox_66 = new wxCheckBox(this, wxID_ANY, wxT("Capture The Flags (CTF)"));
    checkbox_63 = new wxCheckBox(this, wxID_ANY, wxT("King Of The Hill (KOTH)"));
    checkbox_64 = new wxCheckBox(this, wxID_ANY, wxT("Kill Man With Ball (BALL)"));
    checkbox_65 = new wxCheckBox(this, wxID_ANY, wxT("Defense"));
    checkbox_67 = new wxCheckBox(this, wxID_ANY, wxT("Rugby"));
    checkbox_61 = new wxCheckBox(this, ID_TAG, wxT("Tag"));
    checkbox_41 = new wxCheckBox(this, wxID_ANY, wxT("Vacuum"));
    checkbox_42 = new wxCheckBox(this, wxID_ANY, wxT("Rebellion"));
    checkbox_43 = new wxCheckBox(this, wxID_ANY, wxT("LowGravity"));
    checkbox_44 = new wxCheckBox(this, wxID_ANY, wxT("Magnetic"));
    checkbox_55 = new wxCheckBox(this, wxID_ANY, wxT("Extermination"));
    checkbox_56 = new wxCheckBox(this, wxID_ANY, wxT("Exploration"));
    checkbox_57 = new wxCheckBox(this, wxID_ANY, wxT("Retrieval"));
    checkbox_58 = new wxCheckBox(this, wxID_ANY, wxT("Repair"));
    checkbox_59 = new wxCheckBox(this, wxID_ANY, wxT("Rescue"));
    button_28 = new wxButton(this, wxID_OK, wxEmptyString);
    button_29 = new wxButton(this, wxID_CANCEL, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


void LevelInfoDialog::set_properties()
{
    // begin wxGlade: LevelInfoDialog::set_properties
    SetTitle(wxT("dialog_15"));
    text_ctrl_44->SetMinSize(wxSize(250, -1));
    // end wxGlade
}


void LevelInfoDialog::do_layout()
{
    // begin wxGlade: LevelInfoDialog::do_layout
    wxFlexGridSizer* grid_sizer_32 = new wxFlexGridSizer(3, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_35 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_34 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_36 = new wxFlexGridSizer(2, 1, 0, 0);
    wxStaticBoxSizer* sizer_59 = new wxStaticBoxSizer(sizer_59_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_58 = new wxStaticBoxSizer(sizer_58_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_37 = new wxFlexGridSizer(3, 1, 0, 0);
    wxStaticBoxSizer* sizer_60 = new wxStaticBoxSizer(sizer_60_staticbox, wxVERTICAL);
    wxFlexGridSizer* grid_sizer_39 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_38 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_33 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_33->Add(label_65, 0, 0, 0);
    grid_sizer_33->Add(text_ctrl_44, 0, wxEXPAND, 0);
    grid_sizer_32->Add(grid_sizer_33, 1, wxEXPAND, 0);
    grid_sizer_38->Add(label_73, 0, 0, 0);
    grid_sizer_38->Add(choice_28, 0, 0, 0);
    grid_sizer_37->Add(grid_sizer_38, 1, wxEXPAND, 0);
    grid_sizer_39->Add(label_74, 0, 0, 0);
    grid_sizer_39->Add(choice_29, 0, 0, 0);
    grid_sizer_37->Add(grid_sizer_39, 1, wxEXPAND, 0);
    sizer_60->Add(checkbox_60, 0, 0, 0);
    sizer_60->Add(checkbox_62, 0, 0, 0);
    sizer_60->Add(checkbox_66, 0, 0, 0);
    sizer_60->Add(checkbox_63, 0, 0, 0);
    sizer_60->Add(checkbox_64, 0, 0, 0);
    sizer_60->Add(checkbox_65, 0, 0, 0);
    sizer_60->Add(checkbox_67, 0, 0, 0);
    sizer_60->Add(checkbox_61, 0, 0, 0);
    grid_sizer_37->Add(sizer_60, 1, wxEXPAND, 0);
    grid_sizer_34->Add(grid_sizer_37, 1, wxEXPAND, 0);
    sizer_58->Add(checkbox_41, 0, 0, 0);
    sizer_58->Add(checkbox_42, 0, 0, 0);
    sizer_58->Add(checkbox_43, 0, 0, 0);
    sizer_58->Add(checkbox_44, 0, 0, 0);
    grid_sizer_36->Add(sizer_58, 1, wxEXPAND, 0);
    sizer_59->Add(checkbox_55, 0, 0, 0);
    sizer_59->Add(checkbox_56, 0, 0, 0);
    sizer_59->Add(checkbox_57, 0, 0, 0);
    sizer_59->Add(checkbox_58, 0, 0, 0);
    sizer_59->Add(checkbox_59, 0, 0, 0);
    grid_sizer_36->Add(sizer_59, 1, wxEXPAND, 0);
    grid_sizer_34->Add(grid_sizer_36, 1, wxEXPAND, 0);
    grid_sizer_32->Add(grid_sizer_34, 1, wxEXPAND, 0);
    grid_sizer_35->Add(button_28, 0, 0, 0);
    grid_sizer_35->Add(button_29, 0, 0, 0);
    grid_sizer_32->Add(grid_sizer_35, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_32);
    grid_sizer_32->Fit(this);
    Layout();
    // end wxGlade
}


HeightPaletteDialog::HeightPaletteDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: HeightPaletteDialog::HeightPaletteDialog
    button_24 = new wxButton(this, wxID_ADD, wxEmptyString);
    button_25 = new wxButton(this, wxID_DELETE, wxEmptyString);
    list_ctrl_3 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_EDIT_LABELS|wxSUNKEN_BORDER);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(HeightPaletteDialog, wxDialog)
    // begin wxGlade: HeightPaletteDialog::event_table
    EVT_BUTTON(wxID_ANY, HeightPaletteDialog::OnAdd)
    EVT_BUTTON(wxID_ANY, HeightPaletteDialog::OnDelete)
    EVT_LIST_END_LABEL_EDIT(wxID_ANY, HeightPaletteDialog::OnEdit)
    // end wxGlade
END_EVENT_TABLE();


void HeightPaletteDialog::OnAdd(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (HeightPaletteDialog::OnAdd) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void HeightPaletteDialog::OnDelete(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (HeightPaletteDialog::OnDelete) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void HeightPaletteDialog::OnEdit(wxListEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (HeightPaletteDialog::OnEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add HeightPaletteDialog event handlers


void HeightPaletteDialog::set_properties()
{
    // begin wxGlade: HeightPaletteDialog::set_properties
    SetTitle(wxT("dialog_16"));
    list_ctrl_3->SetMinSize(wxSize(154, 200));
    // end wxGlade
}


void HeightPaletteDialog::do_layout()
{
    // begin wxGlade: HeightPaletteDialog::do_layout
    wxFlexGridSizer* grid_sizer_28 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_29 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_29->Add(button_24, 0, 0, 0);
    grid_sizer_29->Add(button_25, 0, 0, 0);
    grid_sizer_28->Add(grid_sizer_29, 1, wxEXPAND, 0);
    grid_sizer_28->Add(list_ctrl_3, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_28);
    grid_sizer_28->Fit(this);
    Layout();
    // end wxGlade
}


MediaPaletteDialog::MediaPaletteDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: MediaPaletteDialog::MediaPaletteDialog
    button_27 = new wxButton(this, wxID_ADD, wxEmptyString);
    button_26 = new wxButton(this, wxID_DELETE, wxEmptyString);
    list_ctrl_4 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(MediaPaletteDialog, wxDialog)
    // begin wxGlade: MediaPaletteDialog::event_table
    EVT_BUTTON(wxID_ANY, MediaPaletteDialog::OnAdd)
    EVT_BUTTON(wxID_ANY, MediaPaletteDialog::OnDelete)
    EVT_LIST_END_LABEL_EDIT(wxID_ANY, MediaPaletteDialog::OnEdit)
    // end wxGlade
END_EVENT_TABLE();


void MediaPaletteDialog::OnAdd(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (MediaPaletteDialog::OnAdd) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void MediaPaletteDialog::OnDelete(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (MediaPaletteDialog::OnDelete) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void MediaPaletteDialog::OnEdit(wxListEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (MediaPaletteDialog::OnEdit) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add MediaPaletteDialog event handlers


void MediaPaletteDialog::set_properties()
{
    // begin wxGlade: MediaPaletteDialog::set_properties
    SetTitle(wxT("dialog_17"));
    list_ctrl_4->SetMinSize(wxSize(154, 200));
    // end wxGlade
}


void MediaPaletteDialog::do_layout()
{
    // begin wxGlade: MediaPaletteDialog::do_layout
    wxFlexGridSizer* grid_sizer_30 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_31 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_31->Add(button_27, 0, 0, 0);
    grid_sizer_31->Add(button_26, 0, 0, 0);
    grid_sizer_30->Add(grid_sizer_31, 1, wxEXPAND, 0);
    grid_sizer_30->Add(list_ctrl_4, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_30);
    grid_sizer_30->Fit(this);
    Layout();
    // end wxGlade
}


SidePropDialog::SidePropDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: SidePropDialog::SidePropDialog

    set_properties();
    do_layout();
    // end wxGlade
}


void SidePropDialog::set_properties()
{
    // begin wxGlade: SidePropDialog::set_properties
    SetTitle(wxT("dialog_18"));
    // end wxGlade
}


void SidePropDialog::do_layout()
{
    // begin wxGlade: SidePropDialog::do_layout
    Layout();
    // end wxGlade
}


VisualDialog::VisualDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: VisualDialog::VisualDialog

    set_properties();
    do_layout();
    // end wxGlade
}


void VisualDialog::set_properties()
{
    // begin wxGlade: VisualDialog::set_properties
    SetTitle(wxT("dialog_19"));
    // end wxGlade
}


void VisualDialog::do_layout()
{
    // begin wxGlade: VisualDialog::do_layout
    Layout();
    // end wxGlade
}


LightPaletteDialog::LightPaletteDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: LightPaletteDialog::LightPaletteDialog
    button_31 = new wxButton(this, wxID_ADD, wxEmptyString);
    button_30 = new wxButton(this, wxID_DELETE, wxEmptyString);
    list_ctrl_5 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);

    set_properties();
    do_layout();
    // end wxGlade
}


void LightPaletteDialog::set_properties()
{
    // begin wxGlade: LightPaletteDialog::set_properties
    SetTitle(wxT("dialog_21"));
    list_ctrl_5->SetMinSize(wxSize(150, 200));
    // end wxGlade
}


void LightPaletteDialog::do_layout()
{
    // begin wxGlade: LightPaletteDialog::do_layout
    wxFlexGridSizer* grid_sizer_40 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_41 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_41->Add(button_31, 0, 0, 0);
    grid_sizer_41->Add(button_30, 0, 0, 0);
    grid_sizer_40->Add(grid_sizer_41, 1, wxEXPAND, 0);
    grid_sizer_40->Add(list_ctrl_5, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_40);
    grid_sizer_40->Fit(this);
    Layout();
    // end wxGlade
}


SoundPaletteDialog::SoundPaletteDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: SoundPaletteDialog::SoundPaletteDialog
    button_32 = new wxButton(this, wxID_ADD, wxEmptyString);
    button_33 = new wxButton(this, wxID_DELETE, wxEmptyString);
    list_ctrl_6 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(SoundPaletteDialog, wxDialog)
    // begin wxGlade: SoundPaletteDialog::event_table
    EVT_BUTTON(wxID_ANY, SoundPaletteDialog::OnAdd)
    EVT_BUTTON(wxID_ANY, SoundPaletteDialog::OnDelete)
    // end wxGlade
END_EVENT_TABLE();


void SoundPaletteDialog::OnAdd(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (SoundPaletteDialog::OnAdd) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


void SoundPaletteDialog::OnDelete(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (SoundPaletteDialog::OnDelete) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add SoundPaletteDialog event handlers


void SoundPaletteDialog::set_properties()
{
    // begin wxGlade: SoundPaletteDialog::set_properties
    SetTitle(wxT("dialog_22"));
    list_ctrl_6->SetMinSize(wxSize(150,200));
    // end wxGlade
}


void SoundPaletteDialog::do_layout()
{
    // begin wxGlade: SoundPaletteDialog::do_layout
    wxFlexGridSizer* grid_sizer_42 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_43 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_43->Add(button_32, 0, 0, 0);
    grid_sizer_43->Add(button_33, 0, 0, 0);
    grid_sizer_42->Add(grid_sizer_43, 1, wxEXPAND, 0);
    grid_sizer_42->Add(list_ctrl_6, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_42);
    grid_sizer_42->Fit(this);
    Layout();
    // end wxGlade
}


TextureDialog::TextureDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: TextureDialog::TextureDialog
    label_75 = new wxStaticText(this, wxID_ANY, wxT("type"));
    const wxString choice_30_choices[] = {
        
    };
    choice_30 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, choice_30_choices, 0);
    panel_13 = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSTATIC_BORDER|wxTAB_TRAVERSAL);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(TextureDialog, wxDialog)
    // begin wxGlade: TextureDialog::event_table
    EVT_CHOICE(wxID_ANY, TextureDialog::OnType)
    // end wxGlade
END_EVENT_TABLE();


void TextureDialog::OnType(wxCommandEvent &event)
{
    event.Skip();
    std::cout<<"Event handler (TextureDialog::OnType) not implemented yet"<<std::endl; //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add TextureDialog event handlers


void TextureDialog::set_properties()
{
    // begin wxGlade: TextureDialog::set_properties
    SetTitle(wxT("dialog_23"));
    panel_13->SetMinSize(wxSize(480, 120));
    panel_13->SetScrollRate(10, 10);
    // end wxGlade
}


void TextureDialog::do_layout()
{
    // begin wxGlade: TextureDialog::do_layout
    wxFlexGridSizer* grid_sizer_44 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_45 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_45->Add(label_75, 0, 0, 0);
    grid_sizer_45->Add(choice_30, 0, 0, 0);
    grid_sizer_44->Add(grid_sizer_45, 1, wxEXPAND, 0);
    grid_sizer_44->Add(panel_13, 1, wxEXPAND, 0);
    SetSizer(grid_sizer_44);
    grid_sizer_44->Fit(this);
    Layout();
    // end wxGlade
}

